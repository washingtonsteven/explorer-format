window.storyFormat({"name":"Explorer","version":"1.0.0","author":"Steve Washington","image":"","url":"","license":"MIT","proofing":false,"source":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t\t<meta charset=\"utf-8\">\n\t\t<link rel=\"shortcut icon\" href=\"#\">\n\t\t<title>{{STORY_NAME}}</title>\n\t</head>\n\t<body>\n\t\t{{STORY_DATA}}\n\t\t<div id=\"tw-story\">\n\t\t\t<div id=\"tw-passage\"></div>\n\t\t</div>\n\t\t<script type=\"text/javascript\">\n\t\t\t(()=>{function e(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}function t(e){return e&&e.__esModule?e.default:e}var n=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:{},r={},i={},s=n.parcelRequire7ce9;null==s&&((s=function(e){if(e in r)return r[e].exports;if(e in i){var t=i[e];delete i[e];var n={id:e,exports:{}};return r[e]=n,t.call(n.exports,n,n.exports),n.exports}var s=new Error(\"Cannot find module '\"+e+\"'\");throw s.code=\"MODULE_NOT_FOUND\",s}).register=function(e,t){i[e]=t},n.parcelRequire7ce9=s),s.register(\"97gFG\",(function(t,n){var r,i,o;e(t.exports,\"SourceMapGenerator\",(()=>r),(e=>r=e)),e(t.exports,\"SourceMapConsumer\",(()=>i),(e=>i=e)),e(t.exports,\"SourceNode\",(()=>o),(e=>o=e)),r=s(\"h712z\").SourceMapGenerator,i=s(\"lLalb\").SourceMapConsumer,o=s(\"jtIqc\").SourceNode})),s.register(\"h712z\",(function(t,n){var r;e(t.exports,\"SourceMapGenerator\",(()=>r),(e=>r=e));var i=s(\"f30X9\"),o=s(\"6I6y5\"),a=s(\"kKGit\").ArraySet,u=s(\"1DOoG\").MappingList;function l(e){e||(e={}),this._file=o.getArg(e,\"file\",null),this._sourceRoot=o.getArg(e,\"sourceRoot\",null),this._skipValidation=o.getArg(e,\"skipValidation\",!1),this._sources=new a,this._names=new a,this._mappings=new u,this._sourcesContents=null}l.prototype._version=3,l.fromSourceMap=function(e){var t=e.sourceRoot,n=new l({file:e.file,sourceRoot:t});return e.eachMapping((function(e){var r={generated:{line:e.generatedLine,column:e.generatedColumn}};null!=e.source&&(r.source=e.source,null!=t&&(r.source=o.relative(t,r.source)),r.original={line:e.originalLine,column:e.originalColumn},null!=e.name&&(r.name=e.name)),n.addMapping(r)})),e.sources.forEach((function(r){var i=r;null!==t&&(i=o.relative(t,r)),n._sources.has(i)||n._sources.add(i);var s=e.sourceContentFor(r);null!=s&&n.setSourceContent(r,s)})),n},l.prototype.addMapping=function(e){var t=o.getArg(e,\"generated\"),n=o.getArg(e,\"original\",null),r=o.getArg(e,\"source\",null),i=o.getArg(e,\"name\",null);this._skipValidation||this._validateMapping(t,n,r,i),null!=r&&(r=String(r),this._sources.has(r)||this._sources.add(r)),null!=i&&(i=String(i),this._names.has(i)||this._names.add(i)),this._mappings.add({generatedLine:t.line,generatedColumn:t.column,originalLine:null!=n&&n.line,originalColumn:null!=n&&n.column,source:r,name:i})},l.prototype.setSourceContent=function(e,t){var n=e;null!=this._sourceRoot&&(n=o.relative(this._sourceRoot,n)),null!=t?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[o.toSetString(n)]=t):this._sourcesContents&&(delete this._sourcesContents[o.toSetString(n)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},l.prototype.applySourceMap=function(e,t,n){var r=t;if(null==t){if(null==e.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\\'s \"file\" property. Both were omitted.');r=e.file}var i=this._sourceRoot;null!=i&&(r=o.relative(i,r));var s=new a,u=new a;this._mappings.unsortedForEach((function(t){if(t.source===r&&null!=t.originalLine){var a=e.originalPositionFor({line:t.originalLine,column:t.originalColumn});null!=a.source&&(t.source=a.source,null!=n&&(t.source=o.join(n,t.source)),null!=i&&(t.source=o.relative(i,t.source)),t.originalLine=a.line,t.originalColumn=a.column,null!=a.name&&(t.name=a.name))}var l=t.source;null==l||s.has(l)||s.add(l);var c=t.name;null==c||u.has(c)||u.add(c)}),this),this._sources=s,this._names=u,e.sources.forEach((function(t){var r=e.sourceContentFor(t);null!=r&&(null!=n&&(t=o.join(n,t)),null!=i&&(t=o.relative(i,t)),this.setSourceContent(t,r))}),this)},l.prototype._validateMapping=function(e,t,n,r){if(t&&\"number\"!=typeof t.line&&\"number\"!=typeof t.column)throw new Error(\"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\");if((!(e&&\"line\"in e&&\"column\"in e&&e.line>0&&e.column>=0)||t||n||r)&&!(e&&\"line\"in e&&\"column\"in e&&t&&\"line\"in t&&\"column\"in t&&e.line>0&&e.column>=0&&t.line>0&&t.column>=0&&n))throw new Error(\"Invalid mapping: \"+JSON.stringify({generated:e,source:n,original:t,name:r}))},l.prototype._serializeMappings=function(){for(var e,t,n,r,s=0,a=1,u=0,l=0,c=0,h=0,p=\"\",f=this._mappings.toArray(),d=0,g=f.length;d<g;d++){if(e=\"\",(t=f[d]).generatedLine!==a)for(s=0;t.generatedLine!==a;)e+=\";\",a++;else if(d>0){if(!o.compareByGeneratedPositionsInflated(t,f[d-1]))continue;e+=\",\"}e+=i.encode(t.generatedColumn-s),s=t.generatedColumn,null!=t.source&&(r=this._sources.indexOf(t.source),e+=i.encode(r-h),h=r,e+=i.encode(t.originalLine-1-l),l=t.originalLine-1,e+=i.encode(t.originalColumn-u),u=t.originalColumn,null!=t.name&&(n=this._names.indexOf(t.name),e+=i.encode(n-c),c=n)),p+=e}return p},l.prototype._generateSourcesContent=function(e,t){return e.map((function(e){if(!this._sourcesContents)return null;null!=t&&(e=o.relative(t,e));var n=o.toSetString(e);return Object.prototype.hasOwnProperty.call(this._sourcesContents,n)?this._sourcesContents[n]:null}),this)},l.prototype.toJSON=function(){var e={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(e.file=this._file),null!=this._sourceRoot&&(e.sourceRoot=this._sourceRoot),this._sourcesContents&&(e.sourcesContent=this._generateSourcesContent(e.sources,e.sourceRoot)),e},l.prototype.toString=function(){return JSON.stringify(this.toJSON())},r=l})),s.register(\"f30X9\",(function(t,n){var r,i;e(t.exports,\"encode\",(()=>r),(e=>r=e)),e(t.exports,\"decode\",(()=>i),(e=>i=e));var o=s(\"iiYre\");r=function(e){var t,n=\"\",r=function(e){return e<0?1+(-e<<1):0+(e<<1)}(e);do{t=31&r,(r>>>=5)>0&&(t|=32),n+=o.encode(t)}while(r>0);return n},i=function(e,t,n){var r,i,s,a,u=e.length,l=0,c=0;do{if(t>=u)throw new Error(\"Expected more digits in base 64 VLQ value.\");if(-1===(i=o.decode(e.charCodeAt(t++))))throw new Error(\"Invalid base64 digit: \"+e.charAt(t-1));r=!!(32&i),l+=(i&=31)<<c,c+=5}while(r);n.value=(a=(s=l)>>1,1==(1&s)?-a:a),n.rest=t}})),s.register(\"iiYre\",(function(t,n){var r,i;e(t.exports,\"encode\",(()=>r),(e=>r=e)),e(t.exports,\"decode\",(()=>i),(e=>i=e));var s=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");r=function(e){if(0<=e&&e<s.length)return s[e];throw new TypeError(\"Must be between 0 and 63: \"+e)},i=function(e){return 65<=e&&e<=90?e-65:97<=e&&e<=122?e-97+26:48<=e&&e<=57?e-48+52:43==e?62:47==e?63:-1}})),s.register(\"6I6y5\",(function(t,n){var r,i,s,o,a,u,l,c,h,p,f,d,g;e(t.exports,\"getArg\",(()=>r),(e=>r=e)),e(t.exports,\"urlParse\",(()=>i),(e=>i=e)),e(t.exports,\"isAbsolute\",(()=>a),(e=>a=e)),e(t.exports,\"normalize\",(()=>s),(e=>s=e)),e(t.exports,\"join\",(()=>o),(e=>o=e)),e(t.exports,\"relative\",(()=>u),(e=>u=e)),e(t.exports,\"toSetString\",(()=>l),(e=>l=e)),e(t.exports,\"fromSetString\",(()=>c),(e=>c=e)),e(t.exports,\"compareByOriginalPositions\",(()=>h),(e=>h=e)),e(t.exports,\"compareByGeneratedPositionsDeflated\",(()=>p),(e=>p=e)),e(t.exports,\"compareByGeneratedPositionsInflated\",(()=>f),(e=>f=e)),e(t.exports,\"parseSourceMapInput\",(()=>d),(e=>d=e)),e(t.exports,\"computeSourceURL\",(()=>g),(e=>g=e)),r=function(e,t,n){if(t in e)return e[t];if(3===arguments.length)return n;throw new Error('\"'+t+'\" is a required argument.')};var m=/^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/,D=/^data:.+\\,.+$/;function v(e){var t=e.match(m);return t?{scheme:t[1],auth:t[2],host:t[3],port:t[4],path:t[5]}:null}function y(e){var t=\"\";return e.scheme&&(t+=e.scheme+\":\"),t+=\"//\",e.auth&&(t+=e.auth+\"@\"),e.host&&(t+=e.host),e.port&&(t+=\":\"+e.port),e.path&&(t+=e.path),t}function k(e){var t=e,n=v(e);if(n){if(!n.path)return e;t=n.path}for(var r,i=a(t),s=t.split(/\\/+/),o=0,u=s.length-1;u>=0;u--)\".\"===(r=s[u])?s.splice(u,1):\"..\"===r?o++:o>0&&(\"\"===r?(s.splice(u+1,o),o=0):(s.splice(u,2),o--));return\"\"===(t=s.join(\"/\"))&&(t=i?\"/\":\".\"),n?(n.path=t,y(n)):t}function C(e,t){\"\"===e&&(e=\".\"),\"\"===t&&(t=\".\");var n=v(t),r=v(e);if(r&&(e=r.path||\"/\"),n&&!n.scheme)return r&&(n.scheme=r.scheme),y(n);if(n||t.match(D))return t;if(r&&!r.host&&!r.path)return r.host=t,y(r);var i=\"/\"===t.charAt(0)?t:k(e.replace(/\\/+$/,\"\")+\"/\"+t);return r?(r.path=i,y(r)):i}i=v,s=k,o=C,a=function(e){return\"/\"===e.charAt(0)||m.test(e)},u=function(e,t){\"\"===e&&(e=\".\"),e=e.replace(/\\/$/,\"\");for(var n=0;0!==t.indexOf(e+\"/\");){var r=e.lastIndexOf(\"/\");if(r<0)return t;if((e=e.slice(0,r)).match(/^([^\\/]+:\\/)?\\/*$/))return t;++n}return Array(n+1).join(\"../\")+t.substr(e.length+1)};var _=!(\"__proto__\"in Object.create(null));function A(e){return e}function b(e){if(!e)return!1;var t=e.length;if(t<9)return!1;if(95!==e.charCodeAt(t-1)||95!==e.charCodeAt(t-2)||111!==e.charCodeAt(t-3)||116!==e.charCodeAt(t-4)||111!==e.charCodeAt(t-5)||114!==e.charCodeAt(t-6)||112!==e.charCodeAt(t-7)||95!==e.charCodeAt(t-8)||95!==e.charCodeAt(t-9))return!1;for(var n=t-10;n>=0;n--)if(36!==e.charCodeAt(n))return!1;return!0}function E(e,t){return e===t?0:null===e?1:null===t?-1:e>t?1:-1}l=_?A:function(e){return b(e)?\"$\"+e:e},c=_?A:function(e){return b(e)?e.slice(1):e},h=function(e,t,n){var r=E(e.source,t.source);return 0!==r||0!==(r=e.originalLine-t.originalLine)||0!==(r=e.originalColumn-t.originalColumn)||n||0!==(r=e.generatedColumn-t.generatedColumn)||0!==(r=e.generatedLine-t.generatedLine)?r:E(e.name,t.name)},p=function(e,t,n){var r=e.generatedLine-t.generatedLine;return 0!==r||0!==(r=e.generatedColumn-t.generatedColumn)||n||0!==(r=E(e.source,t.source))||0!==(r=e.originalLine-t.originalLine)||0!==(r=e.originalColumn-t.originalColumn)?r:E(e.name,t.name)},f=function(e,t){var n=e.generatedLine-t.generatedLine;return 0!==n||0!==(n=e.generatedColumn-t.generatedColumn)||0!==(n=E(e.source,t.source))||0!==(n=e.originalLine-t.originalLine)||0!==(n=e.originalColumn-t.originalColumn)?n:E(e.name,t.name)},d=function(e){return JSON.parse(e.replace(/^\\)]}'[^\\n]*\\n/,\"\"))},g=function(e,t,n){if(t=t||\"\",e&&(\"/\"!==e[e.length-1]&&\"/\"!==t[0]&&(e+=\"/\"),t=e+t),n){var r=v(n);if(!r)throw new Error(\"sourceMapURL could not be parsed\");if(r.path){var i=r.path.lastIndexOf(\"/\");i>=0&&(r.path=r.path.substring(0,i+1))}t=C(y(r),t)}return k(t)}})),s.register(\"kKGit\",(function(t,n){var r;e(t.exports,\"ArraySet\",(()=>r),(e=>r=e));var i=s(\"6I6y5\"),o=Object.prototype.hasOwnProperty,a=\"undefined\"!=typeof Map;function u(){this._array=[],this._set=a?new Map:Object.create(null)}u.fromArray=function(e,t){for(var n=new u,r=0,i=e.length;r<i;r++)n.add(e[r],t);return n},u.prototype.size=function(){return a?this._set.size:Object.getOwnPropertyNames(this._set).length},u.prototype.add=function(e,t){var n=a?e:i.toSetString(e),r=a?this.has(e):o.call(this._set,n),s=this._array.length;r&&!t||this._array.push(e),r||(a?this._set.set(e,s):this._set[n]=s)},u.prototype.has=function(e){if(a)return this._set.has(e);var t=i.toSetString(e);return o.call(this._set,t)},u.prototype.indexOf=function(e){if(a){var t=this._set.get(e);if(t>=0)return t}else{var n=i.toSetString(e);if(o.call(this._set,n))return this._set[n]}throw new Error('\"'+e+'\" is not in the set.')},u.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error(\"No element indexed by \"+e)},u.prototype.toArray=function(){return this._array.slice()},r=u})),s.register(\"1DOoG\",(function(t,n){var r;e(t.exports,\"MappingList\",(()=>r),(e=>r=e));var i=s(\"6I6y5\");function o(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}o.prototype.unsortedForEach=function(e,t){this._array.forEach(e,t)},o.prototype.add=function(e){var t,n,r,s,o,a;t=this._last,n=e,r=t.generatedLine,s=n.generatedLine,o=t.generatedColumn,a=n.generatedColumn,s>r||s==r&&a>=o||i.compareByGeneratedPositionsInflated(t,n)<=0?(this._last=e,this._array.push(e)):(this._sorted=!1,this._array.push(e))},o.prototype.toArray=function(){return this._sorted||(this._array.sort(i.compareByGeneratedPositionsInflated),this._sorted=!0),this._array},r=o})),s.register(\"lLalb\",(function(t,n){var r;e(t.exports,\"SourceMapConsumer\",(()=>r),(e=>r=e));var i=s(\"6I6y5\"),o=s(\"lntwO\"),a=s(\"kKGit\").ArraySet,u=s(\"f30X9\"),l=s(\"flTmO\").quickSort;function c(e,t){var n=e;return\"string\"==typeof e&&(n=i.parseSourceMapInput(e)),null!=n.sections?new f(n,t):new h(n,t)}function h(e,t){var n=e;\"string\"==typeof e&&(n=i.parseSourceMapInput(e));var r=i.getArg(n,\"version\"),s=i.getArg(n,\"sources\"),o=i.getArg(n,\"names\",[]),u=i.getArg(n,\"sourceRoot\",null),l=i.getArg(n,\"sourcesContent\",null),c=i.getArg(n,\"mappings\"),h=i.getArg(n,\"file\",null);if(r!=this._version)throw new Error(\"Unsupported version: \"+r);u&&(u=i.normalize(u)),s=s.map(String).map(i.normalize).map((function(e){return u&&i.isAbsolute(u)&&i.isAbsolute(e)?i.relative(u,e):e})),this._names=a.fromArray(o.map(String),!0),this._sources=a.fromArray(s,!0),this._absoluteSources=this._sources.toArray().map((function(e){return i.computeSourceURL(u,e,t)})),this.sourceRoot=u,this.sourcesContent=l,this._mappings=c,this._sourceMapURL=t,this.file=h}function p(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}function f(e,t){var n=e;\"string\"==typeof e&&(n=i.parseSourceMapInput(e));var r=i.getArg(n,\"version\"),s=i.getArg(n,\"sections\");if(r!=this._version)throw new Error(\"Unsupported version: \"+r);this._sources=new a,this._names=new a;var o={line:-1,column:0};this._sections=s.map((function(e){if(e.url)throw new Error(\"Support for url field in sections not implemented.\");var n=i.getArg(e,\"offset\"),r=i.getArg(n,\"line\"),s=i.getArg(n,\"column\");if(r<o.line||r===o.line&&s<o.column)throw new Error(\"Section offsets must be ordered and non-overlapping.\");return o=n,{generatedOffset:{generatedLine:r+1,generatedColumn:s+1},consumer:new c(i.getArg(e,\"map\"),t)}}))}c.fromSourceMap=function(e,t){return h.fromSourceMap(e,t)},c.prototype._version=3,c.prototype.__generatedMappings=null,Object.defineProperty(c.prototype,\"_generatedMappings\",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),c.prototype.__originalMappings=null,Object.defineProperty(c.prototype,\"_originalMappings\",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),c.prototype._charIsMappingSeparator=function(e,t){var n=e.charAt(t);return\";\"===n||\",\"===n},c.prototype._parseMappings=function(e,t){throw new Error(\"Subclasses must implement _parseMappings\")},c.GENERATED_ORDER=1,c.ORIGINAL_ORDER=2,c.GREATEST_LOWER_BOUND=1,c.LEAST_UPPER_BOUND=2,c.prototype.eachMapping=function(e,t,n){var r,s=t||null;switch(n||c.GENERATED_ORDER){case c.GENERATED_ORDER:r=this._generatedMappings;break;case c.ORIGINAL_ORDER:r=this._originalMappings;break;default:throw new Error(\"Unknown order of iteration.\")}var o=this.sourceRoot;r.map((function(e){var t=null===e.source?null:this._sources.at(e.source);return{source:t=i.computeSourceURL(o,t,this._sourceMapURL),generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:null===e.name?null:this._names.at(e.name)}}),this).forEach(e,s)},c.prototype.allGeneratedPositionsFor=function(e){var t=i.getArg(e,\"line\"),n={source:i.getArg(e,\"source\"),originalLine:t,originalColumn:i.getArg(e,\"column\",0)};if(n.source=this._findSourceIndex(n.source),n.source<0)return[];var r=[],s=this._findMapping(n,this._originalMappings,\"originalLine\",\"originalColumn\",i.compareByOriginalPositions,o.LEAST_UPPER_BOUND);if(s>=0){var a=this._originalMappings[s];if(void 0===e.column)for(var u=a.originalLine;a&&a.originalLine===u;)r.push({line:i.getArg(a,\"generatedLine\",null),column:i.getArg(a,\"generatedColumn\",null),lastColumn:i.getArg(a,\"lastGeneratedColumn\",null)}),a=this._originalMappings[++s];else for(var l=a.originalColumn;a&&a.originalLine===t&&a.originalColumn==l;)r.push({line:i.getArg(a,\"generatedLine\",null),column:i.getArg(a,\"generatedColumn\",null),lastColumn:i.getArg(a,\"lastGeneratedColumn\",null)}),a=this._originalMappings[++s]}return r},r=c,h.prototype=Object.create(c.prototype),h.prototype.consumer=c,h.prototype._findSourceIndex=function(e){var t,n=e;if(null!=this.sourceRoot&&(n=i.relative(this.sourceRoot,n)),this._sources.has(n))return this._sources.indexOf(n);for(t=0;t<this._absoluteSources.length;++t)if(this._absoluteSources[t]==e)return t;return-1},h.fromSourceMap=function(e,t){var n=Object.create(h.prototype),r=n._names=a.fromArray(e._names.toArray(),!0),s=n._sources=a.fromArray(e._sources.toArray(),!0);n.sourceRoot=e._sourceRoot,n.sourcesContent=e._generateSourcesContent(n._sources.toArray(),n.sourceRoot),n.file=e._file,n._sourceMapURL=t,n._absoluteSources=n._sources.toArray().map((function(e){return i.computeSourceURL(n.sourceRoot,e,t)}));for(var o=e._mappings.toArray().slice(),u=n.__generatedMappings=[],c=n.__originalMappings=[],f=0,d=o.length;f<d;f++){var g=o[f],m=new p;m.generatedLine=g.generatedLine,m.generatedColumn=g.generatedColumn,g.source&&(m.source=s.indexOf(g.source),m.originalLine=g.originalLine,m.originalColumn=g.originalColumn,g.name&&(m.name=r.indexOf(g.name)),c.push(m)),u.push(m)}return l(n.__originalMappings,i.compareByOriginalPositions),n},h.prototype._version=3,Object.defineProperty(h.prototype,\"sources\",{get:function(){return this._absoluteSources.slice()}}),h.prototype._parseMappings=function(e,t){for(var n,r,s,o,a,c=1,h=0,f=0,d=0,g=0,m=0,D=e.length,v=0,y={},k={},C=[],_=[];v<D;)if(\";\"===e.charAt(v))c++,v++,h=0;else if(\",\"===e.charAt(v))v++;else{for((n=new p).generatedLine=c,o=v;o<D&&!this._charIsMappingSeparator(e,o);o++);if(s=y[r=e.slice(v,o)])v+=r.length;else{for(s=[];v<o;)u.decode(e,v,k),a=k.value,v=k.rest,s.push(a);if(2===s.length)throw new Error(\"Found a source, but no line and column\");if(3===s.length)throw new Error(\"Found a source and line, but no column\");y[r]=s}n.generatedColumn=h+s[0],h=n.generatedColumn,s.length>1&&(n.source=g+s[1],g+=s[1],n.originalLine=f+s[2],f=n.originalLine,n.originalLine+=1,n.originalColumn=d+s[3],d=n.originalColumn,s.length>4&&(n.name=m+s[4],m+=s[4])),_.push(n),\"number\"==typeof n.originalLine&&C.push(n)}l(_,i.compareByGeneratedPositionsDeflated),this.__generatedMappings=_,l(C,i.compareByOriginalPositions),this.__originalMappings=C},h.prototype._findMapping=function(e,t,n,r,i,s){if(e[n]<=0)throw new TypeError(\"Line must be greater than or equal to 1, got \"+e[n]);if(e[r]<0)throw new TypeError(\"Column must be greater than or equal to 0, got \"+e[r]);return o.search(e,t,i,s)},h.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var t=this._generatedMappings[e];if(e+1<this._generatedMappings.length){var n=this._generatedMappings[e+1];if(t.generatedLine===n.generatedLine){t.lastGeneratedColumn=n.generatedColumn-1;continue}}t.lastGeneratedColumn=1/0}},h.prototype.originalPositionFor=function(e){var t={generatedLine:i.getArg(e,\"line\"),generatedColumn:i.getArg(e,\"column\")},n=this._findMapping(t,this._generatedMappings,\"generatedLine\",\"generatedColumn\",i.compareByGeneratedPositionsDeflated,i.getArg(e,\"bias\",c.GREATEST_LOWER_BOUND));if(n>=0){var r=this._generatedMappings[n];if(r.generatedLine===t.generatedLine){var s=i.getArg(r,\"source\",null);null!==s&&(s=this._sources.at(s),s=i.computeSourceURL(this.sourceRoot,s,this._sourceMapURL));var o=i.getArg(r,\"name\",null);return null!==o&&(o=this._names.at(o)),{source:s,line:i.getArg(r,\"originalLine\",null),column:i.getArg(r,\"originalColumn\",null),name:o}}}return{source:null,line:null,column:null,name:null}},h.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&(this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some((function(e){return null==e})))},h.prototype.sourceContentFor=function(e,t){if(!this.sourcesContent)return null;var n=this._findSourceIndex(e);if(n>=0)return this.sourcesContent[n];var r,s=e;if(null!=this.sourceRoot&&(s=i.relative(this.sourceRoot,s)),null!=this.sourceRoot&&(r=i.urlParse(this.sourceRoot))){var o=s.replace(/^file:\\/\\//,\"\");if(\"file\"==r.scheme&&this._sources.has(o))return this.sourcesContent[this._sources.indexOf(o)];if((!r.path||\"/\"==r.path)&&this._sources.has(\"/\"+s))return this.sourcesContent[this._sources.indexOf(\"/\"+s)]}if(t)return null;throw new Error('\"'+s+'\" is not in the SourceMap.')},h.prototype.generatedPositionFor=function(e){var t=i.getArg(e,\"source\");if((t=this._findSourceIndex(t))<0)return{line:null,column:null,lastColumn:null};var n={source:t,originalLine:i.getArg(e,\"line\"),originalColumn:i.getArg(e,\"column\")},r=this._findMapping(n,this._originalMappings,\"originalLine\",\"originalColumn\",i.compareByOriginalPositions,i.getArg(e,\"bias\",c.GREATEST_LOWER_BOUND));if(r>=0){var s=this._originalMappings[r];if(s.source===n.source)return{line:i.getArg(s,\"generatedLine\",null),column:i.getArg(s,\"generatedColumn\",null),lastColumn:i.getArg(s,\"lastGeneratedColumn\",null)}}return{line:null,column:null,lastColumn:null}},f.prototype=Object.create(c.prototype),f.prototype.constructor=c,f.prototype._version=3,Object.defineProperty(f.prototype,\"sources\",{get:function(){for(var e=[],t=0;t<this._sections.length;t++)for(var n=0;n<this._sections[t].consumer.sources.length;n++)e.push(this._sections[t].consumer.sources[n]);return e}}),f.prototype.originalPositionFor=function(e){var t={generatedLine:i.getArg(e,\"line\"),generatedColumn:i.getArg(e,\"column\")},n=o.search(t,this._sections,(function(e,t){var n=e.generatedLine-t.generatedOffset.generatedLine;return n||e.generatedColumn-t.generatedOffset.generatedColumn})),r=this._sections[n];return r?r.consumer.originalPositionFor({line:t.generatedLine-(r.generatedOffset.generatedLine-1),column:t.generatedColumn-(r.generatedOffset.generatedLine===t.generatedLine?r.generatedOffset.generatedColumn-1:0),bias:e.bias}):{source:null,line:null,column:null,name:null}},f.prototype.hasContentsOfAllSources=function(){return this._sections.every((function(e){return e.consumer.hasContentsOfAllSources()}))},f.prototype.sourceContentFor=function(e,t){for(var n=0;n<this._sections.length;n++){var r=this._sections[n].consumer.sourceContentFor(e,!0);if(r)return r}if(t)return null;throw new Error('\"'+e+'\" is not in the SourceMap.')},f.prototype.generatedPositionFor=function(e){for(var t=0;t<this._sections.length;t++){var n=this._sections[t];if(-1!==n.consumer._findSourceIndex(i.getArg(e,\"source\"))){var r=n.consumer.generatedPositionFor(e);if(r)return{line:r.line+(n.generatedOffset.generatedLine-1),column:r.column+(n.generatedOffset.generatedLine===r.line?n.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},f.prototype._parseMappings=function(e,t){this.__generatedMappings=[],this.__originalMappings=[];for(var n=0;n<this._sections.length;n++)for(var r=this._sections[n],s=r.consumer._generatedMappings,o=0;o<s.length;o++){var a=s[o],u=r.consumer._sources.at(a.source);u=i.computeSourceURL(r.consumer.sourceRoot,u,this._sourceMapURL),this._sources.add(u),u=this._sources.indexOf(u);var c=null;a.name&&(c=r.consumer._names.at(a.name),this._names.add(c),c=this._names.indexOf(c));var h={source:u,generatedLine:a.generatedLine+(r.generatedOffset.generatedLine-1),generatedColumn:a.generatedColumn+(r.generatedOffset.generatedLine===a.generatedLine?r.generatedOffset.generatedColumn-1:0),originalLine:a.originalLine,originalColumn:a.originalColumn,name:c};this.__generatedMappings.push(h),\"number\"==typeof h.originalLine&&this.__originalMappings.push(h)}l(this.__generatedMappings,i.compareByGeneratedPositionsDeflated),l(this.__originalMappings,i.compareByOriginalPositions)}})),s.register(\"lntwO\",(function(t,n){var r,i,s;function o(e,t,n,r,s,a){var u=Math.floor((t-e)/2)+e,l=s(n,r[u],!0);return 0===l?u:l>0?t-u>1?o(u,t,n,r,s,a):a==i?t<r.length?t:-1:u:u-e>1?o(e,u,n,r,s,a):a==i?u:e<0?-1:e}e(t.exports,\"GREATEST_LOWER_BOUND\",(()=>r),(e=>r=e)),e(t.exports,\"LEAST_UPPER_BOUND\",(()=>i),(e=>i=e)),e(t.exports,\"search\",(()=>s),(e=>s=e)),r=1,i=2,s=function(e,t,n,i){if(0===t.length)return-1;var s=o(-1,t.length,e,t,n,i||r);if(s<0)return-1;for(;s-1>=0&&0===n(t[s],t[s-1],!0);)--s;return s}})),s.register(\"flTmO\",(function(t,n){var r;function i(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function s(e,t,n,r){if(n<r){var o=n-1;i(e,(c=n,h=r,Math.round(c+Math.random()*(h-c))),r);for(var a=e[r],u=n;u<r;u++)t(e[u],a)<=0&&i(e,o+=1,u);i(e,o+1,u);var l=o+1;s(e,t,n,l-1),s(e,t,l+1,r)}var c,h}e(t.exports,\"quickSort\",(()=>r),(e=>r=e)),r=function(e,t){s(e,t,0,e.length-1)}})),s.register(\"jtIqc\",(function(t,n){var r;e(t.exports,\"SourceNode\",(()=>r),(e=>r=e));var i=s(\"h712z\").SourceMapGenerator,o=s(\"6I6y5\"),a=/(\\r?\\n)/;function u(e,t,n,r,i){this.children=[],this.sourceContents={},this.line=null==e?null:e,this.column=null==t?null:t,this.source=null==n?null:n,this.name=null==i?null:i,this.$$$isSourceNode$$$=!0,null!=r&&this.add(r)}u.fromStringWithSourceMap=function(e,t,n){var r=new u,i=e.split(a),s=0,l=function(){return e()+(e()||\"\");function e(){return s<i.length?i[s++]:void 0}},c=1,h=0,p=null;return t.eachMapping((function(e){if(null!==p){if(!(c<e.generatedLine)){var t=(n=i[s]||\"\").substr(0,e.generatedColumn-h);return i[s]=n.substr(e.generatedColumn-h),h=e.generatedColumn,f(p,t),void(p=e)}f(p,l()),c++,h=0}for(;c<e.generatedLine;)r.add(l()),c++;if(h<e.generatedColumn){var n=i[s]||\"\";r.add(n.substr(0,e.generatedColumn)),i[s]=n.substr(e.generatedColumn),h=e.generatedColumn}p=e}),this),s<i.length&&(p&&f(p,l()),r.add(i.splice(s).join(\"\"))),t.sources.forEach((function(e){var i=t.sourceContentFor(e);null!=i&&(null!=n&&(e=o.join(n,e)),r.setSourceContent(e,i))})),r;function f(e,t){if(null===e||void 0===e.source)r.add(t);else{var i=n?o.join(n,e.source):e.source;r.add(new u(e.originalLine,e.originalColumn,i,t,e.name))}}},u.prototype.add=function(e){if(Array.isArray(e))e.forEach((function(e){this.add(e)}),this);else{if(!e.$$$isSourceNode$$$&&\"string\"!=typeof e)throw new TypeError(\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \"+e);e&&this.children.push(e)}return this},u.prototype.prepend=function(e){if(Array.isArray(e))for(var t=e.length-1;t>=0;t--)this.prepend(e[t]);else{if(!e.$$$isSourceNode$$$&&\"string\"!=typeof e)throw new TypeError(\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \"+e);this.children.unshift(e)}return this},u.prototype.walk=function(e){for(var t,n=0,r=this.children.length;n<r;n++)(t=this.children[n]).$$$isSourceNode$$$?t.walk(e):\"\"!==t&&e(t,{source:this.source,line:this.line,column:this.column,name:this.name})},u.prototype.join=function(e){var t,n,r=this.children.length;if(r>0){for(t=[],n=0;n<r-1;n++)t.push(this.children[n]),t.push(e);t.push(this.children[n]),this.children=t}return this},u.prototype.replaceRight=function(e,t){var n=this.children[this.children.length-1];return n.$$$isSourceNode$$$?n.replaceRight(e,t):\"string\"==typeof n?this.children[this.children.length-1]=n.replace(e,t):this.children.push(\"\".replace(e,t)),this},u.prototype.setSourceContent=function(e,t){this.sourceContents[o.toSetString(e)]=t},u.prototype.walkSourceContents=function(e){for(var t=0,n=this.children.length;t<n;t++)this.children[t].$$$isSourceNode$$$&&this.children[t].walkSourceContents(e);var r=Object.keys(this.sourceContents);for(t=0,n=r.length;t<n;t++)e(o.fromSetString(r[t]),this.sourceContents[r[t]])},u.prototype.toString=function(){var e=\"\";return this.walk((function(t){e+=t})),e},u.prototype.toStringWithSourceMap=function(e){var t={code:\"\",line:1,column:0},n=new i(e),r=!1,s=null,o=null,a=null,u=null;return this.walk((function(e,i){t.code+=e,null!==i.source&&null!==i.line&&null!==i.column?(s===i.source&&o===i.line&&a===i.column&&u===i.name||n.addMapping({source:i.source,original:{line:i.line,column:i.column},generated:{line:t.line,column:t.column},name:i.name}),s=i.source,o=i.line,a=i.column,u=i.name,r=!0):r&&(n.addMapping({generated:{line:t.line,column:t.column}}),s=null,r=!1);for(var l=0,c=e.length;l<c;l++)10===e.charCodeAt(l)?(t.line++,t.column=0,l+1===c?(s=null,r=!1):r&&n.addMapping({source:i.source,original:{line:i.line,column:i.column},generated:{line:t.line,column:t.column},name:i.name})):t.column++})),this.walkSourceContents((function(e,t){n.setSourceContent(e,t)})),{code:t.code,map:n}},r=u})),s.register(\"gXZrF\",(function(e,t){}));var o={};!function(e){\"use strict\";function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),Object.defineProperty(e,\"prototype\",{writable:!1}),e}function r(e,t){if(e){if(\"string\"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function s(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=r(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var i=0;return function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function o(){return{async:!1,baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!0,headerPrefix:\"\",highlight:null,langPrefix:\"language-\",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1}}function a(t){e.defaults=t}e.defaults=o();var u=/[&<>\"']/,l=/[&<>\"']/g,c=/[<>\"']|&(?!#?\\w+;)/,h=/[<>\"']|&(?!#?\\w+;)/g,p={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#39;\"},f=function(e){return p[e]};function d(e,t){if(t){if(u.test(e))return e.replace(l,f)}else if(c.test(e))return e.replace(h,f);return e}var g=/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/gi;function m(e){return e.replace(g,(function(e,t){return\"colon\"===(t=t.toLowerCase())?\":\":\"#\"===t.charAt(0)?\"x\"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):\"\"}))}var D=/(^|[^\\[])\\^/g;function v(e,t){e=\"string\"==typeof e?e:e.source,t=t||\"\";var n={replace:function(t,r){return r=(r=r.source||r).replace(D,\"$1\"),e=e.replace(t,r),n},getRegex:function(){return new RegExp(e,t)}};return n}var y=/[^\\w:]/g,k=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function C(e,t,n){if(e){var r;try{r=decodeURIComponent(m(n)).replace(y,\"\").toLowerCase()}catch(e){return null}if(0===r.indexOf(\"javascript:\")||0===r.indexOf(\"vbscript:\")||0===r.indexOf(\"data:\"))return null}t&&!k.test(n)&&(n=x(t,n));try{n=encodeURI(n).replace(/%25/g,\"%\")}catch(e){return null}return n}var _={},A=/^[^:]+:\\/*[^/]*$/,b=/^([^:]+:)[\\s\\S]*$/,E=/^([^:]+:\\/*[^/]*)[\\s\\S]*$/;function x(e,t){_[\" \"+e]||(A.test(e)?_[\" \"+e]=e+\"/\":_[\" \"+e]=B(e,\"/\",!0));var n=-1===(e=_[\" \"+e]).indexOf(\":\");return\"//\"===t.substring(0,2)?n?t:e.replace(b,\"$1\")+t:\"/\"===t.charAt(0)?n?t:e.replace(E,\"$1\")+t:e+t}var w={exec:function(){}};function S(e){for(var t,n,r=1;r<arguments.length;r++)for(n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function F(e,t){var n=e.replace(/\\|/g,(function(e,t,n){for(var r=!1,i=t;--i>=0&&\"\\\\\"===n[i];)r=!r;return r?\"|\":\" |\"})).split(/ \\|/),r=0;if(n[0].trim()||n.shift(),n.length>0&&!n[n.length-1].trim()&&n.pop(),n.length>t)n.splice(t);else for(;n.length<t;)n.push(\"\");for(;r<n.length;r++)n[r]=n[r].trim().replace(/\\\\\\|/g,\"|\");return n}function B(e,t,n){var r=e.length;if(0===r)return\"\";for(var i=0;i<r;){var s=e.charAt(r-i-1);if(s!==t||n){if(s===t||!n)break;i++}else i++}return e.slice(0,r-i)}function P(e,t){if(-1===e.indexOf(t[1]))return-1;for(var n=e.length,r=0,i=0;i<n;i++)if(\"\\\\\"===e[i])i++;else if(e[i]===t[0])r++;else if(e[i]===t[1]&&--r<0)return i;return-1}function L(e){e&&e.sanitize&&!e.silent&&console.warn(\"marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options\")}function O(e,t){if(t<1)return\"\";for(var n=\"\";t>1;)1&t&&(n+=e),t>>=1,e+=e;return n+e}function M(e,t,n,r){var i=t.href,s=t.title?d(t.title):null,o=e[1].replace(/\\\\([\\[\\]])/g,\"$1\");if(\"!\"!==e[0].charAt(0)){r.state.inLink=!0;var a={type:\"link\",raw:n,href:i,title:s,text:o,tokens:r.inlineTokens(o)};return r.state.inLink=!1,a}return{type:\"image\",raw:n,href:i,title:s,text:d(o)}}function $(e,t){var n=e.match(/^(\\s+)(?:```)/);if(null===n)return t;var r=n[1];return t.split(\"\\n\").map((function(e){var t=e.match(/^\\s+/);return null===t?e:t[0].length>=r.length?e.slice(r.length):e})).join(\"\\n\")}var I=function(){function t(t){this.options=t||e.defaults}var n=t.prototype;return n.space=function(e){var t=this.rules.block.newline.exec(e);if(t&&t[0].length>0)return{type:\"space\",raw:t[0]}},n.code=function(e){var t=this.rules.block.code.exec(e);if(t){var n=t[0].replace(/^ {1,4}/gm,\"\");return{type:\"code\",raw:t[0],codeBlockStyle:\"indented\",text:this.options.pedantic?n:B(n,\"\\n\")}}},n.fences=function(e){var t=this.rules.block.fences.exec(e);if(t){var n=t[0],r=$(n,t[3]||\"\");return{type:\"code\",raw:n,lang:t[2]?t[2].trim():t[2],text:r}}},n.heading=function(e){var t=this.rules.block.heading.exec(e);if(t){var n=t[2].trim();if(/#$/.test(n)){var r=B(n,\"#\");this.options.pedantic?n=r.trim():r&&!/ $/.test(r)||(n=r.trim())}return{type:\"heading\",raw:t[0],depth:t[1].length,text:n,tokens:this.lexer.inline(n)}}},n.hr=function(e){var t=this.rules.block.hr.exec(e);if(t)return{type:\"hr\",raw:t[0]}},n.blockquote=function(e){var t=this.rules.block.blockquote.exec(e);if(t){var n=t[0].replace(/^ *>[ \\t]?/gm,\"\");return{type:\"blockquote\",raw:t[0],tokens:this.lexer.blockTokens(n,[]),text:n}}},n.list=function(e){var t=this.rules.block.list.exec(e);if(t){var n,r,i,o,a,u,l,c,h,p,f,d,g=t[1].trim(),m=g.length>1,D={type:\"list\",raw:\"\",ordered:m,start:m?+g.slice(0,-1):\"\",loose:!1,items:[]};g=m?\"\\\\d{1,9}\\\\\"+g.slice(-1):\"\\\\\"+g,this.options.pedantic&&(g=m?g:\"[*+-]\");for(var v=new RegExp(\"^( {0,3}\"+g+\")((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))\");e&&(d=!1,t=v.exec(e))&&!this.rules.block.hr.test(e);){if(n=t[0],e=e.substring(n.length),c=t[2].split(\"\\n\",1)[0],h=e.split(\"\\n\",1)[0],this.options.pedantic?(o=2,f=c.trimLeft()):(o=(o=t[2].search(/[^ ]/))>4?1:o,f=c.slice(o),o+=t[1].length),u=!1,!c&&/^ *$/.test(h)&&(n+=h+\"\\n\",e=e.substring(h.length+1),d=!0),!d)for(var y=new RegExp(\"^ {0,\"+Math.min(3,o-1)+\"}(?:[*+-]|\\\\d{1,9}[.)])((?: [^\\\\n]*)?(?:\\\\n|$))\"),k=new RegExp(\"^ {0,\"+Math.min(3,o-1)+\"}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)\"),C=new RegExp(\"^ {0,\"+Math.min(3,o-1)+\"}(?:```|~~~)\"),_=new RegExp(\"^ {0,\"+Math.min(3,o-1)+\"}#\");e&&(c=p=e.split(\"\\n\",1)[0],this.options.pedantic&&(c=c.replace(/^ {1,4}(?=( {4})*[^ ])/g,\"  \")),!C.test(c))&&!_.test(c)&&!y.test(c)&&!k.test(e);){if(c.search(/[^ ]/)>=o||!c.trim())f+=\"\\n\"+c.slice(o);else{if(u)break;f+=\"\\n\"+c}u||c.trim()||(u=!0),n+=p+\"\\n\",e=e.substring(p.length+1)}D.loose||(l?D.loose=!0:/\\n *\\n *$/.test(n)&&(l=!0)),this.options.gfm&&(r=/^\\[[ xX]\\] /.exec(f))&&(i=\"[ ] \"!==r[0],f=f.replace(/^\\[[ xX]\\] +/,\"\")),D.items.push({type:\"list_item\",raw:n,task:!!r,checked:i,loose:!1,text:f}),D.raw+=n}D.items[D.items.length-1].raw=n.trimRight(),D.items[D.items.length-1].text=f.trimRight(),D.raw=D.raw.trimRight();var A=D.items.length;for(a=0;a<A;a++){this.lexer.state.top=!1,D.items[a].tokens=this.lexer.blockTokens(D.items[a].text,[]);var b=D.items[a].tokens.filter((function(e){return\"space\"===e.type})),E=b.every((function(e){for(var t,n=0,r=s(e.raw.split(\"\"));!(t=r()).done;)if(\"\\n\"===t.value&&(n+=1),n>1)return!0;return!1}));!D.loose&&b.length&&E&&(D.loose=!0,D.items[a].loose=!0)}return D}},n.html=function(e){var t=this.rules.block.html.exec(e);if(t){var n={type:\"html\",raw:t[0],pre:!this.options.sanitizer&&(\"pre\"===t[1]||\"script\"===t[1]||\"style\"===t[1]),text:t[0]};if(this.options.sanitize){var r=this.options.sanitizer?this.options.sanitizer(t[0]):d(t[0]);n.type=\"paragraph\",n.text=r,n.tokens=this.lexer.inline(r)}return n}},n.def=function(e){var t=this.rules.block.def.exec(e);if(t)return t[3]&&(t[3]=t[3].substring(1,t[3].length-1)),{type:\"def\",tag:t[1].toLowerCase().replace(/\\s+/g,\" \"),raw:t[0],href:t[2],title:t[3]}},n.table=function(e){var t=this.rules.block.table.exec(e);if(t){var n={type:\"table\",header:F(t[1]).map((function(e){return{text:e}})),align:t[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),rows:t[3]&&t[3].trim()?t[3].replace(/\\n[ \\t]*$/,\"\").split(\"\\n\"):[]};if(n.header.length===n.align.length){n.raw=t[0];var r,i,s,o,a=n.align.length;for(r=0;r<a;r++)/^ *-+: *$/.test(n.align[r])?n.align[r]=\"right\":/^ *:-+: *$/.test(n.align[r])?n.align[r]=\"center\":/^ *:-+ *$/.test(n.align[r])?n.align[r]=\"left\":n.align[r]=null;for(a=n.rows.length,r=0;r<a;r++)n.rows[r]=F(n.rows[r],n.header.length).map((function(e){return{text:e}}));for(a=n.header.length,i=0;i<a;i++)n.header[i].tokens=this.lexer.inline(n.header[i].text);for(a=n.rows.length,i=0;i<a;i++)for(o=n.rows[i],s=0;s<o.length;s++)o[s].tokens=this.lexer.inline(o[s].text);return n}}},n.lheading=function(e){var t=this.rules.block.lheading.exec(e);if(t)return{type:\"heading\",raw:t[0],depth:\"=\"===t[2].charAt(0)?1:2,text:t[1],tokens:this.lexer.inline(t[1])}},n.paragraph=function(e){var t=this.rules.block.paragraph.exec(e);if(t){var n=\"\\n\"===t[1].charAt(t[1].length-1)?t[1].slice(0,-1):t[1];return{type:\"paragraph\",raw:t[0],text:n,tokens:this.lexer.inline(n)}}},n.text=function(e){var t=this.rules.block.text.exec(e);if(t)return{type:\"text\",raw:t[0],text:t[0],tokens:this.lexer.inline(t[0])}},n.escape=function(e){var t=this.rules.inline.escape.exec(e);if(t)return{type:\"escape\",raw:t[0],text:d(t[1])}},n.tag=function(e){var t=this.rules.inline.tag.exec(e);if(t)return!this.lexer.state.inLink&&/^<a /i.test(t[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&/^<\\/a>/i.test(t[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&/^<(pre|code|kbd|script)(\\s|>)/i.test(t[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&/^<\\/(pre|code|kbd|script)(\\s|>)/i.test(t[0])&&(this.lexer.state.inRawBlock=!1),{type:this.options.sanitize?\"text\":\"html\",raw:t[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(t[0]):d(t[0]):t[0]}},n.link=function(e){var t=this.rules.inline.link.exec(e);if(t){var n=t[2].trim();if(!this.options.pedantic&&/^</.test(n)){if(!/>$/.test(n))return;var r=B(n.slice(0,-1),\"\\\\\");if((n.length-r.length)%2==0)return}else{var i=P(t[2],\"()\");if(i>-1){var s=(0===t[0].indexOf(\"!\")?5:4)+t[1].length+i;t[2]=t[2].substring(0,i),t[0]=t[0].substring(0,s).trim(),t[3]=\"\"}}var o=t[2],a=\"\";if(this.options.pedantic){var u=/^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(o);u&&(o=u[1],a=u[3])}else a=t[3]?t[3].slice(1,-1):\"\";return o=o.trim(),/^</.test(o)&&(o=this.options.pedantic&&!/>$/.test(n)?o.slice(1):o.slice(1,-1)),M(t,{href:o?o.replace(this.rules.inline._escapes,\"$1\"):o,title:a?a.replace(this.rules.inline._escapes,\"$1\"):a},t[0],this.lexer)}},n.reflink=function(e,t){var n;if((n=this.rules.inline.reflink.exec(e))||(n=this.rules.inline.nolink.exec(e))){var r=(n[2]||n[1]).replace(/\\s+/g,\" \");if(!(r=t[r.toLowerCase()])||!r.href){var i=n[0].charAt(0);return{type:\"text\",raw:i,text:i}}return M(n,r,n[0],this.lexer)}},n.emStrong=function(e,t,n){void 0===n&&(n=\"\");var r=this.rules.inline.emStrong.lDelim.exec(e);if(r&&(!r[3]||!n.match(/(?:[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u0660-\\u0669\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0966-\\u096F\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AEF\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BE6-\\u0BF2\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D58-\\u0D61\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DE6-\\u0DEF\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F20-\\u0F33\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1090-\\u1099\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B50-\\u1B59\\u1B83-\\u1BA0\\u1BAE-\\u1BE5\\u1C00-\\u1C23\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA830-\\uA835\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uA9E0-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE1-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE40-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD23\\uDD30-\\uDD39\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF27\\uDF30-\\uDF45\\uDF51-\\uDF54\\uDF70-\\uDF81\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC52-\\uDC6F\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD03-\\uDD26\\uDD36-\\uDD3F\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDEF0-\\uDEF9\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC50-\\uDC59\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEAA\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF30-\\uDF3B\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF2\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE70-\\uDEBE\\uDEC0-\\uDEC9\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD834[\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD837[\\uDF00-\\uDF1E]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB\\uDEF0-\\uDEF9]|\\uD839[\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCCF\\uDD00-\\uDD43\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF38\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])/))){var i=r[1]||r[2]||\"\";if(!i||i&&(\"\"===n||this.rules.inline.punctuation.exec(n))){var s,o,a=r[0].length-1,u=a,l=0,c=\"*\"===r[0][0]?this.rules.inline.emStrong.rDelimAst:this.rules.inline.emStrong.rDelimUnd;for(c.lastIndex=0,t=t.slice(-1*e.length+a);null!=(r=c.exec(t));)if(s=r[1]||r[2]||r[3]||r[4]||r[5]||r[6])if(o=s.length,r[3]||r[4])u+=o;else if(!((r[5]||r[6])&&a%3)||(a+o)%3){if(!((u-=o)>0)){if(o=Math.min(o,o+u+l),Math.min(a,o)%2){var h=e.slice(1,a+r.index+o);return{type:\"em\",raw:e.slice(0,a+r.index+o+1),text:h,tokens:this.lexer.inlineTokens(h)}}var p=e.slice(2,a+r.index+o-1);return{type:\"strong\",raw:e.slice(0,a+r.index+o+1),text:p,tokens:this.lexer.inlineTokens(p)}}}else l+=o}}},n.codespan=function(e){var t=this.rules.inline.code.exec(e);if(t){var n=t[2].replace(/\\n/g,\" \"),r=/[^ ]/.test(n),i=/^ /.test(n)&&/ $/.test(n);return r&&i&&(n=n.substring(1,n.length-1)),n=d(n,!0),{type:\"codespan\",raw:t[0],text:n}}},n.br=function(e){var t=this.rules.inline.br.exec(e);if(t)return{type:\"br\",raw:t[0]}},n.del=function(e){var t=this.rules.inline.del.exec(e);if(t)return{type:\"del\",raw:t[0],text:t[2],tokens:this.lexer.inlineTokens(t[2])}},n.autolink=function(e,t){var n,r,i=this.rules.inline.autolink.exec(e);if(i)return r=\"@\"===i[2]?\"mailto:\"+(n=d(this.options.mangle?t(i[1]):i[1])):n=d(i[1]),{type:\"link\",raw:i[0],text:n,href:r,tokens:[{type:\"text\",raw:n,text:n}]}},n.url=function(e,t){var n;if(n=this.rules.inline.url.exec(e)){var r,i;if(\"@\"===n[2])i=\"mailto:\"+(r=d(this.options.mangle?t(n[0]):n[0]));else{var s;do{s=n[0],n[0]=this.rules.inline._backpedal.exec(n[0])[0]}while(s!==n[0]);r=d(n[0]),i=\"www.\"===n[1]?\"http://\"+r:r}return{type:\"link\",raw:n[0],text:r,href:i,tokens:[{type:\"text\",raw:r,text:r}]}}},n.inlineText=function(e,t){var n,r=this.rules.inline.text.exec(e);if(r)return n=this.lexer.state.inRawBlock?this.options.sanitize?this.options.sanitizer?this.options.sanitizer(r[0]):d(r[0]):r[0]:d(this.options.smartypants?t(r[0]):r[0]),{type:\"text\",raw:r[0],text:n}},t}(),R={newline:/^(?: *(?:\\n|$))+/,code:/^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,fences:/^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,hr:/^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,heading:/^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,list:/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,html:\"^ {0,3}(?:<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$))\",def:/^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,table:w,lheading:/^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,_paragraph:/^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,text:/^[^\\n]+/,_label:/(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/,_title:/(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/};R.def=v(R.def).replace(\"label\",R._label).replace(\"title\",R._title).getRegex(),R.bullet=/(?:[*+-]|\\d{1,9}[.)])/,R.listItemStart=v(/^( *)(bull) */).replace(\"bull\",R.bullet).getRegex(),R.list=v(R.list).replace(/bull/g,R.bullet).replace(\"hr\",\"\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))\").replace(\"def\",\"\\\\n+(?=\"+R.def.source+\")\").getRegex(),R._tag=\"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\",R._comment=/<!--(?!-?>)[\\s\\S]*?(?:-->|$)/,R.html=v(R.html,\"i\").replace(\"comment\",R._comment).replace(\"tag\",R._tag).replace(\"attribute\",/ +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex(),R.paragraph=v(R._paragraph).replace(\"hr\",R.hr).replace(\"heading\",\" {0,3}#{1,6} \").replace(\"|lheading\",\"\").replace(\"|table\",\"\").replace(\"blockquote\",\" {0,3}>\").replace(\"fences\",\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\",\" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\",\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\",R._tag).getRegex(),R.blockquote=v(R.blockquote).replace(\"paragraph\",R.paragraph).getRegex(),R.normal=S({},R),R.gfm=S({},R.normal,{table:\"^ *([^\\\\n ].*\\\\|.*)\\\\n {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\"}),R.gfm.table=v(R.gfm.table).replace(\"hr\",R.hr).replace(\"heading\",\" {0,3}#{1,6} \").replace(\"blockquote\",\" {0,3}>\").replace(\"code\",\" {4}[^\\\\n]\").replace(\"fences\",\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\",\" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\",\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\",R._tag).getRegex(),R.gfm.paragraph=v(R._paragraph).replace(\"hr\",R.hr).replace(\"heading\",\" {0,3}#{1,6} \").replace(\"|lheading\",\"\").replace(\"table\",R.gfm.table).replace(\"blockquote\",\" {0,3}>\").replace(\"fences\",\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\",\" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\",\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\",R._tag).getRegex(),R.pedantic=S({},R.normal,{html:v(\"^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\\\"[^\\\"]*\\\"|'[^']*'|\\\\s[^'\\\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))\").replace(\"comment\",R._comment).replace(/tag/g,\"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),def:/^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,heading:/^(#{1,6})(.*)(?:\\n+|$)/,fences:w,paragraph:v(R.normal._paragraph).replace(\"hr\",R.hr).replace(\"heading\",\" *#{1,6} *[^\\n]\").replace(\"lheading\",R.lheading).replace(\"blockquote\",\" {0,3}>\").replace(\"|fences\",\"\").replace(\"|list\",\"\").replace(\"|html\",\"\").getRegex()});var N={escape:/^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,autolink:/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,url:w,tag:\"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\",link:/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,reflink:/^!?\\[(label)\\]\\[(ref)\\]/,nolink:/^!?\\[(ref)\\](?:\\[\\])?/,reflinkSearch:\"reflink|nolink(?!\\\\()\",emStrong:{lDelim:/^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,rDelimAst:/^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[^*]+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,rDelimUnd:/^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/},code:/^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,br:/^( {2,}|\\\\)\\n(?!\\s*$)/,del:w,text:/^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,punctuation:/^([\\spunctuation])/};function T(e){return e.replace(/---/g,\"—\").replace(/--/g,\"–\").replace(/(^|[-\\u2014/(\\[{\"\\s])'/g,\"$1‘\").replace(/'/g,\"’\").replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g,\"$1“\").replace(/\"/g,\"”\").replace(/\\.{3}/g,\"…\")}function z(e){var t,n,r=\"\",i=e.length;for(t=0;t<i;t++)n=e.charCodeAt(t),Math.random()>.5&&(n=\"x\"+n.toString(16)),r+=\"&#\"+n+\";\";return r}N._punctuation=\"!\\\"#$%&'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~\",N.punctuation=v(N.punctuation).replace(/punctuation/g,N._punctuation).getRegex(),N.blockSkip=/\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g,N.escapedEmSt=/\\\\\\*|\\\\_/g,N._comment=v(R._comment).replace(\"(?:--\\x3e|$)\",\"--\\x3e\").getRegex(),N.emStrong.lDelim=v(N.emStrong.lDelim).replace(/punct/g,N._punctuation).getRegex(),N.emStrong.rDelimAst=v(N.emStrong.rDelimAst,\"g\").replace(/punct/g,N._punctuation).getRegex(),N.emStrong.rDelimUnd=v(N.emStrong.rDelimUnd,\"g\").replace(/punct/g,N._punctuation).getRegex(),N._escapes=/\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g,N._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,N._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,N.autolink=v(N.autolink).replace(\"scheme\",N._scheme).replace(\"email\",N._email).getRegex(),N._attribute=/\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/,N.tag=v(N.tag).replace(\"comment\",N._comment).replace(\"attribute\",N._attribute).getRegex(),N._label=/(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/,N._href=/<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/,N._title=/\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/,N.link=v(N.link).replace(\"label\",N._label).replace(\"href\",N._href).replace(\"title\",N._title).getRegex(),N.reflink=v(N.reflink).replace(\"label\",N._label).replace(\"ref\",R._label).getRegex(),N.nolink=v(N.nolink).replace(\"ref\",R._label).getRegex(),N.reflinkSearch=v(N.reflinkSearch,\"g\").replace(\"reflink\",N.reflink).replace(\"nolink\",N.nolink).getRegex(),N.normal=S({},N),N.pedantic=S({},N.normal,{strong:{start:/^__|\\*\\*/,middle:/^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,endAst:/\\*\\*(?!\\*)/g,endUnd:/__(?!_)/g},em:{start:/^_|\\*/,middle:/^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,endAst:/\\*(?!\\*)/g,endUnd:/_(?!_)/g},link:v(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\",N._label).getRegex(),reflink:v(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\",N._label).getRegex()}),N.gfm=S({},N.normal,{escape:v(N.escape).replace(\"])\",\"~|])\").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/}),N.gfm.url=v(N.gfm.url,\"i\").replace(\"email\",N.gfm._extended_email).getRegex(),N.breaks=S({},N.gfm,{br:v(N.br).replace(\"{2,}\",\"*\").getRegex(),text:v(N.gfm.text).replace(\"\\\\b_\",\"\\\\b_| {2,}\\\\n\").replace(/\\{2,\\}/g,\"*\").getRegex()});var j=function(){function t(t){this.tokens=[],this.tokens.links=Object.create(null),this.options=t||e.defaults,this.options.tokenizer=this.options.tokenizer||new I,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};var n={block:R.normal,inline:N.normal};this.options.pedantic?(n.block=R.pedantic,n.inline=N.pedantic):this.options.gfm&&(n.block=R.gfm,this.options.breaks?n.inline=N.breaks:n.inline=N.gfm),this.tokenizer.rules=n}t.lex=function(e,n){return new t(n).lex(e)},t.lexInline=function(e,n){return new t(n).inlineTokens(e)};var r=t.prototype;return r.lex=function(e){var t;for(e=e.replace(/\\r\\n|\\r/g,\"\\n\"),this.blockTokens(e,this.tokens);t=this.inlineQueue.shift();)this.inlineTokens(t.src,t.tokens);return this.tokens},r.blockTokens=function(e,t){var n,r,i,s,o=this;for(void 0===t&&(t=[]),e=this.options.pedantic?e.replace(/\\t/g,\"    \").replace(/^ +$/gm,\"\"):e.replace(/^( *)(\\t+)/gm,(function(e,t,n){return t+\"    \".repeat(n.length)}));e;)if(!(this.options.extensions&&this.options.extensions.block&&this.options.extensions.block.some((function(r){return!!(n=r.call({lexer:o},e,t))&&(e=e.substring(n.raw.length),t.push(n),!0)}))))if(n=this.tokenizer.space(e))e=e.substring(n.raw.length),1===n.raw.length&&t.length>0?t[t.length-1].raw+=\"\\n\":t.push(n);else if(n=this.tokenizer.code(e))e=e.substring(n.raw.length),!(r=t[t.length-1])||\"paragraph\"!==r.type&&\"text\"!==r.type?t.push(n):(r.raw+=\"\\n\"+n.raw,r.text+=\"\\n\"+n.text,this.inlineQueue[this.inlineQueue.length-1].src=r.text);else if(n=this.tokenizer.fences(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.heading(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.hr(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.blockquote(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.list(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.html(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.def(e))e=e.substring(n.raw.length),!(r=t[t.length-1])||\"paragraph\"!==r.type&&\"text\"!==r.type?this.tokens.links[n.tag]||(this.tokens.links[n.tag]={href:n.href,title:n.title}):(r.raw+=\"\\n\"+n.raw,r.text+=\"\\n\"+n.raw,this.inlineQueue[this.inlineQueue.length-1].src=r.text);else if(n=this.tokenizer.table(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.lheading(e))e=e.substring(n.raw.length),t.push(n);else if(i=e,this.options.extensions&&this.options.extensions.startBlock&&function(){var t=1/0,n=e.slice(1),r=void 0;o.options.extensions.startBlock.forEach((function(e){\"number\"==typeof(r=e.call({lexer:this},n))&&r>=0&&(t=Math.min(t,r))})),t<1/0&&t>=0&&(i=e.substring(0,t+1))}(),this.state.top&&(n=this.tokenizer.paragraph(i)))r=t[t.length-1],s&&\"paragraph\"===r.type?(r.raw+=\"\\n\"+n.raw,r.text+=\"\\n\"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=r.text):t.push(n),s=i.length!==e.length,e=e.substring(n.raw.length);else if(n=this.tokenizer.text(e))e=e.substring(n.raw.length),(r=t[t.length-1])&&\"text\"===r.type?(r.raw+=\"\\n\"+n.raw,r.text+=\"\\n\"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=r.text):t.push(n);else if(e){var a=\"Infinite loop on byte: \"+e.charCodeAt(0);if(this.options.silent){console.error(a);break}throw new Error(a)}return this.state.top=!0,t},r.inline=function(e,t){return void 0===t&&(t=[]),this.inlineQueue.push({src:e,tokens:t}),t},r.inlineTokens=function(e,t){var n,r,i,s=this;void 0===t&&(t=[]);var o,a,u,l=e;if(this.tokens.links){var c=Object.keys(this.tokens.links);if(c.length>0)for(;null!=(o=this.tokenizer.rules.inline.reflinkSearch.exec(l));)c.includes(o[0].slice(o[0].lastIndexOf(\"[\")+1,-1))&&(l=l.slice(0,o.index)+\"[\"+O(\"a\",o[0].length-2)+\"]\"+l.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(o=this.tokenizer.rules.inline.blockSkip.exec(l));)l=l.slice(0,o.index)+\"[\"+O(\"a\",o[0].length-2)+\"]\"+l.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(o=this.tokenizer.rules.inline.escapedEmSt.exec(l));)l=l.slice(0,o.index)+\"++\"+l.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);for(;e;)if(a||(u=\"\"),a=!1,!(this.options.extensions&&this.options.extensions.inline&&this.options.extensions.inline.some((function(r){return!!(n=r.call({lexer:s},e,t))&&(e=e.substring(n.raw.length),t.push(n),!0)}))))if(n=this.tokenizer.escape(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.tag(e))e=e.substring(n.raw.length),(r=t[t.length-1])&&\"text\"===n.type&&\"text\"===r.type?(r.raw+=n.raw,r.text+=n.text):t.push(n);else if(n=this.tokenizer.link(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.reflink(e,this.tokens.links))e=e.substring(n.raw.length),(r=t[t.length-1])&&\"text\"===n.type&&\"text\"===r.type?(r.raw+=n.raw,r.text+=n.text):t.push(n);else if(n=this.tokenizer.emStrong(e,l,u))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.codespan(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.br(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.del(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.autolink(e,z))e=e.substring(n.raw.length),t.push(n);else if(this.state.inLink||!(n=this.tokenizer.url(e,z))){if(i=e,this.options.extensions&&this.options.extensions.startInline&&function(){var t=1/0,n=e.slice(1),r=void 0;s.options.extensions.startInline.forEach((function(e){\"number\"==typeof(r=e.call({lexer:this},n))&&r>=0&&(t=Math.min(t,r))})),t<1/0&&t>=0&&(i=e.substring(0,t+1))}(),n=this.tokenizer.inlineText(i,T))e=e.substring(n.raw.length),\"_\"!==n.raw.slice(-1)&&(u=n.raw.slice(-1)),a=!0,(r=t[t.length-1])&&\"text\"===r.type?(r.raw+=n.raw,r.text+=n.text):t.push(n);else if(e){var h=\"Infinite loop on byte: \"+e.charCodeAt(0);if(this.options.silent){console.error(h);break}throw new Error(h)}}else e=e.substring(n.raw.length),t.push(n);return t},n(t,null,[{key:\"rules\",get:function(){return{block:R,inline:N}}}]),t}(),H=function(){function t(t){this.options=t||e.defaults}var n=t.prototype;return n.code=function(e,t,n){var r=(t||\"\").match(/\\S*/)[0];if(this.options.highlight){var i=this.options.highlight(e,r);null!=i&&i!==e&&(n=!0,e=i)}return e=e.replace(/\\n$/,\"\")+\"\\n\",r?'<pre><code class=\"'+this.options.langPrefix+d(r,!0)+'\">'+(n?e:d(e,!0))+\"</code></pre>\\n\":\"<pre><code>\"+(n?e:d(e,!0))+\"</code></pre>\\n\"},n.blockquote=function(e){return\"<blockquote>\\n\"+e+\"</blockquote>\\n\"},n.html=function(e){return e},n.heading=function(e,t,n,r){return this.options.headerIds?\"<h\"+t+' id=\"'+(this.options.headerPrefix+r.slug(n))+'\">'+e+\"</h\"+t+\">\\n\":\"<h\"+t+\">\"+e+\"</h\"+t+\">\\n\"},n.hr=function(){return this.options.xhtml?\"<hr/>\\n\":\"<hr>\\n\"},n.list=function(e,t,n){var r=t?\"ol\":\"ul\";return\"<\"+r+(t&&1!==n?' start=\"'+n+'\"':\"\")+\">\\n\"+e+\"</\"+r+\">\\n\"},n.listitem=function(e){return\"<li>\"+e+\"</li>\\n\"},n.checkbox=function(e){return\"<input \"+(e?'checked=\"\" ':\"\")+'disabled=\"\" type=\"checkbox\"'+(this.options.xhtml?\" /\":\"\")+\"> \"},n.paragraph=function(e){return\"<p>\"+e+\"</p>\\n\"},n.table=function(e,t){return t&&(t=\"<tbody>\"+t+\"</tbody>\"),\"<table>\\n<thead>\\n\"+e+\"</thead>\\n\"+t+\"</table>\\n\"},n.tablerow=function(e){return\"<tr>\\n\"+e+\"</tr>\\n\"},n.tablecell=function(e,t){var n=t.header?\"th\":\"td\";return(t.align?\"<\"+n+' align=\"'+t.align+'\">':\"<\"+n+\">\")+e+\"</\"+n+\">\\n\"},n.strong=function(e){return\"<strong>\"+e+\"</strong>\"},n.em=function(e){return\"<em>\"+e+\"</em>\"},n.codespan=function(e){return\"<code>\"+e+\"</code>\"},n.br=function(){return this.options.xhtml?\"<br/>\":\"<br>\"},n.del=function(e){return\"<del>\"+e+\"</del>\"},n.link=function(e,t,n){if(null===(e=C(this.options.sanitize,this.options.baseUrl,e)))return n;var r='<a href=\"'+d(e)+'\"';return t&&(r+=' title=\"'+t+'\"'),r+=\">\"+n+\"</a>\"},n.image=function(e,t,n){if(null===(e=C(this.options.sanitize,this.options.baseUrl,e)))return n;var r='<img src=\"'+e+'\" alt=\"'+n+'\"';return t&&(r+=' title=\"'+t+'\"'),r+=this.options.xhtml?\"/>\":\">\"},n.text=function(e){return e},t}(),U=function(){function e(){}var t=e.prototype;return t.strong=function(e){return e},t.em=function(e){return e},t.codespan=function(e){return e},t.del=function(e){return e},t.html=function(e){return e},t.text=function(e){return e},t.link=function(e,t,n){return\"\"+n},t.image=function(e,t,n){return\"\"+n},t.br=function(){return\"\"},e}(),q=function(){function e(){this.seen={}}var t=e.prototype;return t.serialize=function(e){return e.toLowerCase().trim().replace(/<[!\\/a-z].*?>/gi,\"\").replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g,\"\").replace(/\\s/g,\"-\")},t.getNextSafeSlug=function(e,t){var n=e,r=0;if(this.seen.hasOwnProperty(n)){r=this.seen[e];do{n=e+\"-\"+ ++r}while(this.seen.hasOwnProperty(n))}return t||(this.seen[e]=r,this.seen[n]=0),n},t.slug=function(e,t){void 0===t&&(t={});var n=this.serialize(e);return this.getNextSafeSlug(n,t.dryrun)},e}(),V=function(){function t(t){this.options=t||e.defaults,this.options.renderer=this.options.renderer||new H,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new U,this.slugger=new q}t.parse=function(e,n){return new t(n).parse(e)},t.parseInline=function(e,n){return new t(n).parseInline(e)};var n=t.prototype;return n.parse=function(e,t){void 0===t&&(t=!0);var n,r,i,s,o,a,u,l,c,h,p,f,d,g,D,v,y,k,C,_=\"\",A=e.length;for(n=0;n<A;n++)if(h=e[n],!(this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[h.type])||!1===(C=this.options.extensions.renderers[h.type].call({parser:this},h))&&[\"space\",\"hr\",\"heading\",\"code\",\"table\",\"blockquote\",\"list\",\"html\",\"paragraph\",\"text\"].includes(h.type))switch(h.type){case\"space\":continue;case\"hr\":_+=this.renderer.hr();continue;case\"heading\":_+=this.renderer.heading(this.parseInline(h.tokens),h.depth,m(this.parseInline(h.tokens,this.textRenderer)),this.slugger);continue;case\"code\":_+=this.renderer.code(h.text,h.lang,h.escaped);continue;case\"table\":for(l=\"\",u=\"\",s=h.header.length,r=0;r<s;r++)u+=this.renderer.tablecell(this.parseInline(h.header[r].tokens),{header:!0,align:h.align[r]});for(l+=this.renderer.tablerow(u),c=\"\",s=h.rows.length,r=0;r<s;r++){for(u=\"\",o=(a=h.rows[r]).length,i=0;i<o;i++)u+=this.renderer.tablecell(this.parseInline(a[i].tokens),{header:!1,align:h.align[i]});c+=this.renderer.tablerow(u)}_+=this.renderer.table(l,c);continue;case\"blockquote\":c=this.parse(h.tokens),_+=this.renderer.blockquote(c);continue;case\"list\":for(p=h.ordered,f=h.start,d=h.loose,s=h.items.length,c=\"\",r=0;r<s;r++)v=(D=h.items[r]).checked,y=D.task,g=\"\",D.task&&(k=this.renderer.checkbox(v),d?D.tokens.length>0&&\"paragraph\"===D.tokens[0].type?(D.tokens[0].text=k+\" \"+D.tokens[0].text,D.tokens[0].tokens&&D.tokens[0].tokens.length>0&&\"text\"===D.tokens[0].tokens[0].type&&(D.tokens[0].tokens[0].text=k+\" \"+D.tokens[0].tokens[0].text)):D.tokens.unshift({type:\"text\",text:k}):g+=k),g+=this.parse(D.tokens,d),c+=this.renderer.listitem(g,y,v);_+=this.renderer.list(c,p,f);continue;case\"html\":_+=this.renderer.html(h.text);continue;case\"paragraph\":_+=this.renderer.paragraph(this.parseInline(h.tokens));continue;case\"text\":for(c=h.tokens?this.parseInline(h.tokens):h.text;n+1<A&&\"text\"===e[n+1].type;)c+=\"\\n\"+((h=e[++n]).tokens?this.parseInline(h.tokens):h.text);_+=t?this.renderer.paragraph(c):c;continue;default:var b='Token with \"'+h.type+'\" type was not found.';if(this.options.silent)return void console.error(b);throw new Error(b)}else _+=C||\"\";return _},n.parseInline=function(e,t){t=t||this.renderer;var n,r,i,s=\"\",o=e.length;for(n=0;n<o;n++)if(r=e[n],!(this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[r.type])||!1===(i=this.options.extensions.renderers[r.type].call({parser:this},r))&&[\"escape\",\"html\",\"link\",\"image\",\"strong\",\"em\",\"codespan\",\"br\",\"del\",\"text\"].includes(r.type))switch(r.type){case\"escape\":case\"text\":s+=t.text(r.text);break;case\"html\":s+=t.html(r.text);break;case\"link\":s+=t.link(r.href,r.title,this.parseInline(r.tokens,t));break;case\"image\":s+=t.image(r.href,r.title,r.text);break;case\"strong\":s+=t.strong(this.parseInline(r.tokens,t));break;case\"em\":s+=t.em(this.parseInline(r.tokens,t));break;case\"codespan\":s+=t.codespan(r.text);break;case\"br\":s+=t.br();break;case\"del\":s+=t.del(this.parseInline(r.tokens,t));break;default:var a='Token with \"'+r.type+'\" type was not found.';if(this.options.silent)return void console.error(a);throw new Error(a)}else s+=i||\"\";return s},t}();function G(e,t,n){if(null==e)throw new Error(\"marked(): input parameter is undefined or null\");if(\"string\"!=typeof e)throw new Error(\"marked(): input parameter is of type \"+Object.prototype.toString.call(e)+\", string expected\");if(\"function\"==typeof t&&(n=t,t=null),L(t=S({},G.defaults,t||{})),n){var r,i=t.highlight;try{r=j.lex(e,t)}catch(e){return n(e)}var s=function(e){var s;if(!e)try{t.walkTokens&&G.walkTokens(r,t.walkTokens),s=V.parse(r,t)}catch(t){e=t}return t.highlight=i,e?n(e):n(null,s)};if(!i||i.length<3)return s();if(delete t.highlight,!r.length)return s();var o=0;return G.walkTokens(r,(function(e){\"code\"===e.type&&(o++,setTimeout((function(){i(e.text,e.lang,(function(t,n){if(t)return s(t);null!=n&&n!==e.text&&(e.text=n,e.escaped=!0),0==--o&&s()}))}),0))})),void(0===o&&s())}function a(e){if(e.message+=\"\\nPlease report this to https://github.com/markedjs/marked.\",t.silent)return\"<p>An error occurred:</p><pre>\"+d(e.message+\"\",!0)+\"</pre>\";throw e}try{var u=j.lex(e,t);if(t.walkTokens){if(t.async)return Promise.all(G.walkTokens(u,t.walkTokens)).then((function(){return V.parse(u,t)})).catch(a);G.walkTokens(u,t.walkTokens)}return V.parse(u,t)}catch(e){a(e)}}G.options=G.setOptions=function(e){return S(G.defaults,e),a(G.defaults),G},G.getDefaults=o,G.defaults=e.defaults,G.use=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r,i=S.apply(void 0,[{}].concat(t)),s=G.defaults.extensions||{renderers:{},childTokens:{}};t.forEach((function(e){if(e.extensions&&(r=!0,e.extensions.forEach((function(e){if(!e.name)throw new Error(\"extension name required\");if(e.renderer){var t=s.renderers?s.renderers[e.name]:null;s.renderers[e.name]=t?function(){for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];var s=e.renderer.apply(this,r);return!1===s&&(s=t.apply(this,r)),s}:e.renderer}if(e.tokenizer){if(!e.level||\"block\"!==e.level&&\"inline\"!==e.level)throw new Error(\"extension level must be 'block' or 'inline'\");s[e.level]?s[e.level].unshift(e.tokenizer):s[e.level]=[e.tokenizer],e.start&&(\"block\"===e.level?s.startBlock?s.startBlock.push(e.start):s.startBlock=[e.start]:\"inline\"===e.level&&(s.startInline?s.startInline.push(e.start):s.startInline=[e.start]))}e.childTokens&&(s.childTokens[e.name]=e.childTokens)}))),e.renderer&&function(){var t=G.defaults.renderer||new H,n=function(n){var r=t[n];t[n]=function(){for(var i=arguments.length,s=new Array(i),o=0;o<i;o++)s[o]=arguments[o];var a=e.renderer[n].apply(t,s);return!1===a&&(a=r.apply(t,s)),a}};for(var r in e.renderer)n(r);i.renderer=t}(),e.tokenizer&&function(){var t=G.defaults.tokenizer||new I,n=function(n){var r=t[n];t[n]=function(){for(var i=arguments.length,s=new Array(i),o=0;o<i;o++)s[o]=arguments[o];var a=e.tokenizer[n].apply(t,s);return!1===a&&(a=r.apply(t,s)),a}};for(var r in e.tokenizer)n(r);i.tokenizer=t}(),e.walkTokens){var t=G.defaults.walkTokens;i.walkTokens=function(n){var r=[];return r.push(e.walkTokens.call(this,n)),t&&(r=r.concat(t.call(this,n))),r}}r&&(i.extensions=s),G.setOptions(i)}))},G.walkTokens=function(e,t){for(var n,r=[],i=function(){var e=n.value;switch(r=r.concat(t.call(G,e)),e.type){case\"table\":for(var i,o=s(e.header);!(i=o()).done;){var a=i.value;r=r.concat(G.walkTokens(a.tokens,t))}for(var u,l=s(e.rows);!(u=l()).done;)for(var c,h=s(u.value);!(c=h()).done;){var p=c.value;r=r.concat(G.walkTokens(p.tokens,t))}break;case\"list\":r=r.concat(G.walkTokens(e.items,t));break;default:G.defaults.extensions&&G.defaults.extensions.childTokens&&G.defaults.extensions.childTokens[e.type]?G.defaults.extensions.childTokens[e.type].forEach((function(n){r=r.concat(G.walkTokens(e[n],t))})):e.tokens&&(r=r.concat(G.walkTokens(e.tokens,t)))}},o=s(e);!(n=o()).done;)i();return r},G.parseInline=function(e,t){if(null==e)throw new Error(\"marked.parseInline(): input parameter is undefined or null\");if(\"string\"!=typeof e)throw new Error(\"marked.parseInline(): input parameter is of type \"+Object.prototype.toString.call(e)+\", string expected\");L(t=S({},G.defaults,t||{}));try{var n=j.lexInline(e,t);return t.walkTokens&&G.walkTokens(n,t.walkTokens),V.parseInline(n,t)}catch(e){if(e.message+=\"\\nPlease report this to https://github.com/markedjs/marked.\",t.silent)return\"<p>An error occurred:</p><pre>\"+d(e.message+\"\",!0)+\"</pre>\";throw e}},G.Parser=V,G.parser=V.parse,G.Renderer=H,G.TextRenderer=U,G.Lexer=j,G.lexer=j.lex,G.Tokenizer=I,G.Slugger=q,G.parse=G;var K=G.options,Z=G.setOptions,W=G.use,J=G.walkTokens,Q=G.parseInline,X=G,Y=V.parse,ee=j.lex;e.Lexer=j,e.Parser=V,e.Renderer=H,e.Slugger=q,e.TextRenderer=U,e.Tokenizer=I,e.getDefaults=o,e.lexer=ee,e.marked=G,e.options=K,e.parse=X,e.parseInline=Q,e.parser=Y,e.setOptions=Z,e.use=W,e.walkTokens=J,Object.defineProperty(e,\"__esModule\",{value:!0})}(o);const a=e=>{const t=new RegExp(/\\[\\[([^|\\]]+)\\|?([^\\]]*)\\]\\]/,\"g\");return e.replace(t,((e,t,n)=>{const r=n||t,i=n?t:r,s=document.createElement(\"a\");return s.innerHTML=i,s.dataset.passageName=r,s.outerHTML}))};var u=class{constructor(e){const t=e.getAttribute(\"pid\"),n=e.getAttribute(\"name\");if(!t)throw new Error(`A passage (name: ${n}) is missing a pid!`);if(!n)throw new Error(`A passage with pid ${t} is missing a name!`);const r=e.getAttribute(\"tags\"),i=e.getAttribute(\"position\"),s=e.getAttribute(\"size\"),o=e.innerHTML,a=r?.split(\" \")||[],u={x:0,y:0};if(i){const e=i.split(\",\").map((e=>parseFloat(e)));u.x=e[0],u.y=e[1]}const l={width:100,height:100};if(s){const e=s.split(\",\").map((e=>parseFloat(e)));l.width=e[0],l.height=e[1]}this.pid=t,this.name=n,this.tags=a,this.position=u,this.size=l,this.rawContent=o}get richContent(){const e=a(this.rawContent),t=(n=e,[[\"&amp;\",\"&\"],[\"&lt;\",\"<\"],[\"&gt;\",\">\"],[\"&quot;\",'\"'],[\"&#x27;\",\"'\"],[\"&#x60;\",\"`\"]].forEach((([e,t])=>{n=n.replace(new RegExp(e,\"g\"),t)})),n);var n;return o.marked.parse(t)}};class l{constructor(e={},t={}){this.globalState=e,this.tempState=t,this.listeners=[]}addListener(e){this.listeners.push(e)}callListeners(){this.listeners.forEach((e=>{e(this.globalState,this.tempState)}))}get(e,t=!1){const n=e.split(\".\"),r=t||\"temp\"===n[0]||\"t\"===n[0];let i=this.globalState;if(r){if(\"temp\"===n[0]||\"t\"===n[0])return this.get(n.slice(1).join(\".\"));i=this.tempState}return n.reduce(((t,n)=>{if(Object.prototype.hasOwnProperty.call(t,n))return t[n];throw new Error(`Unable to get variable with key ${e}`)}),i)}set(e,t,n=!1){n?this.tempState[e]=t:this.globalState[e]=t,this.callListeners()}setTemp(e,t){this.set(e,t,!0)}clear(e,t=!1){e?t?delete this.tempState[e]:delete this.globalState[e]:t?this.tempState={}:this.globalState={},this.callListeners()}get combinedStateObject(){const e={...this.globalState,temp:{...this.tempState}};return e.t=e.temp,e}}var c=l;var h,p={};function f(e){return e&&e.__esModule?e:{default:e}}p.__esModule=!0;var d={};function g(e){return e&&e.__esModule?e:{default:e}}function m(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}d.__esModule=!0;var D,v,y,k,C,_,A,b,E,x={};function w(e){return e&&e.__esModule?e:{default:e}}e(x,\"__esModule\",(()=>D),(e=>D=e)),e(x,\"HandlebarsEnvironment\",(()=>v),(e=>v=e)),e(x,\"VERSION\",(()=>y),(e=>y=e)),e(x,\"COMPILER_REVISION\",(()=>k),(e=>k=e)),e(x,\"LAST_COMPATIBLE_COMPILER_REVISION\",(()=>C),(e=>C=e)),e(x,\"REVISION_CHANGES\",(()=>_),(e=>_=e)),e(x,\"log\",(()=>A),(e=>A=e)),e(x,\"createFrame\",(()=>b),(e=>b=e)),e(x,\"logger\",(()=>E),(e=>E=e)),D=!0,v=Me;var S,F,B,P,L,O,M,$,I,R,N,T={};e(T,\"__esModule\",(()=>S),(e=>S=e)),e(T,\"extend\",(()=>F),(e=>F=e)),e(T,\"indexOf\",(()=>B),(e=>B=e)),e(T,\"escapeExpression\",(()=>P),(e=>P=e)),e(T,\"isEmpty\",(()=>L),(e=>L=e)),e(T,\"createFrame\",(()=>O),(e=>O=e)),e(T,\"blockParams\",(()=>M),(e=>M=e)),e(T,\"appendContextPath\",(()=>$),(e=>$=e)),e(T,\"toString\",(()=>I),(e=>I=e)),e(T,\"isFunction\",(()=>R),(e=>R=e)),e(T,\"isArray\",(()=>N),(e=>N=e)),S=!0,F=q,B=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},P=function(e){if(\"string\"!=typeof e){if(e&&e.toHTML)return e.toHTML();if(null==e)return\"\";if(!e)return e+\"\";e=\"\"+e}return H.test(e)?e.replace(j,U):e},L=function(e){return!e&&0!==e||!(!K(e)||0!==e.length)},O=function(e){var t=q({},e);return t._parent=e,t},M=function(e,t){return e.path=t,e},$=function(e,t){return(e?e+\".\":\"\")+t};var z={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#x27;\",\"`\":\"&#x60;\",\"=\":\"&#x3D;\"},j=/[&<>\"'`=]/g,H=/[&<>\"'`=]/;function U(e){return z[e]}function q(e){for(var t=1;t<arguments.length;t++)for(var n in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],n)&&(e[n]=arguments[t][n]);return e}var V=Object.prototype.toString;I=V;var G=function(e){return\"function\"==typeof e};G(/x/)&&(R=G=function(e){return\"function\"==typeof e&&\"[object Function]\"===V.call(e)}),R=G;var K=Array.isArray||function(e){return!(!e||\"object\"!=typeof e)&&\"[object Array]\"===V.call(e)};N=K;var Z={__esModule:!0},W=[\"description\",\"fileName\",\"lineNumber\",\"endLineNumber\",\"message\",\"name\",\"number\",\"stack\"];function J(e,t){var n=t&&t.loc,r=void 0,i=void 0,s=void 0,o=void 0;n&&(r=n.start.line,i=n.end.line,s=n.start.column,o=n.end.column,e+=\" - \"+r+\":\"+s);for(var a=Error.prototype.constructor.call(this,e),u=0;u<W.length;u++)this[W[u]]=a[W[u]];Error.captureStackTrace&&Error.captureStackTrace(this,J);try{n&&(this.lineNumber=r,this.endLineNumber=i,Object.defineProperty?(Object.defineProperty(this,\"column\",{value:s,enumerable:!0}),Object.defineProperty(this,\"endColumn\",{value:o,enumerable:!0})):(this.column=s,this.endColumn=o))}catch(e){}}J.prototype=new Error,Z.default=J;var Q,X,Y=w(Z=Z.default);function ee(e){return e&&e.__esModule?e:{default:e}}Q=function(e){ne.default(e),oe.default(e),le.default(e),pe.default(e),de.default(e),me.default(e),ke.default(e)},X=function(e,t,n){e.helpers[t]&&(e.hooks[t]=e.helpers[t],n||delete e.helpers[t])};var te={__esModule:!0,default:function(e){e.registerHelper(\"blockHelperMissing\",(function(t,n){var r=n.inverse,i=n.fn;if(!0===t)return i(this);if(!1===t||null==t)return r(this);if(N(t))return t.length>0?(n.ids&&(n.ids=[n.name]),e.helpers.each(t,n)):r(this);if(n.data&&n.ids){var s=O(n.data);s.contextPath=$(n.data.contextPath,n.name),n={data:s}}return i(t,n)}))}},ne=ee(te=te.default),re={};re.__esModule=!0;var ie,se=(ie=Z)&&ie.__esModule?ie:{default:ie};re.default=function(e){e.registerHelper(\"each\",(function(e,t){if(!t)throw new se.default(\"Must pass iterator to #each\");var r,i=t.fn,s=t.inverse,o=0,a=\"\",u=void 0,l=void 0;function c(t,n,r){u&&(u.key=t,u.index=n,u.first=0===n,u.last=!!r,l&&(u.contextPath=l+t)),a+=i(e[t],{data:u,blockParams:M([e[t],t],[l+t,null])})}if(t.data&&t.ids&&(l=$(t.data.contextPath,t.ids[0])+\".\"),R(e)&&(e=e.call(this)),t.data&&(u=O(t.data)),e&&\"object\"==typeof e)if(N(e))for(var h=e.length;o<h;o++)o in e&&c(o,o,o===e.length-1);else if(n.Symbol&&e[n.Symbol.iterator]){for(var p=[],f=e[n.Symbol.iterator](),d=f.next();!d.done;d=f.next())p.push(d.value);for(h=(e=p).length;o<h;o++)c(o,o,o===e.length-1)}else r=void 0,Object.keys(e).forEach((function(e){void 0!==r&&c(r,o-1),r=e,o++})),void 0!==r&&c(r,o-1,!0);return 0===o&&(a=s(this)),a}))};var oe=ee(re=re.default),ae={};ae.__esModule=!0;var ue=function(e){return e&&e.__esModule?e:{default:e}}(Z);ae.default=function(e){e.registerHelper(\"helperMissing\",(function(){if(1!==arguments.length)throw new ue.default('Missing helper: \"'+arguments[arguments.length-1].name+'\"')}))};var le=ee(ae=ae.default),ce={};ce.__esModule=!0;var he=function(e){return e&&e.__esModule?e:{default:e}}(Z);ce.default=function(e){e.registerHelper(\"if\",(function(e,t){if(2!=arguments.length)throw new he.default(\"#if requires exactly one argument\");return R(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||L(e)?t.inverse(this):t.fn(this)})),e.registerHelper(\"unless\",(function(t,n){if(2!=arguments.length)throw new he.default(\"#unless requires exactly one argument\");return e.helpers.if.call(this,t,{fn:n.inverse,inverse:n.fn,hash:n.hash})}))};var pe=ee(ce=ce.default),fe={__esModule:!0,default:function(e){e.registerHelper(\"log\",(function(){for(var t=[void 0],n=arguments[arguments.length-1],r=0;r<arguments.length-1;r++)t.push(arguments[r]);var i=1;null!=n.hash.level?i=n.hash.level:n.data&&null!=n.data.level&&(i=n.data.level),t[0]=i,e.log.apply(e,t)}))}},de=ee(fe=fe.default),ge={__esModule:!0,default:function(e){e.registerHelper(\"lookup\",(function(e,t,n){return e?n.lookupProperty(e,t):e}))}},me=ee(ge=ge.default),De={};De.__esModule=!0;var ve=function(e){return e&&e.__esModule?e:{default:e}}(Z);De.default=function(e){e.registerHelper(\"with\",(function(e,t){if(2!=arguments.length)throw new ve.default(\"#with requires exactly one argument\");R(e)&&(e=e.call(this));var n=t.fn;if(L(e))return t.inverse(this);var r=t.data;return t.data&&t.ids&&((r=O(t.data)).contextPath=$(t.data.contextPath,t.ids[0])),n(e,{data:r,blockParams:M([e],[r&&r.contextPath])})}))};var ye,ke=ee(De=De.default);ye=function(e){_e.default(e)};var Ce={__esModule:!0,default:function(e){e.registerDecorator(\"inline\",(function(e,t,n,r){var i=e;return t.partials||(t.partials={},i=function(r,i){var s=n.partials;n.partials=F({},s,t.partials);var o=e(r,i);return n.partials=s,o}),t.partials[r.args[0]]=r.fn,i}))}},_e=function(e){return e&&e.__esModule?e:{default:e}}(Ce=Ce.default);var Ae={__esModule:!0},be={methodMap:[\"debug\",\"info\",\"warn\",\"error\"],level:\"info\",lookupLevel:function(e){if(\"string\"==typeof e){var t=B(be.methodMap,e.toLowerCase());e=t>=0?t:parseInt(e,10)}return e},log:function(e){if(e=be.lookupLevel(e),\"undefined\"!=typeof console&&be.lookupLevel(be.level)<=e){var t=be.methodMap[e];console[t]||(t=\"log\");for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];console[t].apply(console,r)}}};Ae.default=be;var Ee,xe,we,Se,Fe=w(Ae=Ae.default);Ee=function(e){var t=Object.create(null);t.constructor=!1,t.__defineGetter__=!1,t.__defineSetter__=!1,t.__lookupGetter__=!1;var n=Object.create(null);return n.__proto__=!1,{properties:{whitelist:Se(n,e.allowedProtoProperties),defaultValue:e.allowProtoPropertiesByDefault},methods:{whitelist:Se(t,e.allowedProtoMethods),defaultValue:e.allowProtoMethodsByDefault}}},xe=function(e,t,n){return Le(\"function\"==typeof e?t.methods:t.properties,n)},we=function(){Object.keys(Pe).forEach((function(e){delete Pe[e]}))},Se=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return F.apply(void 0,[Object.create(null)].concat(t))};var Be=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(Ae),Pe=Object.create(null);function Le(e,t){return void 0!==e.whitelist[t]?!0===e.whitelist[t]:void 0!==e.defaultValue?e.defaultValue:(function(e){!0!==Pe[e]&&(Pe[e]=!0,Be.log(\"error\",'Handlebars: Access has been denied to resolve the property \"'+e+'\" because it is not an \"own property\" of its parent.\\nYou can add a runtime option to disable the check or this warning:\\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details'))}(t),!1)}y=\"4.7.7\";k=8;C=7;_={1:\"<= 1.0.rc.2\",2:\"== 1.0.0-rc.3\",3:\"== 1.0.0-rc.4\",4:\"== 1.x.x\",5:\"== 2.0.0-alpha.x\",6:\">= 2.0.0-beta.1\",7:\">= 4.0.0 <4.3.0\",8:\">= 4.3.0\"};var Oe=\"[object Object]\";function Me(e,t,n){this.helpers=e||{},this.partials=t||{},this.decorators=n||{},Q(this),ye(this)}Me.prototype={constructor:Me,logger:Fe.default,log:Fe.default.log,registerHelper:function(e,t){if(I.call(e)===Oe){if(t)throw new Y.default(\"Arg not supported with multiple helpers\");F(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if(I.call(e)===Oe)F(this.partials,e);else{if(void 0===t)throw new Y.default('Attempting to register a partial called \"'+e+'\" as undefined');this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,t){if(I.call(e)===Oe){if(t)throw new Y.default(\"Arg not supported with multiple decorators\");F(this.decorators,e)}else this.decorators[e]=t},unregisterDecorator:function(e){delete this.decorators[e]},resetLoggedPropertyAccesses:function(){we()}};var $e=Fe.default.log;A=$e,b=O,E=Fe.default;var Ie=m(x),Re={};function Ne(e){this.string=e}Re.__esModule=!0,Ne.prototype.toString=Ne.prototype.toHTML=function(){return\"\"+this.string},Re.default=Ne;var Te,ze,je,He,Ue,qe,Ve,Ge=g(Re=Re.default),Ke=g(Z),Ze=m(T),We={};e(We,\"__esModule\",(()=>Te),(e=>Te=e)),e(We,\"checkRevision\",(()=>ze),(e=>ze=e)),e(We,\"template\",(()=>je),(e=>je=e)),e(We,\"wrapProgram\",(()=>He),(e=>He=e)),e(We,\"resolvePartial\",(()=>Ue),(e=>Ue=e)),e(We,\"invokePartial\",(()=>qe),(e=>qe=e)),e(We,\"noop\",(()=>Ve),(e=>Ve=e)),Te=!0,ze=function(e){var t=e&&e[0]||1,n=k;if(t>=C&&t<=k)return;if(t<C){var r=_[n],i=_[t];throw new Xe.default(\"Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (\"+r+\") or downgrade your runtime to an older version (\"+i+\").\")}throw new Xe.default(\"Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (\"+e[1]+\").\")},je=function(e,t){if(!t)throw new Xe.default(\"No environment passed to template\");if(!e||!e.main)throw new Xe.default(\"Unknown template object: \"+typeof e);e.main.decorator=e.main_d,t.VM.checkRevision(e.compiler);var n=e.compiler&&7===e.compiler[0];var r={strict:function(e,t,n){if(!e||!(t in e))throw new Xe.default('\"'+t+'\" not defined in '+e,{loc:n});return r.lookupProperty(e,t)},lookupProperty:function(e,t){var n=e[t];return null==n||Object.prototype.hasOwnProperty.call(e,t)||xe(n,r.protoAccessControl,t)?n:void 0},lookup:function(e,t){for(var n=e.length,i=0;i<n;i++){if(null!=(e[i]&&r.lookupProperty(e[i],t)))return e[i][t]}},lambda:function(e,t){return\"function\"==typeof e?e.call(t):e},escapeExpression:Qe.escapeExpression,invokePartial:function(n,r,i){i.hash&&(r=Qe.extend({},r,i.hash),i.ids&&(i.ids[0]=!0)),n=t.VM.resolvePartial.call(this,n,r,i);var s=Qe.extend({},i,{hooks:this.hooks,protoAccessControl:this.protoAccessControl}),o=t.VM.invokePartial.call(this,n,r,s);if(null==o&&t.compile&&(i.partials[i.name]=t.compile(n,e.compilerOptions,t),o=i.partials[i.name](r,s)),null!=o){if(i.indent){for(var a=o.split(\"\\n\"),u=0,l=a.length;u<l&&(a[u]||u+1!==l);u++)a[u]=i.indent+a[u];o=a.join(\"\\n\")}return o}throw new Xe.default(\"The partial \"+i.name+\" could not be compiled when running in runtime-only mode\")},fn:function(t){var n=e[t];return n.decorator=e[t+\"_d\"],n},programs:[],program:function(e,t,n,r,i){var s=this.programs[e],o=this.fn(e);return t||i||r||n?s=Ye(this,e,o,t,n,r,i):s||(s=this.programs[e]=Ye(this,e,o)),s},data:function(e,t){for(;e&&t--;)e=e._parent;return e},mergeIfNeeded:function(e,t){var n=e||t;return e&&t&&e!==t&&(n=Qe.extend({},t,e)),n},nullContext:Object.seal({}),noop:t.VM.noop,compilerInfo:e.compiler};function i(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=n.data;i._setup(n),!n.partial&&e.useData&&(s=tt(t,s));var o=void 0,a=e.useBlockParams?[]:void 0;function u(t){return\"\"+e.main(r,t,r.helpers,r.partials,s,a,o)}return e.useDepths&&(o=n.depths?t!=n.depths[0]?[t].concat(n.depths):n.depths:[t]),(u=nt(e.main,u,r,n.depths||[],s,a))(t,n)}return i.isTop=!0,i._setup=function(i){if(i.partial)r.protoAccessControl=i.protoAccessControl,r.helpers=i.helpers,r.partials=i.partials,r.decorators=i.decorators,r.hooks=i.hooks;else{var s=Qe.extend({},t.helpers,i.helpers);!function(e,t){Object.keys(e).forEach((function(n){var r=e[n];e[n]=function(e,t){var n=t.lookupProperty;return Je(e,(function(e){return Qe.extend({lookupProperty:n},e)}))}(r,t)}))}(s,r),r.helpers=s,e.usePartial&&(r.partials=r.mergeIfNeeded(i.partials,t.partials)),(e.usePartial||e.useDecorators)&&(r.decorators=Qe.extend({},t.decorators,i.decorators)),r.hooks={},r.protoAccessControl=Ee(i);var o=i.allowCallsToHelperMissing||n;X(r,\"helperMissing\",o),X(r,\"blockHelperMissing\",o)}},i._child=function(t,n,i,s){if(e.useBlockParams&&!i)throw new Xe.default(\"must pass block params\");if(e.useDepths&&!s)throw new Xe.default(\"must pass parent depths\");return Ye(r,t,e[t],n,0,i,s)},i},He=Ye,Ue=function(e,t,n){e?e.call||n.name||(n.name=e,e=n.partials[e]):e=\"@partial-block\"===n.name?n.data[\"partial-block\"]:n.partials[n.name];return e},qe=function(e,t,n){var r=n.data&&n.data[\"partial-block\"];n.partial=!0,n.ids&&(n.data.contextPath=n.ids[0]||n.data.contextPath);var i=void 0;n.fn&&n.fn!==et&&function(){n.data=b(n.data);var e=n.fn;i=n.data[\"partial-block\"]=function(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return n.data=b(n.data),n.data[\"partial-block\"]=r,e(t,n)},e.partials&&(n.partials=Qe.extend({},n.partials,e.partials))}();void 0===e&&i&&(e=i);if(void 0===e)throw new Xe.default(\"The partial \"+n.name+\" could not be found\");if(e instanceof Function)return e(t,n)},Ve=et;var Je,Qe=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(T),Xe=function(e){return e&&e.__esModule?e:{default:e}}(Z);function Ye(e,t,n,r,i,s,o){function a(t){var i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],a=o;return!o||t==o[0]||t===e.nullContext&&null===o[0]||(a=[t].concat(o)),n(e,t,e.helpers,e.partials,i.data||r,s&&[i.blockParams].concat(s),a)}return(a=nt(n,a,e,o,r,s)).program=t,a.depth=o?o.length:0,a.blockParams=i||0,a}function et(){return\"\"}function tt(e,t){return t&&\"root\"in t||((t=t?b(t):{}).root=e),t}function nt(e,t,n,r,i,s){if(e.decorator){var o={};t=e.decorator(t,o,n,r&&r[0],i,s,r),Qe.extend(t,o)}return t}Je=function(e,t){if(\"function\"!=typeof e)return e;return function(){return arguments[arguments.length-1]=t(arguments[arguments.length-1]),e.apply(this,arguments)}};var rt=m(We),it={__esModule:!0,default:function(e){var t=void 0!==n?n:window,r=t.Handlebars;e.noConflict=function(){return t.Handlebars===e&&(t.Handlebars=r),e}}},st=g(it=it.default);function ot(){var e=new Ie.HandlebarsEnvironment;return Ze.extend(e,Ie),e.SafeString=Ge.default,e.Exception=Ke.default,e.Utils=Ze,e.escapeExpression=Ze.escapeExpression,e.VM=rt,e.template=function(t){return rt.template(t,e)},e}var at=ot();at.create=ot,st.default(at),at.default=at,d.default=at;var ut=f(d=d.default),lt={__esModule:!0},ct={helpers:{helperExpression:function(e){return\"SubExpression\"===e.type||(\"MustacheStatement\"===e.type||\"BlockStatement\"===e.type)&&!!(e.params&&e.params.length||e.hash)},scopedId:function(e){return/^\\.|this\\b/.test(e.original)},simpleId:function(e){return 1===e.parts.length&&!ct.helpers.scopedId(e)&&!e.depth}}};lt.default=ct;var ht,pt,ft,dt=f(lt=lt.default);function gt(e){return e&&e.__esModule?e:{default:e}}ht=Xt,pt=function(e,t){var n=Xt(e,t);return new Ut.default(t).accept(n)};var mt={__esModule:!0},Dt=function(){var e={trace:function(){},yy:{},symbols_:{error:2,root:3,program:4,EOF:5,program_repetition0:6,statement:7,mustache:8,block:9,rawBlock:10,partial:11,partialBlock:12,content:13,COMMENT:14,CONTENT:15,openRawBlock:16,rawBlock_repetition0:17,END_RAW_BLOCK:18,OPEN_RAW_BLOCK:19,helperName:20,openRawBlock_repetition0:21,openRawBlock_option0:22,CLOSE_RAW_BLOCK:23,openBlock:24,block_option0:25,closeBlock:26,openInverse:27,block_option1:28,OPEN_BLOCK:29,openBlock_repetition0:30,openBlock_option0:31,openBlock_option1:32,CLOSE:33,OPEN_INVERSE:34,openInverse_repetition0:35,openInverse_option0:36,openInverse_option1:37,openInverseChain:38,OPEN_INVERSE_CHAIN:39,openInverseChain_repetition0:40,openInverseChain_option0:41,openInverseChain_option1:42,inverseAndProgram:43,INVERSE:44,inverseChain:45,inverseChain_option0:46,OPEN_ENDBLOCK:47,OPEN:48,mustache_repetition0:49,mustache_option0:50,OPEN_UNESCAPED:51,mustache_repetition1:52,mustache_option1:53,CLOSE_UNESCAPED:54,OPEN_PARTIAL:55,partialName:56,partial_repetition0:57,partial_option0:58,openPartialBlock:59,OPEN_PARTIAL_BLOCK:60,openPartialBlock_repetition0:61,openPartialBlock_option0:62,param:63,sexpr:64,OPEN_SEXPR:65,sexpr_repetition0:66,sexpr_option0:67,CLOSE_SEXPR:68,hash:69,hash_repetition_plus0:70,hashSegment:71,ID:72,EQUALS:73,blockParams:74,OPEN_BLOCK_PARAMS:75,blockParams_repetition_plus0:76,CLOSE_BLOCK_PARAMS:77,path:78,dataName:79,STRING:80,NUMBER:81,BOOLEAN:82,UNDEFINED:83,NULL:84,DATA:85,pathSegments:86,SEP:87,$accept:0,$end:1},terminals_:{2:\"error\",5:\"EOF\",14:\"COMMENT\",15:\"CONTENT\",18:\"END_RAW_BLOCK\",19:\"OPEN_RAW_BLOCK\",23:\"CLOSE_RAW_BLOCK\",29:\"OPEN_BLOCK\",33:\"CLOSE\",34:\"OPEN_INVERSE\",39:\"OPEN_INVERSE_CHAIN\",44:\"INVERSE\",47:\"OPEN_ENDBLOCK\",48:\"OPEN\",51:\"OPEN_UNESCAPED\",54:\"CLOSE_UNESCAPED\",55:\"OPEN_PARTIAL\",60:\"OPEN_PARTIAL_BLOCK\",65:\"OPEN_SEXPR\",68:\"CLOSE_SEXPR\",72:\"ID\",73:\"EQUALS\",75:\"OPEN_BLOCK_PARAMS\",77:\"CLOSE_BLOCK_PARAMS\",80:\"STRING\",81:\"NUMBER\",82:\"BOOLEAN\",83:\"UNDEFINED\",84:\"NULL\",85:\"DATA\",87:\"SEP\"},productions_:[0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,1],[10,3],[16,5],[9,4],[9,4],[24,6],[27,6],[38,6],[43,2],[45,3],[45,1],[26,3],[8,5],[8,5],[11,5],[12,3],[59,5],[63,1],[63,1],[64,5],[69,1],[71,3],[74,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[56,1],[56,1],[79,2],[78,1],[86,3],[86,1],[6,0],[6,2],[17,0],[17,2],[21,0],[21,2],[22,0],[22,1],[25,0],[25,1],[28,0],[28,1],[30,0],[30,2],[31,0],[31,1],[32,0],[32,1],[35,0],[35,2],[36,0],[36,1],[37,0],[37,1],[40,0],[40,2],[41,0],[41,1],[42,0],[42,1],[46,0],[46,1],[49,0],[49,2],[50,0],[50,1],[52,0],[52,2],[53,0],[53,1],[57,0],[57,2],[58,0],[58,1],[61,0],[61,2],[62,0],[62,1],[66,0],[66,2],[67,0],[67,1],[70,1],[70,2],[76,1],[76,2]],performAction:function(e,t,n,r,i,s,o){var a=s.length-1;switch(i){case 1:return s[a-1];case 2:this.$=r.prepareProgram(s[a]);break;case 3:case 4:case 5:case 6:case 7:case 8:case 20:case 27:case 28:case 33:case 34:case 40:case 41:this.$=s[a];break;case 9:this.$={type:\"CommentStatement\",value:r.stripComment(s[a]),strip:r.stripFlags(s[a],s[a]),loc:r.locInfo(this._$)};break;case 10:this.$={type:\"ContentStatement\",original:s[a],value:s[a],loc:r.locInfo(this._$)};break;case 11:this.$=r.prepareRawBlock(s[a-2],s[a-1],s[a],this._$);break;case 12:this.$={path:s[a-3],params:s[a-2],hash:s[a-1]};break;case 13:this.$=r.prepareBlock(s[a-3],s[a-2],s[a-1],s[a],!1,this._$);break;case 14:this.$=r.prepareBlock(s[a-3],s[a-2],s[a-1],s[a],!0,this._$);break;case 15:this.$={open:s[a-5],path:s[a-4],params:s[a-3],hash:s[a-2],blockParams:s[a-1],strip:r.stripFlags(s[a-5],s[a])};break;case 16:case 17:this.$={path:s[a-4],params:s[a-3],hash:s[a-2],blockParams:s[a-1],strip:r.stripFlags(s[a-5],s[a])};break;case 18:this.$={strip:r.stripFlags(s[a-1],s[a-1]),program:s[a]};break;case 19:var u=r.prepareBlock(s[a-2],s[a-1],s[a],s[a],!1,this._$),l=r.prepareProgram([u],s[a-1].loc);l.chained=!0,this.$={strip:s[a-2].strip,program:l,chain:!0};break;case 21:this.$={path:s[a-1],strip:r.stripFlags(s[a-2],s[a])};break;case 22:case 23:this.$=r.prepareMustache(s[a-3],s[a-2],s[a-1],s[a-4],r.stripFlags(s[a-4],s[a]),this._$);break;case 24:this.$={type:\"PartialStatement\",name:s[a-3],params:s[a-2],hash:s[a-1],indent:\"\",strip:r.stripFlags(s[a-4],s[a]),loc:r.locInfo(this._$)};break;case 25:this.$=r.preparePartialBlock(s[a-2],s[a-1],s[a],this._$);break;case 26:this.$={path:s[a-3],params:s[a-2],hash:s[a-1],strip:r.stripFlags(s[a-4],s[a])};break;case 29:this.$={type:\"SubExpression\",path:s[a-3],params:s[a-2],hash:s[a-1],loc:r.locInfo(this._$)};break;case 30:this.$={type:\"Hash\",pairs:s[a],loc:r.locInfo(this._$)};break;case 31:this.$={type:\"HashPair\",key:r.id(s[a-2]),value:s[a],loc:r.locInfo(this._$)};break;case 32:this.$=r.id(s[a-1]);break;case 35:this.$={type:\"StringLiteral\",value:s[a],original:s[a],loc:r.locInfo(this._$)};break;case 36:this.$={type:\"NumberLiteral\",value:Number(s[a]),original:Number(s[a]),loc:r.locInfo(this._$)};break;case 37:this.$={type:\"BooleanLiteral\",value:\"true\"===s[a],original:\"true\"===s[a],loc:r.locInfo(this._$)};break;case 38:this.$={type:\"UndefinedLiteral\",original:void 0,value:void 0,loc:r.locInfo(this._$)};break;case 39:this.$={type:\"NullLiteral\",original:null,value:null,loc:r.locInfo(this._$)};break;case 42:this.$=r.preparePath(!0,s[a],this._$);break;case 43:this.$=r.preparePath(!1,s[a],this._$);break;case 44:s[a-2].push({part:r.id(s[a]),original:s[a],separator:s[a-1]}),this.$=s[a-2];break;case 45:this.$=[{part:r.id(s[a]),original:s[a]}];break;case 46:case 48:case 50:case 58:case 64:case 70:case 78:case 82:case 86:case 90:case 94:this.$=[];break;case 47:case 49:case 51:case 59:case 65:case 71:case 79:case 83:case 87:case 91:case 95:case 99:case 101:s[a-1].push(s[a]);break;case 98:case 100:this.$=[s[a]]}},table:[{3:1,4:2,5:[2,46],6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{1:[3]},{5:[1,4]},{5:[2,2],7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:[1,12],15:[1,20],16:17,19:[1,23],24:15,27:16,29:[1,21],34:[1,22],39:[2,2],44:[2,2],47:[2,2],48:[1,13],51:[1,14],55:[1,18],59:19,60:[1,24]},{1:[2,1]},{5:[2,47],14:[2,47],15:[2,47],19:[2,47],29:[2,47],34:[2,47],39:[2,47],44:[2,47],47:[2,47],48:[2,47],51:[2,47],55:[2,47],60:[2,47]},{5:[2,3],14:[2,3],15:[2,3],19:[2,3],29:[2,3],34:[2,3],39:[2,3],44:[2,3],47:[2,3],48:[2,3],51:[2,3],55:[2,3],60:[2,3]},{5:[2,4],14:[2,4],15:[2,4],19:[2,4],29:[2,4],34:[2,4],39:[2,4],44:[2,4],47:[2,4],48:[2,4],51:[2,4],55:[2,4],60:[2,4]},{5:[2,5],14:[2,5],15:[2,5],19:[2,5],29:[2,5],34:[2,5],39:[2,5],44:[2,5],47:[2,5],48:[2,5],51:[2,5],55:[2,5],60:[2,5]},{5:[2,6],14:[2,6],15:[2,6],19:[2,6],29:[2,6],34:[2,6],39:[2,6],44:[2,6],47:[2,6],48:[2,6],51:[2,6],55:[2,6],60:[2,6]},{5:[2,7],14:[2,7],15:[2,7],19:[2,7],29:[2,7],34:[2,7],39:[2,7],44:[2,7],47:[2,7],48:[2,7],51:[2,7],55:[2,7],60:[2,7]},{5:[2,8],14:[2,8],15:[2,8],19:[2,8],29:[2,8],34:[2,8],39:[2,8],44:[2,8],47:[2,8],48:[2,8],51:[2,8],55:[2,8],60:[2,8]},{5:[2,9],14:[2,9],15:[2,9],19:[2,9],29:[2,9],34:[2,9],39:[2,9],44:[2,9],47:[2,9],48:[2,9],51:[2,9],55:[2,9],60:[2,9]},{20:25,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:36,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:37,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{4:38,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{15:[2,48],17:39,18:[2,48]},{20:41,56:40,64:42,65:[1,43],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:44,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{5:[2,10],14:[2,10],15:[2,10],18:[2,10],19:[2,10],29:[2,10],34:[2,10],39:[2,10],44:[2,10],47:[2,10],48:[2,10],51:[2,10],55:[2,10],60:[2,10]},{20:45,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:46,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:47,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:41,56:48,64:42,65:[1,43],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[2,78],49:49,65:[2,78],72:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78]},{23:[2,33],33:[2,33],54:[2,33],65:[2,33],68:[2,33],72:[2,33],75:[2,33],80:[2,33],81:[2,33],82:[2,33],83:[2,33],84:[2,33],85:[2,33]},{23:[2,34],33:[2,34],54:[2,34],65:[2,34],68:[2,34],72:[2,34],75:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34]},{23:[2,35],33:[2,35],54:[2,35],65:[2,35],68:[2,35],72:[2,35],75:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35]},{23:[2,36],33:[2,36],54:[2,36],65:[2,36],68:[2,36],72:[2,36],75:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36]},{23:[2,37],33:[2,37],54:[2,37],65:[2,37],68:[2,37],72:[2,37],75:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37]},{23:[2,38],33:[2,38],54:[2,38],65:[2,38],68:[2,38],72:[2,38],75:[2,38],80:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38]},{23:[2,39],33:[2,39],54:[2,39],65:[2,39],68:[2,39],72:[2,39],75:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39]},{23:[2,43],33:[2,43],54:[2,43],65:[2,43],68:[2,43],72:[2,43],75:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],87:[1,50]},{72:[1,35],86:51},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{52:52,54:[2,82],65:[2,82],72:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82]},{25:53,38:55,39:[1,57],43:56,44:[1,58],45:54,47:[2,54]},{28:59,43:60,44:[1,58],47:[2,56]},{13:62,15:[1,20],18:[1,61]},{33:[2,86],57:63,65:[2,86],72:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86]},{33:[2,40],65:[2,40],72:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40]},{33:[2,41],65:[2,41],72:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41]},{20:64,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:65,47:[1,66]},{30:67,33:[2,58],65:[2,58],72:[2,58],75:[2,58],80:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58]},{33:[2,64],35:68,65:[2,64],72:[2,64],75:[2,64],80:[2,64],81:[2,64],82:[2,64],83:[2,64],84:[2,64],85:[2,64]},{21:69,23:[2,50],65:[2,50],72:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50]},{33:[2,90],61:70,65:[2,90],72:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90]},{20:74,33:[2,80],50:71,63:72,64:75,65:[1,43],69:73,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{72:[1,79]},{23:[2,42],33:[2,42],54:[2,42],65:[2,42],68:[2,42],72:[2,42],75:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],87:[1,50]},{20:74,53:80,54:[2,84],63:81,64:75,65:[1,43],69:82,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:83,47:[1,66]},{47:[2,55]},{4:84,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{47:[2,20]},{20:85,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:86,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{26:87,47:[1,66]},{47:[2,57]},{5:[2,11],14:[2,11],15:[2,11],19:[2,11],29:[2,11],34:[2,11],39:[2,11],44:[2,11],47:[2,11],48:[2,11],51:[2,11],55:[2,11],60:[2,11]},{15:[2,49],18:[2,49]},{20:74,33:[2,88],58:88,63:89,64:75,65:[1,43],69:90,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{65:[2,94],66:91,68:[2,94],72:[2,94],80:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94]},{5:[2,25],14:[2,25],15:[2,25],19:[2,25],29:[2,25],34:[2,25],39:[2,25],44:[2,25],47:[2,25],48:[2,25],51:[2,25],55:[2,25],60:[2,25]},{20:92,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,31:93,33:[2,60],63:94,64:75,65:[1,43],69:95,70:76,71:77,72:[1,78],75:[2,60],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,33:[2,66],36:96,63:97,64:75,65:[1,43],69:98,70:76,71:77,72:[1,78],75:[2,66],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,22:99,23:[2,52],63:100,64:75,65:[1,43],69:101,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,33:[2,92],62:102,63:103,64:75,65:[1,43],69:104,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,105]},{33:[2,79],65:[2,79],72:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79]},{33:[2,81]},{23:[2,27],33:[2,27],54:[2,27],65:[2,27],68:[2,27],72:[2,27],75:[2,27],80:[2,27],81:[2,27],82:[2,27],83:[2,27],84:[2,27],85:[2,27]},{23:[2,28],33:[2,28],54:[2,28],65:[2,28],68:[2,28],72:[2,28],75:[2,28],80:[2,28],81:[2,28],82:[2,28],83:[2,28],84:[2,28],85:[2,28]},{23:[2,30],33:[2,30],54:[2,30],68:[2,30],71:106,72:[1,107],75:[2,30]},{23:[2,98],33:[2,98],54:[2,98],68:[2,98],72:[2,98],75:[2,98]},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],73:[1,108],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{23:[2,44],33:[2,44],54:[2,44],65:[2,44],68:[2,44],72:[2,44],75:[2,44],80:[2,44],81:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],87:[2,44]},{54:[1,109]},{54:[2,83],65:[2,83],72:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83]},{54:[2,85]},{5:[2,13],14:[2,13],15:[2,13],19:[2,13],29:[2,13],34:[2,13],39:[2,13],44:[2,13],47:[2,13],48:[2,13],51:[2,13],55:[2,13],60:[2,13]},{38:55,39:[1,57],43:56,44:[1,58],45:111,46:110,47:[2,76]},{33:[2,70],40:112,65:[2,70],72:[2,70],75:[2,70],80:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70]},{47:[2,18]},{5:[2,14],14:[2,14],15:[2,14],19:[2,14],29:[2,14],34:[2,14],39:[2,14],44:[2,14],47:[2,14],48:[2,14],51:[2,14],55:[2,14],60:[2,14]},{33:[1,113]},{33:[2,87],65:[2,87],72:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87]},{33:[2,89]},{20:74,63:115,64:75,65:[1,43],67:114,68:[2,96],69:116,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,117]},{32:118,33:[2,62],74:119,75:[1,120]},{33:[2,59],65:[2,59],72:[2,59],75:[2,59],80:[2,59],81:[2,59],82:[2,59],83:[2,59],84:[2,59],85:[2,59]},{33:[2,61],75:[2,61]},{33:[2,68],37:121,74:122,75:[1,120]},{33:[2,65],65:[2,65],72:[2,65],75:[2,65],80:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[2,65]},{33:[2,67],75:[2,67]},{23:[1,123]},{23:[2,51],65:[2,51],72:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51]},{23:[2,53]},{33:[1,124]},{33:[2,91],65:[2,91],72:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91]},{33:[2,93]},{5:[2,22],14:[2,22],15:[2,22],19:[2,22],29:[2,22],34:[2,22],39:[2,22],44:[2,22],47:[2,22],48:[2,22],51:[2,22],55:[2,22],60:[2,22]},{23:[2,99],33:[2,99],54:[2,99],68:[2,99],72:[2,99],75:[2,99]},{73:[1,108]},{20:74,63:125,64:75,65:[1,43],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,23],14:[2,23],15:[2,23],19:[2,23],29:[2,23],34:[2,23],39:[2,23],44:[2,23],47:[2,23],48:[2,23],51:[2,23],55:[2,23],60:[2,23]},{47:[2,19]},{47:[2,77]},{20:74,33:[2,72],41:126,63:127,64:75,65:[1,43],69:128,70:76,71:77,72:[1,78],75:[2,72],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,24],14:[2,24],15:[2,24],19:[2,24],29:[2,24],34:[2,24],39:[2,24],44:[2,24],47:[2,24],48:[2,24],51:[2,24],55:[2,24],60:[2,24]},{68:[1,129]},{65:[2,95],68:[2,95],72:[2,95],80:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95]},{68:[2,97]},{5:[2,21],14:[2,21],15:[2,21],19:[2,21],29:[2,21],34:[2,21],39:[2,21],44:[2,21],47:[2,21],48:[2,21],51:[2,21],55:[2,21],60:[2,21]},{33:[1,130]},{33:[2,63]},{72:[1,132],76:131},{33:[1,133]},{33:[2,69]},{15:[2,12],18:[2,12]},{14:[2,26],15:[2,26],19:[2,26],29:[2,26],34:[2,26],47:[2,26],48:[2,26],51:[2,26],55:[2,26],60:[2,26]},{23:[2,31],33:[2,31],54:[2,31],68:[2,31],72:[2,31],75:[2,31]},{33:[2,74],42:134,74:135,75:[1,120]},{33:[2,71],65:[2,71],72:[2,71],75:[2,71],80:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71]},{33:[2,73],75:[2,73]},{23:[2,29],33:[2,29],54:[2,29],65:[2,29],68:[2,29],72:[2,29],75:[2,29],80:[2,29],81:[2,29],82:[2,29],83:[2,29],84:[2,29],85:[2,29]},{14:[2,15],15:[2,15],19:[2,15],29:[2,15],34:[2,15],39:[2,15],44:[2,15],47:[2,15],48:[2,15],51:[2,15],55:[2,15],60:[2,15]},{72:[1,137],77:[1,136]},{72:[2,100],77:[2,100]},{14:[2,16],15:[2,16],19:[2,16],29:[2,16],34:[2,16],44:[2,16],47:[2,16],48:[2,16],51:[2,16],55:[2,16],60:[2,16]},{33:[1,138]},{33:[2,75]},{33:[2,32]},{72:[2,101],77:[2,101]},{14:[2,17],15:[2,17],19:[2,17],29:[2,17],34:[2,17],39:[2,17],44:[2,17],47:[2,17],48:[2,17],51:[2,17],55:[2,17],60:[2,17]}],defaultActions:{4:[2,1],54:[2,55],56:[2,20],60:[2,57],73:[2,81],82:[2,85],86:[2,18],90:[2,89],101:[2,53],104:[2,93],110:[2,19],111:[2,77],116:[2,97],119:[2,63],122:[2,69],135:[2,75],136:[2,32]},parseError:function(e,t){throw new Error(e)},parse:function(e){var t=this,n=[0],r=[null],i=[],s=this.table,o=\"\",a=0,u=0,l=0;this.lexer.setInput(e),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,this.yy.parser=this,void 0===this.lexer.yylloc&&(this.lexer.yylloc={});var c=this.lexer.yylloc;i.push(c);var h=this.lexer.options&&this.lexer.options.ranges;\"function\"==typeof this.yy.parseError&&(this.parseError=this.yy.parseError);for(var p,f,d,g,m,D,v,y,k,C,_={};;){if(d=n[n.length-1],this.defaultActions[d]?g=this.defaultActions[d]:(null==p&&(C=void 0,\"number\"!=typeof(C=t.lexer.lex()||1)&&(C=t.symbols_[C]||C),p=C),g=s[d]&&s[d][p]),void 0===g||!g.length||!g[0]){var A=\"\";if(!l){for(D in k=[],s[d])this.terminals_[D]&&D>2&&k.push(\"'\"+this.terminals_[D]+\"'\");A=this.lexer.showPosition?\"Parse error on line \"+(a+1)+\":\\n\"+this.lexer.showPosition()+\"\\nExpecting \"+k.join(\", \")+\", got '\"+(this.terminals_[p]||p)+\"'\":\"Parse error on line \"+(a+1)+\": Unexpected \"+(1==p?\"end of input\":\"'\"+(this.terminals_[p]||p)+\"'\"),this.parseError(A,{text:this.lexer.match,token:this.terminals_[p]||p,line:this.lexer.yylineno,loc:c,expected:k})}}if(g[0]instanceof Array&&g.length>1)throw new Error(\"Parse Error: multiple actions possible at state: \"+d+\", token: \"+p);switch(g[0]){case 1:n.push(p),r.push(this.lexer.yytext),i.push(this.lexer.yylloc),n.push(g[1]),p=null,f?(p=f,f=null):(u=this.lexer.yyleng,o=this.lexer.yytext,a=this.lexer.yylineno,c=this.lexer.yylloc,l>0&&l--);break;case 2:if(v=this.productions_[g[1]][1],_.$=r[r.length-v],_._$={first_line:i[i.length-(v||1)].first_line,last_line:i[i.length-1].last_line,first_column:i[i.length-(v||1)].first_column,last_column:i[i.length-1].last_column},h&&(_._$.range=[i[i.length-(v||1)].range[0],i[i.length-1].range[1]]),void 0!==(m=this.performAction.call(_,o,u,a,this.yy,g[1],r,i)))return m;v&&(n=n.slice(0,-1*v*2),r=r.slice(0,-1*v),i=i.slice(0,-1*v)),n.push(this.productions_[g[1]][0]),r.push(_.$),i.push(_._$),y=s[n[n.length-2]][n[n.length-1]],n.push(y);break;case 3:return!0}}return!0}},t=function(){var e={EOF:1,parseError:function(e,t){if(!this.yy.parser)throw new Error(e);this.yy.parser.parseError(e,t)},setInput:function(e){return this._input=e,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match=\"\",this.conditionStack=[\"INITIAL\"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];return this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e,e.match(/(?:\\r\\n?|\\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,n=e.split(/(?:\\r\\n?|\\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t-1),this.offset-=t;var r=this.match.split(/(?:\\r\\n?|\\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),n.length-1&&(this.yylineno-=n.length-1);var i=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:n?(n.length===r.length?this.yylloc.first_column:0)+r[r.length-n.length].length-n[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[i[0],i[0]+this.yyleng-t]),this},more:function(){return this._more=!0,this},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?\"...\":\"\")+e.substr(-20).replace(/\\n/g,\"\")},upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?\"...\":\"\")).replace(/\\n/g,\"\")},showPosition:function(){var e=this.pastInput(),t=new Array(e.length+1).join(\"-\");return e+this.upcomingInput()+\"\\n\"+t+\"^\"},next:function(){if(this.done)return this.EOF;var e,t,n,r,i;this._input||(this.done=!0),this._more||(this.yytext=\"\",this.match=\"\");for(var s=this._currentRules(),o=0;o<s.length&&(!(n=this._input.match(this.rules[s[o]]))||t&&!(n[0].length>t[0].length)||(t=n,r=o,this.options.flex));o++);return t?((i=t[0].match(/(?:\\r\\n?|\\n).*/g))&&(this.yylineno+=i.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:i?i[i.length-1].length-i[i.length-1].match(/\\r?\\n?/)[0].length:this.yylloc.last_column+t[0].length},this.yytext+=t[0],this.match+=t[0],this.matches=t,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(t[0].length),this.matched+=t[0],e=this.performAction.call(this,this.yy,this,s[r],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),e||void 0):\"\"===this._input?this.EOF:this.parseError(\"Lexical error on line \"+(this.yylineno+1)+\". Unrecognized text.\\n\"+this.showPosition(),{text:\"\",token:null,line:this.yylineno})},lex:function(){var e=this.next();return void 0!==e?e:this.lex()},begin:function(e){this.conditionStack.push(e)},popState:function(){return this.conditionStack.pop()},_currentRules:function(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function(){return this.conditionStack[this.conditionStack.length-2]},pushState:function(e){this.begin(e)},options:{},performAction:function(e,t,n,r){function i(e,n){return t.yytext=t.yytext.substring(e,t.yyleng-n+e)}switch(n){case 0:if(\"\\\\\\\\\"===t.yytext.slice(-2)?(i(0,1),this.begin(\"mu\")):\"\\\\\"===t.yytext.slice(-1)?(i(0,1),this.begin(\"emu\")):this.begin(\"mu\"),t.yytext)return 15;break;case 1:case 5:return 15;case 2:return this.popState(),15;case 3:return this.begin(\"raw\"),15;case 4:return this.popState(),\"raw\"===this.conditionStack[this.conditionStack.length-1]?15:(i(5,9),\"END_RAW_BLOCK\");case 6:case 22:return this.popState(),14;case 7:return 65;case 8:return 68;case 9:return 19;case 10:return this.popState(),this.begin(\"raw\"),23;case 11:return 55;case 12:return 60;case 13:return 29;case 14:return 47;case 15:case 16:return this.popState(),44;case 17:return 34;case 18:return 39;case 19:return 51;case 20:case 23:return 48;case 21:this.unput(t.yytext),this.popState(),this.begin(\"com\");break;case 24:return 73;case 25:case 26:case 41:return 72;case 27:return 87;case 28:break;case 29:return this.popState(),54;case 30:return this.popState(),33;case 31:return t.yytext=i(1,2).replace(/\\\\\"/g,'\"'),80;case 32:return t.yytext=i(1,2).replace(/\\\\'/g,\"'\"),80;case 33:return 85;case 34:case 35:return 82;case 36:return 83;case 37:return 84;case 38:return 81;case 39:return 75;case 40:return 77;case 42:return t.yytext=t.yytext.replace(/\\\\([\\\\\\]])/g,\"$1\"),72;case 43:return\"INVALID\";case 44:return 5}},rules:[/^(?:[^\\x00]*?(?=(\\{\\{)))/,/^(?:[^\\x00]+)/,/^(?:[^\\x00]{2,}?(?=(\\{\\{|\\\\\\{\\{|\\\\\\\\\\{\\{|$)))/,/^(?:\\{\\{\\{\\{(?=[^\\/]))/,/^(?:\\{\\{\\{\\{\\/[^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=[=}\\s\\/.])\\}\\}\\}\\})/,/^(?:[^\\x00]+?(?=(\\{\\{\\{\\{)))/,/^(?:[\\s\\S]*?--(~)?\\}\\})/,/^(?:\\()/,/^(?:\\))/,/^(?:\\{\\{\\{\\{)/,/^(?:\\}\\}\\}\\})/,/^(?:\\{\\{(~)?>)/,/^(?:\\{\\{(~)?#>)/,/^(?:\\{\\{(~)?#\\*?)/,/^(?:\\{\\{(~)?\\/)/,/^(?:\\{\\{(~)?\\^\\s*(~)?\\}\\})/,/^(?:\\{\\{(~)?\\s*else\\s*(~)?\\}\\})/,/^(?:\\{\\{(~)?\\^)/,/^(?:\\{\\{(~)?\\s*else\\b)/,/^(?:\\{\\{(~)?\\{)/,/^(?:\\{\\{(~)?&)/,/^(?:\\{\\{(~)?!--)/,/^(?:\\{\\{(~)?![\\s\\S]*?\\}\\})/,/^(?:\\{\\{(~)?\\*?)/,/^(?:=)/,/^(?:\\.\\.)/,/^(?:\\.(?=([=~}\\s\\/.)|])))/,/^(?:[\\/.])/,/^(?:\\s+)/,/^(?:\\}(~)?\\}\\})/,/^(?:(~)?\\}\\})/,/^(?:\"(\\\\[\"]|[^\"])*\")/,/^(?:'(\\\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\\s)])))/,/^(?:false(?=([~}\\s)])))/,/^(?:undefined(?=([~}\\s)])))/,/^(?:null(?=([~}\\s)])))/,/^(?:-?[0-9]+(?:\\.[0-9]+)?(?=([~}\\s)])))/,/^(?:as\\s+\\|)/,/^(?:\\|)/,/^(?:([^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=([=~}\\s\\/.)|]))))/,/^(?:\\[(\\\\\\]|[^\\]])*\\])/,/^(?:.)/,/^(?:$)/],conditions:{mu:{rules:[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],inclusive:!1},emu:{rules:[2],inclusive:!1},com:{rules:[6],inclusive:!1},raw:{rules:[3,4,5],inclusive:!1},INITIAL:{rules:[0,1,44],inclusive:!0}}};return e}();function n(){this.yy={}}return e.lexer=t,n.prototype=e,e.Parser=n,new n}();mt.default=Dt;var vt=gt(mt=mt.default),yt={};yt.__esModule=!0;var kt={};kt.__esModule=!0;var Ct=function(e){return e&&e.__esModule?e:{default:e}}(Z);function _t(){this.parents=[]}function At(e){this.acceptRequired(e,\"path\"),this.acceptArray(e.params),this.acceptKey(e,\"hash\")}function bt(e){At.call(this,e),this.acceptKey(e,\"program\"),this.acceptKey(e,\"inverse\")}function Et(e){this.acceptRequired(e,\"name\"),this.acceptArray(e.params),this.acceptKey(e,\"hash\")}_t.prototype={constructor:_t,mutating:!1,acceptKey:function(e,t){var n=this.accept(e[t]);if(this.mutating){if(n&&!_t.prototype[n.type])throw new Ct.default('Unexpected node type \"'+n.type+'\" found when accepting '+t+\" on \"+e.type);e[t]=n}},acceptRequired:function(e,t){if(this.acceptKey(e,t),!e[t])throw new Ct.default(e.type+\" requires \"+t)},acceptArray:function(e){for(var t=0,n=e.length;t<n;t++)this.acceptKey(e,t),e[t]||(e.splice(t,1),t--,n--)},accept:function(e){if(e){if(!this[e.type])throw new Ct.default(\"Unknown type: \"+e.type,e);this.current&&this.parents.unshift(this.current),this.current=e;var t=this[e.type](e);return this.current=this.parents.shift(),!this.mutating||t?t:!1!==t?e:void 0}},Program:function(e){this.acceptArray(e.body)},MustacheStatement:At,Decorator:At,BlockStatement:bt,DecoratorBlock:bt,PartialStatement:Et,PartialBlockStatement:function(e){Et.call(this,e),this.acceptKey(e,\"program\")},ContentStatement:function(){},CommentStatement:function(){},SubExpression:At,PathExpression:function(){},StringLiteral:function(){},NumberLiteral:function(){},BooleanLiteral:function(){},UndefinedLiteral:function(){},NullLiteral:function(){},Hash:function(e){this.acceptArray(e.pairs)},HashPair:function(e){this.acceptRequired(e,\"value\")}},kt.default=_t;var xt=function(e){return e&&e.__esModule?e:{default:e}}(kt=kt.default);function wt(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.options=e}function St(e,t,n){void 0===t&&(t=e.length);var r=e[t-1],i=e[t-2];return r?\"ContentStatement\"===r.type?(i||!n?/\\r?\\n\\s*?$/:/(^|\\r?\\n)\\s*?$/).test(r.original):void 0:n}function Ft(e,t,n){void 0===t&&(t=-1);var r=e[t+1],i=e[t+2];return r?\"ContentStatement\"===r.type?(i||!n?/^\\s*?\\r?\\n/:/^\\s*?(\\r?\\n|$)/).test(r.original):void 0:n}function Bt(e,t,n){var r=e[null==t?0:t+1];if(r&&\"ContentStatement\"===r.type&&(n||!r.rightStripped)){var i=r.value;r.value=r.value.replace(n?/^\\s+/:/^[ \\t]*\\r?\\n?/,\"\"),r.rightStripped=r.value!==i}}function Pt(e,t,n){var r=e[null==t?e.length-1:t-1];if(r&&\"ContentStatement\"===r.type&&(n||!r.leftStripped)){var i=r.value;return r.value=r.value.replace(n?/\\s+$/:/[ \\t]+$/,\"\"),r.leftStripped=r.value!==i,r.leftStripped}}wt.prototype=new xt.default,wt.prototype.Program=function(e){var t=!this.options.ignoreStandalone,n=!this.isRootSeen;this.isRootSeen=!0;for(var r=e.body,i=0,s=r.length;i<s;i++){var o=r[i],a=this.accept(o);if(a){var u=St(r,i,n),l=Ft(r,i,n),c=a.openStandalone&&u,h=a.closeStandalone&&l,p=a.inlineStandalone&&u&&l;a.close&&Bt(r,i,!0),a.open&&Pt(r,i,!0),t&&p&&(Bt(r,i),Pt(r,i)&&\"PartialStatement\"===o.type&&(o.indent=/([ \\t]+$)/.exec(r[i-1].original)[1])),t&&c&&(Bt((o.program||o.inverse).body),Pt(r,i)),t&&h&&(Bt(r,i),Pt((o.inverse||o.program).body))}}return e},wt.prototype.BlockStatement=wt.prototype.DecoratorBlock=wt.prototype.PartialBlockStatement=function(e){this.accept(e.program),this.accept(e.inverse);var t=e.program||e.inverse,n=e.program&&e.inverse,r=n,i=n;if(n&&n.chained)for(r=n.body[0].program;i.chained;)i=i.body[i.body.length-1].program;var s={open:e.openStrip.open,close:e.closeStrip.close,openStandalone:Ft(t.body),closeStandalone:St((r||t).body)};if(e.openStrip.close&&Bt(t.body,null,!0),n){var o=e.inverseStrip;o.open&&Pt(t.body,null,!0),o.close&&Bt(r.body,null,!0),e.closeStrip.open&&Pt(i.body,null,!0),!this.options.ignoreStandalone&&St(t.body)&&Ft(r.body)&&(Pt(t.body),Bt(r.body))}else e.closeStrip.open&&Pt(t.body,null,!0);return s},wt.prototype.Decorator=wt.prototype.MustacheStatement=function(e){return e.strip},wt.prototype.PartialStatement=wt.prototype.CommentStatement=function(e){var t=e.strip||{};return{inlineStandalone:!0,open:t.open,close:t.close}},yt.default=wt;var Lt,Ot,Mt,$t,It,Rt,Nt,Tt,zt,jt,Ht,Ut=gt(yt=yt.default),qt={};e(qt,\"__esModule\",(()=>Lt),(e=>Lt=e)),e(qt,\"SourceLocation\",(()=>Ot),(e=>Ot=e)),e(qt,\"id\",(()=>Mt),(e=>Mt=e)),e(qt,\"stripFlags\",(()=>$t),(e=>$t=e)),e(qt,\"stripComment\",(()=>It),(e=>It=e)),e(qt,\"preparePath\",(()=>Rt),(e=>Rt=e)),e(qt,\"prepareMustache\",(()=>Nt),(e=>Nt=e)),e(qt,\"prepareRawBlock\",(()=>Tt),(e=>Tt=e)),e(qt,\"prepareBlock\",(()=>zt),(e=>zt=e)),e(qt,\"prepareProgram\",(()=>jt),(e=>jt=e)),e(qt,\"preparePartialBlock\",(()=>Ht),(e=>Ht=e)),Lt=!0,Ot=function(e,t){this.source=e,this.start={line:t.first_line,column:t.first_column},this.end={line:t.last_line,column:t.last_column}},Mt=function(e){return/^\\[.*\\]$/.test(e)?e.substring(1,e.length-1):e},$t=function(e,t){return{open:\"~\"===e.charAt(2),close:\"~\"===t.charAt(t.length-3)}},It=function(e){return e.replace(/^\\{\\{~?!-?-?/,\"\").replace(/-?-?~?\\}\\}$/,\"\")},Rt=function(e,t,n){n=this.locInfo(n);for(var r=e?\"@\":\"\",i=[],s=0,o=0,a=t.length;o<a;o++){var u=t[o].part,l=t[o].original!==u;if(r+=(t[o].separator||\"\")+u,l||\"..\"!==u&&\".\"!==u&&\"this\"!==u)i.push(u);else{if(i.length>0)throw new Vt.default(\"Invalid path: \"+r,{loc:n});\"..\"===u&&s++}}return{type:\"PathExpression\",data:e,depth:s,parts:i,original:r,loc:n}},Nt=function(e,t,n,r,i,s){var o=r.charAt(3)||r.charAt(2),a=\"{\"!==o&&\"&\"!==o;return{type:/\\*/.test(r)?\"Decorator\":\"MustacheStatement\",path:e,params:t,hash:n,escaped:a,strip:i,loc:this.locInfo(s)}},Tt=function(e,t,n,r){Gt(e,n),r=this.locInfo(r);var i={type:\"Program\",body:t,strip:{},loc:r};return{type:\"BlockStatement\",path:e.path,params:e.params,hash:e.hash,program:i,openStrip:{},inverseStrip:{},closeStrip:{},loc:r}},zt=function(e,t,n,r,i,s){r&&r.path&&Gt(e,r);var o=/\\*/.test(e.open);t.blockParams=e.blockParams;var a=void 0,u=void 0;if(n){if(o)throw new Vt.default(\"Unexpected inverse block on decorator\",n);n.chain&&(n.program.body[0].closeStrip=r.strip),u=n.strip,a=n.program}i&&(i=a,a=t,t=i);return{type:o?\"DecoratorBlock\":\"BlockStatement\",path:e.path,params:e.params,hash:e.hash,program:t,inverse:a,openStrip:e.strip,inverseStrip:u,closeStrip:r&&r.strip,loc:this.locInfo(s)}},jt=function(e,t){if(!t&&e.length){var n=e[0].loc,r=e[e.length-1].loc;n&&r&&(t={source:n.source,start:{line:n.start.line,column:n.start.column},end:{line:r.end.line,column:r.end.column}})}return{type:\"Program\",body:e,strip:{},loc:t}},Ht=function(e,t,n,r){return Gt(e,n),{type:\"PartialBlockStatement\",name:e.path,params:e.params,hash:e.hash,program:t,openStrip:e.strip,closeStrip:n&&n.strip,loc:this.locInfo(r)}};var Vt=function(e){return e&&e.__esModule?e:{default:e}}(Z);function Gt(e,t){if(t=t.path?t.path.original:t,e.path.original!==t){var n={loc:e.path.loc};throw new Vt.default(e.path.original+\" doesn't match \"+t,n)}}var Kt=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(qt);ft=vt.default;var Zt,Wt,Jt,Qt={};function Xt(e,t){return\"Program\"===e.type?e:(vt.default.yy=Qt,Qt.locInfo=function(e){return new Qt.SourceLocation(t&&t.srcName,e)},vt.default.parse(e))}function Yt(e){return e&&e.__esModule?e:{default:e}}F(Qt,Kt),Zt=rn,Wt=function(e,t,n){if(null==e||\"string\"!=typeof e&&\"Program\"!==e.type)throw new en.default(\"You must pass a string or Handlebars AST to Handlebars.precompile. You passed \"+e);\"data\"in(t=t||{})||(t.data=!0);t.compat&&(t.useDepths=!0);var r=n.parse(e,t),i=(new n.Compiler).compile(r,t);return(new n.JavaScriptCompiler).compile(i,t)},Jt=function(e,t,n){void 0===t&&(t={});if(null==e||\"string\"!=typeof e&&\"Program\"!==e.type)throw new en.default(\"You must pass a string or Handlebars AST to Handlebars.compile. You passed \"+e);\"data\"in(t=F({},t))||(t.data=!0);t.compat&&(t.useDepths=!0);var r=void 0;function i(){var r=n.parse(e,t),i=(new n.Compiler).compile(r,t),s=(new n.JavaScriptCompiler).compile(i,t,void 0,!0);return n.template(s)}function s(e,t){return r||(r=i()),r.call(this,e,t)}return s._setup=function(e){return r||(r=i()),r._setup(e)},s._child=function(e,t,n,s){return r||(r=i()),r._child(e,t,n,s)},s};var en=Yt(Z),tn=Yt(lt),nn=[].slice;function rn(){}function sn(e,t){if(e===t)return!0;if(N(e)&&N(t)&&e.length===t.length){for(var n=0;n<e.length;n++)if(!sn(e[n],t[n]))return!1;return!0}}function on(e){if(!e.path.parts){var t=e.path;e.path={type:\"PathExpression\",data:!1,depth:0,parts:[t.original+\"\"],original:t.original+\"\",loc:t.loc}}}rn.prototype={compiler:rn,equals:function(e){var t=this.opcodes.length;if(e.opcodes.length!==t)return!1;for(var n=0;n<t;n++){var r=this.opcodes[n],i=e.opcodes[n];if(r.opcode!==i.opcode||!sn(r.args,i.args))return!1}t=this.children.length;for(n=0;n<t;n++)if(!this.children[n].equals(e.children[n]))return!1;return!0},guid:0,compile:function(e,t){return this.sourceNode=[],this.opcodes=[],this.children=[],this.options=t,this.stringParams=t.stringParams,this.trackIds=t.trackIds,t.blockParams=t.blockParams||[],t.knownHelpers=F(Object.create(null),{helperMissing:!0,blockHelperMissing:!0,each:!0,if:!0,unless:!0,with:!0,log:!0,lookup:!0},t.knownHelpers),this.accept(e)},compileProgram:function(e){var t=(new this.compiler).compile(e,this.options),n=this.guid++;return this.usePartial=this.usePartial||t.usePartial,this.children[n]=t,this.useDepths=this.useDepths||t.useDepths,n},accept:function(e){if(!this[e.type])throw new en.default(\"Unknown type: \"+e.type,e);this.sourceNode.unshift(e);var t=this[e.type](e);return this.sourceNode.shift(),t},Program:function(e){this.options.blockParams.unshift(e.blockParams);for(var t=e.body,n=t.length,r=0;r<n;r++)this.accept(t[r]);return this.options.blockParams.shift(),this.isSimple=1===n,this.blockParams=e.blockParams?e.blockParams.length:0,this},BlockStatement:function(e){on(e);var t=e.program,n=e.inverse;t=t&&this.compileProgram(t),n=n&&this.compileProgram(n);var r=this.classifySexpr(e);\"helper\"===r?this.helperSexpr(e,t,n):\"simple\"===r?(this.simpleSexpr(e),this.opcode(\"pushProgram\",t),this.opcode(\"pushProgram\",n),this.opcode(\"emptyHash\"),this.opcode(\"blockValue\",e.path.original)):(this.ambiguousSexpr(e,t,n),this.opcode(\"pushProgram\",t),this.opcode(\"pushProgram\",n),this.opcode(\"emptyHash\"),this.opcode(\"ambiguousBlockValue\")),this.opcode(\"append\")},DecoratorBlock:function(e){var t=e.program&&this.compileProgram(e.program),n=this.setupFullMustacheParams(e,t,void 0),r=e.path;this.useDecorators=!0,this.opcode(\"registerDecorator\",n.length,r.original)},PartialStatement:function(e){this.usePartial=!0;var t=e.program;t&&(t=this.compileProgram(e.program));var n=e.params;if(n.length>1)throw new en.default(\"Unsupported number of partial arguments: \"+n.length,e);n.length||(this.options.explicitPartialContext?this.opcode(\"pushLiteral\",\"undefined\"):n.push({type:\"PathExpression\",parts:[],depth:0}));var r=e.name.original,i=\"SubExpression\"===e.name.type;i&&this.accept(e.name),this.setupFullMustacheParams(e,t,void 0,!0);var s=e.indent||\"\";this.options.preventIndent&&s&&(this.opcode(\"appendContent\",s),s=\"\"),this.opcode(\"invokePartial\",i,r,s),this.opcode(\"append\")},PartialBlockStatement:function(e){this.PartialStatement(e)},MustacheStatement:function(e){this.SubExpression(e),e.escaped&&!this.options.noEscape?this.opcode(\"appendEscaped\"):this.opcode(\"append\")},Decorator:function(e){this.DecoratorBlock(e)},ContentStatement:function(e){e.value&&this.opcode(\"appendContent\",e.value)},CommentStatement:function(){},SubExpression:function(e){on(e);var t=this.classifySexpr(e);\"simple\"===t?this.simpleSexpr(e):\"helper\"===t?this.helperSexpr(e):this.ambiguousSexpr(e)},ambiguousSexpr:function(e,t,n){var r=e.path,i=r.parts[0],s=null!=t||null!=n;this.opcode(\"getContext\",r.depth),this.opcode(\"pushProgram\",t),this.opcode(\"pushProgram\",n),r.strict=!0,this.accept(r),this.opcode(\"invokeAmbiguous\",i,s)},simpleSexpr:function(e){var t=e.path;t.strict=!0,this.accept(t),this.opcode(\"resolvePossibleLambda\")},helperSexpr:function(e,t,n){var r=this.setupFullMustacheParams(e,t,n),i=e.path,s=i.parts[0];if(this.options.knownHelpers[s])this.opcode(\"invokeKnownHelper\",r.length,s);else{if(this.options.knownHelpersOnly)throw new en.default(\"You specified knownHelpersOnly, but used the unknown helper \"+s,e);i.strict=!0,i.falsy=!0,this.accept(i),this.opcode(\"invokeHelper\",r.length,i.original,tn.default.helpers.simpleId(i))}},PathExpression:function(e){this.addDepth(e.depth),this.opcode(\"getContext\",e.depth);var t=e.parts[0],n=tn.default.helpers.scopedId(e),r=!e.depth&&!n&&this.blockParamIndex(t);r?this.opcode(\"lookupBlockParam\",r,e.parts):t?e.data?(this.options.data=!0,this.opcode(\"lookupData\",e.depth,e.parts,e.strict)):this.opcode(\"lookupOnContext\",e.parts,e.falsy,e.strict,n):this.opcode(\"pushContext\")},StringLiteral:function(e){this.opcode(\"pushString\",e.value)},NumberLiteral:function(e){this.opcode(\"pushLiteral\",e.value)},BooleanLiteral:function(e){this.opcode(\"pushLiteral\",e.value)},UndefinedLiteral:function(){this.opcode(\"pushLiteral\",\"undefined\")},NullLiteral:function(){this.opcode(\"pushLiteral\",\"null\")},Hash:function(e){var t=e.pairs,n=0,r=t.length;for(this.opcode(\"pushHash\");n<r;n++)this.pushParam(t[n].value);for(;n--;)this.opcode(\"assignToHash\",t[n].key);this.opcode(\"popHash\")},opcode:function(e){this.opcodes.push({opcode:e,args:nn.call(arguments,1),loc:this.sourceNode[0].loc})},addDepth:function(e){e&&(this.useDepths=!0)},classifySexpr:function(e){var t=tn.default.helpers.simpleId(e.path),n=t&&!!this.blockParamIndex(e.path.parts[0]),r=!n&&tn.default.helpers.helperExpression(e),i=!n&&(r||t);if(i&&!r){var s=e.path.parts[0],o=this.options;o.knownHelpers[s]?r=!0:o.knownHelpersOnly&&(i=!1)}return r?\"helper\":i?\"ambiguous\":\"simple\"},pushParams:function(e){for(var t=0,n=e.length;t<n;t++)this.pushParam(e[t])},pushParam:function(e){var t=null!=e.value?e.value:e.original||\"\";if(this.stringParams)t.replace&&(t=t.replace(/^(\\.?\\.\\/)*/g,\"\").replace(/\\//g,\".\")),e.depth&&this.addDepth(e.depth),this.opcode(\"getContext\",e.depth||0),this.opcode(\"pushStringParam\",t,e.type),\"SubExpression\"===e.type&&this.accept(e);else{if(this.trackIds){var n=void 0;if(!e.parts||tn.default.helpers.scopedId(e)||e.depth||(n=this.blockParamIndex(e.parts[0])),n){var r=e.parts.slice(1).join(\".\");this.opcode(\"pushId\",\"BlockParam\",n,r)}else(t=e.original||t).replace&&(t=t.replace(/^this(?:\\.|$)/,\"\").replace(/^\\.\\//,\"\").replace(/^\\.$/,\"\")),this.opcode(\"pushId\",e.type,t)}this.accept(e)}},setupFullMustacheParams:function(e,t,n,r){var i=e.params;return this.pushParams(i),this.opcode(\"pushProgram\",t),this.opcode(\"pushProgram\",n),e.hash?this.accept(e.hash):this.opcode(\"emptyHash\",r),i},blockParamIndex:function(e){for(var t=0,n=this.options.blockParams.length;t<n;t++){var r=this.options.blockParams[t],i=r&&B(r,e);if(r&&i>=0)return[t,i]}}};var an={};function un(e){return e&&e.__esModule?e:{default:e}}an.__esModule=!0;var ln=un(Z),cn={__esModule:!0},hn=void 0;try{if(\"function\"!=typeof define||!define.amd){var pn=s(\"97gFG\");hn=pn.SourceNode}}catch(e){}function fn(e,t,n){if(N(e)){for(var r=[],i=0,s=e.length;i<s;i++)r.push(t.wrap(e[i],n));return r}return\"boolean\"==typeof e||\"number\"==typeof e?e+\"\":e}function dn(e){this.srcFile=e,this.source=[]}hn||((hn=function(e,t,n,r){this.src=\"\",r&&this.add(r)}).prototype={add:function(e){N(e)&&(e=e.join(\"\")),this.src+=e},prepend:function(e){N(e)&&(e=e.join(\"\")),this.src=e+this.src},toStringWithSourceMap:function(){return{code:this.toString()}},toString:function(){return this.src}}),dn.prototype={isEmpty:function(){return!this.source.length},prepend:function(e,t){this.source.unshift(this.wrap(e,t))},push:function(e,t){this.source.push(this.wrap(e,t))},merge:function(){var e=this.empty();return this.each((function(t){e.add([\"  \",t,\"\\n\"])})),e},each:function(e){for(var t=0,n=this.source.length;t<n;t++)e(this.source[t])},empty:function(){var e=this.currentLocation||{start:{}};return new hn(e.start.line,e.start.column,this.srcFile)},wrap:function(e){var t=arguments.length<=1||void 0===arguments[1]?this.currentLocation||{start:{}}:arguments[1];return e instanceof hn?e:(e=fn(e,this,t),new hn(t.start.line,t.start.column,this.srcFile,e))},functionCall:function(e,t,n){return n=this.generateList(n),this.wrap([e,t?\".\"+t+\"(\":\"(\",n,\")\"])},quotedString:function(e){return'\"'+(e+\"\").replace(/\\\\/g,\"\\\\\\\\\").replace(/\"/g,'\\\\\"').replace(/\\n/g,\"\\\\n\").replace(/\\r/g,\"\\\\r\").replace(/\\u2028/g,\"\\\\u2028\").replace(/\\u2029/g,\"\\\\u2029\")+'\"'},objectLiteral:function(e){var t=this,n=[];Object.keys(e).forEach((function(r){var i=fn(e[r],t);\"undefined\"!==i&&n.push([t.quotedString(r),\":\",i])}));var r=this.generateList(n);return r.prepend(\"{\"),r.add(\"}\"),r},generateList:function(e){for(var t=this.empty(),n=0,r=e.length;n<r;n++)n&&t.add(\",\"),t.add(fn(e[n],this));return t},generateArray:function(e){var t=this.generateList(e);return t.prepend(\"[\"),t.add(\"]\"),t}},cn.default=dn;var gn=un(cn=cn.default);function mn(e){this.value=e}function Dn(){}Dn.prototype={nameLookup:function(e,t){return this.internalNameLookup(e,t)},depthedLookup:function(e){return[this.aliasable(\"container.lookup\"),\"(depths, \",JSON.stringify(e),\")\"]},compilerInfo:function(){return[k,_[k]]},appendToBuffer:function(e,t,n){return N(e)||(e=[e]),e=this.source.wrap(e,t),this.environment.isSimple?[\"return \",e,\";\"]:n?[\"buffer += \",e,\";\"]:(e.appendToBuffer=!0,e)},initializeBuffer:function(){return this.quotedString(\"\")},internalNameLookup:function(e,t){return this.lookupPropertyFunctionIsUsed=!0,[\"lookupProperty(\",e,\",\",JSON.stringify(t),\")\"]},lookupPropertyFunctionIsUsed:!1,compile:function(e,t,n,r){this.environment=e,this.options=t,this.stringParams=this.options.stringParams,this.trackIds=this.options.trackIds,this.precompile=!r,this.name=this.environment.name,this.isChild=!!n,this.context=n||{decorators:[],programs:[],environments:[]},this.preamble(),this.stackSlot=0,this.stackVars=[],this.aliases={},this.registers={list:[]},this.hashes=[],this.compileStack=[],this.inlineStack=[],this.blockParams=[],this.compileChildren(e,t),this.useDepths=this.useDepths||e.useDepths||e.useDecorators||this.options.compat,this.useBlockParams=this.useBlockParams||e.useBlockParams;var i=e.opcodes,s=void 0,o=void 0,a=void 0,u=void 0;for(a=0,u=i.length;a<u;a++)s=i[a],this.source.currentLocation=s.loc,o=o||s.loc,this[s.opcode].apply(this,s.args);if(this.source.currentLocation=o,this.pushSource(\"\"),this.stackSlot||this.inlineStack.length||this.compileStack.length)throw new ln.default(\"Compile completed with content left on stack\");this.decorators.isEmpty()?this.decorators=void 0:(this.useDecorators=!0,this.decorators.prepend([\"var decorators = container.decorators, \",this.lookupPropertyFunctionVarDeclaration(),\";\\n\"]),this.decorators.push(\"return fn;\"),r?this.decorators=Function.apply(this,[\"fn\",\"props\",\"container\",\"depth0\",\"data\",\"blockParams\",\"depths\",this.decorators.merge()]):(this.decorators.prepend(\"function(fn, props, container, depth0, data, blockParams, depths) {\\n\"),this.decorators.push(\"}\\n\"),this.decorators=this.decorators.merge()));var l=this.createFunctionContext(r);if(this.isChild)return l;var c={compiler:this.compilerInfo(),main:l};this.decorators&&(c.main_d=this.decorators,c.useDecorators=!0);var h=this.context,p=h.programs,f=h.decorators;for(a=0,u=p.length;a<u;a++)p[a]&&(c[a]=p[a],f[a]&&(c[a+\"_d\"]=f[a],c.useDecorators=!0));return this.environment.usePartial&&(c.usePartial=!0),this.options.data&&(c.useData=!0),this.useDepths&&(c.useDepths=!0),this.useBlockParams&&(c.useBlockParams=!0),this.options.compat&&(c.compat=!0),r?c.compilerOptions=this.options:(c.compiler=JSON.stringify(c.compiler),this.source.currentLocation={start:{line:1,column:0}},c=this.objectLiteral(c),t.srcName?(c=c.toStringWithSourceMap({file:t.destName})).map=c.map&&c.map.toString():c=c.toString()),c},preamble:function(){this.lastContext=0,this.source=new gn.default(this.options.srcName),this.decorators=new gn.default(this.options.srcName)},createFunctionContext:function(e){var t=this,n=\"\",r=this.stackVars.concat(this.registers.list);r.length>0&&(n+=\", \"+r.join(\", \"));var i=0;Object.keys(this.aliases).forEach((function(e){var r=t.aliases[e];r.children&&r.referenceCount>1&&(n+=\", alias\"+ ++i+\"=\"+e,r.children[0]=\"alias\"+i)})),this.lookupPropertyFunctionIsUsed&&(n+=\", \"+this.lookupPropertyFunctionVarDeclaration());var s=[\"container\",\"depth0\",\"helpers\",\"partials\",\"data\"];(this.useBlockParams||this.useDepths)&&s.push(\"blockParams\"),this.useDepths&&s.push(\"depths\");var o=this.mergeSource(n);return e?(s.push(o),Function.apply(this,s)):this.source.wrap([\"function(\",s.join(\",\"),\") {\\n  \",o,\"}\"])},mergeSource:function(e){var t=this.environment.isSimple,n=!this.forceBuffer,r=void 0,i=void 0,s=void 0,o=void 0;return this.source.each((function(e){e.appendToBuffer?(s?e.prepend(\"  + \"):s=e,o=e):(s&&(i?s.prepend(\"buffer += \"):r=!0,o.add(\";\"),s=o=void 0),i=!0,t||(n=!1))})),n?s?(s.prepend(\"return \"),o.add(\";\")):i||this.source.push('return \"\";'):(e+=\", buffer = \"+(r?\"\":this.initializeBuffer()),s?(s.prepend(\"return buffer + \"),o.add(\";\")):this.source.push(\"return buffer;\")),e&&this.source.prepend(\"var \"+e.substring(2)+(r?\"\":\";\\n\")),this.source.merge()},lookupPropertyFunctionVarDeclaration:function(){return\"\\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\\n          return parent[propertyName];\\n        }\\n        return undefined\\n    }\\n    \".trim()},blockValue:function(e){var t=this.aliasable(\"container.hooks.blockHelperMissing\"),n=[this.contextName(0)];this.setupHelperArgs(e,0,n);var r=this.popStack();n.splice(1,0,r),this.push(this.source.functionCall(t,\"call\",n))},ambiguousBlockValue:function(){var e=this.aliasable(\"container.hooks.blockHelperMissing\"),t=[this.contextName(0)];this.setupHelperArgs(\"\",0,t,!0),this.flushInline();var n=this.topStack();t.splice(1,0,n),this.pushSource([\"if (!\",this.lastHelper,\") { \",n,\" = \",this.source.functionCall(e,\"call\",t),\"}\"])},appendContent:function(e){this.pendingContent?e=this.pendingContent+e:this.pendingLocation=this.source.currentLocation,this.pendingContent=e},append:function(){if(this.isInline())this.replaceStack((function(e){return[\" != null ? \",e,' : \"\"']})),this.pushSource(this.appendToBuffer(this.popStack()));else{var e=this.popStack();this.pushSource([\"if (\",e,\" != null) { \",this.appendToBuffer(e,void 0,!0),\" }\"]),this.environment.isSimple&&this.pushSource([\"else { \",this.appendToBuffer(\"''\",void 0,!0),\" }\"])}},appendEscaped:function(){this.pushSource(this.appendToBuffer([this.aliasable(\"container.escapeExpression\"),\"(\",this.popStack(),\")\"]))},getContext:function(e){this.lastContext=e},pushContext:function(){this.pushStackLiteral(this.contextName(this.lastContext))},lookupOnContext:function(e,t,n,r){var i=0;r||!this.options.compat||this.lastContext?this.pushContext():this.push(this.depthedLookup(e[i++])),this.resolvePath(\"context\",e,i,t,n)},lookupBlockParam:function(e,t){this.useBlockParams=!0,this.push([\"blockParams[\",e[0],\"][\",e[1],\"]\"]),this.resolvePath(\"context\",t,1)},lookupData:function(e,t,n){e?this.pushStackLiteral(\"container.data(data, \"+e+\")\"):this.pushStackLiteral(\"data\"),this.resolvePath(\"data\",t,0,!0,n)},resolvePath:function(e,t,n,r,i){var s=this;if(this.options.strict||this.options.assumeObjects)this.push(function(e,t,n,r){var i=t.popStack(),s=0,o=n.length;e&&o--;for(;s<o;s++)i=t.nameLookup(i,n[s],r);return e?[t.aliasable(\"container.strict\"),\"(\",i,\", \",t.quotedString(n[s]),\", \",JSON.stringify(t.source.currentLocation),\" )\"]:i}(this.options.strict&&i,this,t,e));else for(var o=t.length;n<o;n++)this.replaceStack((function(i){var o=s.nameLookup(i,t[n],e);return r?[\" && \",o]:[\" != null ? \",o,\" : \",i]}))},resolvePossibleLambda:function(){this.push([this.aliasable(\"container.lambda\"),\"(\",this.popStack(),\", \",this.contextName(0),\")\"])},pushStringParam:function(e,t){this.pushContext(),this.pushString(t),\"SubExpression\"!==t&&(\"string\"==typeof e?this.pushString(e):this.pushStackLiteral(e))},emptyHash:function(e){this.trackIds&&this.push(\"{}\"),this.stringParams&&(this.push(\"{}\"),this.push(\"{}\")),this.pushStackLiteral(e?\"undefined\":\"{}\")},pushHash:function(){this.hash&&this.hashes.push(this.hash),this.hash={values:{},types:[],contexts:[],ids:[]}},popHash:function(){var e=this.hash;this.hash=this.hashes.pop(),this.trackIds&&this.push(this.objectLiteral(e.ids)),this.stringParams&&(this.push(this.objectLiteral(e.contexts)),this.push(this.objectLiteral(e.types))),this.push(this.objectLiteral(e.values))},pushString:function(e){this.pushStackLiteral(this.quotedString(e))},pushLiteral:function(e){this.pushStackLiteral(e)},pushProgram:function(e){null!=e?this.pushStackLiteral(this.programExpression(e)):this.pushStackLiteral(null)},registerDecorator:function(e,t){var n=this.nameLookup(\"decorators\",t,\"decorator\"),r=this.setupHelperArgs(t,e);this.decorators.push([\"fn = \",this.decorators.functionCall(n,\"\",[\"fn\",\"props\",\"container\",r]),\" || fn;\"])},invokeHelper:function(e,t,n){var r=this.popStack(),i=this.setupHelper(e,t),s=[];n&&s.push(i.name),s.push(r),this.options.strict||s.push(this.aliasable(\"container.hooks.helperMissing\"));var o=[\"(\",this.itemsSeparatedBy(s,\"||\"),\")\"],a=this.source.functionCall(o,\"call\",i.callParams);this.push(a)},itemsSeparatedBy:function(e,t){var n=[];n.push(e[0]);for(var r=1;r<e.length;r++)n.push(t,e[r]);return n},invokeKnownHelper:function(e,t){var n=this.setupHelper(e,t);this.push(this.source.functionCall(n.name,\"call\",n.callParams))},invokeAmbiguous:function(e,t){this.useRegister(\"helper\");var n=this.popStack();this.emptyHash();var r=this.setupHelper(0,e,t),i=[\"(\",\"(helper = \",this.lastHelper=this.nameLookup(\"helpers\",e,\"helper\"),\" || \",n,\")\"];this.options.strict||(i[0]=\"(helper = \",i.push(\" != null ? helper : \",this.aliasable(\"container.hooks.helperMissing\"))),this.push([\"(\",i,r.paramsInit?[\"),(\",r.paramsInit]:[],\"),\",\"(typeof helper === \",this.aliasable('\"function\"'),\" ? \",this.source.functionCall(\"helper\",\"call\",r.callParams),\" : helper))\"])},invokePartial:function(e,t,n){var r=[],i=this.setupParams(t,1,r);e&&(t=this.popStack(),delete i.name),n&&(i.indent=JSON.stringify(n)),i.helpers=\"helpers\",i.partials=\"partials\",i.decorators=\"container.decorators\",e?r.unshift(t):r.unshift(this.nameLookup(\"partials\",t,\"partial\")),this.options.compat&&(i.depths=\"depths\"),i=this.objectLiteral(i),r.push(i),this.push(this.source.functionCall(\"container.invokePartial\",\"\",r))},assignToHash:function(e){var t=this.popStack(),n=void 0,r=void 0,i=void 0;this.trackIds&&(i=this.popStack()),this.stringParams&&(r=this.popStack(),n=this.popStack());var s=this.hash;n&&(s.contexts[e]=n),r&&(s.types[e]=r),i&&(s.ids[e]=i),s.values[e]=t},pushId:function(e,t,n){\"BlockParam\"===e?this.pushStackLiteral(\"blockParams[\"+t[0]+\"].path[\"+t[1]+\"]\"+(n?\" + \"+JSON.stringify(\".\"+n):\"\")):\"PathExpression\"===e?this.pushString(t):\"SubExpression\"===e?this.pushStackLiteral(\"true\"):this.pushStackLiteral(\"null\")},compiler:Dn,compileChildren:function(e,t){for(var n=e.children,r=void 0,i=void 0,s=0,o=n.length;s<o;s++){r=n[s],i=new this.compiler;var a=this.matchExistingProgram(r);if(null==a){this.context.programs.push(\"\");var u=this.context.programs.length;r.index=u,r.name=\"program\"+u,this.context.programs[u]=i.compile(r,t,this.context,!this.precompile),this.context.decorators[u]=i.decorators,this.context.environments[u]=r,this.useDepths=this.useDepths||i.useDepths,this.useBlockParams=this.useBlockParams||i.useBlockParams,r.useDepths=this.useDepths,r.useBlockParams=this.useBlockParams}else r.index=a.index,r.name=\"program\"+a.index,this.useDepths=this.useDepths||a.useDepths,this.useBlockParams=this.useBlockParams||a.useBlockParams}},matchExistingProgram:function(e){for(var t=0,n=this.context.environments.length;t<n;t++){var r=this.context.environments[t];if(r&&r.equals(e))return r}},programExpression:function(e){var t=this.environment.children[e],n=[t.index,\"data\",t.blockParams];return(this.useBlockParams||this.useDepths)&&n.push(\"blockParams\"),this.useDepths&&n.push(\"depths\"),\"container.program(\"+n.join(\", \")+\")\"},useRegister:function(e){this.registers[e]||(this.registers[e]=!0,this.registers.list.push(e))},push:function(e){return e instanceof mn||(e=this.source.wrap(e)),this.inlineStack.push(e),e},pushStackLiteral:function(e){this.push(new mn(e))},pushSource:function(e){this.pendingContent&&(this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent),this.pendingLocation)),this.pendingContent=void 0),e&&this.source.push(e)},replaceStack:function(e){var t=[\"(\"],n=void 0,r=void 0,i=void 0;if(!this.isInline())throw new ln.default(\"replaceStack on non-inline\");var s=this.popStack(!0);if(s instanceof mn)t=[\"(\",n=[s.value]],i=!0;else{r=!0;var o=this.incrStack();t=[\"((\",this.push(o),\" = \",s,\")\"],n=this.topStack()}var a=e.call(this,n);i||this.popStack(),r&&this.stackSlot--,this.push(t.concat(a,\")\"))},incrStack:function(){return this.stackSlot++,this.stackSlot>this.stackVars.length&&this.stackVars.push(\"stack\"+this.stackSlot),this.topStackName()},topStackName:function(){return\"stack\"+this.stackSlot},flushInline:function(){var e=this.inlineStack;this.inlineStack=[];for(var t=0,n=e.length;t<n;t++){var r=e[t];if(r instanceof mn)this.compileStack.push(r);else{var i=this.incrStack();this.pushSource([i,\" = \",r,\";\"]),this.compileStack.push(i)}}},isInline:function(){return this.inlineStack.length},popStack:function(e){var t=this.isInline(),n=(t?this.inlineStack:this.compileStack).pop();if(!e&&n instanceof mn)return n.value;if(!t){if(!this.stackSlot)throw new ln.default(\"Invalid stack pop\");this.stackSlot--}return n},topStack:function(){var e=this.isInline()?this.inlineStack:this.compileStack,t=e[e.length-1];return t instanceof mn?t.value:t},contextName:function(e){return this.useDepths&&e?\"depths[\"+e+\"]\":\"depth\"+e},quotedString:function(e){return this.source.quotedString(e)},objectLiteral:function(e){return this.source.objectLiteral(e)},aliasable:function(e){var t=this.aliases[e];return t?(t.referenceCount++,t):((t=this.aliases[e]=this.source.wrap(e)).aliasable=!0,t.referenceCount=1,t)},setupHelper:function(e,t,n){var r=[];return{params:r,paramsInit:this.setupHelperArgs(t,e,r,n),name:this.nameLookup(\"helpers\",t,\"helper\"),callParams:[this.aliasable(this.contextName(0)+\" != null ? \"+this.contextName(0)+\" : (container.nullContext || {})\")].concat(r)}},setupParams:function(e,t,n){var r={},i=[],s=[],o=[],a=!n,u=void 0;a&&(n=[]),r.name=this.quotedString(e),r.hash=this.popStack(),this.trackIds&&(r.hashIds=this.popStack()),this.stringParams&&(r.hashTypes=this.popStack(),r.hashContexts=this.popStack());var l=this.popStack(),c=this.popStack();(c||l)&&(r.fn=c||\"container.noop\",r.inverse=l||\"container.noop\");for(var h=t;h--;)u=this.popStack(),n[h]=u,this.trackIds&&(o[h]=this.popStack()),this.stringParams&&(s[h]=this.popStack(),i[h]=this.popStack());return a&&(r.args=this.source.generateArray(n)),this.trackIds&&(r.ids=this.source.generateArray(o)),this.stringParams&&(r.types=this.source.generateArray(s),r.contexts=this.source.generateArray(i)),this.options.data&&(r.data=\"data\"),this.useBlockParams&&(r.blockParams=\"blockParams\"),r},setupHelperArgs:function(e,t,n,r){var i=this.setupParams(e,t,n);return i.loc=JSON.stringify(this.source.currentLocation),i=this.objectLiteral(i),r?(this.useRegister(\"options\"),n.push(\"options\"),[\"options=\",i]):n?(n.push(i),\"\"):i}},function(){for(var e=\"break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false\".split(\" \"),t=Dn.RESERVED_WORDS={},n=0,r=e.length;n<r;n++)t[e[n]]=!0}(),Dn.isValidJavaScriptVariableName=function(e){return!Dn.RESERVED_WORDS[e]&&/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(e)},an.default=Dn;var vn=f(an=an.default),yn=f(kt),kn=f(it),Cn=ut.default.create;function _n(){var e=Cn();return e.compile=function(t,n){return Jt(t,n,e)},e.precompile=function(t,n){return Wt(t,n,e)},e.AST=dt.default,e.Compiler=Zt,e.JavaScriptCompiler=vn.default,e.Parser=ft,e.parse=pt,e.parseWithoutProcessing=ht,e}var An=_n();An.create=_n,kn.default(An),An.Visitor=yn.default,An.default=An,p.default=An;var bn,En,xn=(p=p.default).default;bn=function(e){return(new Sn).accept(e)},En=Sn;var wn=function(e){return e&&e.__esModule?e:{default:e}}(kt);function Sn(){this.padding=0}Sn.prototype=new wn.default,Sn.prototype.pad=function(e){for(var t=\"\",n=0,r=this.padding;n<r;n++)t+=\"  \";return t+=e+\"\\n\"},Sn.prototype.Program=function(e){var t=\"\",n=e.body,r=void 0,i=void 0;if(e.blockParams){var s=\"BLOCK PARAMS: [\";for(r=0,i=e.blockParams.length;r<i;r++)s+=\" \"+e.blockParams[r];s+=\" ]\",t+=this.pad(s)}for(r=0,i=n.length;r<i;r++)t+=this.accept(n[r]);return this.padding--,t},Sn.prototype.MustacheStatement=function(e){return this.pad(\"{{ \"+this.SubExpression(e)+\" }}\")},Sn.prototype.Decorator=function(e){return this.pad(\"{{ DIRECTIVE \"+this.SubExpression(e)+\" }}\")},Sn.prototype.BlockStatement=Sn.prototype.DecoratorBlock=function(e){var t=\"\";return t+=this.pad((\"DecoratorBlock\"===e.type?\"DIRECTIVE \":\"\")+\"BLOCK:\"),this.padding++,t+=this.pad(this.SubExpression(e)),e.program&&(t+=this.pad(\"PROGRAM:\"),this.padding++,t+=this.accept(e.program),this.padding--),e.inverse&&(e.program&&this.padding++,t+=this.pad(\"{{^}}\"),this.padding++,t+=this.accept(e.inverse),this.padding--,e.program&&this.padding--),this.padding--,t},Sn.prototype.PartialStatement=function(e){var t=\"PARTIAL:\"+e.name.original;return e.params[0]&&(t+=\" \"+this.accept(e.params[0])),e.hash&&(t+=\" \"+this.accept(e.hash)),this.pad(\"{{> \"+t+\" }}\")},Sn.prototype.PartialBlockStatement=function(e){var t=\"PARTIAL BLOCK:\"+e.name.original;return e.params[0]&&(t+=\" \"+this.accept(e.params[0])),e.hash&&(t+=\" \"+this.accept(e.hash)),t+=\" \"+this.pad(\"PROGRAM:\"),this.padding++,t+=this.accept(e.program),this.padding--,this.pad(\"{{> \"+t+\" }}\")},Sn.prototype.ContentStatement=function(e){return this.pad(\"CONTENT[ '\"+e.value+\"' ]\")},Sn.prototype.CommentStatement=function(e){return this.pad(\"{{! '\"+e.value+\"' }}\")},Sn.prototype.SubExpression=function(e){for(var t,n=e.params,r=[],i=0,s=n.length;i<s;i++)r.push(this.accept(n[i]));return n=\"[\"+r.join(\", \")+\"]\",t=e.hash?\" \"+this.accept(e.hash):\"\",this.accept(e.path)+\" \"+n+t},Sn.prototype.PathExpression=function(e){var t=e.parts.join(\"/\");return(e.data?\"@\":\"\")+\"PATH:\"+t},Sn.prototype.StringLiteral=function(e){return'\"'+e.value+'\"'},Sn.prototype.NumberLiteral=function(e){return\"NUMBER{\"+e.value+\"}\"},Sn.prototype.BooleanLiteral=function(e){return\"BOOLEAN{\"+e.value+\"}\"},Sn.prototype.UndefinedLiteral=function(){return\"UNDEFINED\"},Sn.prototype.NullLiteral=function(){return\"NULL\"},Sn.prototype.Hash=function(e){for(var t=e.pairs,n=[],r=0,i=t.length;r<i;r++)n.push(this.accept(t[r]));return\"HASH{\"+n.join(\", \")+\"}\"},Sn.prototype.HashPair=function(e){return e.key+\"=\"+this.accept(e.value)},xn.PrintVisitor=En,xn.print=bn,h=xn;const Fn=\"currentPassagePid;\";var Bn=class{constructor(e){const t=e.getAttribute(\"name\"),n=e.getAttribute(\"ifid\"),r=e.getAttribute(\"startnode\");if(!t)throw new Error(\"Story is missing a name!\");if(!n)throw new Error(\"Story is missing an ifid!\");if(!r)throw new Error(\"No startnode specified!\");this.name=t,this.ifid=n,this.startnode=r,this.format=e.getAttribute(\"format\"),this.formatVersion=e.getAttribute(\"format-version\"),this.zoom=e.getAttribute(\"zoom\"),this.creator=e.getAttribute(\"creator\"),this.creatorVersion=e.getAttribute(\"creator-version\");const i=[],s=e.querySelectorAll(\"tw-passagedata\");Array.from(s).forEach((e=>{i.push(new u(e))})),this.passages=i,this.state=new c({[Fn]:r})}get currentPassage(){const e=this.getPassageByPid(this.state.get(Fn));if(!e)throw new Error(\"Tried to fetch currentPassage but it doesn't exist!\");return e}getPassageByPid(e){return this.passages.find((t=>t.pid===e))||null}getPassageByName(e){return this.passages.find((t=>t.name===e))||null}displayPassage(e,n){let r;if(\"string\"==typeof e){const t=this.getPassageByPid(e);if(!t)throw new Error(`Tried to display passage with pid: ${e}, but it doesn't exist!`);r=t}else r=e;const i=t(h).compile(r.richContent)(this.state.combinedStateObject);n.innerHTML=i,this.state.set(Fn,r.pid)}displayCurrentPassage(e){this.displayPassage(this.currentPassage,e)}};(()=>{const e=document.querySelector(\"tw-storydata\");if(!e)throw new Error(\"Missing tw-storydata node!\");const t=new Bn(e),n=document.querySelector(\"#tw-story\");if(!n)throw new Error(\"Missing story container #tw-story!\");const r=n.querySelector(\"#tw-story #tw-passage\");if(!r)throw new Error(\"Missing passage container #tw-passage\");n.addEventListener(\"click\",(e=>{if(!e.target)return;const n=e.target;if(\"a\"===n.tagName.toLowerCase()&&n.dataset.passageName){const e=n.dataset.passageName,i=t.getPassageByName(e);if(!i)throw new Error(`Couldn't find passage with name: \"${e}\"!`);t.displayPassage(i,r)}})),t.displayCurrentPassage(r)})()})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n\t\t</script>\n\t</body>\n</html>"})