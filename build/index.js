(()=>{function e(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}function t(e){return e&&e.__esModule?e.default:e}var n="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},r={},i={},s=n.parcelRequire7ce9;null==s&&((s=function(e){if(e in r)return r[e].exports;if(e in i){var t=i[e];delete i[e];var n={id:e,exports:{}};return r[e]=n,t.call(n.exports,n,n.exports),n.exports}var s=new Error("Cannot find module '"+e+"'");throw s.code="MODULE_NOT_FOUND",s}).register=function(e,t){i[e]=t},n.parcelRequire7ce9=s),s.register("97gFG",(function(t,n){var r,i,o;e(t.exports,"SourceMapGenerator",(()=>r),(e=>r=e)),e(t.exports,"SourceMapConsumer",(()=>i),(e=>i=e)),e(t.exports,"SourceNode",(()=>o),(e=>o=e)),r=s("h712z").SourceMapGenerator,i=s("lLalb").SourceMapConsumer,o=s("jtIqc").SourceNode})),s.register("h712z",(function(t,n){var r;e(t.exports,"SourceMapGenerator",(()=>r),(e=>r=e));var i=s("f30X9"),o=s("6I6y5"),a=s("kKGit").ArraySet,u=s("1DOoG").MappingList;function l(e){e||(e={}),this._file=o.getArg(e,"file",null),this._sourceRoot=o.getArg(e,"sourceRoot",null),this._skipValidation=o.getArg(e,"skipValidation",!1),this._sources=new a,this._names=new a,this._mappings=new u,this._sourcesContents=null}l.prototype._version=3,l.fromSourceMap=function(e){var t=e.sourceRoot,n=new l({file:e.file,sourceRoot:t});return e.eachMapping((function(e){var r={generated:{line:e.generatedLine,column:e.generatedColumn}};null!=e.source&&(r.source=e.source,null!=t&&(r.source=o.relative(t,r.source)),r.original={line:e.originalLine,column:e.originalColumn},null!=e.name&&(r.name=e.name)),n.addMapping(r)})),e.sources.forEach((function(r){var i=r;null!==t&&(i=o.relative(t,r)),n._sources.has(i)||n._sources.add(i);var s=e.sourceContentFor(r);null!=s&&n.setSourceContent(r,s)})),n},l.prototype.addMapping=function(e){var t=o.getArg(e,"generated"),n=o.getArg(e,"original",null),r=o.getArg(e,"source",null),i=o.getArg(e,"name",null);this._skipValidation||this._validateMapping(t,n,r,i),null!=r&&(r=String(r),this._sources.has(r)||this._sources.add(r)),null!=i&&(i=String(i),this._names.has(i)||this._names.add(i)),this._mappings.add({generatedLine:t.line,generatedColumn:t.column,originalLine:null!=n&&n.line,originalColumn:null!=n&&n.column,source:r,name:i})},l.prototype.setSourceContent=function(e,t){var n=e;null!=this._sourceRoot&&(n=o.relative(this._sourceRoot,n)),null!=t?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[o.toSetString(n)]=t):this._sourcesContents&&(delete this._sourcesContents[o.toSetString(n)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},l.prototype.applySourceMap=function(e,t,n){var r=t;if(null==t){if(null==e.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');r=e.file}var i=this._sourceRoot;null!=i&&(r=o.relative(i,r));var s=new a,u=new a;this._mappings.unsortedForEach((function(t){if(t.source===r&&null!=t.originalLine){var a=e.originalPositionFor({line:t.originalLine,column:t.originalColumn});null!=a.source&&(t.source=a.source,null!=n&&(t.source=o.join(n,t.source)),null!=i&&(t.source=o.relative(i,t.source)),t.originalLine=a.line,t.originalColumn=a.column,null!=a.name&&(t.name=a.name))}var l=t.source;null==l||s.has(l)||s.add(l);var c=t.name;null==c||u.has(c)||u.add(c)}),this),this._sources=s,this._names=u,e.sources.forEach((function(t){var r=e.sourceContentFor(t);null!=r&&(null!=n&&(t=o.join(n,t)),null!=i&&(t=o.relative(i,t)),this.setSourceContent(t,r))}),this)},l.prototype._validateMapping=function(e,t,n,r){if(t&&"number"!=typeof t.line&&"number"!=typeof t.column)throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if((!(e&&"line"in e&&"column"in e&&e.line>0&&e.column>=0)||t||n||r)&&!(e&&"line"in e&&"column"in e&&t&&"line"in t&&"column"in t&&e.line>0&&e.column>=0&&t.line>0&&t.column>=0&&n))throw new Error("Invalid mapping: "+JSON.stringify({generated:e,source:n,original:t,name:r}))},l.prototype._serializeMappings=function(){for(var e,t,n,r,s=0,a=1,u=0,l=0,c=0,h=0,p="",f=this._mappings.toArray(),d=0,g=f.length;d<g;d++){if(e="",(t=f[d]).generatedLine!==a)for(s=0;t.generatedLine!==a;)e+=";",a++;else if(d>0){if(!o.compareByGeneratedPositionsInflated(t,f[d-1]))continue;e+=","}e+=i.encode(t.generatedColumn-s),s=t.generatedColumn,null!=t.source&&(r=this._sources.indexOf(t.source),e+=i.encode(r-h),h=r,e+=i.encode(t.originalLine-1-l),l=t.originalLine-1,e+=i.encode(t.originalColumn-u),u=t.originalColumn,null!=t.name&&(n=this._names.indexOf(t.name),e+=i.encode(n-c),c=n)),p+=e}return p},l.prototype._generateSourcesContent=function(e,t){return e.map((function(e){if(!this._sourcesContents)return null;null!=t&&(e=o.relative(t,e));var n=o.toSetString(e);return Object.prototype.hasOwnProperty.call(this._sourcesContents,n)?this._sourcesContents[n]:null}),this)},l.prototype.toJSON=function(){var e={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(e.file=this._file),null!=this._sourceRoot&&(e.sourceRoot=this._sourceRoot),this._sourcesContents&&(e.sourcesContent=this._generateSourcesContent(e.sources,e.sourceRoot)),e},l.prototype.toString=function(){return JSON.stringify(this.toJSON())},r=l})),s.register("f30X9",(function(t,n){var r,i;e(t.exports,"encode",(()=>r),(e=>r=e)),e(t.exports,"decode",(()=>i),(e=>i=e));var o=s("iiYre");r=function(e){var t,n="",r=function(e){return e<0?1+(-e<<1):0+(e<<1)}(e);do{t=31&r,(r>>>=5)>0&&(t|=32),n+=o.encode(t)}while(r>0);return n},i=function(e,t,n){var r,i,s,a,u=e.length,l=0,c=0;do{if(t>=u)throw new Error("Expected more digits in base 64 VLQ value.");if(-1===(i=o.decode(e.charCodeAt(t++))))throw new Error("Invalid base64 digit: "+e.charAt(t-1));r=!!(32&i),l+=(i&=31)<<c,c+=5}while(r);n.value=(a=(s=l)>>1,1==(1&s)?-a:a),n.rest=t}})),s.register("iiYre",(function(t,n){var r,i;e(t.exports,"encode",(()=>r),(e=>r=e)),e(t.exports,"decode",(()=>i),(e=>i=e));var s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");r=function(e){if(0<=e&&e<s.length)return s[e];throw new TypeError("Must be between 0 and 63: "+e)},i=function(e){return 65<=e&&e<=90?e-65:97<=e&&e<=122?e-97+26:48<=e&&e<=57?e-48+52:43==e?62:47==e?63:-1}})),s.register("6I6y5",(function(t,n){var r,i,s,o,a,u,l,c,h,p,f,d,g;e(t.exports,"getArg",(()=>r),(e=>r=e)),e(t.exports,"urlParse",(()=>i),(e=>i=e)),e(t.exports,"isAbsolute",(()=>a),(e=>a=e)),e(t.exports,"normalize",(()=>s),(e=>s=e)),e(t.exports,"join",(()=>o),(e=>o=e)),e(t.exports,"relative",(()=>u),(e=>u=e)),e(t.exports,"toSetString",(()=>l),(e=>l=e)),e(t.exports,"fromSetString",(()=>c),(e=>c=e)),e(t.exports,"compareByOriginalPositions",(()=>h),(e=>h=e)),e(t.exports,"compareByGeneratedPositionsDeflated",(()=>p),(e=>p=e)),e(t.exports,"compareByGeneratedPositionsInflated",(()=>f),(e=>f=e)),e(t.exports,"parseSourceMapInput",(()=>d),(e=>d=e)),e(t.exports,"computeSourceURL",(()=>g),(e=>g=e)),r=function(e,t,n){if(t in e)return e[t];if(3===arguments.length)return n;throw new Error('"'+t+'" is a required argument.')};var m=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,D=/^data:.+\,.+$/;function v(e){var t=e.match(m);return t?{scheme:t[1],auth:t[2],host:t[3],port:t[4],path:t[5]}:null}function y(e){var t="";return e.scheme&&(t+=e.scheme+":"),t+="//",e.auth&&(t+=e.auth+"@"),e.host&&(t+=e.host),e.port&&(t+=":"+e.port),e.path&&(t+=e.path),t}function k(e){var t=e,n=v(e);if(n){if(!n.path)return e;t=n.path}for(var r,i=a(t),s=t.split(/\/+/),o=0,u=s.length-1;u>=0;u--)"."===(r=s[u])?s.splice(u,1):".."===r?o++:o>0&&(""===r?(s.splice(u+1,o),o=0):(s.splice(u,2),o--));return""===(t=s.join("/"))&&(t=i?"/":"."),n?(n.path=t,y(n)):t}function _(e,t){""===e&&(e="."),""===t&&(t=".");var n=v(t),r=v(e);if(r&&(e=r.path||"/"),n&&!n.scheme)return r&&(n.scheme=r.scheme),y(n);if(n||t.match(D))return t;if(r&&!r.host&&!r.path)return r.host=t,y(r);var i="/"===t.charAt(0)?t:k(e.replace(/\/+$/,"")+"/"+t);return r?(r.path=i,y(r)):i}i=v,s=k,o=_,a=function(e){return"/"===e.charAt(0)||m.test(e)},u=function(e,t){""===e&&(e="."),e=e.replace(/\/$/,"");for(var n=0;0!==t.indexOf(e+"/");){var r=e.lastIndexOf("/");if(r<0)return t;if((e=e.slice(0,r)).match(/^([^\/]+:\/)?\/*$/))return t;++n}return Array(n+1).join("../")+t.substr(e.length+1)};var C=!("__proto__"in Object.create(null));function A(e){return e}function E(e){if(!e)return!1;var t=e.length;if(t<9)return!1;if(95!==e.charCodeAt(t-1)||95!==e.charCodeAt(t-2)||111!==e.charCodeAt(t-3)||116!==e.charCodeAt(t-4)||111!==e.charCodeAt(t-5)||114!==e.charCodeAt(t-6)||112!==e.charCodeAt(t-7)||95!==e.charCodeAt(t-8)||95!==e.charCodeAt(t-9))return!1;for(var n=t-10;n>=0;n--)if(36!==e.charCodeAt(n))return!1;return!0}function b(e,t){return e===t?0:null===e?1:null===t?-1:e>t?1:-1}l=C?A:function(e){return E(e)?"$"+e:e},c=C?A:function(e){return E(e)?e.slice(1):e},h=function(e,t,n){var r=b(e.source,t.source);return 0!==r||0!==(r=e.originalLine-t.originalLine)||0!==(r=e.originalColumn-t.originalColumn)||n||0!==(r=e.generatedColumn-t.generatedColumn)||0!==(r=e.generatedLine-t.generatedLine)?r:b(e.name,t.name)},p=function(e,t,n){var r=e.generatedLine-t.generatedLine;return 0!==r||0!==(r=e.generatedColumn-t.generatedColumn)||n||0!==(r=b(e.source,t.source))||0!==(r=e.originalLine-t.originalLine)||0!==(r=e.originalColumn-t.originalColumn)?r:b(e.name,t.name)},f=function(e,t){var n=e.generatedLine-t.generatedLine;return 0!==n||0!==(n=e.generatedColumn-t.generatedColumn)||0!==(n=b(e.source,t.source))||0!==(n=e.originalLine-t.originalLine)||0!==(n=e.originalColumn-t.originalColumn)?n:b(e.name,t.name)},d=function(e){return JSON.parse(e.replace(/^\)]}'[^\n]*\n/,""))},g=function(e,t,n){if(t=t||"",e&&("/"!==e[e.length-1]&&"/"!==t[0]&&(e+="/"),t=e+t),n){var r=v(n);if(!r)throw new Error("sourceMapURL could not be parsed");if(r.path){var i=r.path.lastIndexOf("/");i>=0&&(r.path=r.path.substring(0,i+1))}t=_(y(r),t)}return k(t)}})),s.register("kKGit",(function(t,n){var r;e(t.exports,"ArraySet",(()=>r),(e=>r=e));var i=s("6I6y5"),o=Object.prototype.hasOwnProperty,a="undefined"!=typeof Map;function u(){this._array=[],this._set=a?new Map:Object.create(null)}u.fromArray=function(e,t){for(var n=new u,r=0,i=e.length;r<i;r++)n.add(e[r],t);return n},u.prototype.size=function(){return a?this._set.size:Object.getOwnPropertyNames(this._set).length},u.prototype.add=function(e,t){var n=a?e:i.toSetString(e),r=a?this.has(e):o.call(this._set,n),s=this._array.length;r&&!t||this._array.push(e),r||(a?this._set.set(e,s):this._set[n]=s)},u.prototype.has=function(e){if(a)return this._set.has(e);var t=i.toSetString(e);return o.call(this._set,t)},u.prototype.indexOf=function(e){if(a){var t=this._set.get(e);if(t>=0)return t}else{var n=i.toSetString(e);if(o.call(this._set,n))return this._set[n]}throw new Error('"'+e+'" is not in the set.')},u.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error("No element indexed by "+e)},u.prototype.toArray=function(){return this._array.slice()},r=u})),s.register("1DOoG",(function(t,n){var r;e(t.exports,"MappingList",(()=>r),(e=>r=e));var i=s("6I6y5");function o(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}o.prototype.unsortedForEach=function(e,t){this._array.forEach(e,t)},o.prototype.add=function(e){var t,n,r,s,o,a;t=this._last,n=e,r=t.generatedLine,s=n.generatedLine,o=t.generatedColumn,a=n.generatedColumn,s>r||s==r&&a>=o||i.compareByGeneratedPositionsInflated(t,n)<=0?(this._last=e,this._array.push(e)):(this._sorted=!1,this._array.push(e))},o.prototype.toArray=function(){return this._sorted||(this._array.sort(i.compareByGeneratedPositionsInflated),this._sorted=!0),this._array},r=o})),s.register("lLalb",(function(t,n){var r;e(t.exports,"SourceMapConsumer",(()=>r),(e=>r=e));var i=s("6I6y5"),o=s("lntwO"),a=s("kKGit").ArraySet,u=s("f30X9"),l=s("flTmO").quickSort;function c(e,t){var n=e;return"string"==typeof e&&(n=i.parseSourceMapInput(e)),null!=n.sections?new f(n,t):new h(n,t)}function h(e,t){var n=e;"string"==typeof e&&(n=i.parseSourceMapInput(e));var r=i.getArg(n,"version"),s=i.getArg(n,"sources"),o=i.getArg(n,"names",[]),u=i.getArg(n,"sourceRoot",null),l=i.getArg(n,"sourcesContent",null),c=i.getArg(n,"mappings"),h=i.getArg(n,"file",null);if(r!=this._version)throw new Error("Unsupported version: "+r);u&&(u=i.normalize(u)),s=s.map(String).map(i.normalize).map((function(e){return u&&i.isAbsolute(u)&&i.isAbsolute(e)?i.relative(u,e):e})),this._names=a.fromArray(o.map(String),!0),this._sources=a.fromArray(s,!0),this._absoluteSources=this._sources.toArray().map((function(e){return i.computeSourceURL(u,e,t)})),this.sourceRoot=u,this.sourcesContent=l,this._mappings=c,this._sourceMapURL=t,this.file=h}function p(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}function f(e,t){var n=e;"string"==typeof e&&(n=i.parseSourceMapInput(e));var r=i.getArg(n,"version"),s=i.getArg(n,"sections");if(r!=this._version)throw new Error("Unsupported version: "+r);this._sources=new a,this._names=new a;var o={line:-1,column:0};this._sections=s.map((function(e){if(e.url)throw new Error("Support for url field in sections not implemented.");var n=i.getArg(e,"offset"),r=i.getArg(n,"line"),s=i.getArg(n,"column");if(r<o.line||r===o.line&&s<o.column)throw new Error("Section offsets must be ordered and non-overlapping.");return o=n,{generatedOffset:{generatedLine:r+1,generatedColumn:s+1},consumer:new c(i.getArg(e,"map"),t)}}))}c.fromSourceMap=function(e,t){return h.fromSourceMap(e,t)},c.prototype._version=3,c.prototype.__generatedMappings=null,Object.defineProperty(c.prototype,"_generatedMappings",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),c.prototype.__originalMappings=null,Object.defineProperty(c.prototype,"_originalMappings",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),c.prototype._charIsMappingSeparator=function(e,t){var n=e.charAt(t);return";"===n||","===n},c.prototype._parseMappings=function(e,t){throw new Error("Subclasses must implement _parseMappings")},c.GENERATED_ORDER=1,c.ORIGINAL_ORDER=2,c.GREATEST_LOWER_BOUND=1,c.LEAST_UPPER_BOUND=2,c.prototype.eachMapping=function(e,t,n){var r,s=t||null;switch(n||c.GENERATED_ORDER){case c.GENERATED_ORDER:r=this._generatedMappings;break;case c.ORIGINAL_ORDER:r=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var o=this.sourceRoot;r.map((function(e){var t=null===e.source?null:this._sources.at(e.source);return{source:t=i.computeSourceURL(o,t,this._sourceMapURL),generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:null===e.name?null:this._names.at(e.name)}}),this).forEach(e,s)},c.prototype.allGeneratedPositionsFor=function(e){var t=i.getArg(e,"line"),n={source:i.getArg(e,"source"),originalLine:t,originalColumn:i.getArg(e,"column",0)};if(n.source=this._findSourceIndex(n.source),n.source<0)return[];var r=[],s=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",i.compareByOriginalPositions,o.LEAST_UPPER_BOUND);if(s>=0){var a=this._originalMappings[s];if(void 0===e.column)for(var u=a.originalLine;a&&a.originalLine===u;)r.push({line:i.getArg(a,"generatedLine",null),column:i.getArg(a,"generatedColumn",null),lastColumn:i.getArg(a,"lastGeneratedColumn",null)}),a=this._originalMappings[++s];else for(var l=a.originalColumn;a&&a.originalLine===t&&a.originalColumn==l;)r.push({line:i.getArg(a,"generatedLine",null),column:i.getArg(a,"generatedColumn",null),lastColumn:i.getArg(a,"lastGeneratedColumn",null)}),a=this._originalMappings[++s]}return r},r=c,h.prototype=Object.create(c.prototype),h.prototype.consumer=c,h.prototype._findSourceIndex=function(e){var t,n=e;if(null!=this.sourceRoot&&(n=i.relative(this.sourceRoot,n)),this._sources.has(n))return this._sources.indexOf(n);for(t=0;t<this._absoluteSources.length;++t)if(this._absoluteSources[t]==e)return t;return-1},h.fromSourceMap=function(e,t){var n=Object.create(h.prototype),r=n._names=a.fromArray(e._names.toArray(),!0),s=n._sources=a.fromArray(e._sources.toArray(),!0);n.sourceRoot=e._sourceRoot,n.sourcesContent=e._generateSourcesContent(n._sources.toArray(),n.sourceRoot),n.file=e._file,n._sourceMapURL=t,n._absoluteSources=n._sources.toArray().map((function(e){return i.computeSourceURL(n.sourceRoot,e,t)}));for(var o=e._mappings.toArray().slice(),u=n.__generatedMappings=[],c=n.__originalMappings=[],f=0,d=o.length;f<d;f++){var g=o[f],m=new p;m.generatedLine=g.generatedLine,m.generatedColumn=g.generatedColumn,g.source&&(m.source=s.indexOf(g.source),m.originalLine=g.originalLine,m.originalColumn=g.originalColumn,g.name&&(m.name=r.indexOf(g.name)),c.push(m)),u.push(m)}return l(n.__originalMappings,i.compareByOriginalPositions),n},h.prototype._version=3,Object.defineProperty(h.prototype,"sources",{get:function(){return this._absoluteSources.slice()}}),h.prototype._parseMappings=function(e,t){for(var n,r,s,o,a,c=1,h=0,f=0,d=0,g=0,m=0,D=e.length,v=0,y={},k={},_=[],C=[];v<D;)if(";"===e.charAt(v))c++,v++,h=0;else if(","===e.charAt(v))v++;else{for((n=new p).generatedLine=c,o=v;o<D&&!this._charIsMappingSeparator(e,o);o++);if(s=y[r=e.slice(v,o)])v+=r.length;else{for(s=[];v<o;)u.decode(e,v,k),a=k.value,v=k.rest,s.push(a);if(2===s.length)throw new Error("Found a source, but no line and column");if(3===s.length)throw new Error("Found a source and line, but no column");y[r]=s}n.generatedColumn=h+s[0],h=n.generatedColumn,s.length>1&&(n.source=g+s[1],g+=s[1],n.originalLine=f+s[2],f=n.originalLine,n.originalLine+=1,n.originalColumn=d+s[3],d=n.originalColumn,s.length>4&&(n.name=m+s[4],m+=s[4])),C.push(n),"number"==typeof n.originalLine&&_.push(n)}l(C,i.compareByGeneratedPositionsDeflated),this.__generatedMappings=C,l(_,i.compareByOriginalPositions),this.__originalMappings=_},h.prototype._findMapping=function(e,t,n,r,i,s){if(e[n]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+e[n]);if(e[r]<0)throw new TypeError("Column must be greater than or equal to 0, got "+e[r]);return o.search(e,t,i,s)},h.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var t=this._generatedMappings[e];if(e+1<this._generatedMappings.length){var n=this._generatedMappings[e+1];if(t.generatedLine===n.generatedLine){t.lastGeneratedColumn=n.generatedColumn-1;continue}}t.lastGeneratedColumn=1/0}},h.prototype.originalPositionFor=function(e){var t={generatedLine:i.getArg(e,"line"),generatedColumn:i.getArg(e,"column")},n=this._findMapping(t,this._generatedMappings,"generatedLine","generatedColumn",i.compareByGeneratedPositionsDeflated,i.getArg(e,"bias",c.GREATEST_LOWER_BOUND));if(n>=0){var r=this._generatedMappings[n];if(r.generatedLine===t.generatedLine){var s=i.getArg(r,"source",null);null!==s&&(s=this._sources.at(s),s=i.computeSourceURL(this.sourceRoot,s,this._sourceMapURL));var o=i.getArg(r,"name",null);return null!==o&&(o=this._names.at(o)),{source:s,line:i.getArg(r,"originalLine",null),column:i.getArg(r,"originalColumn",null),name:o}}}return{source:null,line:null,column:null,name:null}},h.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&(this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some((function(e){return null==e})))},h.prototype.sourceContentFor=function(e,t){if(!this.sourcesContent)return null;var n=this._findSourceIndex(e);if(n>=0)return this.sourcesContent[n];var r,s=e;if(null!=this.sourceRoot&&(s=i.relative(this.sourceRoot,s)),null!=this.sourceRoot&&(r=i.urlParse(this.sourceRoot))){var o=s.replace(/^file:\/\//,"");if("file"==r.scheme&&this._sources.has(o))return this.sourcesContent[this._sources.indexOf(o)];if((!r.path||"/"==r.path)&&this._sources.has("/"+s))return this.sourcesContent[this._sources.indexOf("/"+s)]}if(t)return null;throw new Error('"'+s+'" is not in the SourceMap.')},h.prototype.generatedPositionFor=function(e){var t=i.getArg(e,"source");if((t=this._findSourceIndex(t))<0)return{line:null,column:null,lastColumn:null};var n={source:t,originalLine:i.getArg(e,"line"),originalColumn:i.getArg(e,"column")},r=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",i.compareByOriginalPositions,i.getArg(e,"bias",c.GREATEST_LOWER_BOUND));if(r>=0){var s=this._originalMappings[r];if(s.source===n.source)return{line:i.getArg(s,"generatedLine",null),column:i.getArg(s,"generatedColumn",null),lastColumn:i.getArg(s,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}},f.prototype=Object.create(c.prototype),f.prototype.constructor=c,f.prototype._version=3,Object.defineProperty(f.prototype,"sources",{get:function(){for(var e=[],t=0;t<this._sections.length;t++)for(var n=0;n<this._sections[t].consumer.sources.length;n++)e.push(this._sections[t].consumer.sources[n]);return e}}),f.prototype.originalPositionFor=function(e){var t={generatedLine:i.getArg(e,"line"),generatedColumn:i.getArg(e,"column")},n=o.search(t,this._sections,(function(e,t){var n=e.generatedLine-t.generatedOffset.generatedLine;return n||e.generatedColumn-t.generatedOffset.generatedColumn})),r=this._sections[n];return r?r.consumer.originalPositionFor({line:t.generatedLine-(r.generatedOffset.generatedLine-1),column:t.generatedColumn-(r.generatedOffset.generatedLine===t.generatedLine?r.generatedOffset.generatedColumn-1:0),bias:e.bias}):{source:null,line:null,column:null,name:null}},f.prototype.hasContentsOfAllSources=function(){return this._sections.every((function(e){return e.consumer.hasContentsOfAllSources()}))},f.prototype.sourceContentFor=function(e,t){for(var n=0;n<this._sections.length;n++){var r=this._sections[n].consumer.sourceContentFor(e,!0);if(r)return r}if(t)return null;throw new Error('"'+e+'" is not in the SourceMap.')},f.prototype.generatedPositionFor=function(e){for(var t=0;t<this._sections.length;t++){var n=this._sections[t];if(-1!==n.consumer._findSourceIndex(i.getArg(e,"source"))){var r=n.consumer.generatedPositionFor(e);if(r)return{line:r.line+(n.generatedOffset.generatedLine-1),column:r.column+(n.generatedOffset.generatedLine===r.line?n.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},f.prototype._parseMappings=function(e,t){this.__generatedMappings=[],this.__originalMappings=[];for(var n=0;n<this._sections.length;n++)for(var r=this._sections[n],s=r.consumer._generatedMappings,o=0;o<s.length;o++){var a=s[o],u=r.consumer._sources.at(a.source);u=i.computeSourceURL(r.consumer.sourceRoot,u,this._sourceMapURL),this._sources.add(u),u=this._sources.indexOf(u);var c=null;a.name&&(c=r.consumer._names.at(a.name),this._names.add(c),c=this._names.indexOf(c));var h={source:u,generatedLine:a.generatedLine+(r.generatedOffset.generatedLine-1),generatedColumn:a.generatedColumn+(r.generatedOffset.generatedLine===a.generatedLine?r.generatedOffset.generatedColumn-1:0),originalLine:a.originalLine,originalColumn:a.originalColumn,name:c};this.__generatedMappings.push(h),"number"==typeof h.originalLine&&this.__originalMappings.push(h)}l(this.__generatedMappings,i.compareByGeneratedPositionsDeflated),l(this.__originalMappings,i.compareByOriginalPositions)}})),s.register("lntwO",(function(t,n){var r,i,s;function o(e,t,n,r,s,a){var u=Math.floor((t-e)/2)+e,l=s(n,r[u],!0);return 0===l?u:l>0?t-u>1?o(u,t,n,r,s,a):a==i?t<r.length?t:-1:u:u-e>1?o(e,u,n,r,s,a):a==i?u:e<0?-1:e}e(t.exports,"GREATEST_LOWER_BOUND",(()=>r),(e=>r=e)),e(t.exports,"LEAST_UPPER_BOUND",(()=>i),(e=>i=e)),e(t.exports,"search",(()=>s),(e=>s=e)),r=1,i=2,s=function(e,t,n,i){if(0===t.length)return-1;var s=o(-1,t.length,e,t,n,i||r);if(s<0)return-1;for(;s-1>=0&&0===n(t[s],t[s-1],!0);)--s;return s}})),s.register("flTmO",(function(t,n){var r;function i(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function s(e,t,n,r){if(n<r){var o=n-1;i(e,(c=n,h=r,Math.round(c+Math.random()*(h-c))),r);for(var a=e[r],u=n;u<r;u++)t(e[u],a)<=0&&i(e,o+=1,u);i(e,o+1,u);var l=o+1;s(e,t,n,l-1),s(e,t,l+1,r)}var c,h}e(t.exports,"quickSort",(()=>r),(e=>r=e)),r=function(e,t){s(e,t,0,e.length-1)}})),s.register("jtIqc",(function(t,n){var r;e(t.exports,"SourceNode",(()=>r),(e=>r=e));var i=s("h712z").SourceMapGenerator,o=s("6I6y5"),a=/(\r?\n)/;function u(e,t,n,r,i){this.children=[],this.sourceContents={},this.line=null==e?null:e,this.column=null==t?null:t,this.source=null==n?null:n,this.name=null==i?null:i,this.$$$isSourceNode$$$=!0,null!=r&&this.add(r)}u.fromStringWithSourceMap=function(e,t,n){var r=new u,i=e.split(a),s=0,l=function(){return e()+(e()||"");function e(){return s<i.length?i[s++]:void 0}},c=1,h=0,p=null;return t.eachMapping((function(e){if(null!==p){if(!(c<e.generatedLine)){var t=(n=i[s]||"").substr(0,e.generatedColumn-h);return i[s]=n.substr(e.generatedColumn-h),h=e.generatedColumn,f(p,t),void(p=e)}f(p,l()),c++,h=0}for(;c<e.generatedLine;)r.add(l()),c++;if(h<e.generatedColumn){var n=i[s]||"";r.add(n.substr(0,e.generatedColumn)),i[s]=n.substr(e.generatedColumn),h=e.generatedColumn}p=e}),this),s<i.length&&(p&&f(p,l()),r.add(i.splice(s).join(""))),t.sources.forEach((function(e){var i=t.sourceContentFor(e);null!=i&&(null!=n&&(e=o.join(n,e)),r.setSourceContent(e,i))})),r;function f(e,t){if(null===e||void 0===e.source)r.add(t);else{var i=n?o.join(n,e.source):e.source;r.add(new u(e.originalLine,e.originalColumn,i,t,e.name))}}},u.prototype.add=function(e){if(Array.isArray(e))e.forEach((function(e){this.add(e)}),this);else{if(!e.$$$isSourceNode$$$&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);e&&this.children.push(e)}return this},u.prototype.prepend=function(e){if(Array.isArray(e))for(var t=e.length-1;t>=0;t--)this.prepend(e[t]);else{if(!e.$$$isSourceNode$$$&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);this.children.unshift(e)}return this},u.prototype.walk=function(e){for(var t,n=0,r=this.children.length;n<r;n++)(t=this.children[n]).$$$isSourceNode$$$?t.walk(e):""!==t&&e(t,{source:this.source,line:this.line,column:this.column,name:this.name})},u.prototype.join=function(e){var t,n,r=this.children.length;if(r>0){for(t=[],n=0;n<r-1;n++)t.push(this.children[n]),t.push(e);t.push(this.children[n]),this.children=t}return this},u.prototype.replaceRight=function(e,t){var n=this.children[this.children.length-1];return n.$$$isSourceNode$$$?n.replaceRight(e,t):"string"==typeof n?this.children[this.children.length-1]=n.replace(e,t):this.children.push("".replace(e,t)),this},u.prototype.setSourceContent=function(e,t){this.sourceContents[o.toSetString(e)]=t},u.prototype.walkSourceContents=function(e){for(var t=0,n=this.children.length;t<n;t++)this.children[t].$$$isSourceNode$$$&&this.children[t].walkSourceContents(e);var r=Object.keys(this.sourceContents);for(t=0,n=r.length;t<n;t++)e(o.fromSetString(r[t]),this.sourceContents[r[t]])},u.prototype.toString=function(){var e="";return this.walk((function(t){e+=t})),e},u.prototype.toStringWithSourceMap=function(e){var t={code:"",line:1,column:0},n=new i(e),r=!1,s=null,o=null,a=null,u=null;return this.walk((function(e,i){t.code+=e,null!==i.source&&null!==i.line&&null!==i.column?(s===i.source&&o===i.line&&a===i.column&&u===i.name||n.addMapping({source:i.source,original:{line:i.line,column:i.column},generated:{line:t.line,column:t.column},name:i.name}),s=i.source,o=i.line,a=i.column,u=i.name,r=!0):r&&(n.addMapping({generated:{line:t.line,column:t.column}}),s=null,r=!1);for(var l=0,c=e.length;l<c;l++)10===e.charCodeAt(l)?(t.line++,t.column=0,l+1===c?(s=null,r=!1):r&&n.addMapping({source:i.source,original:{line:i.line,column:i.column},generated:{line:t.line,column:t.column},name:i.name})):t.column++})),this.walkSourceContents((function(e,t){n.setSourceContent(e,t)})),{code:t.code,map:n}},r=u})),s.register("gXZrF",(function(e,t){}));var o={};!function(e){"use strict";function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function r(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function s(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=r(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var i=0;return function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function o(){return{async:!1,baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1}}function a(t){e.defaults=t}e.defaults=o();var u=/[&<>"']/,l=/[&<>"']/g,c=/[<>"']|&(?!#?\w+;)/,h=/[<>"']|&(?!#?\w+;)/g,p={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},f=function(e){return p[e]};function d(e,t){if(t){if(u.test(e))return e.replace(l,f)}else if(c.test(e))return e.replace(h,f);return e}var g=/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi;function m(e){return e.replace(g,(function(e,t){return"colon"===(t=t.toLowerCase())?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):""}))}var D=/(^|[^\[])\^/g;function v(e,t){e="string"==typeof e?e:e.source,t=t||"";var n={replace:function(t,r){return r=(r=r.source||r).replace(D,"$1"),e=e.replace(t,r),n},getRegex:function(){return new RegExp(e,t)}};return n}var y=/[^\w:]/g,k=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function _(e,t,n){if(e){var r;try{r=decodeURIComponent(m(n)).replace(y,"").toLowerCase()}catch(e){return null}if(0===r.indexOf("javascript:")||0===r.indexOf("vbscript:")||0===r.indexOf("data:"))return null}t&&!k.test(n)&&(n=x(t,n));try{n=encodeURI(n).replace(/%25/g,"%")}catch(e){return null}return n}var C={},A=/^[^:]+:\/*[^/]*$/,E=/^([^:]+:)[\s\S]*$/,b=/^([^:]+:\/*[^/]*)[\s\S]*$/;function x(e,t){C[" "+e]||(A.test(e)?C[" "+e]=e+"/":C[" "+e]=B(e,"/",!0));var n=-1===(e=C[" "+e]).indexOf(":");return"//"===t.substring(0,2)?n?t:e.replace(E,"$1")+t:"/"===t.charAt(0)?n?t:e.replace(b,"$1")+t:e+t}var w={exec:function(){}};function F(e){for(var t,n,r=1;r<arguments.length;r++)for(n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function S(e,t){var n=e.replace(/\|/g,(function(e,t,n){for(var r=!1,i=t;--i>=0&&"\\"===n[i];)r=!r;return r?"|":" |"})).split(/ \|/),r=0;if(n[0].trim()||n.shift(),n.length>0&&!n[n.length-1].trim()&&n.pop(),n.length>t)n.splice(t);else for(;n.length<t;)n.push("");for(;r<n.length;r++)n[r]=n[r].trim().replace(/\\\|/g,"|");return n}function B(e,t,n){var r=e.length;if(0===r)return"";for(var i=0;i<r;){var s=e.charAt(r-i-1);if(s!==t||n){if(s===t||!n)break;i++}else i++}return e.slice(0,r-i)}function P(e,t){if(-1===e.indexOf(t[1]))return-1;for(var n=e.length,r=0,i=0;i<n;i++)if("\\"===e[i])i++;else if(e[i]===t[0])r++;else if(e[i]===t[1]&&--r<0)return i;return-1}function L(e){e&&e.sanitize&&!e.silent&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options")}function O(e,t){if(t<1)return"";for(var n="";t>1;)1&t&&(n+=e),t>>=1,e+=e;return n+e}function M(e,t,n,r){var i=t.href,s=t.title?d(t.title):null,o=e[1].replace(/\\([\[\]])/g,"$1");if("!"!==e[0].charAt(0)){r.state.inLink=!0;var a={type:"link",raw:n,href:i,title:s,text:o,tokens:r.inlineTokens(o)};return r.state.inLink=!1,a}return{type:"image",raw:n,href:i,title:s,text:d(o)}}function $(e,t){var n=e.match(/^(\s+)(?:```)/);if(null===n)return t;var r=n[1];return t.split("\n").map((function(e){var t=e.match(/^\s+/);return null===t?e:t[0].length>=r.length?e.slice(r.length):e})).join("\n")}var I=function(){function t(t){this.options=t||e.defaults}var n=t.prototype;return n.space=function(e){var t=this.rules.block.newline.exec(e);if(t&&t[0].length>0)return{type:"space",raw:t[0]}},n.code=function(e){var t=this.rules.block.code.exec(e);if(t){var n=t[0].replace(/^ {1,4}/gm,"");return{type:"code",raw:t[0],codeBlockStyle:"indented",text:this.options.pedantic?n:B(n,"\n")}}},n.fences=function(e){var t=this.rules.block.fences.exec(e);if(t){var n=t[0],r=$(n,t[3]||"");return{type:"code",raw:n,lang:t[2]?t[2].trim():t[2],text:r}}},n.heading=function(e){var t=this.rules.block.heading.exec(e);if(t){var n=t[2].trim();if(/#$/.test(n)){var r=B(n,"#");this.options.pedantic?n=r.trim():r&&!/ $/.test(r)||(n=r.trim())}return{type:"heading",raw:t[0],depth:t[1].length,text:n,tokens:this.lexer.inline(n)}}},n.hr=function(e){var t=this.rules.block.hr.exec(e);if(t)return{type:"hr",raw:t[0]}},n.blockquote=function(e){var t=this.rules.block.blockquote.exec(e);if(t){var n=t[0].replace(/^ *>[ \t]?/gm,"");return{type:"blockquote",raw:t[0],tokens:this.lexer.blockTokens(n,[]),text:n}}},n.list=function(e){var t=this.rules.block.list.exec(e);if(t){var n,r,i,o,a,u,l,c,h,p,f,d,g=t[1].trim(),m=g.length>1,D={type:"list",raw:"",ordered:m,start:m?+g.slice(0,-1):"",loose:!1,items:[]};g=m?"\\d{1,9}\\"+g.slice(-1):"\\"+g,this.options.pedantic&&(g=m?g:"[*+-]");for(var v=new RegExp("^( {0,3}"+g+")((?:[\t ][^\\n]*)?(?:\\n|$))");e&&(d=!1,t=v.exec(e))&&!this.rules.block.hr.test(e);){if(n=t[0],e=e.substring(n.length),c=t[2].split("\n",1)[0],h=e.split("\n",1)[0],this.options.pedantic?(o=2,f=c.trimLeft()):(o=(o=t[2].search(/[^ ]/))>4?1:o,f=c.slice(o),o+=t[1].length),u=!1,!c&&/^ *$/.test(h)&&(n+=h+"\n",e=e.substring(h.length+1),d=!0),!d)for(var y=new RegExp("^ {0,"+Math.min(3,o-1)+"}(?:[*+-]|\\d{1,9}[.)])((?: [^\\n]*)?(?:\\n|$))"),k=new RegExp("^ {0,"+Math.min(3,o-1)+"}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)"),_=new RegExp("^ {0,"+Math.min(3,o-1)+"}(?:```|~~~)"),C=new RegExp("^ {0,"+Math.min(3,o-1)+"}#");e&&(c=p=e.split("\n",1)[0],this.options.pedantic&&(c=c.replace(/^ {1,4}(?=( {4})*[^ ])/g,"  ")),!_.test(c))&&!C.test(c)&&!y.test(c)&&!k.test(e);){if(c.search(/[^ ]/)>=o||!c.trim())f+="\n"+c.slice(o);else{if(u)break;f+="\n"+c}u||c.trim()||(u=!0),n+=p+"\n",e=e.substring(p.length+1)}D.loose||(l?D.loose=!0:/\n *\n *$/.test(n)&&(l=!0)),this.options.gfm&&(r=/^\[[ xX]\] /.exec(f))&&(i="[ ] "!==r[0],f=f.replace(/^\[[ xX]\] +/,"")),D.items.push({type:"list_item",raw:n,task:!!r,checked:i,loose:!1,text:f}),D.raw+=n}D.items[D.items.length-1].raw=n.trimRight(),D.items[D.items.length-1].text=f.trimRight(),D.raw=D.raw.trimRight();var A=D.items.length;for(a=0;a<A;a++){this.lexer.state.top=!1,D.items[a].tokens=this.lexer.blockTokens(D.items[a].text,[]);var E=D.items[a].tokens.filter((function(e){return"space"===e.type})),b=E.every((function(e){for(var t,n=0,r=s(e.raw.split(""));!(t=r()).done;)if("\n"===t.value&&(n+=1),n>1)return!0;return!1}));!D.loose&&E.length&&b&&(D.loose=!0,D.items[a].loose=!0)}return D}},n.html=function(e){var t=this.rules.block.html.exec(e);if(t){var n={type:"html",raw:t[0],pre:!this.options.sanitizer&&("pre"===t[1]||"script"===t[1]||"style"===t[1]),text:t[0]};if(this.options.sanitize){var r=this.options.sanitizer?this.options.sanitizer(t[0]):d(t[0]);n.type="paragraph",n.text=r,n.tokens=this.lexer.inline(r)}return n}},n.def=function(e){var t=this.rules.block.def.exec(e);if(t)return t[3]&&(t[3]=t[3].substring(1,t[3].length-1)),{type:"def",tag:t[1].toLowerCase().replace(/\s+/g," "),raw:t[0],href:t[2],title:t[3]}},n.table=function(e){var t=this.rules.block.table.exec(e);if(t){var n={type:"table",header:S(t[1]).map((function(e){return{text:e}})),align:t[2].replace(/^ *|\| *$/g,"").split(/ *\| */),rows:t[3]&&t[3].trim()?t[3].replace(/\n[ \t]*$/,"").split("\n"):[]};if(n.header.length===n.align.length){n.raw=t[0];var r,i,s,o,a=n.align.length;for(r=0;r<a;r++)/^ *-+: *$/.test(n.align[r])?n.align[r]="right":/^ *:-+: *$/.test(n.align[r])?n.align[r]="center":/^ *:-+ *$/.test(n.align[r])?n.align[r]="left":n.align[r]=null;for(a=n.rows.length,r=0;r<a;r++)n.rows[r]=S(n.rows[r],n.header.length).map((function(e){return{text:e}}));for(a=n.header.length,i=0;i<a;i++)n.header[i].tokens=this.lexer.inline(n.header[i].text);for(a=n.rows.length,i=0;i<a;i++)for(o=n.rows[i],s=0;s<o.length;s++)o[s].tokens=this.lexer.inline(o[s].text);return n}}},n.lheading=function(e){var t=this.rules.block.lheading.exec(e);if(t)return{type:"heading",raw:t[0],depth:"="===t[2].charAt(0)?1:2,text:t[1],tokens:this.lexer.inline(t[1])}},n.paragraph=function(e){var t=this.rules.block.paragraph.exec(e);if(t){var n="\n"===t[1].charAt(t[1].length-1)?t[1].slice(0,-1):t[1];return{type:"paragraph",raw:t[0],text:n,tokens:this.lexer.inline(n)}}},n.text=function(e){var t=this.rules.block.text.exec(e);if(t)return{type:"text",raw:t[0],text:t[0],tokens:this.lexer.inline(t[0])}},n.escape=function(e){var t=this.rules.inline.escape.exec(e);if(t)return{type:"escape",raw:t[0],text:d(t[1])}},n.tag=function(e){var t=this.rules.inline.tag.exec(e);if(t)return!this.lexer.state.inLink&&/^<a /i.test(t[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&/^<\/a>/i.test(t[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&/^<(pre|code|kbd|script)(\s|>)/i.test(t[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(t[0])&&(this.lexer.state.inRawBlock=!1),{type:this.options.sanitize?"text":"html",raw:t[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(t[0]):d(t[0]):t[0]}},n.link=function(e){var t=this.rules.inline.link.exec(e);if(t){var n=t[2].trim();if(!this.options.pedantic&&/^</.test(n)){if(!/>$/.test(n))return;var r=B(n.slice(0,-1),"\\");if((n.length-r.length)%2==0)return}else{var i=P(t[2],"()");if(i>-1){var s=(0===t[0].indexOf("!")?5:4)+t[1].length+i;t[2]=t[2].substring(0,i),t[0]=t[0].substring(0,s).trim(),t[3]=""}}var o=t[2],a="";if(this.options.pedantic){var u=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(o);u&&(o=u[1],a=u[3])}else a=t[3]?t[3].slice(1,-1):"";return o=o.trim(),/^</.test(o)&&(o=this.options.pedantic&&!/>$/.test(n)?o.slice(1):o.slice(1,-1)),M(t,{href:o?o.replace(this.rules.inline._escapes,"$1"):o,title:a?a.replace(this.rules.inline._escapes,"$1"):a},t[0],this.lexer)}},n.reflink=function(e,t){var n;if((n=this.rules.inline.reflink.exec(e))||(n=this.rules.inline.nolink.exec(e))){var r=(n[2]||n[1]).replace(/\s+/g," ");if(!(r=t[r.toLowerCase()])||!r.href){var i=n[0].charAt(0);return{type:"text",raw:i,text:i}}return M(n,r,n[0],this.lexer)}},n.emStrong=function(e,t,n){void 0===n&&(n="");var r=this.rules.inline.emStrong.lDelim.exec(e);if(r&&(!r[3]||!n.match(/(?:[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDF70-\uDF81\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDE70-\uDEBE\uDEC0-\uDEC9\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])/))){var i=r[1]||r[2]||"";if(!i||i&&(""===n||this.rules.inline.punctuation.exec(n))){var s,o,a=r[0].length-1,u=a,l=0,c="*"===r[0][0]?this.rules.inline.emStrong.rDelimAst:this.rules.inline.emStrong.rDelimUnd;for(c.lastIndex=0,t=t.slice(-1*e.length+a);null!=(r=c.exec(t));)if(s=r[1]||r[2]||r[3]||r[4]||r[5]||r[6])if(o=s.length,r[3]||r[4])u+=o;else if(!((r[5]||r[6])&&a%3)||(a+o)%3){if(!((u-=o)>0)){if(o=Math.min(o,o+u+l),Math.min(a,o)%2){var h=e.slice(1,a+r.index+o);return{type:"em",raw:e.slice(0,a+r.index+o+1),text:h,tokens:this.lexer.inlineTokens(h)}}var p=e.slice(2,a+r.index+o-1);return{type:"strong",raw:e.slice(0,a+r.index+o+1),text:p,tokens:this.lexer.inlineTokens(p)}}}else l+=o}}},n.codespan=function(e){var t=this.rules.inline.code.exec(e);if(t){var n=t[2].replace(/\n/g," "),r=/[^ ]/.test(n),i=/^ /.test(n)&&/ $/.test(n);return r&&i&&(n=n.substring(1,n.length-1)),n=d(n,!0),{type:"codespan",raw:t[0],text:n}}},n.br=function(e){var t=this.rules.inline.br.exec(e);if(t)return{type:"br",raw:t[0]}},n.del=function(e){var t=this.rules.inline.del.exec(e);if(t)return{type:"del",raw:t[0],text:t[2],tokens:this.lexer.inlineTokens(t[2])}},n.autolink=function(e,t){var n,r,i=this.rules.inline.autolink.exec(e);if(i)return r="@"===i[2]?"mailto:"+(n=d(this.options.mangle?t(i[1]):i[1])):n=d(i[1]),{type:"link",raw:i[0],text:n,href:r,tokens:[{type:"text",raw:n,text:n}]}},n.url=function(e,t){var n;if(n=this.rules.inline.url.exec(e)){var r,i;if("@"===n[2])i="mailto:"+(r=d(this.options.mangle?t(n[0]):n[0]));else{var s;do{s=n[0],n[0]=this.rules.inline._backpedal.exec(n[0])[0]}while(s!==n[0]);r=d(n[0]),i="www."===n[1]?"http://"+r:r}return{type:"link",raw:n[0],text:r,href:i,tokens:[{type:"text",raw:r,text:r}]}}},n.inlineText=function(e,t){var n,r=this.rules.inline.text.exec(e);if(r)return n=this.lexer.state.inRawBlock?this.options.sanitize?this.options.sanitizer?this.options.sanitizer(r[0]):d(r[0]):r[0]:d(this.options.smartypants?t(r[0]):r[0]),{type:"text",raw:r[0],text:n}},t}(),R={newline:/^(?: *(?:\n|$))+/,code:/^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,fences:/^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,hr:/^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,html:"^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",def:/^ {0,3}\[(label)\]: *(?:\n *)?<?([^\s>]+)>?(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,table:w,lheading:/^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,text:/^[^\n]+/,_label:/(?!\s*\])(?:\\.|[^\[\]\\])+/,_title:/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/};R.def=v(R.def).replace("label",R._label).replace("title",R._title).getRegex(),R.bullet=/(?:[*+-]|\d{1,9}[.)])/,R.listItemStart=v(/^( *)(bull) */).replace("bull",R.bullet).getRegex(),R.list=v(R.list).replace(/bull/g,R.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+R.def.source+")").getRegex(),R._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",R._comment=/<!--(?!-?>)[\s\S]*?(?:-->|$)/,R.html=v(R.html,"i").replace("comment",R._comment).replace("tag",R._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),R.paragraph=v(R._paragraph).replace("hr",R.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("|table","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",R._tag).getRegex(),R.blockquote=v(R.blockquote).replace("paragraph",R.paragraph).getRegex(),R.normal=F({},R),R.gfm=F({},R.normal,{table:"^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"}),R.gfm.table=v(R.gfm.table).replace("hr",R.hr).replace("heading"," {0,3}#{1,6} ").replace("blockquote"," {0,3}>").replace("code"," {4}[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",R._tag).getRegex(),R.gfm.paragraph=v(R._paragraph).replace("hr",R.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("table",R.gfm.table).replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",R._tag).getRegex(),R.pedantic=F({},R.normal,{html:v("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",R._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^(#{1,6})(.*)(?:\n+|$)/,fences:w,paragraph:v(R.normal._paragraph).replace("hr",R.hr).replace("heading"," *#{1,6} *[^\n]").replace("lheading",R.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()});var N={escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:w,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(ref)\]/,nolink:/^!?\[(ref)\](?:\[\])?/,reflinkSearch:"reflink|nolink(?!\\()",emStrong:{lDelim:/^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,rDelimAst:/^[^_*]*?\_\_[^_*]*?\*[^_*]*?(?=\_\_)|[^*]+(?=[^*])|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,rDelimUnd:/^[^_*]*?\*\*[^_*]*?\_[^_*]*?(?=\*\*)|[^_]+(?=[^_])|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/},code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:w,text:/^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,punctuation:/^([\spunctuation])/};function T(e){return e.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…")}function z(e){var t,n,r="",i=e.length;for(t=0;t<i;t++)n=e.charCodeAt(t),Math.random()>.5&&(n="x"+n.toString(16)),r+="&#"+n+";";return r}N._punctuation="!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~",N.punctuation=v(N.punctuation).replace(/punctuation/g,N._punctuation).getRegex(),N.blockSkip=/\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g,N.escapedEmSt=/\\\*|\\_/g,N._comment=v(R._comment).replace("(?:--\x3e|$)","--\x3e").getRegex(),N.emStrong.lDelim=v(N.emStrong.lDelim).replace(/punct/g,N._punctuation).getRegex(),N.emStrong.rDelimAst=v(N.emStrong.rDelimAst,"g").replace(/punct/g,N._punctuation).getRegex(),N.emStrong.rDelimUnd=v(N.emStrong.rDelimUnd,"g").replace(/punct/g,N._punctuation).getRegex(),N._escapes=/\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g,N._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,N._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,N.autolink=v(N.autolink).replace("scheme",N._scheme).replace("email",N._email).getRegex(),N._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,N.tag=v(N.tag).replace("comment",N._comment).replace("attribute",N._attribute).getRegex(),N._label=/(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,N._href=/<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/,N._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,N.link=v(N.link).replace("label",N._label).replace("href",N._href).replace("title",N._title).getRegex(),N.reflink=v(N.reflink).replace("label",N._label).replace("ref",R._label).getRegex(),N.nolink=v(N.nolink).replace("ref",R._label).getRegex(),N.reflinkSearch=v(N.reflinkSearch,"g").replace("reflink",N.reflink).replace("nolink",N.nolink).getRegex(),N.normal=F({},N),N.pedantic=F({},N.normal,{strong:{start:/^__|\*\*/,middle:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,endAst:/\*\*(?!\*)/g,endUnd:/__(?!_)/g},em:{start:/^_|\*/,middle:/^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,endAst:/\*(?!\*)/g,endUnd:/_(?!_)/g},link:v(/^!?\[(label)\]\((.*?)\)/).replace("label",N._label).getRegex(),reflink:v(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",N._label).getRegex()}),N.gfm=F({},N.normal,{escape:v(N.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/}),N.gfm.url=v(N.gfm.url,"i").replace("email",N.gfm._extended_email).getRegex(),N.breaks=F({},N.gfm,{br:v(N.br).replace("{2,}","*").getRegex(),text:v(N.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()});var j=function(){function t(t){this.tokens=[],this.tokens.links=Object.create(null),this.options=t||e.defaults,this.options.tokenizer=this.options.tokenizer||new I,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};var n={block:R.normal,inline:N.normal};this.options.pedantic?(n.block=R.pedantic,n.inline=N.pedantic):this.options.gfm&&(n.block=R.gfm,this.options.breaks?n.inline=N.breaks:n.inline=N.gfm),this.tokenizer.rules=n}t.lex=function(e,n){return new t(n).lex(e)},t.lexInline=function(e,n){return new t(n).inlineTokens(e)};var r=t.prototype;return r.lex=function(e){var t;for(e=e.replace(/\r\n|\r/g,"\n"),this.blockTokens(e,this.tokens);t=this.inlineQueue.shift();)this.inlineTokens(t.src,t.tokens);return this.tokens},r.blockTokens=function(e,t){var n,r,i,s,o=this;for(void 0===t&&(t=[]),e=this.options.pedantic?e.replace(/\t/g,"    ").replace(/^ +$/gm,""):e.replace(/^( *)(\t+)/gm,(function(e,t,n){return t+"    ".repeat(n.length)}));e;)if(!(this.options.extensions&&this.options.extensions.block&&this.options.extensions.block.some((function(r){return!!(n=r.call({lexer:o},e,t))&&(e=e.substring(n.raw.length),t.push(n),!0)}))))if(n=this.tokenizer.space(e))e=e.substring(n.raw.length),1===n.raw.length&&t.length>0?t[t.length-1].raw+="\n":t.push(n);else if(n=this.tokenizer.code(e))e=e.substring(n.raw.length),!(r=t[t.length-1])||"paragraph"!==r.type&&"text"!==r.type?t.push(n):(r.raw+="\n"+n.raw,r.text+="\n"+n.text,this.inlineQueue[this.inlineQueue.length-1].src=r.text);else if(n=this.tokenizer.fences(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.heading(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.hr(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.blockquote(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.list(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.html(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.def(e))e=e.substring(n.raw.length),!(r=t[t.length-1])||"paragraph"!==r.type&&"text"!==r.type?this.tokens.links[n.tag]||(this.tokens.links[n.tag]={href:n.href,title:n.title}):(r.raw+="\n"+n.raw,r.text+="\n"+n.raw,this.inlineQueue[this.inlineQueue.length-1].src=r.text);else if(n=this.tokenizer.table(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.lheading(e))e=e.substring(n.raw.length),t.push(n);else if(i=e,this.options.extensions&&this.options.extensions.startBlock&&function(){var t=1/0,n=e.slice(1),r=void 0;o.options.extensions.startBlock.forEach((function(e){"number"==typeof(r=e.call({lexer:this},n))&&r>=0&&(t=Math.min(t,r))})),t<1/0&&t>=0&&(i=e.substring(0,t+1))}(),this.state.top&&(n=this.tokenizer.paragraph(i)))r=t[t.length-1],s&&"paragraph"===r.type?(r.raw+="\n"+n.raw,r.text+="\n"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=r.text):t.push(n),s=i.length!==e.length,e=e.substring(n.raw.length);else if(n=this.tokenizer.text(e))e=e.substring(n.raw.length),(r=t[t.length-1])&&"text"===r.type?(r.raw+="\n"+n.raw,r.text+="\n"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=r.text):t.push(n);else if(e){var a="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(a);break}throw new Error(a)}return this.state.top=!0,t},r.inline=function(e,t){return void 0===t&&(t=[]),this.inlineQueue.push({src:e,tokens:t}),t},r.inlineTokens=function(e,t){var n,r,i,s=this;void 0===t&&(t=[]);var o,a,u,l=e;if(this.tokens.links){var c=Object.keys(this.tokens.links);if(c.length>0)for(;null!=(o=this.tokenizer.rules.inline.reflinkSearch.exec(l));)c.includes(o[0].slice(o[0].lastIndexOf("[")+1,-1))&&(l=l.slice(0,o.index)+"["+O("a",o[0].length-2)+"]"+l.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(o=this.tokenizer.rules.inline.blockSkip.exec(l));)l=l.slice(0,o.index)+"["+O("a",o[0].length-2)+"]"+l.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(o=this.tokenizer.rules.inline.escapedEmSt.exec(l));)l=l.slice(0,o.index)+"++"+l.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);for(;e;)if(a||(u=""),a=!1,!(this.options.extensions&&this.options.extensions.inline&&this.options.extensions.inline.some((function(r){return!!(n=r.call({lexer:s},e,t))&&(e=e.substring(n.raw.length),t.push(n),!0)}))))if(n=this.tokenizer.escape(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.tag(e))e=e.substring(n.raw.length),(r=t[t.length-1])&&"text"===n.type&&"text"===r.type?(r.raw+=n.raw,r.text+=n.text):t.push(n);else if(n=this.tokenizer.link(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.reflink(e,this.tokens.links))e=e.substring(n.raw.length),(r=t[t.length-1])&&"text"===n.type&&"text"===r.type?(r.raw+=n.raw,r.text+=n.text):t.push(n);else if(n=this.tokenizer.emStrong(e,l,u))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.codespan(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.br(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.del(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.autolink(e,z))e=e.substring(n.raw.length),t.push(n);else if(this.state.inLink||!(n=this.tokenizer.url(e,z))){if(i=e,this.options.extensions&&this.options.extensions.startInline&&function(){var t=1/0,n=e.slice(1),r=void 0;s.options.extensions.startInline.forEach((function(e){"number"==typeof(r=e.call({lexer:this},n))&&r>=0&&(t=Math.min(t,r))})),t<1/0&&t>=0&&(i=e.substring(0,t+1))}(),n=this.tokenizer.inlineText(i,T))e=e.substring(n.raw.length),"_"!==n.raw.slice(-1)&&(u=n.raw.slice(-1)),a=!0,(r=t[t.length-1])&&"text"===r.type?(r.raw+=n.raw,r.text+=n.text):t.push(n);else if(e){var h="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(h);break}throw new Error(h)}}else e=e.substring(n.raw.length),t.push(n);return t},n(t,null,[{key:"rules",get:function(){return{block:R,inline:N}}}]),t}(),H=function(){function t(t){this.options=t||e.defaults}var n=t.prototype;return n.code=function(e,t,n){var r=(t||"").match(/\S*/)[0];if(this.options.highlight){var i=this.options.highlight(e,r);null!=i&&i!==e&&(n=!0,e=i)}return e=e.replace(/\n$/,"")+"\n",r?'<pre><code class="'+this.options.langPrefix+d(r,!0)+'">'+(n?e:d(e,!0))+"</code></pre>\n":"<pre><code>"+(n?e:d(e,!0))+"</code></pre>\n"},n.blockquote=function(e){return"<blockquote>\n"+e+"</blockquote>\n"},n.html=function(e){return e},n.heading=function(e,t,n,r){return this.options.headerIds?"<h"+t+' id="'+(this.options.headerPrefix+r.slug(n))+'">'+e+"</h"+t+">\n":"<h"+t+">"+e+"</h"+t+">\n"},n.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"},n.list=function(e,t,n){var r=t?"ol":"ul";return"<"+r+(t&&1!==n?' start="'+n+'"':"")+">\n"+e+"</"+r+">\n"},n.listitem=function(e){return"<li>"+e+"</li>\n"},n.checkbox=function(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "},n.paragraph=function(e){return"<p>"+e+"</p>\n"},n.table=function(e,t){return t&&(t="<tbody>"+t+"</tbody>"),"<table>\n<thead>\n"+e+"</thead>\n"+t+"</table>\n"},n.tablerow=function(e){return"<tr>\n"+e+"</tr>\n"},n.tablecell=function(e,t){var n=t.header?"th":"td";return(t.align?"<"+n+' align="'+t.align+'">':"<"+n+">")+e+"</"+n+">\n"},n.strong=function(e){return"<strong>"+e+"</strong>"},n.em=function(e){return"<em>"+e+"</em>"},n.codespan=function(e){return"<code>"+e+"</code>"},n.br=function(){return this.options.xhtml?"<br/>":"<br>"},n.del=function(e){return"<del>"+e+"</del>"},n.link=function(e,t,n){if(null===(e=_(this.options.sanitize,this.options.baseUrl,e)))return n;var r='<a href="'+d(e)+'"';return t&&(r+=' title="'+t+'"'),r+=">"+n+"</a>"},n.image=function(e,t,n){if(null===(e=_(this.options.sanitize,this.options.baseUrl,e)))return n;var r='<img src="'+e+'" alt="'+n+'"';return t&&(r+=' title="'+t+'"'),r+=this.options.xhtml?"/>":">"},n.text=function(e){return e},t}(),U=function(){function e(){}var t=e.prototype;return t.strong=function(e){return e},t.em=function(e){return e},t.codespan=function(e){return e},t.del=function(e){return e},t.html=function(e){return e},t.text=function(e){return e},t.link=function(e,t,n){return""+n},t.image=function(e,t,n){return""+n},t.br=function(){return""},e}(),q=function(){function e(){this.seen={}}var t=e.prototype;return t.serialize=function(e){return e.toLowerCase().trim().replace(/<[!\/a-z].*?>/gi,"").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-")},t.getNextSafeSlug=function(e,t){var n=e,r=0;if(this.seen.hasOwnProperty(n)){r=this.seen[e];do{n=e+"-"+ ++r}while(this.seen.hasOwnProperty(n))}return t||(this.seen[e]=r,this.seen[n]=0),n},t.slug=function(e,t){void 0===t&&(t={});var n=this.serialize(e);return this.getNextSafeSlug(n,t.dryrun)},e}(),V=function(){function t(t){this.options=t||e.defaults,this.options.renderer=this.options.renderer||new H,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new U,this.slugger=new q}t.parse=function(e,n){return new t(n).parse(e)},t.parseInline=function(e,n){return new t(n).parseInline(e)};var n=t.prototype;return n.parse=function(e,t){void 0===t&&(t=!0);var n,r,i,s,o,a,u,l,c,h,p,f,d,g,D,v,y,k,_,C="",A=e.length;for(n=0;n<A;n++)if(h=e[n],!(this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[h.type])||!1===(_=this.options.extensions.renderers[h.type].call({parser:this},h))&&["space","hr","heading","code","table","blockquote","list","html","paragraph","text"].includes(h.type))switch(h.type){case"space":continue;case"hr":C+=this.renderer.hr();continue;case"heading":C+=this.renderer.heading(this.parseInline(h.tokens),h.depth,m(this.parseInline(h.tokens,this.textRenderer)),this.slugger);continue;case"code":C+=this.renderer.code(h.text,h.lang,h.escaped);continue;case"table":for(l="",u="",s=h.header.length,r=0;r<s;r++)u+=this.renderer.tablecell(this.parseInline(h.header[r].tokens),{header:!0,align:h.align[r]});for(l+=this.renderer.tablerow(u),c="",s=h.rows.length,r=0;r<s;r++){for(u="",o=(a=h.rows[r]).length,i=0;i<o;i++)u+=this.renderer.tablecell(this.parseInline(a[i].tokens),{header:!1,align:h.align[i]});c+=this.renderer.tablerow(u)}C+=this.renderer.table(l,c);continue;case"blockquote":c=this.parse(h.tokens),C+=this.renderer.blockquote(c);continue;case"list":for(p=h.ordered,f=h.start,d=h.loose,s=h.items.length,c="",r=0;r<s;r++)v=(D=h.items[r]).checked,y=D.task,g="",D.task&&(k=this.renderer.checkbox(v),d?D.tokens.length>0&&"paragraph"===D.tokens[0].type?(D.tokens[0].text=k+" "+D.tokens[0].text,D.tokens[0].tokens&&D.tokens[0].tokens.length>0&&"text"===D.tokens[0].tokens[0].type&&(D.tokens[0].tokens[0].text=k+" "+D.tokens[0].tokens[0].text)):D.tokens.unshift({type:"text",text:k}):g+=k),g+=this.parse(D.tokens,d),c+=this.renderer.listitem(g,y,v);C+=this.renderer.list(c,p,f);continue;case"html":C+=this.renderer.html(h.text);continue;case"paragraph":C+=this.renderer.paragraph(this.parseInline(h.tokens));continue;case"text":for(c=h.tokens?this.parseInline(h.tokens):h.text;n+1<A&&"text"===e[n+1].type;)c+="\n"+((h=e[++n]).tokens?this.parseInline(h.tokens):h.text);C+=t?this.renderer.paragraph(c):c;continue;default:var E='Token with "'+h.type+'" type was not found.';if(this.options.silent)return void console.error(E);throw new Error(E)}else C+=_||"";return C},n.parseInline=function(e,t){t=t||this.renderer;var n,r,i,s="",o=e.length;for(n=0;n<o;n++)if(r=e[n],!(this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[r.type])||!1===(i=this.options.extensions.renderers[r.type].call({parser:this},r))&&["escape","html","link","image","strong","em","codespan","br","del","text"].includes(r.type))switch(r.type){case"escape":case"text":s+=t.text(r.text);break;case"html":s+=t.html(r.text);break;case"link":s+=t.link(r.href,r.title,this.parseInline(r.tokens,t));break;case"image":s+=t.image(r.href,r.title,r.text);break;case"strong":s+=t.strong(this.parseInline(r.tokens,t));break;case"em":s+=t.em(this.parseInline(r.tokens,t));break;case"codespan":s+=t.codespan(r.text);break;case"br":s+=t.br();break;case"del":s+=t.del(this.parseInline(r.tokens,t));break;default:var a='Token with "'+r.type+'" type was not found.';if(this.options.silent)return void console.error(a);throw new Error(a)}else s+=i||"";return s},t}();function G(e,t,n){if(null==e)throw new Error("marked(): input parameter is undefined or null");if("string"!=typeof e)throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected");if("function"==typeof t&&(n=t,t=null),L(t=F({},G.defaults,t||{})),n){var r,i=t.highlight;try{r=j.lex(e,t)}catch(e){return n(e)}var s=function(e){var s;if(!e)try{t.walkTokens&&G.walkTokens(r,t.walkTokens),s=V.parse(r,t)}catch(t){e=t}return t.highlight=i,e?n(e):n(null,s)};if(!i||i.length<3)return s();if(delete t.highlight,!r.length)return s();var o=0;return G.walkTokens(r,(function(e){"code"===e.type&&(o++,setTimeout((function(){i(e.text,e.lang,(function(t,n){if(t)return s(t);null!=n&&n!==e.text&&(e.text=n,e.escaped=!0),0==--o&&s()}))}),0))})),void(0===o&&s())}function a(e){if(e.message+="\nPlease report this to https://github.com/markedjs/marked.",t.silent)return"<p>An error occurred:</p><pre>"+d(e.message+"",!0)+"</pre>";throw e}try{var u=j.lex(e,t);if(t.walkTokens){if(t.async)return Promise.all(G.walkTokens(u,t.walkTokens)).then((function(){return V.parse(u,t)})).catch(a);G.walkTokens(u,t.walkTokens)}return V.parse(u,t)}catch(e){a(e)}}G.options=G.setOptions=function(e){return F(G.defaults,e),a(G.defaults),G},G.getDefaults=o,G.defaults=e.defaults,G.use=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r,i=F.apply(void 0,[{}].concat(t)),s=G.defaults.extensions||{renderers:{},childTokens:{}};t.forEach((function(e){if(e.extensions&&(r=!0,e.extensions.forEach((function(e){if(!e.name)throw new Error("extension name required");if(e.renderer){var t=s.renderers?s.renderers[e.name]:null;s.renderers[e.name]=t?function(){for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];var s=e.renderer.apply(this,r);return!1===s&&(s=t.apply(this,r)),s}:e.renderer}if(e.tokenizer){if(!e.level||"block"!==e.level&&"inline"!==e.level)throw new Error("extension level must be 'block' or 'inline'");s[e.level]?s[e.level].unshift(e.tokenizer):s[e.level]=[e.tokenizer],e.start&&("block"===e.level?s.startBlock?s.startBlock.push(e.start):s.startBlock=[e.start]:"inline"===e.level&&(s.startInline?s.startInline.push(e.start):s.startInline=[e.start]))}e.childTokens&&(s.childTokens[e.name]=e.childTokens)}))),e.renderer&&function(){var t=G.defaults.renderer||new H,n=function(n){var r=t[n];t[n]=function(){for(var i=arguments.length,s=new Array(i),o=0;o<i;o++)s[o]=arguments[o];var a=e.renderer[n].apply(t,s);return!1===a&&(a=r.apply(t,s)),a}};for(var r in e.renderer)n(r);i.renderer=t}(),e.tokenizer&&function(){var t=G.defaults.tokenizer||new I,n=function(n){var r=t[n];t[n]=function(){for(var i=arguments.length,s=new Array(i),o=0;o<i;o++)s[o]=arguments[o];var a=e.tokenizer[n].apply(t,s);return!1===a&&(a=r.apply(t,s)),a}};for(var r in e.tokenizer)n(r);i.tokenizer=t}(),e.walkTokens){var t=G.defaults.walkTokens;i.walkTokens=function(n){var r=[];return r.push(e.walkTokens.call(this,n)),t&&(r=r.concat(t.call(this,n))),r}}r&&(i.extensions=s),G.setOptions(i)}))},G.walkTokens=function(e,t){for(var n,r=[],i=function(){var e=n.value;switch(r=r.concat(t.call(G,e)),e.type){case"table":for(var i,o=s(e.header);!(i=o()).done;){var a=i.value;r=r.concat(G.walkTokens(a.tokens,t))}for(var u,l=s(e.rows);!(u=l()).done;)for(var c,h=s(u.value);!(c=h()).done;){var p=c.value;r=r.concat(G.walkTokens(p.tokens,t))}break;case"list":r=r.concat(G.walkTokens(e.items,t));break;default:G.defaults.extensions&&G.defaults.extensions.childTokens&&G.defaults.extensions.childTokens[e.type]?G.defaults.extensions.childTokens[e.type].forEach((function(n){r=r.concat(G.walkTokens(e[n],t))})):e.tokens&&(r=r.concat(G.walkTokens(e.tokens,t)))}},o=s(e);!(n=o()).done;)i();return r},G.parseInline=function(e,t){if(null==e)throw new Error("marked.parseInline(): input parameter is undefined or null");if("string"!=typeof e)throw new Error("marked.parseInline(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected");L(t=F({},G.defaults,t||{}));try{var n=j.lexInline(e,t);return t.walkTokens&&G.walkTokens(n,t.walkTokens),V.parseInline(n,t)}catch(e){if(e.message+="\nPlease report this to https://github.com/markedjs/marked.",t.silent)return"<p>An error occurred:</p><pre>"+d(e.message+"",!0)+"</pre>";throw e}},G.Parser=V,G.parser=V.parse,G.Renderer=H,G.TextRenderer=U,G.Lexer=j,G.lexer=j.lex,G.Tokenizer=I,G.Slugger=q,G.parse=G;var K=G.options,Z=G.setOptions,W=G.use,J=G.walkTokens,Q=G.parseInline,X=G,Y=V.parse,ee=j.lex;e.Lexer=j,e.Parser=V,e.Renderer=H,e.Slugger=q,e.TextRenderer=U,e.Tokenizer=I,e.getDefaults=o,e.lexer=ee,e.marked=G,e.options=K,e.parse=X,e.parseInline=Q,e.parser=Y,e.setOptions=Z,e.use=W,e.walkTokens=J,Object.defineProperty(e,"__esModule",{value:!0})}(o);const a=e=>{const t=new RegExp(/\[\[([^|\]]+)\|?([^\]]*)\]\]/,"g");return e.replace(t,((e,t,n)=>{const r=n||t,i=n?t:r,s=document.createElement("a");return s.innerHTML=i,s.dataset.passageName=r,s.outerHTML}))},u=e=>{const t=new RegExp(/\{\{.*(&quot;).*\}\}/,"g");return e.replace(t,(e=>e.replace(new RegExp("&quot;","g"),'"')))};var l=class{constructor(e){const t=e.getAttribute("pid"),n=e.getAttribute("name");if(!t)throw new Error(`A passage (name: ${n}) is missing a pid!`);if(!n)throw new Error(`A passage with pid ${t} is missing a name!`);const r=e.getAttribute("tags"),i=e.getAttribute("position"),s=e.getAttribute("size"),o=e.innerHTML,a=r?.split(" ")||[],u={x:0,y:0};if(i){const e=i.split(",").map((e=>parseFloat(e)));u.x=e[0],u.y=e[1]}const l={width:100,height:100};if(s){const e=s.split(",").map((e=>parseFloat(e)));l.width=e[0],l.height=e[1]}this.pid=t,this.name=n,this.tags=a,this.position=u,this.size=l,this.rawContent=o}get richContent(){const e=a(this.rawContent),t=(n=e,[["&amp;","&"],["&lt;","<"],["&gt;",">"],["&quot;",'"'],["&#x27;","'"],["&#x60;","`"]].forEach((([e,t])=>{n=n.replace(new RegExp(e,"g"),t)})),n);var n;const r=o.marked.parse(t);return u(r)}};var c,h=class{constructor(e={}){this.store=e,this.listeners=[]}addListener(e){this.listeners.push(e)}callListeners(){this.listeners.forEach((e=>{e(this.store)}))}get(e){return e.split(".").reduce(((t,n)=>{if(Object.prototype.hasOwnProperty.call(t,n))return t[n];throw new Error(`Unable to get variable with key ${e}`)}),this.store)}set(e,t){this.store[e]=t,this.callListeners()}clear(e){e?delete this.store[e]:this.store={},this.callListeners()}},p={};function f(e){return e&&e.__esModule?e:{default:e}}p.__esModule=!0;var d={};function g(e){return e&&e.__esModule?e:{default:e}}function m(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}d.__esModule=!0;var D,v,y,k,_,C,A,E,b,x={};function w(e){return e&&e.__esModule?e:{default:e}}e(x,"__esModule",(()=>D),(e=>D=e)),e(x,"HandlebarsEnvironment",(()=>v),(e=>v=e)),e(x,"VERSION",(()=>y),(e=>y=e)),e(x,"COMPILER_REVISION",(()=>k),(e=>k=e)),e(x,"LAST_COMPATIBLE_COMPILER_REVISION",(()=>_),(e=>_=e)),e(x,"REVISION_CHANGES",(()=>C),(e=>C=e)),e(x,"log",(()=>A),(e=>A=e)),e(x,"createFrame",(()=>E),(e=>E=e)),e(x,"logger",(()=>b),(e=>b=e)),D=!0,v=Me;var F,S,B,P,L,O,M,$,I,R,N,T={};e(T,"__esModule",(()=>F),(e=>F=e)),e(T,"extend",(()=>S),(e=>S=e)),e(T,"indexOf",(()=>B),(e=>B=e)),e(T,"escapeExpression",(()=>P),(e=>P=e)),e(T,"isEmpty",(()=>L),(e=>L=e)),e(T,"createFrame",(()=>O),(e=>O=e)),e(T,"blockParams",(()=>M),(e=>M=e)),e(T,"appendContextPath",(()=>$),(e=>$=e)),e(T,"toString",(()=>I),(e=>I=e)),e(T,"isFunction",(()=>R),(e=>R=e)),e(T,"isArray",(()=>N),(e=>N=e)),F=!0,S=q,B=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},P=function(e){if("string"!=typeof e){if(e&&e.toHTML)return e.toHTML();if(null==e)return"";if(!e)return e+"";e=""+e}return H.test(e)?e.replace(j,U):e},L=function(e){return!e&&0!==e||!(!K(e)||0!==e.length)},O=function(e){var t=q({},e);return t._parent=e,t},M=function(e,t){return e.path=t,e},$=function(e,t){return(e?e+".":"")+t};var z={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},j=/[&<>"'`=]/g,H=/[&<>"'`=]/;function U(e){return z[e]}function q(e){for(var t=1;t<arguments.length;t++)for(var n in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],n)&&(e[n]=arguments[t][n]);return e}var V=Object.prototype.toString;I=V;var G=function(e){return"function"==typeof e};G(/x/)&&(R=G=function(e){return"function"==typeof e&&"[object Function]"===V.call(e)}),R=G;var K=Array.isArray||function(e){return!(!e||"object"!=typeof e)&&"[object Array]"===V.call(e)};N=K;var Z={__esModule:!0},W=["description","fileName","lineNumber","endLineNumber","message","name","number","stack"];function J(e,t){var n=t&&t.loc,r=void 0,i=void 0,s=void 0,o=void 0;n&&(r=n.start.line,i=n.end.line,s=n.start.column,o=n.end.column,e+=" - "+r+":"+s);for(var a=Error.prototype.constructor.call(this,e),u=0;u<W.length;u++)this[W[u]]=a[W[u]];Error.captureStackTrace&&Error.captureStackTrace(this,J);try{n&&(this.lineNumber=r,this.endLineNumber=i,Object.defineProperty?(Object.defineProperty(this,"column",{value:s,enumerable:!0}),Object.defineProperty(this,"endColumn",{value:o,enumerable:!0})):(this.column=s,this.endColumn=o))}catch(e){}}J.prototype=new Error,Z.default=J;var Q,X,Y=w(Z=Z.default);function ee(e){return e&&e.__esModule?e:{default:e}}Q=function(e){ne.default(e),oe.default(e),le.default(e),pe.default(e),de.default(e),me.default(e),ke.default(e)},X=function(e,t,n){e.helpers[t]&&(e.hooks[t]=e.helpers[t],n||delete e.helpers[t])};var te={__esModule:!0,default:function(e){e.registerHelper("blockHelperMissing",(function(t,n){var r=n.inverse,i=n.fn;if(!0===t)return i(this);if(!1===t||null==t)return r(this);if(N(t))return t.length>0?(n.ids&&(n.ids=[n.name]),e.helpers.each(t,n)):r(this);if(n.data&&n.ids){var s=O(n.data);s.contextPath=$(n.data.contextPath,n.name),n={data:s}}return i(t,n)}))}},ne=ee(te=te.default),re={};re.__esModule=!0;var ie,se=(ie=Z)&&ie.__esModule?ie:{default:ie};re.default=function(e){e.registerHelper("each",(function(e,t){if(!t)throw new se.default("Must pass iterator to #each");var r,i=t.fn,s=t.inverse,o=0,a="",u=void 0,l=void 0;function c(t,n,r){u&&(u.key=t,u.index=n,u.first=0===n,u.last=!!r,l&&(u.contextPath=l+t)),a+=i(e[t],{data:u,blockParams:M([e[t],t],[l+t,null])})}if(t.data&&t.ids&&(l=$(t.data.contextPath,t.ids[0])+"."),R(e)&&(e=e.call(this)),t.data&&(u=O(t.data)),e&&"object"==typeof e)if(N(e))for(var h=e.length;o<h;o++)o in e&&c(o,o,o===e.length-1);else if(n.Symbol&&e[n.Symbol.iterator]){for(var p=[],f=e[n.Symbol.iterator](),d=f.next();!d.done;d=f.next())p.push(d.value);for(h=(e=p).length;o<h;o++)c(o,o,o===e.length-1)}else r=void 0,Object.keys(e).forEach((function(e){void 0!==r&&c(r,o-1),r=e,o++})),void 0!==r&&c(r,o-1,!0);return 0===o&&(a=s(this)),a}))};var oe=ee(re=re.default),ae={};ae.__esModule=!0;var ue=function(e){return e&&e.__esModule?e:{default:e}}(Z);ae.default=function(e){e.registerHelper("helperMissing",(function(){if(1!==arguments.length)throw new ue.default('Missing helper: "'+arguments[arguments.length-1].name+'"')}))};var le=ee(ae=ae.default),ce={};ce.__esModule=!0;var he=function(e){return e&&e.__esModule?e:{default:e}}(Z);ce.default=function(e){e.registerHelper("if",(function(e,t){if(2!=arguments.length)throw new he.default("#if requires exactly one argument");return R(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||L(e)?t.inverse(this):t.fn(this)})),e.registerHelper("unless",(function(t,n){if(2!=arguments.length)throw new he.default("#unless requires exactly one argument");return e.helpers.if.call(this,t,{fn:n.inverse,inverse:n.fn,hash:n.hash})}))};var pe=ee(ce=ce.default),fe={__esModule:!0,default:function(e){e.registerHelper("log",(function(){for(var t=[void 0],n=arguments[arguments.length-1],r=0;r<arguments.length-1;r++)t.push(arguments[r]);var i=1;null!=n.hash.level?i=n.hash.level:n.data&&null!=n.data.level&&(i=n.data.level),t[0]=i,e.log.apply(e,t)}))}},de=ee(fe=fe.default),ge={__esModule:!0,default:function(e){e.registerHelper("lookup",(function(e,t,n){return e?n.lookupProperty(e,t):e}))}},me=ee(ge=ge.default),De={};De.__esModule=!0;var ve=function(e){return e&&e.__esModule?e:{default:e}}(Z);De.default=function(e){e.registerHelper("with",(function(e,t){if(2!=arguments.length)throw new ve.default("#with requires exactly one argument");R(e)&&(e=e.call(this));var n=t.fn;if(L(e))return t.inverse(this);var r=t.data;return t.data&&t.ids&&((r=O(t.data)).contextPath=$(t.data.contextPath,t.ids[0])),n(e,{data:r,blockParams:M([e],[r&&r.contextPath])})}))};var ye,ke=ee(De=De.default);ye=function(e){Ce.default(e)};var _e={__esModule:!0,default:function(e){e.registerDecorator("inline",(function(e,t,n,r){var i=e;return t.partials||(t.partials={},i=function(r,i){var s=n.partials;n.partials=S({},s,t.partials);var o=e(r,i);return n.partials=s,o}),t.partials[r.args[0]]=r.fn,i}))}},Ce=function(e){return e&&e.__esModule?e:{default:e}}(_e=_e.default);var Ae={__esModule:!0},Ee={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(e){if("string"==typeof e){var t=B(Ee.methodMap,e.toLowerCase());e=t>=0?t:parseInt(e,10)}return e},log:function(e){if(e=Ee.lookupLevel(e),"undefined"!=typeof console&&Ee.lookupLevel(Ee.level)<=e){var t=Ee.methodMap[e];console[t]||(t="log");for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];console[t].apply(console,r)}}};Ae.default=Ee;var be,xe,we,Fe,Se=w(Ae=Ae.default);be=function(e){var t=Object.create(null);t.constructor=!1,t.__defineGetter__=!1,t.__defineSetter__=!1,t.__lookupGetter__=!1;var n=Object.create(null);return n.__proto__=!1,{properties:{whitelist:Fe(n,e.allowedProtoProperties),defaultValue:e.allowProtoPropertiesByDefault},methods:{whitelist:Fe(t,e.allowedProtoMethods),defaultValue:e.allowProtoMethodsByDefault}}},xe=function(e,t,n){return Le("function"==typeof e?t.methods:t.properties,n)},we=function(){Object.keys(Pe).forEach((function(e){delete Pe[e]}))},Fe=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return S.apply(void 0,[Object.create(null)].concat(t))};var Be=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(Ae),Pe=Object.create(null);function Le(e,t){return void 0!==e.whitelist[t]?!0===e.whitelist[t]:void 0!==e.defaultValue?e.defaultValue:(function(e){!0!==Pe[e]&&(Pe[e]=!0,Be.log("error",'Handlebars: Access has been denied to resolve the property "'+e+'" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details'))}(t),!1)}y="4.7.7";k=8;_=7;C={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0 <4.3.0",8:">= 4.3.0"};var Oe="[object Object]";function Me(e,t,n){this.helpers=e||{},this.partials=t||{},this.decorators=n||{},Q(this),ye(this)}Me.prototype={constructor:Me,logger:Se.default,log:Se.default.log,registerHelper:function(e,t){if(I.call(e)===Oe){if(t)throw new Y.default("Arg not supported with multiple helpers");S(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if(I.call(e)===Oe)S(this.partials,e);else{if(void 0===t)throw new Y.default('Attempting to register a partial called "'+e+'" as undefined');this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,t){if(I.call(e)===Oe){if(t)throw new Y.default("Arg not supported with multiple decorators");S(this.decorators,e)}else this.decorators[e]=t},unregisterDecorator:function(e){delete this.decorators[e]},resetLoggedPropertyAccesses:function(){we()}};var $e=Se.default.log;A=$e,E=O,b=Se.default;var Ie=m(x),Re={};function Ne(e){this.string=e}Re.__esModule=!0,Ne.prototype.toString=Ne.prototype.toHTML=function(){return""+this.string},Re.default=Ne;var Te,ze,je,He,Ue,qe,Ve,Ge=g(Re=Re.default),Ke=g(Z),Ze=m(T),We={};e(We,"__esModule",(()=>Te),(e=>Te=e)),e(We,"checkRevision",(()=>ze),(e=>ze=e)),e(We,"template",(()=>je),(e=>je=e)),e(We,"wrapProgram",(()=>He),(e=>He=e)),e(We,"resolvePartial",(()=>Ue),(e=>Ue=e)),e(We,"invokePartial",(()=>qe),(e=>qe=e)),e(We,"noop",(()=>Ve),(e=>Ve=e)),Te=!0,ze=function(e){var t=e&&e[0]||1,n=k;if(t>=_&&t<=k)return;if(t<_){var r=C[n],i=C[t];throw new Xe.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+r+") or downgrade your runtime to an older version ("+i+").")}throw new Xe.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")},je=function(e,t){if(!t)throw new Xe.default("No environment passed to template");if(!e||!e.main)throw new Xe.default("Unknown template object: "+typeof e);e.main.decorator=e.main_d,t.VM.checkRevision(e.compiler);var n=e.compiler&&7===e.compiler[0];var r={strict:function(e,t,n){if(!e||!(t in e))throw new Xe.default('"'+t+'" not defined in '+e,{loc:n});return r.lookupProperty(e,t)},lookupProperty:function(e,t){var n=e[t];return null==n||Object.prototype.hasOwnProperty.call(e,t)||xe(n,r.protoAccessControl,t)?n:void 0},lookup:function(e,t){for(var n=e.length,i=0;i<n;i++){if(null!=(e[i]&&r.lookupProperty(e[i],t)))return e[i][t]}},lambda:function(e,t){return"function"==typeof e?e.call(t):e},escapeExpression:Qe.escapeExpression,invokePartial:function(n,r,i){i.hash&&(r=Qe.extend({},r,i.hash),i.ids&&(i.ids[0]=!0)),n=t.VM.resolvePartial.call(this,n,r,i);var s=Qe.extend({},i,{hooks:this.hooks,protoAccessControl:this.protoAccessControl}),o=t.VM.invokePartial.call(this,n,r,s);if(null==o&&t.compile&&(i.partials[i.name]=t.compile(n,e.compilerOptions,t),o=i.partials[i.name](r,s)),null!=o){if(i.indent){for(var a=o.split("\n"),u=0,l=a.length;u<l&&(a[u]||u+1!==l);u++)a[u]=i.indent+a[u];o=a.join("\n")}return o}throw new Xe.default("The partial "+i.name+" could not be compiled when running in runtime-only mode")},fn:function(t){var n=e[t];return n.decorator=e[t+"_d"],n},programs:[],program:function(e,t,n,r,i){var s=this.programs[e],o=this.fn(e);return t||i||r||n?s=Ye(this,e,o,t,n,r,i):s||(s=this.programs[e]=Ye(this,e,o)),s},data:function(e,t){for(;e&&t--;)e=e._parent;return e},mergeIfNeeded:function(e,t){var n=e||t;return e&&t&&e!==t&&(n=Qe.extend({},t,e)),n},nullContext:Object.seal({}),noop:t.VM.noop,compilerInfo:e.compiler};function i(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=n.data;i._setup(n),!n.partial&&e.useData&&(s=tt(t,s));var o=void 0,a=e.useBlockParams?[]:void 0;function u(t){return""+e.main(r,t,r.helpers,r.partials,s,a,o)}return e.useDepths&&(o=n.depths?t!=n.depths[0]?[t].concat(n.depths):n.depths:[t]),(u=nt(e.main,u,r,n.depths||[],s,a))(t,n)}return i.isTop=!0,i._setup=function(i){if(i.partial)r.protoAccessControl=i.protoAccessControl,r.helpers=i.helpers,r.partials=i.partials,r.decorators=i.decorators,r.hooks=i.hooks;else{var s=Qe.extend({},t.helpers,i.helpers);!function(e,t){Object.keys(e).forEach((function(n){var r=e[n];e[n]=function(e,t){var n=t.lookupProperty;return Je(e,(function(e){return Qe.extend({lookupProperty:n},e)}))}(r,t)}))}(s,r),r.helpers=s,e.usePartial&&(r.partials=r.mergeIfNeeded(i.partials,t.partials)),(e.usePartial||e.useDecorators)&&(r.decorators=Qe.extend({},t.decorators,i.decorators)),r.hooks={},r.protoAccessControl=be(i);var o=i.allowCallsToHelperMissing||n;X(r,"helperMissing",o),X(r,"blockHelperMissing",o)}},i._child=function(t,n,i,s){if(e.useBlockParams&&!i)throw new Xe.default("must pass block params");if(e.useDepths&&!s)throw new Xe.default("must pass parent depths");return Ye(r,t,e[t],n,0,i,s)},i},He=Ye,Ue=function(e,t,n){e?e.call||n.name||(n.name=e,e=n.partials[e]):e="@partial-block"===n.name?n.data["partial-block"]:n.partials[n.name];return e},qe=function(e,t,n){var r=n.data&&n.data["partial-block"];n.partial=!0,n.ids&&(n.data.contextPath=n.ids[0]||n.data.contextPath);var i=void 0;n.fn&&n.fn!==et&&function(){n.data=E(n.data);var e=n.fn;i=n.data["partial-block"]=function(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return n.data=E(n.data),n.data["partial-block"]=r,e(t,n)},e.partials&&(n.partials=Qe.extend({},n.partials,e.partials))}();void 0===e&&i&&(e=i);if(void 0===e)throw new Xe.default("The partial "+n.name+" could not be found");if(e instanceof Function)return e(t,n)},Ve=et;var Je,Qe=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(T),Xe=function(e){return e&&e.__esModule?e:{default:e}}(Z);function Ye(e,t,n,r,i,s,o){function a(t){var i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],a=o;return!o||t==o[0]||t===e.nullContext&&null===o[0]||(a=[t].concat(o)),n(e,t,e.helpers,e.partials,i.data||r,s&&[i.blockParams].concat(s),a)}return(a=nt(n,a,e,o,r,s)).program=t,a.depth=o?o.length:0,a.blockParams=i||0,a}function et(){return""}function tt(e,t){return t&&"root"in t||((t=t?E(t):{}).root=e),t}function nt(e,t,n,r,i,s){if(e.decorator){var o={};t=e.decorator(t,o,n,r&&r[0],i,s,r),Qe.extend(t,o)}return t}Je=function(e,t){if("function"!=typeof e)return e;return function(){return arguments[arguments.length-1]=t(arguments[arguments.length-1]),e.apply(this,arguments)}};var rt=m(We),it={__esModule:!0,default:function(e){var t=void 0!==n?n:window,r=t.Handlebars;e.noConflict=function(){return t.Handlebars===e&&(t.Handlebars=r),e}}},st=g(it=it.default);function ot(){var e=new Ie.HandlebarsEnvironment;return Ze.extend(e,Ie),e.SafeString=Ge.default,e.Exception=Ke.default,e.Utils=Ze,e.escapeExpression=Ze.escapeExpression,e.VM=rt,e.template=function(t){return rt.template(t,e)},e}var at=ot();at.create=ot,st.default(at),at.default=at,d.default=at;var ut=f(d=d.default),lt={__esModule:!0},ct={helpers:{helperExpression:function(e){return"SubExpression"===e.type||("MustacheStatement"===e.type||"BlockStatement"===e.type)&&!!(e.params&&e.params.length||e.hash)},scopedId:function(e){return/^\.|this\b/.test(e.original)},simpleId:function(e){return 1===e.parts.length&&!ct.helpers.scopedId(e)&&!e.depth}}};lt.default=ct;var ht,pt,ft,dt=f(lt=lt.default);function gt(e){return e&&e.__esModule?e:{default:e}}ht=Xt,pt=function(e,t){var n=Xt(e,t);return new Ut.default(t).accept(n)};var mt={__esModule:!0},Dt=function(){var e={trace:function(){},yy:{},symbols_:{error:2,root:3,program:4,EOF:5,program_repetition0:6,statement:7,mustache:8,block:9,rawBlock:10,partial:11,partialBlock:12,content:13,COMMENT:14,CONTENT:15,openRawBlock:16,rawBlock_repetition0:17,END_RAW_BLOCK:18,OPEN_RAW_BLOCK:19,helperName:20,openRawBlock_repetition0:21,openRawBlock_option0:22,CLOSE_RAW_BLOCK:23,openBlock:24,block_option0:25,closeBlock:26,openInverse:27,block_option1:28,OPEN_BLOCK:29,openBlock_repetition0:30,openBlock_option0:31,openBlock_option1:32,CLOSE:33,OPEN_INVERSE:34,openInverse_repetition0:35,openInverse_option0:36,openInverse_option1:37,openInverseChain:38,OPEN_INVERSE_CHAIN:39,openInverseChain_repetition0:40,openInverseChain_option0:41,openInverseChain_option1:42,inverseAndProgram:43,INVERSE:44,inverseChain:45,inverseChain_option0:46,OPEN_ENDBLOCK:47,OPEN:48,mustache_repetition0:49,mustache_option0:50,OPEN_UNESCAPED:51,mustache_repetition1:52,mustache_option1:53,CLOSE_UNESCAPED:54,OPEN_PARTIAL:55,partialName:56,partial_repetition0:57,partial_option0:58,openPartialBlock:59,OPEN_PARTIAL_BLOCK:60,openPartialBlock_repetition0:61,openPartialBlock_option0:62,param:63,sexpr:64,OPEN_SEXPR:65,sexpr_repetition0:66,sexpr_option0:67,CLOSE_SEXPR:68,hash:69,hash_repetition_plus0:70,hashSegment:71,ID:72,EQUALS:73,blockParams:74,OPEN_BLOCK_PARAMS:75,blockParams_repetition_plus0:76,CLOSE_BLOCK_PARAMS:77,path:78,dataName:79,STRING:80,NUMBER:81,BOOLEAN:82,UNDEFINED:83,NULL:84,DATA:85,pathSegments:86,SEP:87,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",14:"COMMENT",15:"CONTENT",18:"END_RAW_BLOCK",19:"OPEN_RAW_BLOCK",23:"CLOSE_RAW_BLOCK",29:"OPEN_BLOCK",33:"CLOSE",34:"OPEN_INVERSE",39:"OPEN_INVERSE_CHAIN",44:"INVERSE",47:"OPEN_ENDBLOCK",48:"OPEN",51:"OPEN_UNESCAPED",54:"CLOSE_UNESCAPED",55:"OPEN_PARTIAL",60:"OPEN_PARTIAL_BLOCK",65:"OPEN_SEXPR",68:"CLOSE_SEXPR",72:"ID",73:"EQUALS",75:"OPEN_BLOCK_PARAMS",77:"CLOSE_BLOCK_PARAMS",80:"STRING",81:"NUMBER",82:"BOOLEAN",83:"UNDEFINED",84:"NULL",85:"DATA",87:"SEP"},productions_:[0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,1],[10,3],[16,5],[9,4],[9,4],[24,6],[27,6],[38,6],[43,2],[45,3],[45,1],[26,3],[8,5],[8,5],[11,5],[12,3],[59,5],[63,1],[63,1],[64,5],[69,1],[71,3],[74,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[56,1],[56,1],[79,2],[78,1],[86,3],[86,1],[6,0],[6,2],[17,0],[17,2],[21,0],[21,2],[22,0],[22,1],[25,0],[25,1],[28,0],[28,1],[30,0],[30,2],[31,0],[31,1],[32,0],[32,1],[35,0],[35,2],[36,0],[36,1],[37,0],[37,1],[40,0],[40,2],[41,0],[41,1],[42,0],[42,1],[46,0],[46,1],[49,0],[49,2],[50,0],[50,1],[52,0],[52,2],[53,0],[53,1],[57,0],[57,2],[58,0],[58,1],[61,0],[61,2],[62,0],[62,1],[66,0],[66,2],[67,0],[67,1],[70,1],[70,2],[76,1],[76,2]],performAction:function(e,t,n,r,i,s,o){var a=s.length-1;switch(i){case 1:return s[a-1];case 2:this.$=r.prepareProgram(s[a]);break;case 3:case 4:case 5:case 6:case 7:case 8:case 20:case 27:case 28:case 33:case 34:case 40:case 41:this.$=s[a];break;case 9:this.$={type:"CommentStatement",value:r.stripComment(s[a]),strip:r.stripFlags(s[a],s[a]),loc:r.locInfo(this._$)};break;case 10:this.$={type:"ContentStatement",original:s[a],value:s[a],loc:r.locInfo(this._$)};break;case 11:this.$=r.prepareRawBlock(s[a-2],s[a-1],s[a],this._$);break;case 12:this.$={path:s[a-3],params:s[a-2],hash:s[a-1]};break;case 13:this.$=r.prepareBlock(s[a-3],s[a-2],s[a-1],s[a],!1,this._$);break;case 14:this.$=r.prepareBlock(s[a-3],s[a-2],s[a-1],s[a],!0,this._$);break;case 15:this.$={open:s[a-5],path:s[a-4],params:s[a-3],hash:s[a-2],blockParams:s[a-1],strip:r.stripFlags(s[a-5],s[a])};break;case 16:case 17:this.$={path:s[a-4],params:s[a-3],hash:s[a-2],blockParams:s[a-1],strip:r.stripFlags(s[a-5],s[a])};break;case 18:this.$={strip:r.stripFlags(s[a-1],s[a-1]),program:s[a]};break;case 19:var u=r.prepareBlock(s[a-2],s[a-1],s[a],s[a],!1,this._$),l=r.prepareProgram([u],s[a-1].loc);l.chained=!0,this.$={strip:s[a-2].strip,program:l,chain:!0};break;case 21:this.$={path:s[a-1],strip:r.stripFlags(s[a-2],s[a])};break;case 22:case 23:this.$=r.prepareMustache(s[a-3],s[a-2],s[a-1],s[a-4],r.stripFlags(s[a-4],s[a]),this._$);break;case 24:this.$={type:"PartialStatement",name:s[a-3],params:s[a-2],hash:s[a-1],indent:"",strip:r.stripFlags(s[a-4],s[a]),loc:r.locInfo(this._$)};break;case 25:this.$=r.preparePartialBlock(s[a-2],s[a-1],s[a],this._$);break;case 26:this.$={path:s[a-3],params:s[a-2],hash:s[a-1],strip:r.stripFlags(s[a-4],s[a])};break;case 29:this.$={type:"SubExpression",path:s[a-3],params:s[a-2],hash:s[a-1],loc:r.locInfo(this._$)};break;case 30:this.$={type:"Hash",pairs:s[a],loc:r.locInfo(this._$)};break;case 31:this.$={type:"HashPair",key:r.id(s[a-2]),value:s[a],loc:r.locInfo(this._$)};break;case 32:this.$=r.id(s[a-1]);break;case 35:this.$={type:"StringLiteral",value:s[a],original:s[a],loc:r.locInfo(this._$)};break;case 36:this.$={type:"NumberLiteral",value:Number(s[a]),original:Number(s[a]),loc:r.locInfo(this._$)};break;case 37:this.$={type:"BooleanLiteral",value:"true"===s[a],original:"true"===s[a],loc:r.locInfo(this._$)};break;case 38:this.$={type:"UndefinedLiteral",original:void 0,value:void 0,loc:r.locInfo(this._$)};break;case 39:this.$={type:"NullLiteral",original:null,value:null,loc:r.locInfo(this._$)};break;case 42:this.$=r.preparePath(!0,s[a],this._$);break;case 43:this.$=r.preparePath(!1,s[a],this._$);break;case 44:s[a-2].push({part:r.id(s[a]),original:s[a],separator:s[a-1]}),this.$=s[a-2];break;case 45:this.$=[{part:r.id(s[a]),original:s[a]}];break;case 46:case 48:case 50:case 58:case 64:case 70:case 78:case 82:case 86:case 90:case 94:this.$=[];break;case 47:case 49:case 51:case 59:case 65:case 71:case 79:case 83:case 87:case 91:case 95:case 99:case 101:s[a-1].push(s[a]);break;case 98:case 100:this.$=[s[a]]}},table:[{3:1,4:2,5:[2,46],6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{1:[3]},{5:[1,4]},{5:[2,2],7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:[1,12],15:[1,20],16:17,19:[1,23],24:15,27:16,29:[1,21],34:[1,22],39:[2,2],44:[2,2],47:[2,2],48:[1,13],51:[1,14],55:[1,18],59:19,60:[1,24]},{1:[2,1]},{5:[2,47],14:[2,47],15:[2,47],19:[2,47],29:[2,47],34:[2,47],39:[2,47],44:[2,47],47:[2,47],48:[2,47],51:[2,47],55:[2,47],60:[2,47]},{5:[2,3],14:[2,3],15:[2,3],19:[2,3],29:[2,3],34:[2,3],39:[2,3],44:[2,3],47:[2,3],48:[2,3],51:[2,3],55:[2,3],60:[2,3]},{5:[2,4],14:[2,4],15:[2,4],19:[2,4],29:[2,4],34:[2,4],39:[2,4],44:[2,4],47:[2,4],48:[2,4],51:[2,4],55:[2,4],60:[2,4]},{5:[2,5],14:[2,5],15:[2,5],19:[2,5],29:[2,5],34:[2,5],39:[2,5],44:[2,5],47:[2,5],48:[2,5],51:[2,5],55:[2,5],60:[2,5]},{5:[2,6],14:[2,6],15:[2,6],19:[2,6],29:[2,6],34:[2,6],39:[2,6],44:[2,6],47:[2,6],48:[2,6],51:[2,6],55:[2,6],60:[2,6]},{5:[2,7],14:[2,7],15:[2,7],19:[2,7],29:[2,7],34:[2,7],39:[2,7],44:[2,7],47:[2,7],48:[2,7],51:[2,7],55:[2,7],60:[2,7]},{5:[2,8],14:[2,8],15:[2,8],19:[2,8],29:[2,8],34:[2,8],39:[2,8],44:[2,8],47:[2,8],48:[2,8],51:[2,8],55:[2,8],60:[2,8]},{5:[2,9],14:[2,9],15:[2,9],19:[2,9],29:[2,9],34:[2,9],39:[2,9],44:[2,9],47:[2,9],48:[2,9],51:[2,9],55:[2,9],60:[2,9]},{20:25,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:36,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:37,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{4:38,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{15:[2,48],17:39,18:[2,48]},{20:41,56:40,64:42,65:[1,43],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:44,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{5:[2,10],14:[2,10],15:[2,10],18:[2,10],19:[2,10],29:[2,10],34:[2,10],39:[2,10],44:[2,10],47:[2,10],48:[2,10],51:[2,10],55:[2,10],60:[2,10]},{20:45,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:46,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:47,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:41,56:48,64:42,65:[1,43],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[2,78],49:49,65:[2,78],72:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78]},{23:[2,33],33:[2,33],54:[2,33],65:[2,33],68:[2,33],72:[2,33],75:[2,33],80:[2,33],81:[2,33],82:[2,33],83:[2,33],84:[2,33],85:[2,33]},{23:[2,34],33:[2,34],54:[2,34],65:[2,34],68:[2,34],72:[2,34],75:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34]},{23:[2,35],33:[2,35],54:[2,35],65:[2,35],68:[2,35],72:[2,35],75:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35]},{23:[2,36],33:[2,36],54:[2,36],65:[2,36],68:[2,36],72:[2,36],75:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36]},{23:[2,37],33:[2,37],54:[2,37],65:[2,37],68:[2,37],72:[2,37],75:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37]},{23:[2,38],33:[2,38],54:[2,38],65:[2,38],68:[2,38],72:[2,38],75:[2,38],80:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38]},{23:[2,39],33:[2,39],54:[2,39],65:[2,39],68:[2,39],72:[2,39],75:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39]},{23:[2,43],33:[2,43],54:[2,43],65:[2,43],68:[2,43],72:[2,43],75:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],87:[1,50]},{72:[1,35],86:51},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{52:52,54:[2,82],65:[2,82],72:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82]},{25:53,38:55,39:[1,57],43:56,44:[1,58],45:54,47:[2,54]},{28:59,43:60,44:[1,58],47:[2,56]},{13:62,15:[1,20],18:[1,61]},{33:[2,86],57:63,65:[2,86],72:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86]},{33:[2,40],65:[2,40],72:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40]},{33:[2,41],65:[2,41],72:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41]},{20:64,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:65,47:[1,66]},{30:67,33:[2,58],65:[2,58],72:[2,58],75:[2,58],80:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58]},{33:[2,64],35:68,65:[2,64],72:[2,64],75:[2,64],80:[2,64],81:[2,64],82:[2,64],83:[2,64],84:[2,64],85:[2,64]},{21:69,23:[2,50],65:[2,50],72:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50]},{33:[2,90],61:70,65:[2,90],72:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90]},{20:74,33:[2,80],50:71,63:72,64:75,65:[1,43],69:73,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{72:[1,79]},{23:[2,42],33:[2,42],54:[2,42],65:[2,42],68:[2,42],72:[2,42],75:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],87:[1,50]},{20:74,53:80,54:[2,84],63:81,64:75,65:[1,43],69:82,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:83,47:[1,66]},{47:[2,55]},{4:84,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{47:[2,20]},{20:85,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:86,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{26:87,47:[1,66]},{47:[2,57]},{5:[2,11],14:[2,11],15:[2,11],19:[2,11],29:[2,11],34:[2,11],39:[2,11],44:[2,11],47:[2,11],48:[2,11],51:[2,11],55:[2,11],60:[2,11]},{15:[2,49],18:[2,49]},{20:74,33:[2,88],58:88,63:89,64:75,65:[1,43],69:90,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{65:[2,94],66:91,68:[2,94],72:[2,94],80:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94]},{5:[2,25],14:[2,25],15:[2,25],19:[2,25],29:[2,25],34:[2,25],39:[2,25],44:[2,25],47:[2,25],48:[2,25],51:[2,25],55:[2,25],60:[2,25]},{20:92,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,31:93,33:[2,60],63:94,64:75,65:[1,43],69:95,70:76,71:77,72:[1,78],75:[2,60],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,33:[2,66],36:96,63:97,64:75,65:[1,43],69:98,70:76,71:77,72:[1,78],75:[2,66],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,22:99,23:[2,52],63:100,64:75,65:[1,43],69:101,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,33:[2,92],62:102,63:103,64:75,65:[1,43],69:104,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,105]},{33:[2,79],65:[2,79],72:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79]},{33:[2,81]},{23:[2,27],33:[2,27],54:[2,27],65:[2,27],68:[2,27],72:[2,27],75:[2,27],80:[2,27],81:[2,27],82:[2,27],83:[2,27],84:[2,27],85:[2,27]},{23:[2,28],33:[2,28],54:[2,28],65:[2,28],68:[2,28],72:[2,28],75:[2,28],80:[2,28],81:[2,28],82:[2,28],83:[2,28],84:[2,28],85:[2,28]},{23:[2,30],33:[2,30],54:[2,30],68:[2,30],71:106,72:[1,107],75:[2,30]},{23:[2,98],33:[2,98],54:[2,98],68:[2,98],72:[2,98],75:[2,98]},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],73:[1,108],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{23:[2,44],33:[2,44],54:[2,44],65:[2,44],68:[2,44],72:[2,44],75:[2,44],80:[2,44],81:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],87:[2,44]},{54:[1,109]},{54:[2,83],65:[2,83],72:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83]},{54:[2,85]},{5:[2,13],14:[2,13],15:[2,13],19:[2,13],29:[2,13],34:[2,13],39:[2,13],44:[2,13],47:[2,13],48:[2,13],51:[2,13],55:[2,13],60:[2,13]},{38:55,39:[1,57],43:56,44:[1,58],45:111,46:110,47:[2,76]},{33:[2,70],40:112,65:[2,70],72:[2,70],75:[2,70],80:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70]},{47:[2,18]},{5:[2,14],14:[2,14],15:[2,14],19:[2,14],29:[2,14],34:[2,14],39:[2,14],44:[2,14],47:[2,14],48:[2,14],51:[2,14],55:[2,14],60:[2,14]},{33:[1,113]},{33:[2,87],65:[2,87],72:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87]},{33:[2,89]},{20:74,63:115,64:75,65:[1,43],67:114,68:[2,96],69:116,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,117]},{32:118,33:[2,62],74:119,75:[1,120]},{33:[2,59],65:[2,59],72:[2,59],75:[2,59],80:[2,59],81:[2,59],82:[2,59],83:[2,59],84:[2,59],85:[2,59]},{33:[2,61],75:[2,61]},{33:[2,68],37:121,74:122,75:[1,120]},{33:[2,65],65:[2,65],72:[2,65],75:[2,65],80:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[2,65]},{33:[2,67],75:[2,67]},{23:[1,123]},{23:[2,51],65:[2,51],72:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51]},{23:[2,53]},{33:[1,124]},{33:[2,91],65:[2,91],72:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91]},{33:[2,93]},{5:[2,22],14:[2,22],15:[2,22],19:[2,22],29:[2,22],34:[2,22],39:[2,22],44:[2,22],47:[2,22],48:[2,22],51:[2,22],55:[2,22],60:[2,22]},{23:[2,99],33:[2,99],54:[2,99],68:[2,99],72:[2,99],75:[2,99]},{73:[1,108]},{20:74,63:125,64:75,65:[1,43],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,23],14:[2,23],15:[2,23],19:[2,23],29:[2,23],34:[2,23],39:[2,23],44:[2,23],47:[2,23],48:[2,23],51:[2,23],55:[2,23],60:[2,23]},{47:[2,19]},{47:[2,77]},{20:74,33:[2,72],41:126,63:127,64:75,65:[1,43],69:128,70:76,71:77,72:[1,78],75:[2,72],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,24],14:[2,24],15:[2,24],19:[2,24],29:[2,24],34:[2,24],39:[2,24],44:[2,24],47:[2,24],48:[2,24],51:[2,24],55:[2,24],60:[2,24]},{68:[1,129]},{65:[2,95],68:[2,95],72:[2,95],80:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95]},{68:[2,97]},{5:[2,21],14:[2,21],15:[2,21],19:[2,21],29:[2,21],34:[2,21],39:[2,21],44:[2,21],47:[2,21],48:[2,21],51:[2,21],55:[2,21],60:[2,21]},{33:[1,130]},{33:[2,63]},{72:[1,132],76:131},{33:[1,133]},{33:[2,69]},{15:[2,12],18:[2,12]},{14:[2,26],15:[2,26],19:[2,26],29:[2,26],34:[2,26],47:[2,26],48:[2,26],51:[2,26],55:[2,26],60:[2,26]},{23:[2,31],33:[2,31],54:[2,31],68:[2,31],72:[2,31],75:[2,31]},{33:[2,74],42:134,74:135,75:[1,120]},{33:[2,71],65:[2,71],72:[2,71],75:[2,71],80:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71]},{33:[2,73],75:[2,73]},{23:[2,29],33:[2,29],54:[2,29],65:[2,29],68:[2,29],72:[2,29],75:[2,29],80:[2,29],81:[2,29],82:[2,29],83:[2,29],84:[2,29],85:[2,29]},{14:[2,15],15:[2,15],19:[2,15],29:[2,15],34:[2,15],39:[2,15],44:[2,15],47:[2,15],48:[2,15],51:[2,15],55:[2,15],60:[2,15]},{72:[1,137],77:[1,136]},{72:[2,100],77:[2,100]},{14:[2,16],15:[2,16],19:[2,16],29:[2,16],34:[2,16],44:[2,16],47:[2,16],48:[2,16],51:[2,16],55:[2,16],60:[2,16]},{33:[1,138]},{33:[2,75]},{33:[2,32]},{72:[2,101],77:[2,101]},{14:[2,17],15:[2,17],19:[2,17],29:[2,17],34:[2,17],39:[2,17],44:[2,17],47:[2,17],48:[2,17],51:[2,17],55:[2,17],60:[2,17]}],defaultActions:{4:[2,1],54:[2,55],56:[2,20],60:[2,57],73:[2,81],82:[2,85],86:[2,18],90:[2,89],101:[2,53],104:[2,93],110:[2,19],111:[2,77],116:[2,97],119:[2,63],122:[2,69],135:[2,75],136:[2,32]},parseError:function(e,t){throw new Error(e)},parse:function(e){var t=this,n=[0],r=[null],i=[],s=this.table,o="",a=0,u=0,l=0;this.lexer.setInput(e),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,this.yy.parser=this,void 0===this.lexer.yylloc&&(this.lexer.yylloc={});var c=this.lexer.yylloc;i.push(c);var h=this.lexer.options&&this.lexer.options.ranges;"function"==typeof this.yy.parseError&&(this.parseError=this.yy.parseError);for(var p,f,d,g,m,D,v,y,k,_,C={};;){if(d=n[n.length-1],this.defaultActions[d]?g=this.defaultActions[d]:(null==p&&(_=void 0,"number"!=typeof(_=t.lexer.lex()||1)&&(_=t.symbols_[_]||_),p=_),g=s[d]&&s[d][p]),void 0===g||!g.length||!g[0]){var A="";if(!l){for(D in k=[],s[d])this.terminals_[D]&&D>2&&k.push("'"+this.terminals_[D]+"'");A=this.lexer.showPosition?"Parse error on line "+(a+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+k.join(", ")+", got '"+(this.terminals_[p]||p)+"'":"Parse error on line "+(a+1)+": Unexpected "+(1==p?"end of input":"'"+(this.terminals_[p]||p)+"'"),this.parseError(A,{text:this.lexer.match,token:this.terminals_[p]||p,line:this.lexer.yylineno,loc:c,expected:k})}}if(g[0]instanceof Array&&g.length>1)throw new Error("Parse Error: multiple actions possible at state: "+d+", token: "+p);switch(g[0]){case 1:n.push(p),r.push(this.lexer.yytext),i.push(this.lexer.yylloc),n.push(g[1]),p=null,f?(p=f,f=null):(u=this.lexer.yyleng,o=this.lexer.yytext,a=this.lexer.yylineno,c=this.lexer.yylloc,l>0&&l--);break;case 2:if(v=this.productions_[g[1]][1],C.$=r[r.length-v],C._$={first_line:i[i.length-(v||1)].first_line,last_line:i[i.length-1].last_line,first_column:i[i.length-(v||1)].first_column,last_column:i[i.length-1].last_column},h&&(C._$.range=[i[i.length-(v||1)].range[0],i[i.length-1].range[1]]),void 0!==(m=this.performAction.call(C,o,u,a,this.yy,g[1],r,i)))return m;v&&(n=n.slice(0,-1*v*2),r=r.slice(0,-1*v),i=i.slice(0,-1*v)),n.push(this.productions_[g[1]][0]),r.push(C.$),i.push(C._$),y=s[n[n.length-2]][n[n.length-1]],n.push(y);break;case 3:return!0}}return!0}},t=function(){var e={EOF:1,parseError:function(e,t){if(!this.yy.parser)throw new Error(e);this.yy.parser.parseError(e,t)},setInput:function(e){return this._input=e,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];return this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e,e.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,n=e.split(/(?:\r\n?|\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t-1),this.offset-=t;var r=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),n.length-1&&(this.yylineno-=n.length-1);var i=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:n?(n.length===r.length?this.yylloc.first_column:0)+r[r.length-n.length].length-n[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[i[0],i[0]+this.yyleng-t]),this},more:function(){return this._more=!0,this},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var e=this.pastInput(),t=new Array(e.length+1).join("-");return e+this.upcomingInput()+"\n"+t+"^"},next:function(){if(this.done)return this.EOF;var e,t,n,r,i;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var s=this._currentRules(),o=0;o<s.length&&(!(n=this._input.match(this.rules[s[o]]))||t&&!(n[0].length>t[0].length)||(t=n,r=o,this.options.flex));o++);return t?((i=t[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=i.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:i?i[i.length-1].length-i[i.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+t[0].length},this.yytext+=t[0],this.match+=t[0],this.matches=t,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(t[0].length),this.matched+=t[0],e=this.performAction.call(this,this.yy,this,s[r],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),e||void 0):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var e=this.next();return void 0!==e?e:this.lex()},begin:function(e){this.conditionStack.push(e)},popState:function(){return this.conditionStack.pop()},_currentRules:function(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function(){return this.conditionStack[this.conditionStack.length-2]},pushState:function(e){this.begin(e)},options:{},performAction:function(e,t,n,r){function i(e,n){return t.yytext=t.yytext.substring(e,t.yyleng-n+e)}switch(n){case 0:if("\\\\"===t.yytext.slice(-2)?(i(0,1),this.begin("mu")):"\\"===t.yytext.slice(-1)?(i(0,1),this.begin("emu")):this.begin("mu"),t.yytext)return 15;break;case 1:case 5:return 15;case 2:return this.popState(),15;case 3:return this.begin("raw"),15;case 4:return this.popState(),"raw"===this.conditionStack[this.conditionStack.length-1]?15:(i(5,9),"END_RAW_BLOCK");case 6:case 22:return this.popState(),14;case 7:return 65;case 8:return 68;case 9:return 19;case 10:return this.popState(),this.begin("raw"),23;case 11:return 55;case 12:return 60;case 13:return 29;case 14:return 47;case 15:case 16:return this.popState(),44;case 17:return 34;case 18:return 39;case 19:return 51;case 20:case 23:return 48;case 21:this.unput(t.yytext),this.popState(),this.begin("com");break;case 24:return 73;case 25:case 26:case 41:return 72;case 27:return 87;case 28:break;case 29:return this.popState(),54;case 30:return this.popState(),33;case 31:return t.yytext=i(1,2).replace(/\\"/g,'"'),80;case 32:return t.yytext=i(1,2).replace(/\\'/g,"'"),80;case 33:return 85;case 34:case 35:return 82;case 36:return 83;case 37:return 84;case 38:return 81;case 39:return 75;case 40:return 77;case 42:return t.yytext=t.yytext.replace(/\\([\\\]])/g,"$1"),72;case 43:return"INVALID";case 44:return 5}},rules:[/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:\{\{\{\{(?=[^\/]))/,/^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,/^(?:[^\x00]+?(?=(\{\{\{\{)))/,/^(?:[\s\S]*?--(~)?\}\})/,/^(?:\()/,/^(?:\))/,/^(?:\{\{\{\{)/,/^(?:\}\}\}\})/,/^(?:\{\{(~)?>)/,/^(?:\{\{(~)?#>)/,/^(?:\{\{(~)?#\*?)/,/^(?:\{\{(~)?\/)/,/^(?:\{\{(~)?\^\s*(~)?\}\})/,/^(?:\{\{(~)?\s*else\s*(~)?\}\})/,/^(?:\{\{(~)?\^)/,/^(?:\{\{(~)?\s*else\b)/,/^(?:\{\{(~)?\{)/,/^(?:\{\{(~)?&)/,/^(?:\{\{(~)?!--)/,/^(?:\{\{(~)?![\s\S]*?\}\})/,/^(?:\{\{(~)?\*?)/,/^(?:=)/,/^(?:\.\.)/,/^(?:\.(?=([=~}\s\/.)|])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}(~)?\}\})/,/^(?:(~)?\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\s)])))/,/^(?:false(?=([~}\s)])))/,/^(?:undefined(?=([~}\s)])))/,/^(?:null(?=([~}\s)])))/,/^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,/^(?:as\s+\|)/,/^(?:\|)/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,/^(?:\[(\\\]|[^\]])*\])/,/^(?:.)/,/^(?:$)/],conditions:{mu:{rules:[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],inclusive:!1},emu:{rules:[2],inclusive:!1},com:{rules:[6],inclusive:!1},raw:{rules:[3,4,5],inclusive:!1},INITIAL:{rules:[0,1,44],inclusive:!0}}};return e}();function n(){this.yy={}}return e.lexer=t,n.prototype=e,e.Parser=n,new n}();mt.default=Dt;var vt=gt(mt=mt.default),yt={};yt.__esModule=!0;var kt={};kt.__esModule=!0;var _t=function(e){return e&&e.__esModule?e:{default:e}}(Z);function Ct(){this.parents=[]}function At(e){this.acceptRequired(e,"path"),this.acceptArray(e.params),this.acceptKey(e,"hash")}function Et(e){At.call(this,e),this.acceptKey(e,"program"),this.acceptKey(e,"inverse")}function bt(e){this.acceptRequired(e,"name"),this.acceptArray(e.params),this.acceptKey(e,"hash")}Ct.prototype={constructor:Ct,mutating:!1,acceptKey:function(e,t){var n=this.accept(e[t]);if(this.mutating){if(n&&!Ct.prototype[n.type])throw new _t.default('Unexpected node type "'+n.type+'" found when accepting '+t+" on "+e.type);e[t]=n}},acceptRequired:function(e,t){if(this.acceptKey(e,t),!e[t])throw new _t.default(e.type+" requires "+t)},acceptArray:function(e){for(var t=0,n=e.length;t<n;t++)this.acceptKey(e,t),e[t]||(e.splice(t,1),t--,n--)},accept:function(e){if(e){if(!this[e.type])throw new _t.default("Unknown type: "+e.type,e);this.current&&this.parents.unshift(this.current),this.current=e;var t=this[e.type](e);return this.current=this.parents.shift(),!this.mutating||t?t:!1!==t?e:void 0}},Program:function(e){this.acceptArray(e.body)},MustacheStatement:At,Decorator:At,BlockStatement:Et,DecoratorBlock:Et,PartialStatement:bt,PartialBlockStatement:function(e){bt.call(this,e),this.acceptKey(e,"program")},ContentStatement:function(){},CommentStatement:function(){},SubExpression:At,PathExpression:function(){},StringLiteral:function(){},NumberLiteral:function(){},BooleanLiteral:function(){},UndefinedLiteral:function(){},NullLiteral:function(){},Hash:function(e){this.acceptArray(e.pairs)},HashPair:function(e){this.acceptRequired(e,"value")}},kt.default=Ct;var xt=function(e){return e&&e.__esModule?e:{default:e}}(kt=kt.default);function wt(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.options=e}function Ft(e,t,n){void 0===t&&(t=e.length);var r=e[t-1],i=e[t-2];return r?"ContentStatement"===r.type?(i||!n?/\r?\n\s*?$/:/(^|\r?\n)\s*?$/).test(r.original):void 0:n}function St(e,t,n){void 0===t&&(t=-1);var r=e[t+1],i=e[t+2];return r?"ContentStatement"===r.type?(i||!n?/^\s*?\r?\n/:/^\s*?(\r?\n|$)/).test(r.original):void 0:n}function Bt(e,t,n){var r=e[null==t?0:t+1];if(r&&"ContentStatement"===r.type&&(n||!r.rightStripped)){var i=r.value;r.value=r.value.replace(n?/^\s+/:/^[ \t]*\r?\n?/,""),r.rightStripped=r.value!==i}}function Pt(e,t,n){var r=e[null==t?e.length-1:t-1];if(r&&"ContentStatement"===r.type&&(n||!r.leftStripped)){var i=r.value;return r.value=r.value.replace(n?/\s+$/:/[ \t]+$/,""),r.leftStripped=r.value!==i,r.leftStripped}}wt.prototype=new xt.default,wt.prototype.Program=function(e){var t=!this.options.ignoreStandalone,n=!this.isRootSeen;this.isRootSeen=!0;for(var r=e.body,i=0,s=r.length;i<s;i++){var o=r[i],a=this.accept(o);if(a){var u=Ft(r,i,n),l=St(r,i,n),c=a.openStandalone&&u,h=a.closeStandalone&&l,p=a.inlineStandalone&&u&&l;a.close&&Bt(r,i,!0),a.open&&Pt(r,i,!0),t&&p&&(Bt(r,i),Pt(r,i)&&"PartialStatement"===o.type&&(o.indent=/([ \t]+$)/.exec(r[i-1].original)[1])),t&&c&&(Bt((o.program||o.inverse).body),Pt(r,i)),t&&h&&(Bt(r,i),Pt((o.inverse||o.program).body))}}return e},wt.prototype.BlockStatement=wt.prototype.DecoratorBlock=wt.prototype.PartialBlockStatement=function(e){this.accept(e.program),this.accept(e.inverse);var t=e.program||e.inverse,n=e.program&&e.inverse,r=n,i=n;if(n&&n.chained)for(r=n.body[0].program;i.chained;)i=i.body[i.body.length-1].program;var s={open:e.openStrip.open,close:e.closeStrip.close,openStandalone:St(t.body),closeStandalone:Ft((r||t).body)};if(e.openStrip.close&&Bt(t.body,null,!0),n){var o=e.inverseStrip;o.open&&Pt(t.body,null,!0),o.close&&Bt(r.body,null,!0),e.closeStrip.open&&Pt(i.body,null,!0),!this.options.ignoreStandalone&&Ft(t.body)&&St(r.body)&&(Pt(t.body),Bt(r.body))}else e.closeStrip.open&&Pt(t.body,null,!0);return s},wt.prototype.Decorator=wt.prototype.MustacheStatement=function(e){return e.strip},wt.prototype.PartialStatement=wt.prototype.CommentStatement=function(e){var t=e.strip||{};return{inlineStandalone:!0,open:t.open,close:t.close}},yt.default=wt;var Lt,Ot,Mt,$t,It,Rt,Nt,Tt,zt,jt,Ht,Ut=gt(yt=yt.default),qt={};e(qt,"__esModule",(()=>Lt),(e=>Lt=e)),e(qt,"SourceLocation",(()=>Ot),(e=>Ot=e)),e(qt,"id",(()=>Mt),(e=>Mt=e)),e(qt,"stripFlags",(()=>$t),(e=>$t=e)),e(qt,"stripComment",(()=>It),(e=>It=e)),e(qt,"preparePath",(()=>Rt),(e=>Rt=e)),e(qt,"prepareMustache",(()=>Nt),(e=>Nt=e)),e(qt,"prepareRawBlock",(()=>Tt),(e=>Tt=e)),e(qt,"prepareBlock",(()=>zt),(e=>zt=e)),e(qt,"prepareProgram",(()=>jt),(e=>jt=e)),e(qt,"preparePartialBlock",(()=>Ht),(e=>Ht=e)),Lt=!0,Ot=function(e,t){this.source=e,this.start={line:t.first_line,column:t.first_column},this.end={line:t.last_line,column:t.last_column}},Mt=function(e){return/^\[.*\]$/.test(e)?e.substring(1,e.length-1):e},$t=function(e,t){return{open:"~"===e.charAt(2),close:"~"===t.charAt(t.length-3)}},It=function(e){return e.replace(/^\{\{~?!-?-?/,"").replace(/-?-?~?\}\}$/,"")},Rt=function(e,t,n){n=this.locInfo(n);for(var r=e?"@":"",i=[],s=0,o=0,a=t.length;o<a;o++){var u=t[o].part,l=t[o].original!==u;if(r+=(t[o].separator||"")+u,l||".."!==u&&"."!==u&&"this"!==u)i.push(u);else{if(i.length>0)throw new Vt.default("Invalid path: "+r,{loc:n});".."===u&&s++}}return{type:"PathExpression",data:e,depth:s,parts:i,original:r,loc:n}},Nt=function(e,t,n,r,i,s){var o=r.charAt(3)||r.charAt(2),a="{"!==o&&"&"!==o;return{type:/\*/.test(r)?"Decorator":"MustacheStatement",path:e,params:t,hash:n,escaped:a,strip:i,loc:this.locInfo(s)}},Tt=function(e,t,n,r){Gt(e,n),r=this.locInfo(r);var i={type:"Program",body:t,strip:{},loc:r};return{type:"BlockStatement",path:e.path,params:e.params,hash:e.hash,program:i,openStrip:{},inverseStrip:{},closeStrip:{},loc:r}},zt=function(e,t,n,r,i,s){r&&r.path&&Gt(e,r);var o=/\*/.test(e.open);t.blockParams=e.blockParams;var a=void 0,u=void 0;if(n){if(o)throw new Vt.default("Unexpected inverse block on decorator",n);n.chain&&(n.program.body[0].closeStrip=r.strip),u=n.strip,a=n.program}i&&(i=a,a=t,t=i);return{type:o?"DecoratorBlock":"BlockStatement",path:e.path,params:e.params,hash:e.hash,program:t,inverse:a,openStrip:e.strip,inverseStrip:u,closeStrip:r&&r.strip,loc:this.locInfo(s)}},jt=function(e,t){if(!t&&e.length){var n=e[0].loc,r=e[e.length-1].loc;n&&r&&(t={source:n.source,start:{line:n.start.line,column:n.start.column},end:{line:r.end.line,column:r.end.column}})}return{type:"Program",body:e,strip:{},loc:t}},Ht=function(e,t,n,r){return Gt(e,n),{type:"PartialBlockStatement",name:e.path,params:e.params,hash:e.hash,program:t,openStrip:e.strip,closeStrip:n&&n.strip,loc:this.locInfo(r)}};var Vt=function(e){return e&&e.__esModule?e:{default:e}}(Z);function Gt(e,t){if(t=t.path?t.path.original:t,e.path.original!==t){var n={loc:e.path.loc};throw new Vt.default(e.path.original+" doesn't match "+t,n)}}var Kt=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(qt);ft=vt.default;var Zt,Wt,Jt,Qt={};function Xt(e,t){return"Program"===e.type?e:(vt.default.yy=Qt,Qt.locInfo=function(e){return new Qt.SourceLocation(t&&t.srcName,e)},vt.default.parse(e))}function Yt(e){return e&&e.__esModule?e:{default:e}}S(Qt,Kt),Zt=rn,Wt=function(e,t,n){if(null==e||"string"!=typeof e&&"Program"!==e.type)throw new en.default("You must pass a string or Handlebars AST to Handlebars.precompile. You passed "+e);"data"in(t=t||{})||(t.data=!0);t.compat&&(t.useDepths=!0);var r=n.parse(e,t),i=(new n.Compiler).compile(r,t);return(new n.JavaScriptCompiler).compile(i,t)},Jt=function(e,t,n){void 0===t&&(t={});if(null==e||"string"!=typeof e&&"Program"!==e.type)throw new en.default("You must pass a string or Handlebars AST to Handlebars.compile. You passed "+e);"data"in(t=S({},t))||(t.data=!0);t.compat&&(t.useDepths=!0);var r=void 0;function i(){var r=n.parse(e,t),i=(new n.Compiler).compile(r,t),s=(new n.JavaScriptCompiler).compile(i,t,void 0,!0);return n.template(s)}function s(e,t){return r||(r=i()),r.call(this,e,t)}return s._setup=function(e){return r||(r=i()),r._setup(e)},s._child=function(e,t,n,s){return r||(r=i()),r._child(e,t,n,s)},s};var en=Yt(Z),tn=Yt(lt),nn=[].slice;function rn(){}function sn(e,t){if(e===t)return!0;if(N(e)&&N(t)&&e.length===t.length){for(var n=0;n<e.length;n++)if(!sn(e[n],t[n]))return!1;return!0}}function on(e){if(!e.path.parts){var t=e.path;e.path={type:"PathExpression",data:!1,depth:0,parts:[t.original+""],original:t.original+"",loc:t.loc}}}rn.prototype={compiler:rn,equals:function(e){var t=this.opcodes.length;if(e.opcodes.length!==t)return!1;for(var n=0;n<t;n++){var r=this.opcodes[n],i=e.opcodes[n];if(r.opcode!==i.opcode||!sn(r.args,i.args))return!1}t=this.children.length;for(n=0;n<t;n++)if(!this.children[n].equals(e.children[n]))return!1;return!0},guid:0,compile:function(e,t){return this.sourceNode=[],this.opcodes=[],this.children=[],this.options=t,this.stringParams=t.stringParams,this.trackIds=t.trackIds,t.blockParams=t.blockParams||[],t.knownHelpers=S(Object.create(null),{helperMissing:!0,blockHelperMissing:!0,each:!0,if:!0,unless:!0,with:!0,log:!0,lookup:!0},t.knownHelpers),this.accept(e)},compileProgram:function(e){var t=(new this.compiler).compile(e,this.options),n=this.guid++;return this.usePartial=this.usePartial||t.usePartial,this.children[n]=t,this.useDepths=this.useDepths||t.useDepths,n},accept:function(e){if(!this[e.type])throw new en.default("Unknown type: "+e.type,e);this.sourceNode.unshift(e);var t=this[e.type](e);return this.sourceNode.shift(),t},Program:function(e){this.options.blockParams.unshift(e.blockParams);for(var t=e.body,n=t.length,r=0;r<n;r++)this.accept(t[r]);return this.options.blockParams.shift(),this.isSimple=1===n,this.blockParams=e.blockParams?e.blockParams.length:0,this},BlockStatement:function(e){on(e);var t=e.program,n=e.inverse;t=t&&this.compileProgram(t),n=n&&this.compileProgram(n);var r=this.classifySexpr(e);"helper"===r?this.helperSexpr(e,t,n):"simple"===r?(this.simpleSexpr(e),this.opcode("pushProgram",t),this.opcode("pushProgram",n),this.opcode("emptyHash"),this.opcode("blockValue",e.path.original)):(this.ambiguousSexpr(e,t,n),this.opcode("pushProgram",t),this.opcode("pushProgram",n),this.opcode("emptyHash"),this.opcode("ambiguousBlockValue")),this.opcode("append")},DecoratorBlock:function(e){var t=e.program&&this.compileProgram(e.program),n=this.setupFullMustacheParams(e,t,void 0),r=e.path;this.useDecorators=!0,this.opcode("registerDecorator",n.length,r.original)},PartialStatement:function(e){this.usePartial=!0;var t=e.program;t&&(t=this.compileProgram(e.program));var n=e.params;if(n.length>1)throw new en.default("Unsupported number of partial arguments: "+n.length,e);n.length||(this.options.explicitPartialContext?this.opcode("pushLiteral","undefined"):n.push({type:"PathExpression",parts:[],depth:0}));var r=e.name.original,i="SubExpression"===e.name.type;i&&this.accept(e.name),this.setupFullMustacheParams(e,t,void 0,!0);var s=e.indent||"";this.options.preventIndent&&s&&(this.opcode("appendContent",s),s=""),this.opcode("invokePartial",i,r,s),this.opcode("append")},PartialBlockStatement:function(e){this.PartialStatement(e)},MustacheStatement:function(e){this.SubExpression(e),e.escaped&&!this.options.noEscape?this.opcode("appendEscaped"):this.opcode("append")},Decorator:function(e){this.DecoratorBlock(e)},ContentStatement:function(e){e.value&&this.opcode("appendContent",e.value)},CommentStatement:function(){},SubExpression:function(e){on(e);var t=this.classifySexpr(e);"simple"===t?this.simpleSexpr(e):"helper"===t?this.helperSexpr(e):this.ambiguousSexpr(e)},ambiguousSexpr:function(e,t,n){var r=e.path,i=r.parts[0],s=null!=t||null!=n;this.opcode("getContext",r.depth),this.opcode("pushProgram",t),this.opcode("pushProgram",n),r.strict=!0,this.accept(r),this.opcode("invokeAmbiguous",i,s)},simpleSexpr:function(e){var t=e.path;t.strict=!0,this.accept(t),this.opcode("resolvePossibleLambda")},helperSexpr:function(e,t,n){var r=this.setupFullMustacheParams(e,t,n),i=e.path,s=i.parts[0];if(this.options.knownHelpers[s])this.opcode("invokeKnownHelper",r.length,s);else{if(this.options.knownHelpersOnly)throw new en.default("You specified knownHelpersOnly, but used the unknown helper "+s,e);i.strict=!0,i.falsy=!0,this.accept(i),this.opcode("invokeHelper",r.length,i.original,tn.default.helpers.simpleId(i))}},PathExpression:function(e){this.addDepth(e.depth),this.opcode("getContext",e.depth);var t=e.parts[0],n=tn.default.helpers.scopedId(e),r=!e.depth&&!n&&this.blockParamIndex(t);r?this.opcode("lookupBlockParam",r,e.parts):t?e.data?(this.options.data=!0,this.opcode("lookupData",e.depth,e.parts,e.strict)):this.opcode("lookupOnContext",e.parts,e.falsy,e.strict,n):this.opcode("pushContext")},StringLiteral:function(e){this.opcode("pushString",e.value)},NumberLiteral:function(e){this.opcode("pushLiteral",e.value)},BooleanLiteral:function(e){this.opcode("pushLiteral",e.value)},UndefinedLiteral:function(){this.opcode("pushLiteral","undefined")},NullLiteral:function(){this.opcode("pushLiteral","null")},Hash:function(e){var t=e.pairs,n=0,r=t.length;for(this.opcode("pushHash");n<r;n++)this.pushParam(t[n].value);for(;n--;)this.opcode("assignToHash",t[n].key);this.opcode("popHash")},opcode:function(e){this.opcodes.push({opcode:e,args:nn.call(arguments,1),loc:this.sourceNode[0].loc})},addDepth:function(e){e&&(this.useDepths=!0)},classifySexpr:function(e){var t=tn.default.helpers.simpleId(e.path),n=t&&!!this.blockParamIndex(e.path.parts[0]),r=!n&&tn.default.helpers.helperExpression(e),i=!n&&(r||t);if(i&&!r){var s=e.path.parts[0],o=this.options;o.knownHelpers[s]?r=!0:o.knownHelpersOnly&&(i=!1)}return r?"helper":i?"ambiguous":"simple"},pushParams:function(e){for(var t=0,n=e.length;t<n;t++)this.pushParam(e[t])},pushParam:function(e){var t=null!=e.value?e.value:e.original||"";if(this.stringParams)t.replace&&(t=t.replace(/^(\.?\.\/)*/g,"").replace(/\//g,".")),e.depth&&this.addDepth(e.depth),this.opcode("getContext",e.depth||0),this.opcode("pushStringParam",t,e.type),"SubExpression"===e.type&&this.accept(e);else{if(this.trackIds){var n=void 0;if(!e.parts||tn.default.helpers.scopedId(e)||e.depth||(n=this.blockParamIndex(e.parts[0])),n){var r=e.parts.slice(1).join(".");this.opcode("pushId","BlockParam",n,r)}else(t=e.original||t).replace&&(t=t.replace(/^this(?:\.|$)/,"").replace(/^\.\//,"").replace(/^\.$/,"")),this.opcode("pushId",e.type,t)}this.accept(e)}},setupFullMustacheParams:function(e,t,n,r){var i=e.params;return this.pushParams(i),this.opcode("pushProgram",t),this.opcode("pushProgram",n),e.hash?this.accept(e.hash):this.opcode("emptyHash",r),i},blockParamIndex:function(e){for(var t=0,n=this.options.blockParams.length;t<n;t++){var r=this.options.blockParams[t],i=r&&B(r,e);if(r&&i>=0)return[t,i]}}};var an={};function un(e){return e&&e.__esModule?e:{default:e}}an.__esModule=!0;var ln=un(Z),cn={__esModule:!0},hn=void 0;try{if("function"!=typeof define||!define.amd){var pn=s("97gFG");hn=pn.SourceNode}}catch(e){}function fn(e,t,n){if(N(e)){for(var r=[],i=0,s=e.length;i<s;i++)r.push(t.wrap(e[i],n));return r}return"boolean"==typeof e||"number"==typeof e?e+"":e}function dn(e){this.srcFile=e,this.source=[]}hn||((hn=function(e,t,n,r){this.src="",r&&this.add(r)}).prototype={add:function(e){N(e)&&(e=e.join("")),this.src+=e},prepend:function(e){N(e)&&(e=e.join("")),this.src=e+this.src},toStringWithSourceMap:function(){return{code:this.toString()}},toString:function(){return this.src}}),dn.prototype={isEmpty:function(){return!this.source.length},prepend:function(e,t){this.source.unshift(this.wrap(e,t))},push:function(e,t){this.source.push(this.wrap(e,t))},merge:function(){var e=this.empty();return this.each((function(t){e.add(["  ",t,"\n"])})),e},each:function(e){for(var t=0,n=this.source.length;t<n;t++)e(this.source[t])},empty:function(){var e=this.currentLocation||{start:{}};return new hn(e.start.line,e.start.column,this.srcFile)},wrap:function(e){var t=arguments.length<=1||void 0===arguments[1]?this.currentLocation||{start:{}}:arguments[1];return e instanceof hn?e:(e=fn(e,this,t),new hn(t.start.line,t.start.column,this.srcFile,e))},functionCall:function(e,t,n){return n=this.generateList(n),this.wrap([e,t?"."+t+"(":"(",n,")"])},quotedString:function(e){return'"'+(e+"").replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")+'"'},objectLiteral:function(e){var t=this,n=[];Object.keys(e).forEach((function(r){var i=fn(e[r],t);"undefined"!==i&&n.push([t.quotedString(r),":",i])}));var r=this.generateList(n);return r.prepend("{"),r.add("}"),r},generateList:function(e){for(var t=this.empty(),n=0,r=e.length;n<r;n++)n&&t.add(","),t.add(fn(e[n],this));return t},generateArray:function(e){var t=this.generateList(e);return t.prepend("["),t.add("]"),t}},cn.default=dn;var gn=un(cn=cn.default);function mn(e){this.value=e}function Dn(){}Dn.prototype={nameLookup:function(e,t){return this.internalNameLookup(e,t)},depthedLookup:function(e){return[this.aliasable("container.lookup"),"(depths, ",JSON.stringify(e),")"]},compilerInfo:function(){return[k,C[k]]},appendToBuffer:function(e,t,n){return N(e)||(e=[e]),e=this.source.wrap(e,t),this.environment.isSimple?["return ",e,";"]:n?["buffer += ",e,";"]:(e.appendToBuffer=!0,e)},initializeBuffer:function(){return this.quotedString("")},internalNameLookup:function(e,t){return this.lookupPropertyFunctionIsUsed=!0,["lookupProperty(",e,",",JSON.stringify(t),")"]},lookupPropertyFunctionIsUsed:!1,compile:function(e,t,n,r){this.environment=e,this.options=t,this.stringParams=this.options.stringParams,this.trackIds=this.options.trackIds,this.precompile=!r,this.name=this.environment.name,this.isChild=!!n,this.context=n||{decorators:[],programs:[],environments:[]},this.preamble(),this.stackSlot=0,this.stackVars=[],this.aliases={},this.registers={list:[]},this.hashes=[],this.compileStack=[],this.inlineStack=[],this.blockParams=[],this.compileChildren(e,t),this.useDepths=this.useDepths||e.useDepths||e.useDecorators||this.options.compat,this.useBlockParams=this.useBlockParams||e.useBlockParams;var i=e.opcodes,s=void 0,o=void 0,a=void 0,u=void 0;for(a=0,u=i.length;a<u;a++)s=i[a],this.source.currentLocation=s.loc,o=o||s.loc,this[s.opcode].apply(this,s.args);if(this.source.currentLocation=o,this.pushSource(""),this.stackSlot||this.inlineStack.length||this.compileStack.length)throw new ln.default("Compile completed with content left on stack");this.decorators.isEmpty()?this.decorators=void 0:(this.useDecorators=!0,this.decorators.prepend(["var decorators = container.decorators, ",this.lookupPropertyFunctionVarDeclaration(),";\n"]),this.decorators.push("return fn;"),r?this.decorators=Function.apply(this,["fn","props","container","depth0","data","blockParams","depths",this.decorators.merge()]):(this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) {\n"),this.decorators.push("}\n"),this.decorators=this.decorators.merge()));var l=this.createFunctionContext(r);if(this.isChild)return l;var c={compiler:this.compilerInfo(),main:l};this.decorators&&(c.main_d=this.decorators,c.useDecorators=!0);var h=this.context,p=h.programs,f=h.decorators;for(a=0,u=p.length;a<u;a++)p[a]&&(c[a]=p[a],f[a]&&(c[a+"_d"]=f[a],c.useDecorators=!0));return this.environment.usePartial&&(c.usePartial=!0),this.options.data&&(c.useData=!0),this.useDepths&&(c.useDepths=!0),this.useBlockParams&&(c.useBlockParams=!0),this.options.compat&&(c.compat=!0),r?c.compilerOptions=this.options:(c.compiler=JSON.stringify(c.compiler),this.source.currentLocation={start:{line:1,column:0}},c=this.objectLiteral(c),t.srcName?(c=c.toStringWithSourceMap({file:t.destName})).map=c.map&&c.map.toString():c=c.toString()),c},preamble:function(){this.lastContext=0,this.source=new gn.default(this.options.srcName),this.decorators=new gn.default(this.options.srcName)},createFunctionContext:function(e){var t=this,n="",r=this.stackVars.concat(this.registers.list);r.length>0&&(n+=", "+r.join(", "));var i=0;Object.keys(this.aliases).forEach((function(e){var r=t.aliases[e];r.children&&r.referenceCount>1&&(n+=", alias"+ ++i+"="+e,r.children[0]="alias"+i)})),this.lookupPropertyFunctionIsUsed&&(n+=", "+this.lookupPropertyFunctionVarDeclaration());var s=["container","depth0","helpers","partials","data"];(this.useBlockParams||this.useDepths)&&s.push("blockParams"),this.useDepths&&s.push("depths");var o=this.mergeSource(n);return e?(s.push(o),Function.apply(this,s)):this.source.wrap(["function(",s.join(","),") {\n  ",o,"}"])},mergeSource:function(e){var t=this.environment.isSimple,n=!this.forceBuffer,r=void 0,i=void 0,s=void 0,o=void 0;return this.source.each((function(e){e.appendToBuffer?(s?e.prepend("  + "):s=e,o=e):(s&&(i?s.prepend("buffer += "):r=!0,o.add(";"),s=o=void 0),i=!0,t||(n=!1))})),n?s?(s.prepend("return "),o.add(";")):i||this.source.push('return "";'):(e+=", buffer = "+(r?"":this.initializeBuffer()),s?(s.prepend("return buffer + "),o.add(";")):this.source.push("return buffer;")),e&&this.source.prepend("var "+e.substring(2)+(r?"":";\n")),this.source.merge()},lookupPropertyFunctionVarDeclaration:function(){return"\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    }\n    ".trim()},blockValue:function(e){var t=this.aliasable("container.hooks.blockHelperMissing"),n=[this.contextName(0)];this.setupHelperArgs(e,0,n);var r=this.popStack();n.splice(1,0,r),this.push(this.source.functionCall(t,"call",n))},ambiguousBlockValue:function(){var e=this.aliasable("container.hooks.blockHelperMissing"),t=[this.contextName(0)];this.setupHelperArgs("",0,t,!0),this.flushInline();var n=this.topStack();t.splice(1,0,n),this.pushSource(["if (!",this.lastHelper,") { ",n," = ",this.source.functionCall(e,"call",t),"}"])},appendContent:function(e){this.pendingContent?e=this.pendingContent+e:this.pendingLocation=this.source.currentLocation,this.pendingContent=e},append:function(){if(this.isInline())this.replaceStack((function(e){return[" != null ? ",e,' : ""']})),this.pushSource(this.appendToBuffer(this.popStack()));else{var e=this.popStack();this.pushSource(["if (",e," != null) { ",this.appendToBuffer(e,void 0,!0)," }"]),this.environment.isSimple&&this.pushSource(["else { ",this.appendToBuffer("''",void 0,!0)," }"])}},appendEscaped:function(){this.pushSource(this.appendToBuffer([this.aliasable("container.escapeExpression"),"(",this.popStack(),")"]))},getContext:function(e){this.lastContext=e},pushContext:function(){this.pushStackLiteral(this.contextName(this.lastContext))},lookupOnContext:function(e,t,n,r){var i=0;r||!this.options.compat||this.lastContext?this.pushContext():this.push(this.depthedLookup(e[i++])),this.resolvePath("context",e,i,t,n)},lookupBlockParam:function(e,t){this.useBlockParams=!0,this.push(["blockParams[",e[0],"][",e[1],"]"]),this.resolvePath("context",t,1)},lookupData:function(e,t,n){e?this.pushStackLiteral("container.data(data, "+e+")"):this.pushStackLiteral("data"),this.resolvePath("data",t,0,!0,n)},resolvePath:function(e,t,n,r,i){var s=this;if(this.options.strict||this.options.assumeObjects)this.push(function(e,t,n,r){var i=t.popStack(),s=0,o=n.length;e&&o--;for(;s<o;s++)i=t.nameLookup(i,n[s],r);return e?[t.aliasable("container.strict"),"(",i,", ",t.quotedString(n[s]),", ",JSON.stringify(t.source.currentLocation)," )"]:i}(this.options.strict&&i,this,t,e));else for(var o=t.length;n<o;n++)this.replaceStack((function(i){var o=s.nameLookup(i,t[n],e);return r?[" && ",o]:[" != null ? ",o," : ",i]}))},resolvePossibleLambda:function(){this.push([this.aliasable("container.lambda"),"(",this.popStack(),", ",this.contextName(0),")"])},pushStringParam:function(e,t){this.pushContext(),this.pushString(t),"SubExpression"!==t&&("string"==typeof e?this.pushString(e):this.pushStackLiteral(e))},emptyHash:function(e){this.trackIds&&this.push("{}"),this.stringParams&&(this.push("{}"),this.push("{}")),this.pushStackLiteral(e?"undefined":"{}")},pushHash:function(){this.hash&&this.hashes.push(this.hash),this.hash={values:{},types:[],contexts:[],ids:[]}},popHash:function(){var e=this.hash;this.hash=this.hashes.pop(),this.trackIds&&this.push(this.objectLiteral(e.ids)),this.stringParams&&(this.push(this.objectLiteral(e.contexts)),this.push(this.objectLiteral(e.types))),this.push(this.objectLiteral(e.values))},pushString:function(e){this.pushStackLiteral(this.quotedString(e))},pushLiteral:function(e){this.pushStackLiteral(e)},pushProgram:function(e){null!=e?this.pushStackLiteral(this.programExpression(e)):this.pushStackLiteral(null)},registerDecorator:function(e,t){var n=this.nameLookup("decorators",t,"decorator"),r=this.setupHelperArgs(t,e);this.decorators.push(["fn = ",this.decorators.functionCall(n,"",["fn","props","container",r])," || fn;"])},invokeHelper:function(e,t,n){var r=this.popStack(),i=this.setupHelper(e,t),s=[];n&&s.push(i.name),s.push(r),this.options.strict||s.push(this.aliasable("container.hooks.helperMissing"));var o=["(",this.itemsSeparatedBy(s,"||"),")"],a=this.source.functionCall(o,"call",i.callParams);this.push(a)},itemsSeparatedBy:function(e,t){var n=[];n.push(e[0]);for(var r=1;r<e.length;r++)n.push(t,e[r]);return n},invokeKnownHelper:function(e,t){var n=this.setupHelper(e,t);this.push(this.source.functionCall(n.name,"call",n.callParams))},invokeAmbiguous:function(e,t){this.useRegister("helper");var n=this.popStack();this.emptyHash();var r=this.setupHelper(0,e,t),i=["(","(helper = ",this.lastHelper=this.nameLookup("helpers",e,"helper")," || ",n,")"];this.options.strict||(i[0]="(helper = ",i.push(" != null ? helper : ",this.aliasable("container.hooks.helperMissing"))),this.push(["(",i,r.paramsInit?["),(",r.paramsInit]:[],"),","(typeof helper === ",this.aliasable('"function"')," ? ",this.source.functionCall("helper","call",r.callParams)," : helper))"])},invokePartial:function(e,t,n){var r=[],i=this.setupParams(t,1,r);e&&(t=this.popStack(),delete i.name),n&&(i.indent=JSON.stringify(n)),i.helpers="helpers",i.partials="partials",i.decorators="container.decorators",e?r.unshift(t):r.unshift(this.nameLookup("partials",t,"partial")),this.options.compat&&(i.depths="depths"),i=this.objectLiteral(i),r.push(i),this.push(this.source.functionCall("container.invokePartial","",r))},assignToHash:function(e){var t=this.popStack(),n=void 0,r=void 0,i=void 0;this.trackIds&&(i=this.popStack()),this.stringParams&&(r=this.popStack(),n=this.popStack());var s=this.hash;n&&(s.contexts[e]=n),r&&(s.types[e]=r),i&&(s.ids[e]=i),s.values[e]=t},pushId:function(e,t,n){"BlockParam"===e?this.pushStackLiteral("blockParams["+t[0]+"].path["+t[1]+"]"+(n?" + "+JSON.stringify("."+n):"")):"PathExpression"===e?this.pushString(t):"SubExpression"===e?this.pushStackLiteral("true"):this.pushStackLiteral("null")},compiler:Dn,compileChildren:function(e,t){for(var n=e.children,r=void 0,i=void 0,s=0,o=n.length;s<o;s++){r=n[s],i=new this.compiler;var a=this.matchExistingProgram(r);if(null==a){this.context.programs.push("");var u=this.context.programs.length;r.index=u,r.name="program"+u,this.context.programs[u]=i.compile(r,t,this.context,!this.precompile),this.context.decorators[u]=i.decorators,this.context.environments[u]=r,this.useDepths=this.useDepths||i.useDepths,this.useBlockParams=this.useBlockParams||i.useBlockParams,r.useDepths=this.useDepths,r.useBlockParams=this.useBlockParams}else r.index=a.index,r.name="program"+a.index,this.useDepths=this.useDepths||a.useDepths,this.useBlockParams=this.useBlockParams||a.useBlockParams}},matchExistingProgram:function(e){for(var t=0,n=this.context.environments.length;t<n;t++){var r=this.context.environments[t];if(r&&r.equals(e))return r}},programExpression:function(e){var t=this.environment.children[e],n=[t.index,"data",t.blockParams];return(this.useBlockParams||this.useDepths)&&n.push("blockParams"),this.useDepths&&n.push("depths"),"container.program("+n.join(", ")+")"},useRegister:function(e){this.registers[e]||(this.registers[e]=!0,this.registers.list.push(e))},push:function(e){return e instanceof mn||(e=this.source.wrap(e)),this.inlineStack.push(e),e},pushStackLiteral:function(e){this.push(new mn(e))},pushSource:function(e){this.pendingContent&&(this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent),this.pendingLocation)),this.pendingContent=void 0),e&&this.source.push(e)},replaceStack:function(e){var t=["("],n=void 0,r=void 0,i=void 0;if(!this.isInline())throw new ln.default("replaceStack on non-inline");var s=this.popStack(!0);if(s instanceof mn)t=["(",n=[s.value]],i=!0;else{r=!0;var o=this.incrStack();t=["((",this.push(o)," = ",s,")"],n=this.topStack()}var a=e.call(this,n);i||this.popStack(),r&&this.stackSlot--,this.push(t.concat(a,")"))},incrStack:function(){return this.stackSlot++,this.stackSlot>this.stackVars.length&&this.stackVars.push("stack"+this.stackSlot),this.topStackName()},topStackName:function(){return"stack"+this.stackSlot},flushInline:function(){var e=this.inlineStack;this.inlineStack=[];for(var t=0,n=e.length;t<n;t++){var r=e[t];if(r instanceof mn)this.compileStack.push(r);else{var i=this.incrStack();this.pushSource([i," = ",r,";"]),this.compileStack.push(i)}}},isInline:function(){return this.inlineStack.length},popStack:function(e){var t=this.isInline(),n=(t?this.inlineStack:this.compileStack).pop();if(!e&&n instanceof mn)return n.value;if(!t){if(!this.stackSlot)throw new ln.default("Invalid stack pop");this.stackSlot--}return n},topStack:function(){var e=this.isInline()?this.inlineStack:this.compileStack,t=e[e.length-1];return t instanceof mn?t.value:t},contextName:function(e){return this.useDepths&&e?"depths["+e+"]":"depth"+e},quotedString:function(e){return this.source.quotedString(e)},objectLiteral:function(e){return this.source.objectLiteral(e)},aliasable:function(e){var t=this.aliases[e];return t?(t.referenceCount++,t):((t=this.aliases[e]=this.source.wrap(e)).aliasable=!0,t.referenceCount=1,t)},setupHelper:function(e,t,n){var r=[];return{params:r,paramsInit:this.setupHelperArgs(t,e,r,n),name:this.nameLookup("helpers",t,"helper"),callParams:[this.aliasable(this.contextName(0)+" != null ? "+this.contextName(0)+" : (container.nullContext || {})")].concat(r)}},setupParams:function(e,t,n){var r={},i=[],s=[],o=[],a=!n,u=void 0;a&&(n=[]),r.name=this.quotedString(e),r.hash=this.popStack(),this.trackIds&&(r.hashIds=this.popStack()),this.stringParams&&(r.hashTypes=this.popStack(),r.hashContexts=this.popStack());var l=this.popStack(),c=this.popStack();(c||l)&&(r.fn=c||"container.noop",r.inverse=l||"container.noop");for(var h=t;h--;)u=this.popStack(),n[h]=u,this.trackIds&&(o[h]=this.popStack()),this.stringParams&&(s[h]=this.popStack(),i[h]=this.popStack());return a&&(r.args=this.source.generateArray(n)),this.trackIds&&(r.ids=this.source.generateArray(o)),this.stringParams&&(r.types=this.source.generateArray(s),r.contexts=this.source.generateArray(i)),this.options.data&&(r.data="data"),this.useBlockParams&&(r.blockParams="blockParams"),r},setupHelperArgs:function(e,t,n,r){var i=this.setupParams(e,t,n);return i.loc=JSON.stringify(this.source.currentLocation),i=this.objectLiteral(i),r?(this.useRegister("options"),n.push("options"),["options=",i]):n?(n.push(i),""):i}},function(){for(var e="break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" "),t=Dn.RESERVED_WORDS={},n=0,r=e.length;n<r;n++)t[e[n]]=!0}(),Dn.isValidJavaScriptVariableName=function(e){return!Dn.RESERVED_WORDS[e]&&/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(e)},an.default=Dn;var vn=f(an=an.default),yn=f(kt),kn=f(it),_n=ut.default.create;function Cn(){var e=_n();return e.compile=function(t,n){return Jt(t,n,e)},e.precompile=function(t,n){return Wt(t,n,e)},e.AST=dt.default,e.Compiler=Zt,e.JavaScriptCompiler=vn.default,e.Parser=ft,e.parse=pt,e.parseWithoutProcessing=ht,e}var An=Cn();An.create=Cn,kn.default(An),An.Visitor=yn.default,An.default=An,p.default=An;var En,bn,xn=(p=p.default).default;En=function(e){return(new Fn).accept(e)},bn=Fn;var wn=function(e){return e&&e.__esModule?e:{default:e}}(kt);function Fn(){this.padding=0}Fn.prototype=new wn.default,Fn.prototype.pad=function(e){for(var t="",n=0,r=this.padding;n<r;n++)t+="  ";return t+=e+"\n"},Fn.prototype.Program=function(e){var t="",n=e.body,r=void 0,i=void 0;if(e.blockParams){var s="BLOCK PARAMS: [";for(r=0,i=e.blockParams.length;r<i;r++)s+=" "+e.blockParams[r];s+=" ]",t+=this.pad(s)}for(r=0,i=n.length;r<i;r++)t+=this.accept(n[r]);return this.padding--,t},Fn.prototype.MustacheStatement=function(e){return this.pad("{{ "+this.SubExpression(e)+" }}")},Fn.prototype.Decorator=function(e){return this.pad("{{ DIRECTIVE "+this.SubExpression(e)+" }}")},Fn.prototype.BlockStatement=Fn.prototype.DecoratorBlock=function(e){var t="";return t+=this.pad(("DecoratorBlock"===e.type?"DIRECTIVE ":"")+"BLOCK:"),this.padding++,t+=this.pad(this.SubExpression(e)),e.program&&(t+=this.pad("PROGRAM:"),this.padding++,t+=this.accept(e.program),this.padding--),e.inverse&&(e.program&&this.padding++,t+=this.pad("{{^}}"),this.padding++,t+=this.accept(e.inverse),this.padding--,e.program&&this.padding--),this.padding--,t},Fn.prototype.PartialStatement=function(e){var t="PARTIAL:"+e.name.original;return e.params[0]&&(t+=" "+this.accept(e.params[0])),e.hash&&(t+=" "+this.accept(e.hash)),this.pad("{{> "+t+" }}")},Fn.prototype.PartialBlockStatement=function(e){var t="PARTIAL BLOCK:"+e.name.original;return e.params[0]&&(t+=" "+this.accept(e.params[0])),e.hash&&(t+=" "+this.accept(e.hash)),t+=" "+this.pad("PROGRAM:"),this.padding++,t+=this.accept(e.program),this.padding--,this.pad("{{> "+t+" }}")},Fn.prototype.ContentStatement=function(e){return this.pad("CONTENT[ '"+e.value+"' ]")},Fn.prototype.CommentStatement=function(e){return this.pad("{{! '"+e.value+"' }}")},Fn.prototype.SubExpression=function(e){for(var t,n=e.params,r=[],i=0,s=n.length;i<s;i++)r.push(this.accept(n[i]));return n="["+r.join(", ")+"]",t=e.hash?" "+this.accept(e.hash):"",this.accept(e.path)+" "+n+t},Fn.prototype.PathExpression=function(e){var t=e.parts.join("/");return(e.data?"@":"")+"PATH:"+t},Fn.prototype.StringLiteral=function(e){return'"'+e.value+'"'},Fn.prototype.NumberLiteral=function(e){return"NUMBER{"+e.value+"}"},Fn.prototype.BooleanLiteral=function(e){return"BOOLEAN{"+e.value+"}"},Fn.prototype.UndefinedLiteral=function(){return"UNDEFINED"},Fn.prototype.NullLiteral=function(){return"NULL"},Fn.prototype.Hash=function(e){for(var t=e.pairs,n=[],r=0,i=t.length;r<i;r++)n.push(this.accept(t[r]));return"HASH{"+n.join(", ")+"}"},Fn.prototype.HashPair=function(e){return e.key+"="+this.accept(e.value)},xn.PrintVisitor=bn,xn.print=En,c=xn;var Sn=class{constructor(e){this.story=e,t(c).registerHelper("set",(e=>{Object.keys(e.hash).forEach((t=>{let n;try{n=JSON.parse(e.hash[t])}catch(r){n=e.hash[t]}this.story.state.set(t,n)}))}))}render(e){return t(c).compile(e)(this.story.state.store)}};const Bn="currentPassagePid;";var Pn=class{constructor(e){const t=e.getAttribute("name"),n=e.getAttribute("ifid"),r=e.getAttribute("startnode");if(!t)throw new Error("Story is missing a name!");if(!n)throw new Error("Story is missing an ifid!");if(!r)throw new Error("No startnode specified!");this.name=t,this.ifid=n,this.startnode=r,this.format=e.getAttribute("format"),this.formatVersion=e.getAttribute("format-version"),this.zoom=e.getAttribute("zoom"),this.creator=e.getAttribute("creator"),this.creatorVersion=e.getAttribute("creator-version");const i=[],s=e.querySelectorAll("tw-passagedata");Array.from(s).forEach((e=>{i.push(new l(e))})),this.passages=i,this.state=new h({[Bn]:r}),this.renderer=new Sn(this)}get currentPassage(){const e=this.getPassageByPid(this.state.get(Bn));if(!e)throw new Error("Tried to fetch currentPassage but it doesn't exist!");return e}getPassageByPid(e){return this.passages.find((t=>t.pid===e))||null}getPassageByName(e){return this.passages.find((t=>t.name===e))||null}displayPassage(e,t){let n;if("string"==typeof e){const t=this.getPassageByPid(e);if(!t)throw new Error(`Tried to display passage with pid: ${e}, but it doesn't exist!`);n=t}else n=e;const r=this.renderer.render(n.richContent);t.innerHTML=r,this.state.set(Bn,n.pid)}displayCurrentPassage(e){this.displayPassage(this.currentPassage,e)}};(()=>{const e=document.querySelector("tw-storydata");if(!e)throw new Error("Missing tw-storydata node!");const t=new Pn(e),n=document.querySelector("#tw-story");if(!n)throw new Error("Missing story container #tw-story!");const r=n.querySelector("#tw-story #tw-passage");if(!r)throw new Error("Missing passage container #tw-passage");n.addEventListener("click",(e=>{if(!e.target)return;const n=e.target;if("a"===n.tagName.toLowerCase()&&n.dataset.passageName){const e=n.dataset.passageName,i=t.getPassageByName(e);if(!i)throw new Error(`Couldn't find passage with name: "${e}"!`);t.displayPassage(i,r)}})),window.__explorer={story:t},t.displayCurrentPassage(r)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FB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RUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcs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LEVBQ0osTUFBTSxJQUFJLzZDLE1BQU0sOEJBRWpCLE1BQU1xNUMsRUFBUSxJQUFJSSxHQUFNc0IsR0FHbEJFLEVBQWlCcHdCLFNBQVNtd0IsY0FBYyxhQUM5QyxJQUFLQyxFQUNKLE1BQU0sSUFBSWo3QyxNQUFNLHNDQUdqQixNQUFNazdDLEVBQW1CRCxFQUFlRCxjQUN2Qyx5QkFFRCxJQUFLRSxFQUNKLE1BQU0sSUFBSWw3QyxNQUFNLHlDQUlqQmk3QyxFQUFlRSxpQkFBaUIsU0FBVUMsSUFDekMsSUFBS0EsRUFBTTFtQyxPQUNWLE9BR0QsTUFBTUEsRUFBUzBtQyxFQUFNMW1DLE9BRXJCLEdBQ2tDLE1BQWpDQSxFQUFPMm1DLFFBQVFoakMsZUFDZjNELEVBQU9zVyxRQUFRTCxZQUNkLENBQ0QsTUFBTUEsRUFBY2pXLEVBQU9zVyxRQUFRTCxZQUM3QjZ2QixFQUFVbkIsRUFBTW9CLGlCQUFpQjl2QixHQUN2QyxJQUFLNnZCLEVBQ0osTUFBTSxJQUFJeDZDLE1BQ1QscUNBQXFDMnFCLE9BR3ZDMHVCLEVBQU1xQixlQUFlRixFQUFTVSxFLEtBS2hDNWdCLE9BQXFDZ2hCLFdBQWEsQyxNQUNqRGpDLEdBSURBLEVBQU15QixzQkFBc0JJLEVBQzVCLEVBcERBLEUiLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL3NvdXJjZS1tYXAuanMiLCJub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC1nZW5lcmF0b3IuanMiLCJub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYmFzZTY0LXZscS5qcyIsIm5vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9iYXNlNjQuanMiLCJub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvdXRpbC5qcyIsIm5vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9hcnJheS1zZXQuanMiLCJub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvbWFwcGluZy1saXN0LmpzIiwibm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAtY29uc3VtZXIuanMiLCJub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYmluYXJ5LXNlYXJjaC5qcyIsIm5vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9xdWljay1zb3J0LmpzIiwibm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1ub2RlLmpzIiwibm9kZV9tb2R1bGVzL21hcmtlZC9saWIvbWFya2VkLnVtZC5qcyIsInNyYy91dGlsLnRzIiwic3JjL1Bhc3NhZ2UudHMiLCJzcmMvU3RhdGUudHMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9iYXNlLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvdXRpbHMuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9leGNlcHRpb24uanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9oZWxwZXJzLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvZWFjaC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2lmLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvaGVscGVycy9sb2cuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9oZWxwZXJzL2xvb2t1cC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9kZWNvcmF0b3JzL2lubGluZS5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2xvZ2dlci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2ludGVybmFsL3Byb3RvLWFjY2Vzcy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2ludGVybmFsL2NyZWF0ZS1uZXctbG9va3VwLW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzLnJ1bnRpbWUuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9zYWZlLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL3J1bnRpbWUuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9pbnRlcm5hbC93cmFwSGVscGVyLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9jb21waWxlci9hc3QuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9jb21waWxlci9iYXNlLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvcGFyc2VyLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvdmlzaXRvci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL3doaXRlc3BhY2UtY29udHJvbC5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2hlbHBlcnMuanMiLCJub2RlX21vZHVsZXMvaGFuZGxlYmFycy9saWIvaGFuZGxlYmFycy9jb21waWxlci9jb21waWxlci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2NvZGUtZ2VuLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvamF2YXNjcmlwdC1jb21waWxlci5qcyIsIm5vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2xpYi9oYW5kbGViYXJzLmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvbGliL2hhbmRsZWJhcnMvY29tcGlsZXIvcHJpbnRlci5qcyIsInNyYy9IYW5kbGViYXJzUmVuZGVyZXIudHMiLCJzcmMvU3RvcnkudHMiLCJzcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDA5LTIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLnR4dCBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuZXhwb3J0cy5Tb3VyY2VNYXBHZW5lcmF0b3IgPSByZXF1aXJlKCcuL2xpYi9zb3VyY2UtbWFwLWdlbmVyYXRvcicpLlNvdXJjZU1hcEdlbmVyYXRvcjtcbmV4cG9ydHMuU291cmNlTWFwQ29uc3VtZXIgPSByZXF1aXJlKCcuL2xpYi9zb3VyY2UtbWFwLWNvbnN1bWVyJykuU291cmNlTWFwQ29uc3VtZXI7XG5leHBvcnRzLlNvdXJjZU5vZGUgPSByZXF1aXJlKCcuL2xpYi9zb3VyY2Utbm9kZScpLlNvdXJjZU5vZGU7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciBiYXNlNjRWTFEgPSByZXF1aXJlKCcuL2Jhc2U2NC12bHEnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgQXJyYXlTZXQgPSByZXF1aXJlKCcuL2FycmF5LXNldCcpLkFycmF5U2V0O1xudmFyIE1hcHBpbmdMaXN0ID0gcmVxdWlyZSgnLi9tYXBwaW5nLWxpc3QnKS5NYXBwaW5nTGlzdDtcblxuLyoqXG4gKiBBbiBpbnN0YW5jZSBvZiB0aGUgU291cmNlTWFwR2VuZXJhdG9yIHJlcHJlc2VudHMgYSBzb3VyY2UgbWFwIHdoaWNoIGlzXG4gKiBiZWluZyBidWlsdCBpbmNyZW1lbnRhbGx5LiBZb3UgbWF5IHBhc3MgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZ1xuICogcHJvcGVydGllczpcbiAqXG4gKiAgIC0gZmlsZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBnZW5lcmF0ZWQgc291cmNlLlxuICogICAtIHNvdXJjZVJvb3Q6IEEgcm9vdCBmb3IgYWxsIHJlbGF0aXZlIFVSTHMgaW4gdGhpcyBzb3VyY2UgbWFwLlxuICovXG5mdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3IoYUFyZ3MpIHtcbiAgaWYgKCFhQXJncykge1xuICAgIGFBcmdzID0ge307XG4gIH1cbiAgdGhpcy5fZmlsZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnZmlsZScsIG51bGwpO1xuICB0aGlzLl9zb3VyY2VSb290ID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2VSb290JywgbnVsbCk7XG4gIHRoaXMuX3NraXBWYWxpZGF0aW9uID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdza2lwVmFsaWRhdGlvbicsIGZhbHNlKTtcbiAgdGhpcy5fc291cmNlcyA9IG5ldyBBcnJheVNldCgpO1xuICB0aGlzLl9uYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuICB0aGlzLl9tYXBwaW5ncyA9IG5ldyBNYXBwaW5nTGlzdCgpO1xuICB0aGlzLl9zb3VyY2VzQ29udGVudHMgPSBudWxsO1xufVxuXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl92ZXJzaW9uID0gMztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFNvdXJjZU1hcEdlbmVyYXRvciBiYXNlZCBvbiBhIFNvdXJjZU1hcENvbnN1bWVyXG4gKlxuICogQHBhcmFtIGFTb3VyY2VNYXBDb25zdW1lciBUaGUgU291cmNlTWFwLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IuZnJvbVNvdXJjZU1hcCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9mcm9tU291cmNlTWFwKGFTb3VyY2VNYXBDb25zdW1lcikge1xuICAgIHZhciBzb3VyY2VSb290ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZVJvb3Q7XG4gICAgdmFyIGdlbmVyYXRvciA9IG5ldyBTb3VyY2VNYXBHZW5lcmF0b3Ioe1xuICAgICAgZmlsZTogYVNvdXJjZU1hcENvbnN1bWVyLmZpbGUsXG4gICAgICBzb3VyY2VSb290OiBzb3VyY2VSb290XG4gICAgfSk7XG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLmVhY2hNYXBwaW5nKGZ1bmN0aW9uIChtYXBwaW5nKSB7XG4gICAgICB2YXIgbmV3TWFwcGluZyA9IHtcbiAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgbGluZTogbWFwcGluZy5nZW5lcmF0ZWRMaW5lLFxuICAgICAgICAgIGNvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW5cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKG1hcHBpbmcuc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgbmV3TWFwcGluZy5zb3VyY2UgPSBtYXBwaW5nLnNvdXJjZTtcbiAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgIG5ld01hcHBpbmcuc291cmNlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBuZXdNYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdNYXBwaW5nLm9yaWdpbmFsID0ge1xuICAgICAgICAgIGxpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgIGNvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtblxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtYXBwaW5nLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgIG5ld01hcHBpbmcubmFtZSA9IG1hcHBpbmcubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBnZW5lcmF0b3IuYWRkTWFwcGluZyhuZXdNYXBwaW5nKTtcbiAgICB9KTtcbiAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICB2YXIgc291cmNlUmVsYXRpdmUgPSBzb3VyY2VGaWxlO1xuICAgICAgaWYgKHNvdXJjZVJvb3QgIT09IG51bGwpIHtcbiAgICAgICAgc291cmNlUmVsYXRpdmUgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZUZpbGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWdlbmVyYXRvci5fc291cmNlcy5oYXMoc291cmNlUmVsYXRpdmUpKSB7XG4gICAgICAgIGdlbmVyYXRvci5fc291cmNlcy5hZGQoc291cmNlUmVsYXRpdmUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGVudCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKHNvdXJjZUZpbGUpO1xuICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBnZW5lcmF0b3Iuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBjb250ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9O1xuXG4vKipcbiAqIEFkZCBhIHNpbmdsZSBtYXBwaW5nIGZyb20gb3JpZ2luYWwgc291cmNlIGxpbmUgYW5kIGNvbHVtbiB0byB0aGUgZ2VuZXJhdGVkXG4gKiBzb3VyY2UncyBsaW5lIGFuZCBjb2x1bW4gZm9yIHRoaXMgc291cmNlIG1hcCBiZWluZyBjcmVhdGVkLiBUaGUgbWFwcGluZ1xuICogb2JqZWN0IHNob3VsZCBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gZ2VuZXJhdGVkOiBBbiBvYmplY3Qgd2l0aCB0aGUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMuXG4gKiAgIC0gb3JpZ2luYWw6IEFuIG9iamVjdCB3aXRoIHRoZSBvcmlnaW5hbCBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zLlxuICogICAtIHNvdXJjZTogVGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlIChyZWxhdGl2ZSB0byB0aGUgc291cmNlUm9vdCkuXG4gKiAgIC0gbmFtZTogQW4gb3B0aW9uYWwgb3JpZ2luYWwgdG9rZW4gbmFtZSBmb3IgdGhpcyBtYXBwaW5nLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFkZE1hcHBpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfYWRkTWFwcGluZyhhQXJncykge1xuICAgIHZhciBnZW5lcmF0ZWQgPSB1dGlsLmdldEFyZyhhQXJncywgJ2dlbmVyYXRlZCcpO1xuICAgIHZhciBvcmlnaW5hbCA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnb3JpZ2luYWwnLCBudWxsKTtcbiAgICB2YXIgc291cmNlID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2UnLCBudWxsKTtcbiAgICB2YXIgbmFtZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbmFtZScsIG51bGwpO1xuXG4gICAgaWYgKCF0aGlzLl9za2lwVmFsaWRhdGlvbikge1xuICAgICAgdGhpcy5fdmFsaWRhdGVNYXBwaW5nKGdlbmVyYXRlZCwgb3JpZ2luYWwsIHNvdXJjZSwgbmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKHNvdXJjZSAhPSBudWxsKSB7XG4gICAgICBzb3VyY2UgPSBTdHJpbmcoc291cmNlKTtcbiAgICAgIGlmICghdGhpcy5fc291cmNlcy5oYXMoc291cmNlKSkge1xuICAgICAgICB0aGlzLl9zb3VyY2VzLmFkZChzb3VyY2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuYW1lICE9IG51bGwpIHtcbiAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XG4gICAgICBpZiAoIXRoaXMuX25hbWVzLmhhcyhuYW1lKSkge1xuICAgICAgICB0aGlzLl9uYW1lcy5hZGQobmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fbWFwcGluZ3MuYWRkKHtcbiAgICAgIGdlbmVyYXRlZExpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uLFxuICAgICAgb3JpZ2luYWxMaW5lOiBvcmlnaW5hbCAhPSBudWxsICYmIG9yaWdpbmFsLmxpbmUsXG4gICAgICBvcmlnaW5hbENvbHVtbjogb3JpZ2luYWwgIT0gbnVsbCAmJiBvcmlnaW5hbC5jb2x1bW4sXG4gICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgIG5hbWU6IG5hbWVcbiAgICB9KTtcbiAgfTtcblxuLyoqXG4gKiBTZXQgdGhlIHNvdXJjZSBjb250ZW50IGZvciBhIHNvdXJjZSBmaWxlLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnNldFNvdXJjZUNvbnRlbnQgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3Jfc2V0U291cmNlQ29udGVudChhU291cmNlRmlsZSwgYVNvdXJjZUNvbnRlbnQpIHtcbiAgICB2YXIgc291cmNlID0gYVNvdXJjZUZpbGU7XG4gICAgaWYgKHRoaXMuX3NvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgc291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLl9zb3VyY2VSb290LCBzb3VyY2UpO1xuICAgIH1cblxuICAgIGlmIChhU291cmNlQ29udGVudCAhPSBudWxsKSB7XG4gICAgICAvLyBBZGQgdGhlIHNvdXJjZSBjb250ZW50IHRvIHRoZSBfc291cmNlc0NvbnRlbnRzIG1hcC5cbiAgICAgIC8vIENyZWF0ZSBhIG5ldyBfc291cmNlc0NvbnRlbnRzIG1hcCBpZiB0aGUgcHJvcGVydHkgaXMgbnVsbC5cbiAgICAgIGlmICghdGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXNDb250ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zb3VyY2VzQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhzb3VyY2UpXSA9IGFTb3VyY2VDb250ZW50O1xuICAgIH0gZWxzZSBpZiAodGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICAvLyBSZW1vdmUgdGhlIHNvdXJjZSBmaWxlIGZyb20gdGhlIF9zb3VyY2VzQ29udGVudHMgbWFwLlxuICAgICAgLy8gSWYgdGhlIF9zb3VyY2VzQ29udGVudHMgbWFwIGlzIGVtcHR5LCBzZXQgdGhlIHByb3BlcnR5IHRvIG51bGwuXG4gICAgICBkZWxldGUgdGhpcy5fc291cmNlc0NvbnRlbnRzW3V0aWwudG9TZXRTdHJpbmcoc291cmNlKV07XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5fc291cmNlc0NvbnRlbnRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbi8qKlxuICogQXBwbGllcyB0aGUgbWFwcGluZ3Mgb2YgYSBzdWItc291cmNlLW1hcCBmb3IgYSBzcGVjaWZpYyBzb3VyY2UgZmlsZSB0byB0aGVcbiAqIHNvdXJjZSBtYXAgYmVpbmcgZ2VuZXJhdGVkLiBFYWNoIG1hcHBpbmcgdG8gdGhlIHN1cHBsaWVkIHNvdXJjZSBmaWxlIGlzXG4gKiByZXdyaXR0ZW4gdXNpbmcgdGhlIHN1cHBsaWVkIHNvdXJjZSBtYXAuIE5vdGU6IFRoZSByZXNvbHV0aW9uIGZvciB0aGVcbiAqIHJlc3VsdGluZyBtYXBwaW5ncyBpcyB0aGUgbWluaW1pdW0gb2YgdGhpcyBtYXAgYW5kIHRoZSBzdXBwbGllZCBtYXAuXG4gKlxuICogQHBhcmFtIGFTb3VyY2VNYXBDb25zdW1lciBUaGUgc291cmNlIG1hcCB0byBiZSBhcHBsaWVkLlxuICogQHBhcmFtIGFTb3VyY2VGaWxlIE9wdGlvbmFsLiBUaGUgZmlsZW5hbWUgb2YgdGhlIHNvdXJjZSBmaWxlLlxuICogICAgICAgIElmIG9taXR0ZWQsIFNvdXJjZU1hcENvbnN1bWVyJ3MgZmlsZSBwcm9wZXJ0eSB3aWxsIGJlIHVzZWQuXG4gKiBAcGFyYW0gYVNvdXJjZU1hcFBhdGggT3B0aW9uYWwuIFRoZSBkaXJuYW1lIG9mIHRoZSBwYXRoIHRvIHRoZSBzb3VyY2UgbWFwXG4gKiAgICAgICAgdG8gYmUgYXBwbGllZC4gSWYgcmVsYXRpdmUsIGl0IGlzIHJlbGF0aXZlIHRvIHRoZSBTb3VyY2VNYXBDb25zdW1lci5cbiAqICAgICAgICBUaGlzIHBhcmFtZXRlciBpcyBuZWVkZWQgd2hlbiB0aGUgdHdvIHNvdXJjZSBtYXBzIGFyZW4ndCBpbiB0aGUgc2FtZVxuICogICAgICAgIGRpcmVjdG9yeSwgYW5kIHRoZSBzb3VyY2UgbWFwIHRvIGJlIGFwcGxpZWQgY29udGFpbnMgcmVsYXRpdmUgc291cmNlXG4gKiAgICAgICAgcGF0aHMuIElmIHNvLCB0aG9zZSByZWxhdGl2ZSBzb3VyY2UgcGF0aHMgbmVlZCB0byBiZSByZXdyaXR0ZW5cbiAqICAgICAgICByZWxhdGl2ZSB0byB0aGUgU291cmNlTWFwR2VuZXJhdG9yLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFwcGx5U291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2FwcGx5U291cmNlTWFwKGFTb3VyY2VNYXBDb25zdW1lciwgYVNvdXJjZUZpbGUsIGFTb3VyY2VNYXBQYXRoKSB7XG4gICAgdmFyIHNvdXJjZUZpbGUgPSBhU291cmNlRmlsZTtcbiAgICAvLyBJZiBhU291cmNlRmlsZSBpcyBvbWl0dGVkLCB3ZSB3aWxsIHVzZSB0aGUgZmlsZSBwcm9wZXJ0eSBvZiB0aGUgU291cmNlTWFwXG4gICAgaWYgKGFTb3VyY2VGaWxlID09IG51bGwpIHtcbiAgICAgIGlmIChhU291cmNlTWFwQ29uc3VtZXIuZmlsZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5hcHBseVNvdXJjZU1hcCByZXF1aXJlcyBlaXRoZXIgYW4gZXhwbGljaXQgc291cmNlIGZpbGUsICcgK1xuICAgICAgICAgICdvciB0aGUgc291cmNlIG1hcFxcJ3MgXCJmaWxlXCIgcHJvcGVydHkuIEJvdGggd2VyZSBvbWl0dGVkLidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHNvdXJjZUZpbGUgPSBhU291cmNlTWFwQ29uc3VtZXIuZmlsZTtcbiAgICB9XG4gICAgdmFyIHNvdXJjZVJvb3QgPSB0aGlzLl9zb3VyY2VSb290O1xuICAgIC8vIE1ha2UgXCJzb3VyY2VGaWxlXCIgcmVsYXRpdmUgaWYgYW4gYWJzb2x1dGUgVXJsIGlzIHBhc3NlZC5cbiAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICBzb3VyY2VGaWxlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2VGaWxlKTtcbiAgICB9XG4gICAgLy8gQXBwbHlpbmcgdGhlIFNvdXJjZU1hcCBjYW4gYWRkIGFuZCByZW1vdmUgaXRlbXMgZnJvbSB0aGUgc291cmNlcyBhbmRcbiAgICAvLyB0aGUgbmFtZXMgYXJyYXkuXG4gICAgdmFyIG5ld1NvdXJjZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgICB2YXIgbmV3TmFtZXMgPSBuZXcgQXJyYXlTZXQoKTtcblxuICAgIC8vIEZpbmQgbWFwcGluZ3MgZm9yIHRoZSBcInNvdXJjZUZpbGVcIlxuICAgIHRoaXMuX21hcHBpbmdzLnVuc29ydGVkRm9yRWFjaChmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgaWYgKG1hcHBpbmcuc291cmNlID09PSBzb3VyY2VGaWxlICYmIG1hcHBpbmcub3JpZ2luYWxMaW5lICE9IG51bGwpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgaXQgY2FuIGJlIG1hcHBlZCBieSB0aGUgc291cmNlIG1hcCwgdGhlbiB1cGRhdGUgdGhlIG1hcHBpbmcuXG4gICAgICAgIHZhciBvcmlnaW5hbCA9IGFTb3VyY2VNYXBDb25zdW1lci5vcmlnaW5hbFBvc2l0aW9uRm9yKHtcbiAgICAgICAgICBsaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICBjb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW5cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChvcmlnaW5hbC5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIENvcHkgbWFwcGluZ1xuICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gb3JpZ2luYWwuc291cmNlO1xuICAgICAgICAgIGlmIChhU291cmNlTWFwUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHV0aWwuam9pbihhU291cmNlTWFwUGF0aCwgbWFwcGluZy5zb3VyY2UpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBtYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lID0gb3JpZ2luYWwubGluZTtcbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uID0gb3JpZ2luYWwuY29sdW1uO1xuICAgICAgICAgIGlmIChvcmlnaW5hbC5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1hcHBpbmcubmFtZSA9IG9yaWdpbmFsLm5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzb3VyY2UgPSBtYXBwaW5nLnNvdXJjZTtcbiAgICAgIGlmIChzb3VyY2UgIT0gbnVsbCAmJiAhbmV3U291cmNlcy5oYXMoc291cmNlKSkge1xuICAgICAgICBuZXdTb3VyY2VzLmFkZChzb3VyY2UpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmFtZSA9IG1hcHBpbmcubmFtZTtcbiAgICAgIGlmIChuYW1lICE9IG51bGwgJiYgIW5ld05hbWVzLmhhcyhuYW1lKSkge1xuICAgICAgICBuZXdOYW1lcy5hZGQobmFtZSk7XG4gICAgICB9XG5cbiAgICB9LCB0aGlzKTtcbiAgICB0aGlzLl9zb3VyY2VzID0gbmV3U291cmNlcztcbiAgICB0aGlzLl9uYW1lcyA9IG5ld05hbWVzO1xuXG4gICAgLy8gQ29weSBzb3VyY2VzQ29udGVudHMgb2YgYXBwbGllZCBtYXAuXG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlRmlsZSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlQ29udGVudEZvcihzb3VyY2VGaWxlKTtcbiAgICAgIGlmIChjb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGFTb3VyY2VNYXBQYXRoICE9IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5qb2luKGFTb3VyY2VNYXBQYXRoLCBzb3VyY2VGaWxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlRmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICB9O1xuXG4vKipcbiAqIEEgbWFwcGluZyBjYW4gaGF2ZSBvbmUgb2YgdGhlIHRocmVlIGxldmVscyBvZiBkYXRhOlxuICpcbiAqICAgMS4gSnVzdCB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9uLlxuICogICAyLiBUaGUgR2VuZXJhdGVkIHBvc2l0aW9uLCBvcmlnaW5hbCBwb3NpdGlvbiwgYW5kIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgMy4gR2VuZXJhdGVkIGFuZCBvcmlnaW5hbCBwb3NpdGlvbiwgb3JpZ2luYWwgc291cmNlLCBhcyB3ZWxsIGFzIGEgbmFtZVxuICogICAgICB0b2tlbi5cbiAqXG4gKiBUbyBtYWludGFpbiBjb25zaXN0ZW5jeSwgd2UgdmFsaWRhdGUgdGhhdCBhbnkgbmV3IG1hcHBpbmcgYmVpbmcgYWRkZWQgZmFsbHNcbiAqIGluIHRvIG9uZSBvZiB0aGVzZSBjYXRlZ29yaWVzLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl92YWxpZGF0ZU1hcHBpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfdmFsaWRhdGVNYXBwaW5nKGFHZW5lcmF0ZWQsIGFPcmlnaW5hbCwgYVNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhTmFtZSkge1xuICAgIC8vIFdoZW4gYU9yaWdpbmFsIGlzIHRydXRoeSBidXQgaGFzIGVtcHR5IHZhbHVlcyBmb3IgLmxpbmUgYW5kIC5jb2x1bW4sXG4gICAgLy8gaXQgaXMgbW9zdCBsaWtlbHkgYSBwcm9ncmFtbWVyIGVycm9yLiBJbiB0aGlzIGNhc2Ugd2UgdGhyb3cgYSB2ZXJ5XG4gICAgLy8gc3BlY2lmaWMgZXJyb3IgbWVzc2FnZSB0byB0cnkgdG8gZ3VpZGUgdGhlbSB0aGUgcmlnaHQgd2F5LlxuICAgIC8vIEZvciBleGFtcGxlOiBodHRwczovL2dpdGh1Yi5jb20vUG9seW1lci9wb2x5bWVyLWJ1bmRsZXIvcHVsbC81MTlcbiAgICBpZiAoYU9yaWdpbmFsICYmIHR5cGVvZiBhT3JpZ2luYWwubGluZSAhPT0gJ251bWJlcicgJiYgdHlwZW9mIGFPcmlnaW5hbC5jb2x1bW4gIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdvcmlnaW5hbC5saW5lIGFuZCBvcmlnaW5hbC5jb2x1bW4gYXJlIG5vdCBudW1iZXJzIC0tIHlvdSBwcm9iYWJseSBtZWFudCB0byBvbWl0ICcgK1xuICAgICAgICAgICAgJ3RoZSBvcmlnaW5hbCBtYXBwaW5nIGVudGlyZWx5IGFuZCBvbmx5IG1hcCB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9uLiBJZiBzbywgcGFzcyAnICtcbiAgICAgICAgICAgICdudWxsIGZvciB0aGUgb3JpZ2luYWwgbWFwcGluZyBpbnN0ZWFkIG9mIGFuIG9iamVjdCB3aXRoIGVtcHR5IG9yIG51bGwgdmFsdWVzLidcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoYUdlbmVyYXRlZCAmJiAnbGluZScgaW4gYUdlbmVyYXRlZCAmJiAnY29sdW1uJyBpbiBhR2VuZXJhdGVkXG4gICAgICAgICYmIGFHZW5lcmF0ZWQubGluZSA+IDAgJiYgYUdlbmVyYXRlZC5jb2x1bW4gPj0gMFxuICAgICAgICAmJiAhYU9yaWdpbmFsICYmICFhU291cmNlICYmICFhTmFtZSkge1xuICAgICAgLy8gQ2FzZSAxLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIGlmIChhR2VuZXJhdGVkICYmICdsaW5lJyBpbiBhR2VuZXJhdGVkICYmICdjb2x1bW4nIGluIGFHZW5lcmF0ZWRcbiAgICAgICAgICAgICAmJiBhT3JpZ2luYWwgJiYgJ2xpbmUnIGluIGFPcmlnaW5hbCAmJiAnY29sdW1uJyBpbiBhT3JpZ2luYWxcbiAgICAgICAgICAgICAmJiBhR2VuZXJhdGVkLmxpbmUgPiAwICYmIGFHZW5lcmF0ZWQuY29sdW1uID49IDBcbiAgICAgICAgICAgICAmJiBhT3JpZ2luYWwubGluZSA+IDAgJiYgYU9yaWdpbmFsLmNvbHVtbiA+PSAwXG4gICAgICAgICAgICAgJiYgYVNvdXJjZSkge1xuICAgICAgLy8gQ2FzZXMgMiBhbmQgMy5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbWFwcGluZzogJyArIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZ2VuZXJhdGVkOiBhR2VuZXJhdGVkLFxuICAgICAgICBzb3VyY2U6IGFTb3VyY2UsXG4gICAgICAgIG9yaWdpbmFsOiBhT3JpZ2luYWwsXG4gICAgICAgIG5hbWU6IGFOYW1lXG4gICAgICB9KSk7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIFNlcmlhbGl6ZSB0aGUgYWNjdW11bGF0ZWQgbWFwcGluZ3MgaW4gdG8gdGhlIHN0cmVhbSBvZiBiYXNlIDY0IFZMUXNcbiAqIHNwZWNpZmllZCBieSB0aGUgc291cmNlIG1hcCBmb3JtYXQuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3NlcmlhbGl6ZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3NlcmlhbGl6ZU1hcHBpbmdzKCkge1xuICAgIHZhciBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgdmFyIHByZXZpb3VzR2VuZXJhdGVkTGluZSA9IDE7XG4gICAgdmFyIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c09yaWdpbmFsTGluZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzTmFtZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzU291cmNlID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgdmFyIG5leHQ7XG4gICAgdmFyIG1hcHBpbmc7XG4gICAgdmFyIG5hbWVJZHg7XG4gICAgdmFyIHNvdXJjZUlkeDtcblxuICAgIHZhciBtYXBwaW5ncyA9IHRoaXMuX21hcHBpbmdzLnRvQXJyYXkoKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbWFwcGluZ3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIG1hcHBpbmcgPSBtYXBwaW5nc1tpXTtcbiAgICAgIG5leHQgPSAnJ1xuXG4gICAgICBpZiAobWFwcGluZy5nZW5lcmF0ZWRMaW5lICE9PSBwcmV2aW91c0dlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgICB3aGlsZSAobWFwcGluZy5nZW5lcmF0ZWRMaW5lICE9PSBwcmV2aW91c0dlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICBuZXh0ICs9ICc7JztcbiAgICAgICAgICBwcmV2aW91c0dlbmVyYXRlZExpbmUrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgIGlmICghdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nLCBtYXBwaW5nc1tpIC0gMV0pKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV4dCArPSAnLCc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgIHNvdXJjZUlkeCA9IHRoaXMuX3NvdXJjZXMuaW5kZXhPZihtYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShzb3VyY2VJZHggLSBwcmV2aW91c1NvdXJjZSk7XG4gICAgICAgIHByZXZpb3VzU291cmNlID0gc291cmNlSWR4O1xuXG4gICAgICAgIC8vIGxpbmVzIGFyZSBzdG9yZWQgMC1iYXNlZCBpbiBTb3VyY2VNYXAgc3BlYyB2ZXJzaW9uIDNcbiAgICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKG1hcHBpbmcub3JpZ2luYWxMaW5lIC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHByZXZpb3VzT3JpZ2luYWxMaW5lKTtcbiAgICAgICAgcHJldmlvdXNPcmlnaW5hbExpbmUgPSBtYXBwaW5nLm9yaWdpbmFsTGluZSAtIDE7XG5cbiAgICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKG1hcHBpbmcub3JpZ2luYWxDb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c09yaWdpbmFsQ29sdW1uKTtcbiAgICAgICAgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IG1hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgaWYgKG1hcHBpbmcubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgbmFtZUlkeCA9IHRoaXMuX25hbWVzLmluZGV4T2YobWFwcGluZy5uYW1lKTtcbiAgICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUobmFtZUlkeCAtIHByZXZpb3VzTmFtZSk7XG4gICAgICAgICAgcHJldmlvdXNOYW1lID0gbmFtZUlkeDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXN1bHQgKz0gbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50ID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2dlbmVyYXRlU291cmNlc0NvbnRlbnQoYVNvdXJjZXMsIGFTb3VyY2VSb290KSB7XG4gICAgcmV0dXJuIGFTb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICBpZiAoIXRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChhU291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgIHNvdXJjZSA9IHV0aWwucmVsYXRpdmUoYVNvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgICB9XG4gICAgICB2YXIga2V5ID0gdXRpbC50b1NldFN0cmluZyhzb3VyY2UpO1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9zb3VyY2VzQ29udGVudHMsIGtleSlcbiAgICAgICAgPyB0aGlzLl9zb3VyY2VzQ29udGVudHNba2V5XVxuICAgICAgICA6IG51bGw7XG4gICAgfSwgdGhpcyk7XG4gIH07XG5cbi8qKlxuICogRXh0ZXJuYWxpemUgdGhlIHNvdXJjZSBtYXAuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUudG9KU09OID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3RvSlNPTigpIHtcbiAgICB2YXIgbWFwID0ge1xuICAgICAgdmVyc2lvbjogdGhpcy5fdmVyc2lvbixcbiAgICAgIHNvdXJjZXM6IHRoaXMuX3NvdXJjZXMudG9BcnJheSgpLFxuICAgICAgbmFtZXM6IHRoaXMuX25hbWVzLnRvQXJyYXkoKSxcbiAgICAgIG1hcHBpbmdzOiB0aGlzLl9zZXJpYWxpemVNYXBwaW5ncygpXG4gICAgfTtcbiAgICBpZiAodGhpcy5fZmlsZSAhPSBudWxsKSB7XG4gICAgICBtYXAuZmlsZSA9IHRoaXMuX2ZpbGU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIG1hcC5zb3VyY2VSb290ID0gdGhpcy5fc291cmNlUm9vdDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgbWFwLnNvdXJjZXNDb250ZW50ID0gdGhpcy5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudChtYXAuc291cmNlcywgbWFwLnNvdXJjZVJvb3QpO1xuICAgIH1cblxuICAgIHJldHVybiBtYXA7XG4gIH07XG5cbi8qKlxuICogUmVuZGVyIHRoZSBzb3VyY2UgbWFwIGJlaW5nIGdlbmVyYXRlZCB0byBhIHN0cmluZy5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS50b1N0cmluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl90b1N0cmluZygpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy50b0pTT04oKSk7XG4gIH07XG5cbmV4cG9ydHMuU291cmNlTWFwR2VuZXJhdG9yID0gU291cmNlTWFwR2VuZXJhdG9yO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqXG4gKiBCYXNlZCBvbiB0aGUgQmFzZSA2NCBWTFEgaW1wbGVtZW50YXRpb24gaW4gQ2xvc3VyZSBDb21waWxlcjpcbiAqIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2xvc3VyZS1jb21waWxlci9zb3VyY2UvYnJvd3NlL3RydW5rL3NyYy9jb20vZ29vZ2xlL2RlYnVnZ2luZy9zb3VyY2VtYXAvQmFzZTY0VkxRLmphdmFcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMSBUaGUgQ2xvc3VyZSBDb21waWxlciBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmVcbiAqICAgIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4gKiAgICBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWRcbiAqICAgIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqICAqIE5laXRoZXIgdGhlIG5hbWUgb2YgR29vZ2xlIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZFxuICogICAgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFRcbiAqIE9XTkVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxuICogU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsXG4gKiBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTllcbiAqIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRVxuICogT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnLi9iYXNlNjQnKTtcblxuLy8gQSBzaW5nbGUgYmFzZSA2NCBkaWdpdCBjYW4gY29udGFpbiA2IGJpdHMgb2YgZGF0YS4gRm9yIHRoZSBiYXNlIDY0IHZhcmlhYmxlXG4vLyBsZW5ndGggcXVhbnRpdGllcyB3ZSB1c2UgaW4gdGhlIHNvdXJjZSBtYXAgc3BlYywgdGhlIGZpcnN0IGJpdCBpcyB0aGUgc2lnbixcbi8vIHRoZSBuZXh0IGZvdXIgYml0cyBhcmUgdGhlIGFjdHVhbCB2YWx1ZSwgYW5kIHRoZSA2dGggYml0IGlzIHRoZVxuLy8gY29udGludWF0aW9uIGJpdC4gVGhlIGNvbnRpbnVhdGlvbiBiaXQgdGVsbHMgdXMgd2hldGhlciB0aGVyZSBhcmUgbW9yZVxuLy8gZGlnaXRzIGluIHRoaXMgdmFsdWUgZm9sbG93aW5nIHRoaXMgZGlnaXQuXG4vL1xuLy8gICBDb250aW51YXRpb25cbi8vICAgfCAgICBTaWduXG4vLyAgIHwgICAgfFxuLy8gICBWICAgIFZcbi8vICAgMTAxMDExXG5cbnZhciBWTFFfQkFTRV9TSElGVCA9IDU7XG5cbi8vIGJpbmFyeTogMTAwMDAwXG52YXIgVkxRX0JBU0UgPSAxIDw8IFZMUV9CQVNFX1NISUZUO1xuXG4vLyBiaW5hcnk6IDAxMTExMVxudmFyIFZMUV9CQVNFX01BU0sgPSBWTFFfQkFTRSAtIDE7XG5cbi8vIGJpbmFyeTogMTAwMDAwXG52YXIgVkxRX0NPTlRJTlVBVElPTl9CSVQgPSBWTFFfQkFTRTtcblxuLyoqXG4gKiBDb252ZXJ0cyBmcm9tIGEgdHdvLWNvbXBsZW1lbnQgdmFsdWUgdG8gYSB2YWx1ZSB3aGVyZSB0aGUgc2lnbiBiaXQgaXNcbiAqIHBsYWNlZCBpbiB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0LiAgRm9yIGV4YW1wbGUsIGFzIGRlY2ltYWxzOlxuICogICAxIGJlY29tZXMgMiAoMTAgYmluYXJ5KSwgLTEgYmVjb21lcyAzICgxMSBiaW5hcnkpXG4gKiAgIDIgYmVjb21lcyA0ICgxMDAgYmluYXJ5KSwgLTIgYmVjb21lcyA1ICgxMDEgYmluYXJ5KVxuICovXG5mdW5jdGlvbiB0b1ZMUVNpZ25lZChhVmFsdWUpIHtcbiAgcmV0dXJuIGFWYWx1ZSA8IDBcbiAgICA/ICgoLWFWYWx1ZSkgPDwgMSkgKyAxXG4gICAgOiAoYVZhbHVlIDw8IDEpICsgMDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0byBhIHR3by1jb21wbGVtZW50IHZhbHVlIGZyb20gYSB2YWx1ZSB3aGVyZSB0aGUgc2lnbiBiaXQgaXNcbiAqIHBsYWNlZCBpbiB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0LiAgRm9yIGV4YW1wbGUsIGFzIGRlY2ltYWxzOlxuICogICAyICgxMCBiaW5hcnkpIGJlY29tZXMgMSwgMyAoMTEgYmluYXJ5KSBiZWNvbWVzIC0xXG4gKiAgIDQgKDEwMCBiaW5hcnkpIGJlY29tZXMgMiwgNSAoMTAxIGJpbmFyeSkgYmVjb21lcyAtMlxuICovXG5mdW5jdGlvbiBmcm9tVkxRU2lnbmVkKGFWYWx1ZSkge1xuICB2YXIgaXNOZWdhdGl2ZSA9IChhVmFsdWUgJiAxKSA9PT0gMTtcbiAgdmFyIHNoaWZ0ZWQgPSBhVmFsdWUgPj4gMTtcbiAgcmV0dXJuIGlzTmVnYXRpdmVcbiAgICA/IC1zaGlmdGVkXG4gICAgOiBzaGlmdGVkO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGJhc2UgNjQgVkxRIGVuY29kZWQgdmFsdWUuXG4gKi9cbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gYmFzZTY0VkxRX2VuY29kZShhVmFsdWUpIHtcbiAgdmFyIGVuY29kZWQgPSBcIlwiO1xuICB2YXIgZGlnaXQ7XG5cbiAgdmFyIHZscSA9IHRvVkxRU2lnbmVkKGFWYWx1ZSk7XG5cbiAgZG8ge1xuICAgIGRpZ2l0ID0gdmxxICYgVkxRX0JBU0VfTUFTSztcbiAgICB2bHEgPj4+PSBWTFFfQkFTRV9TSElGVDtcbiAgICBpZiAodmxxID4gMCkge1xuICAgICAgLy8gVGhlcmUgYXJlIHN0aWxsIG1vcmUgZGlnaXRzIGluIHRoaXMgdmFsdWUsIHNvIHdlIG11c3QgbWFrZSBzdXJlIHRoZVxuICAgICAgLy8gY29udGludWF0aW9uIGJpdCBpcyBtYXJrZWQuXG4gICAgICBkaWdpdCB8PSBWTFFfQ09OVElOVUFUSU9OX0JJVDtcbiAgICB9XG4gICAgZW5jb2RlZCArPSBiYXNlNjQuZW5jb2RlKGRpZ2l0KTtcbiAgfSB3aGlsZSAodmxxID4gMCk7XG5cbiAgcmV0dXJuIGVuY29kZWQ7XG59O1xuXG4vKipcbiAqIERlY29kZXMgdGhlIG5leHQgYmFzZSA2NCBWTFEgdmFsdWUgZnJvbSB0aGUgZ2l2ZW4gc3RyaW5nIGFuZCByZXR1cm5zIHRoZVxuICogdmFsdWUgYW5kIHRoZSByZXN0IG9mIHRoZSBzdHJpbmcgdmlhIHRoZSBvdXQgcGFyYW1ldGVyLlxuICovXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uIGJhc2U2NFZMUV9kZWNvZGUoYVN0ciwgYUluZGV4LCBhT3V0UGFyYW0pIHtcbiAgdmFyIHN0ckxlbiA9IGFTdHIubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gMDtcbiAgdmFyIHNoaWZ0ID0gMDtcbiAgdmFyIGNvbnRpbnVhdGlvbiwgZGlnaXQ7XG5cbiAgZG8ge1xuICAgIGlmIChhSW5kZXggPj0gc3RyTGVuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBtb3JlIGRpZ2l0cyBpbiBiYXNlIDY0IFZMUSB2YWx1ZS5cIik7XG4gICAgfVxuXG4gICAgZGlnaXQgPSBiYXNlNjQuZGVjb2RlKGFTdHIuY2hhckNvZGVBdChhSW5kZXgrKykpO1xuICAgIGlmIChkaWdpdCA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYmFzZTY0IGRpZ2l0OiBcIiArIGFTdHIuY2hhckF0KGFJbmRleCAtIDEpKTtcbiAgICB9XG5cbiAgICBjb250aW51YXRpb24gPSAhIShkaWdpdCAmIFZMUV9DT05USU5VQVRJT05fQklUKTtcbiAgICBkaWdpdCAmPSBWTFFfQkFTRV9NQVNLO1xuICAgIHJlc3VsdCA9IHJlc3VsdCArIChkaWdpdCA8PCBzaGlmdCk7XG4gICAgc2hpZnQgKz0gVkxRX0JBU0VfU0hJRlQ7XG4gIH0gd2hpbGUgKGNvbnRpbnVhdGlvbik7XG5cbiAgYU91dFBhcmFtLnZhbHVlID0gZnJvbVZMUVNpZ25lZChyZXN1bHQpO1xuICBhT3V0UGFyYW0ucmVzdCA9IGFJbmRleDtcbn07XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciBpbnRUb0NoYXJNYXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycuc3BsaXQoJycpO1xuXG4vKipcbiAqIEVuY29kZSBhbiBpbnRlZ2VyIGluIHRoZSByYW5nZSBvZiAwIHRvIDYzIHRvIGEgc2luZ2xlIGJhc2UgNjQgZGlnaXQuXG4gKi9cbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKG51bWJlcikge1xuICBpZiAoMCA8PSBudW1iZXIgJiYgbnVtYmVyIDwgaW50VG9DaGFyTWFwLmxlbmd0aCkge1xuICAgIHJldHVybiBpbnRUb0NoYXJNYXBbbnVtYmVyXTtcbiAgfVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYzOiBcIiArIG51bWJlcik7XG59O1xuXG4vKipcbiAqIERlY29kZSBhIHNpbmdsZSBiYXNlIDY0IGNoYXJhY3RlciBjb2RlIGRpZ2l0IHRvIGFuIGludGVnZXIuIFJldHVybnMgLTEgb25cbiAqIGZhaWx1cmUuXG4gKi9cbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24gKGNoYXJDb2RlKSB7XG4gIHZhciBiaWdBID0gNjU7ICAgICAvLyAnQSdcbiAgdmFyIGJpZ1ogPSA5MDsgICAgIC8vICdaJ1xuXG4gIHZhciBsaXR0bGVBID0gOTc7ICAvLyAnYSdcbiAgdmFyIGxpdHRsZVogPSAxMjI7IC8vICd6J1xuXG4gIHZhciB6ZXJvID0gNDg7ICAgICAvLyAnMCdcbiAgdmFyIG5pbmUgPSA1NzsgICAgIC8vICc5J1xuXG4gIHZhciBwbHVzID0gNDM7ICAgICAvLyAnKydcbiAgdmFyIHNsYXNoID0gNDc7ICAgIC8vICcvJ1xuXG4gIHZhciBsaXR0bGVPZmZzZXQgPSAyNjtcbiAgdmFyIG51bWJlck9mZnNldCA9IDUyO1xuXG4gIC8vIDAgLSAyNTogQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpcbiAgaWYgKGJpZ0EgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gYmlnWikge1xuICAgIHJldHVybiAoY2hhckNvZGUgLSBiaWdBKTtcbiAgfVxuXG4gIC8vIDI2IC0gNTE6IGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XG4gIGlmIChsaXR0bGVBIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IGxpdHRsZVopIHtcbiAgICByZXR1cm4gKGNoYXJDb2RlIC0gbGl0dGxlQSArIGxpdHRsZU9mZnNldCk7XG4gIH1cblxuICAvLyA1MiAtIDYxOiAwMTIzNDU2Nzg5XG4gIGlmICh6ZXJvIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IG5pbmUpIHtcbiAgICByZXR1cm4gKGNoYXJDb2RlIC0gemVybyArIG51bWJlck9mZnNldCk7XG4gIH1cblxuICAvLyA2MjogK1xuICBpZiAoY2hhckNvZGUgPT0gcGx1cykge1xuICAgIHJldHVybiA2MjtcbiAgfVxuXG4gIC8vIDYzOiAvXG4gIGlmIChjaGFyQ29kZSA9PSBzbGFzaCkge1xuICAgIHJldHVybiA2MztcbiAgfVxuXG4gIC8vIEludmFsaWQgYmFzZTY0IGRpZ2l0LlxuICByZXR1cm4gLTE7XG59O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG4vKipcbiAqIFRoaXMgaXMgYSBoZWxwZXIgZnVuY3Rpb24gZm9yIGdldHRpbmcgdmFsdWVzIGZyb20gcGFyYW1ldGVyL29wdGlvbnNcbiAqIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIGFyZ3MgVGhlIG9iamVjdCB3ZSBhcmUgZXh0cmFjdGluZyB2YWx1ZXMgZnJvbVxuICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHdlIGFyZSBnZXR0aW5nLlxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBBbiBvcHRpb25hbCB2YWx1ZSB0byByZXR1cm4gaWYgdGhlIHByb3BlcnR5IGlzIG1pc3NpbmdcbiAqIGZyb20gdGhlIG9iamVjdC4gSWYgdGhpcyBpcyBub3Qgc3BlY2lmaWVkIGFuZCB0aGUgcHJvcGVydHkgaXMgbWlzc2luZywgYW5cbiAqIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICovXG5mdW5jdGlvbiBnZXRBcmcoYUFyZ3MsIGFOYW1lLCBhRGVmYXVsdFZhbHVlKSB7XG4gIGlmIChhTmFtZSBpbiBhQXJncykge1xuICAgIHJldHVybiBhQXJnc1thTmFtZV07XG4gIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgIHJldHVybiBhRGVmYXVsdFZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignXCInICsgYU5hbWUgKyAnXCIgaXMgYSByZXF1aXJlZCBhcmd1bWVudC4nKTtcbiAgfVxufVxuZXhwb3J0cy5nZXRBcmcgPSBnZXRBcmc7XG5cbnZhciB1cmxSZWdleHAgPSAvXig/OihbXFx3K1xcLS5dKyk6KT9cXC9cXC8oPzooXFx3KzpcXHcrKUApPyhbXFx3Li1dKikoPzo6KFxcZCspKT8oLiopJC87XG52YXIgZGF0YVVybFJlZ2V4cCA9IC9eZGF0YTouK1xcLC4rJC87XG5cbmZ1bmN0aW9uIHVybFBhcnNlKGFVcmwpIHtcbiAgdmFyIG1hdGNoID0gYVVybC5tYXRjaCh1cmxSZWdleHApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzY2hlbWU6IG1hdGNoWzFdLFxuICAgIGF1dGg6IG1hdGNoWzJdLFxuICAgIGhvc3Q6IG1hdGNoWzNdLFxuICAgIHBvcnQ6IG1hdGNoWzRdLFxuICAgIHBhdGg6IG1hdGNoWzVdXG4gIH07XG59XG5leHBvcnRzLnVybFBhcnNlID0gdXJsUGFyc2U7XG5cbmZ1bmN0aW9uIHVybEdlbmVyYXRlKGFQYXJzZWRVcmwpIHtcbiAgdmFyIHVybCA9ICcnO1xuICBpZiAoYVBhcnNlZFVybC5zY2hlbWUpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5zY2hlbWUgKyAnOic7XG4gIH1cbiAgdXJsICs9ICcvLyc7XG4gIGlmIChhUGFyc2VkVXJsLmF1dGgpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5hdXRoICsgJ0AnO1xuICB9XG4gIGlmIChhUGFyc2VkVXJsLmhvc3QpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5ob3N0O1xuICB9XG4gIGlmIChhUGFyc2VkVXJsLnBvcnQpIHtcbiAgICB1cmwgKz0gXCI6XCIgKyBhUGFyc2VkVXJsLnBvcnRcbiAgfVxuICBpZiAoYVBhcnNlZFVybC5wYXRoKSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwucGF0aDtcbiAgfVxuICByZXR1cm4gdXJsO1xufVxuZXhwb3J0cy51cmxHZW5lcmF0ZSA9IHVybEdlbmVyYXRlO1xuXG4vKipcbiAqIE5vcm1hbGl6ZXMgYSBwYXRoLCBvciB0aGUgcGF0aCBwb3J0aW9uIG9mIGEgVVJMOlxuICpcbiAqIC0gUmVwbGFjZXMgY29uc2VjdXRpdmUgc2xhc2hlcyB3aXRoIG9uZSBzbGFzaC5cbiAqIC0gUmVtb3ZlcyB1bm5lY2Vzc2FyeSAnLicgcGFydHMuXG4gKiAtIFJlbW92ZXMgdW5uZWNlc3NhcnkgJzxkaXI+Ly4uJyBwYXJ0cy5cbiAqXG4gKiBCYXNlZCBvbiBjb2RlIGluIHRoZSBOb2RlLmpzICdwYXRoJyBjb3JlIG1vZHVsZS5cbiAqXG4gKiBAcGFyYW0gYVBhdGggVGhlIHBhdGggb3IgdXJsIHRvIG5vcm1hbGl6ZS5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplKGFQYXRoKSB7XG4gIHZhciBwYXRoID0gYVBhdGg7XG4gIHZhciB1cmwgPSB1cmxQYXJzZShhUGF0aCk7XG4gIGlmICh1cmwpIHtcbiAgICBpZiAoIXVybC5wYXRoKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuICAgIHBhdGggPSB1cmwucGF0aDtcbiAgfVxuICB2YXIgaXNBYnNvbHV0ZSA9IGV4cG9ydHMuaXNBYnNvbHV0ZShwYXRoKTtcblxuICB2YXIgcGFydHMgPSBwYXRoLnNwbGl0KC9cXC8rLyk7XG4gIGZvciAodmFyIHBhcnQsIHVwID0gMCwgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgcGFydCA9IHBhcnRzW2ldO1xuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCA+IDApIHtcbiAgICAgIGlmIChwYXJ0ID09PSAnJykge1xuICAgICAgICAvLyBUaGUgZmlyc3QgcGFydCBpcyBibGFuayBpZiB0aGUgcGF0aCBpcyBhYnNvbHV0ZS4gVHJ5aW5nIHRvIGdvXG4gICAgICAgIC8vIGFib3ZlIHRoZSByb290IGlzIGEgbm8tb3AuIFRoZXJlZm9yZSB3ZSBjYW4gcmVtb3ZlIGFsbCAnLi4nIHBhcnRzXG4gICAgICAgIC8vIGRpcmVjdGx5IGFmdGVyIHRoZSByb290LlxuICAgICAgICBwYXJ0cy5zcGxpY2UoaSArIDEsIHVwKTtcbiAgICAgICAgdXAgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFydHMuc3BsaWNlKGksIDIpO1xuICAgICAgICB1cC0tO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwYXRoID0gcGFydHMuam9pbignLycpO1xuXG4gIGlmIChwYXRoID09PSAnJykge1xuICAgIHBhdGggPSBpc0Fic29sdXRlID8gJy8nIDogJy4nO1xuICB9XG5cbiAgaWYgKHVybCkge1xuICAgIHVybC5wYXRoID0gcGF0aDtcbiAgICByZXR1cm4gdXJsR2VuZXJhdGUodXJsKTtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cbmV4cG9ydHMubm9ybWFsaXplID0gbm9ybWFsaXplO1xuXG4vKipcbiAqIEpvaW5zIHR3byBwYXRocy9VUkxzLlxuICpcbiAqIEBwYXJhbSBhUm9vdCBUaGUgcm9vdCBwYXRoIG9yIFVSTC5cbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciBVUkwgdG8gYmUgam9pbmVkIHdpdGggdGhlIHJvb3QuXG4gKlxuICogLSBJZiBhUGF0aCBpcyBhIFVSTCBvciBhIGRhdGEgVVJJLCBhUGF0aCBpcyByZXR1cm5lZCwgdW5sZXNzIGFQYXRoIGlzIGFcbiAqICAgc2NoZW1lLXJlbGF0aXZlIFVSTDogVGhlbiB0aGUgc2NoZW1lIG9mIGFSb290LCBpZiBhbnksIGlzIHByZXBlbmRlZFxuICogICBmaXJzdC5cbiAqIC0gT3RoZXJ3aXNlIGFQYXRoIGlzIGEgcGF0aC4gSWYgYVJvb3QgaXMgYSBVUkwsIHRoZW4gaXRzIHBhdGggcG9ydGlvblxuICogICBpcyB1cGRhdGVkIHdpdGggdGhlIHJlc3VsdCBhbmQgYVJvb3QgaXMgcmV0dXJuZWQuIE90aGVyd2lzZSB0aGUgcmVzdWx0XG4gKiAgIGlzIHJldHVybmVkLlxuICogICAtIElmIGFQYXRoIGlzIGFic29sdXRlLCB0aGUgcmVzdWx0IGlzIGFQYXRoLlxuICogICAtIE90aGVyd2lzZSB0aGUgdHdvIHBhdGhzIGFyZSBqb2luZWQgd2l0aCBhIHNsYXNoLlxuICogLSBKb2luaW5nIGZvciBleGFtcGxlICdodHRwOi8vJyBhbmQgJ3d3dy5leGFtcGxlLmNvbScgaXMgYWxzbyBzdXBwb3J0ZWQuXG4gKi9cbmZ1bmN0aW9uIGpvaW4oYVJvb3QsIGFQYXRoKSB7XG4gIGlmIChhUm9vdCA9PT0gXCJcIikge1xuICAgIGFSb290ID0gXCIuXCI7XG4gIH1cbiAgaWYgKGFQYXRoID09PSBcIlwiKSB7XG4gICAgYVBhdGggPSBcIi5cIjtcbiAgfVxuICB2YXIgYVBhdGhVcmwgPSB1cmxQYXJzZShhUGF0aCk7XG4gIHZhciBhUm9vdFVybCA9IHVybFBhcnNlKGFSb290KTtcbiAgaWYgKGFSb290VXJsKSB7XG4gICAgYVJvb3QgPSBhUm9vdFVybC5wYXRoIHx8ICcvJztcbiAgfVxuXG4gIC8vIGBqb2luKGZvbywgJy8vd3d3LmV4YW1wbGUub3JnJylgXG4gIGlmIChhUGF0aFVybCAmJiAhYVBhdGhVcmwuc2NoZW1lKSB7XG4gICAgaWYgKGFSb290VXJsKSB7XG4gICAgICBhUGF0aFVybC5zY2hlbWUgPSBhUm9vdFVybC5zY2hlbWU7XG4gICAgfVxuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUGF0aFVybCk7XG4gIH1cblxuICBpZiAoYVBhdGhVcmwgfHwgYVBhdGgubWF0Y2goZGF0YVVybFJlZ2V4cCkpIHtcbiAgICByZXR1cm4gYVBhdGg7XG4gIH1cblxuICAvLyBgam9pbignaHR0cDovLycsICd3d3cuZXhhbXBsZS5jb20nKWBcbiAgaWYgKGFSb290VXJsICYmICFhUm9vdFVybC5ob3N0ICYmICFhUm9vdFVybC5wYXRoKSB7XG4gICAgYVJvb3RVcmwuaG9zdCA9IGFQYXRoO1xuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUm9vdFVybCk7XG4gIH1cblxuICB2YXIgam9pbmVkID0gYVBhdGguY2hhckF0KDApID09PSAnLydcbiAgICA/IGFQYXRoXG4gICAgOiBub3JtYWxpemUoYVJvb3QucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyBhUGF0aCk7XG5cbiAgaWYgKGFSb290VXJsKSB7XG4gICAgYVJvb3RVcmwucGF0aCA9IGpvaW5lZDtcbiAgICByZXR1cm4gdXJsR2VuZXJhdGUoYVJvb3RVcmwpO1xuICB9XG4gIHJldHVybiBqb2luZWQ7XG59XG5leHBvcnRzLmpvaW4gPSBqb2luO1xuXG5leHBvcnRzLmlzQWJzb2x1dGUgPSBmdW5jdGlvbiAoYVBhdGgpIHtcbiAgcmV0dXJuIGFQYXRoLmNoYXJBdCgwKSA9PT0gJy8nIHx8IHVybFJlZ2V4cC50ZXN0KGFQYXRoKTtcbn07XG5cbi8qKlxuICogTWFrZSBhIHBhdGggcmVsYXRpdmUgdG8gYSBVUkwgb3IgYW5vdGhlciBwYXRoLlxuICpcbiAqIEBwYXJhbSBhUm9vdCBUaGUgcm9vdCBwYXRoIG9yIFVSTC5cbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciBVUkwgdG8gYmUgbWFkZSByZWxhdGl2ZSB0byBhUm9vdC5cbiAqL1xuZnVuY3Rpb24gcmVsYXRpdmUoYVJvb3QsIGFQYXRoKSB7XG4gIGlmIChhUm9vdCA9PT0gXCJcIikge1xuICAgIGFSb290ID0gXCIuXCI7XG4gIH1cblxuICBhUm9vdCA9IGFSb290LnJlcGxhY2UoL1xcLyQvLCAnJyk7XG5cbiAgLy8gSXQgaXMgcG9zc2libGUgZm9yIHRoZSBwYXRoIHRvIGJlIGFib3ZlIHRoZSByb290LiBJbiB0aGlzIGNhc2UsIHNpbXBseVxuICAvLyBjaGVja2luZyB3aGV0aGVyIHRoZSByb290IGlzIGEgcHJlZml4IG9mIHRoZSBwYXRoIHdvbid0IHdvcmsuIEluc3RlYWQsIHdlXG4gIC8vIG5lZWQgdG8gcmVtb3ZlIGNvbXBvbmVudHMgZnJvbSB0aGUgcm9vdCBvbmUgYnkgb25lLCB1bnRpbCBlaXRoZXIgd2UgZmluZFxuICAvLyBhIHByZWZpeCB0aGF0IGZpdHMsIG9yIHdlIHJ1biBvdXQgb2YgY29tcG9uZW50cyB0byByZW1vdmUuXG4gIHZhciBsZXZlbCA9IDA7XG4gIHdoaWxlIChhUGF0aC5pbmRleE9mKGFSb290ICsgJy8nKSAhPT0gMCkge1xuICAgIHZhciBpbmRleCA9IGFSb290Lmxhc3RJbmRleE9mKFwiL1wiKTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIG9ubHkgcGFydCBvZiB0aGUgcm9vdCB0aGF0IGlzIGxlZnQgaXMgdGhlIHNjaGVtZSAoaS5lLiBodHRwOi8vLFxuICAgIC8vIGZpbGU6Ly8vLCBldGMuKSwgb25lIG9yIG1vcmUgc2xhc2hlcyAoLyksIG9yIHNpbXBseSBub3RoaW5nIGF0IGFsbCwgd2VcbiAgICAvLyBoYXZlIGV4aGF1c3RlZCBhbGwgY29tcG9uZW50cywgc28gdGhlIHBhdGggaXMgbm90IHJlbGF0aXZlIHRvIHRoZSByb290LlxuICAgIGFSb290ID0gYVJvb3Quc2xpY2UoMCwgaW5kZXgpO1xuICAgIGlmIChhUm9vdC5tYXRjaCgvXihbXlxcL10rOlxcLyk/XFwvKiQvKSkge1xuICAgICAgcmV0dXJuIGFQYXRoO1xuICAgIH1cblxuICAgICsrbGV2ZWw7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgd2UgYWRkIGEgXCIuLi9cIiBmb3IgZWFjaCBjb21wb25lbnQgd2UgcmVtb3ZlZCBmcm9tIHRoZSByb290LlxuICByZXR1cm4gQXJyYXkobGV2ZWwgKyAxKS5qb2luKFwiLi4vXCIpICsgYVBhdGguc3Vic3RyKGFSb290Lmxlbmd0aCArIDEpO1xufVxuZXhwb3J0cy5yZWxhdGl2ZSA9IHJlbGF0aXZlO1xuXG52YXIgc3VwcG9ydHNOdWxsUHJvdG8gPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuICEoJ19fcHJvdG9fXycgaW4gb2JqKTtcbn0oKSk7XG5cbmZ1bmN0aW9uIGlkZW50aXR5IChzKSB7XG4gIHJldHVybiBzO1xufVxuXG4vKipcbiAqIEJlY2F1c2UgYmVoYXZpb3IgZ29lcyB3YWNreSB3aGVuIHlvdSBzZXQgYF9fcHJvdG9fX2Agb24gb2JqZWN0cywgd2VcbiAqIGhhdmUgdG8gcHJlZml4IGFsbCB0aGUgc3RyaW5ncyBpbiBvdXIgc2V0IHdpdGggYW4gYXJiaXRyYXJ5IGNoYXJhY3Rlci5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9wdWxsLzMxIGFuZFxuICogaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9pc3N1ZXMvMzBcbiAqXG4gKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAqL1xuZnVuY3Rpb24gdG9TZXRTdHJpbmcoYVN0cikge1xuICBpZiAoaXNQcm90b1N0cmluZyhhU3RyKSkge1xuICAgIHJldHVybiAnJCcgKyBhU3RyO1xuICB9XG5cbiAgcmV0dXJuIGFTdHI7XG59XG5leHBvcnRzLnRvU2V0U3RyaW5nID0gc3VwcG9ydHNOdWxsUHJvdG8gPyBpZGVudGl0eSA6IHRvU2V0U3RyaW5nO1xuXG5mdW5jdGlvbiBmcm9tU2V0U3RyaW5nKGFTdHIpIHtcbiAgaWYgKGlzUHJvdG9TdHJpbmcoYVN0cikpIHtcbiAgICByZXR1cm4gYVN0ci5zbGljZSgxKTtcbiAgfVxuXG4gIHJldHVybiBhU3RyO1xufVxuZXhwb3J0cy5mcm9tU2V0U3RyaW5nID0gc3VwcG9ydHNOdWxsUHJvdG8gPyBpZGVudGl0eSA6IGZyb21TZXRTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzUHJvdG9TdHJpbmcocykge1xuICBpZiAoIXMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gcy5sZW5ndGg7XG5cbiAgaWYgKGxlbmd0aCA8IDkgLyogXCJfX3Byb3RvX19cIi5sZW5ndGggKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAocy5jaGFyQ29kZUF0KGxlbmd0aCAtIDEpICE9PSA5NSAgLyogJ18nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gMikgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSAzKSAhPT0gMTExIC8qICdvJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDQpICE9PSAxMTYgLyogJ3QnICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNSkgIT09IDExMSAvKiAnbycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA2KSAhPT0gMTE0IC8qICdyJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDcpICE9PSAxMTIgLyogJ3AnICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gOCkgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA5KSAhPT0gOTUgIC8qICdfJyAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSBsZW5ndGggLSAxMDsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAocy5jaGFyQ29kZUF0KGkpICE9PSAzNiAvKiAnJCcgKi8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdoZXJlIHRoZSBvcmlnaW5hbCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICpcbiAqIE9wdGlvbmFsbHkgcGFzcyBpbiBgdHJ1ZWAgYXMgYG9ubHlDb21wYXJlR2VuZXJhdGVkYCB0byBjb25zaWRlciB0d29cbiAqIG1hcHBpbmdzIHdpdGggdGhlIHNhbWUgb3JpZ2luYWwgc291cmNlL2xpbmUvY29sdW1uLCBidXQgZGlmZmVyZW50IGdlbmVyYXRlZFxuICogbGluZSBhbmQgY29sdW1uIHRoZSBzYW1lLiBVc2VmdWwgd2hlbiBzZWFyY2hpbmcgZm9yIGEgbWFwcGluZyB3aXRoIGFcbiAqIHN0dWJiZWQgb3V0IG1hcHBpbmcuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKG1hcHBpbmdBLCBtYXBwaW5nQiwgb25seUNvbXBhcmVPcmlnaW5hbCkge1xuICB2YXIgY21wID0gc3RyY21wKG1hcHBpbmdBLnNvdXJjZSwgbWFwcGluZ0Iuc291cmNlKTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbExpbmUgLSBtYXBwaW5nQi5vcmlnaW5hbExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxDb2x1bW4gLSBtYXBwaW5nQi5vcmlnaW5hbENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCB8fCBvbmx5Q29tcGFyZU9yaWdpbmFsKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lIC0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICByZXR1cm4gc3RyY21wKG1hcHBpbmdBLm5hbWUsIG1hcHBpbmdCLm5hbWUpO1xufVxuZXhwb3J0cy5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyA9IGNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zO1xuXG4vKipcbiAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2l0aCBkZWZsYXRlZCBzb3VyY2UgYW5kIG5hbWUgaW5kaWNlcyB3aGVyZVxuICogdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICpcbiAqIE9wdGlvbmFsbHkgcGFzcyBpbiBgdHJ1ZWAgYXMgYG9ubHlDb21wYXJlR2VuZXJhdGVkYCB0byBjb25zaWRlciB0d29cbiAqIG1hcHBpbmdzIHdpdGggdGhlIHNhbWUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiwgYnV0IGRpZmZlcmVudFxuICogc291cmNlL25hbWUvb3JpZ2luYWwgbGluZSBhbmQgY29sdW1uIHRoZSBzYW1lLiBVc2VmdWwgd2hlbiBzZWFyY2hpbmcgZm9yIGFcbiAqIG1hcHBpbmcgd2l0aCBhIHN0dWJiZWQgb3V0IG1hcHBpbmcuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkKG1hcHBpbmdBLCBtYXBwaW5nQiwgb25seUNvbXBhcmVHZW5lcmF0ZWQpIHtcbiAgdmFyIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCB8fCBvbmx5Q29tcGFyZUdlbmVyYXRlZCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG59XG5leHBvcnRzLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkID0gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQ7XG5cbmZ1bmN0aW9uIHN0cmNtcChhU3RyMSwgYVN0cjIpIHtcbiAgaWYgKGFTdHIxID09PSBhU3RyMikge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYgKGFTdHIxID09PSBudWxsKSB7XG4gICAgcmV0dXJuIDE7IC8vIGFTdHIyICE9PSBudWxsXG4gIH1cblxuICBpZiAoYVN0cjIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gLTE7IC8vIGFTdHIxICE9PSBudWxsXG4gIH1cblxuICBpZiAoYVN0cjEgPiBhU3RyMikge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2l0aCBpbmZsYXRlZCBzb3VyY2UgYW5kIG5hbWUgc3RyaW5ncyB3aGVyZVxuICogdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IpIHtcbiAgdmFyIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG59XG5leHBvcnRzLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkID0gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQ7XG5cbi8qKlxuICogU3RyaXAgYW55IEpTT04gWFNTSSBhdm9pZGFuY2UgcHJlZml4IGZyb20gdGhlIHN0cmluZyAoYXMgZG9jdW1lbnRlZFxuICogaW4gdGhlIHNvdXJjZSBtYXBzIHNwZWNpZmljYXRpb24pLCBhbmQgdGhlbiBwYXJzZSB0aGUgc3RyaW5nIGFzXG4gKiBKU09OLlxuICovXG5mdW5jdGlvbiBwYXJzZVNvdXJjZU1hcElucHV0KHN0cikge1xuICByZXR1cm4gSlNPTi5wYXJzZShzdHIucmVwbGFjZSgvXlxcKV19J1teXFxuXSpcXG4vLCAnJykpO1xufVxuZXhwb3J0cy5wYXJzZVNvdXJjZU1hcElucHV0ID0gcGFyc2VTb3VyY2VNYXBJbnB1dDtcblxuLyoqXG4gKiBDb21wdXRlIHRoZSBVUkwgb2YgYSBzb3VyY2UgZ2l2ZW4gdGhlIHRoZSBzb3VyY2Ugcm9vdCwgdGhlIHNvdXJjZSdzXG4gKiBVUkwsIGFuZCB0aGUgc291cmNlIG1hcCdzIFVSTC5cbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVNvdXJjZVVSTChzb3VyY2VSb290LCBzb3VyY2VVUkwsIHNvdXJjZU1hcFVSTCkge1xuICBzb3VyY2VVUkwgPSBzb3VyY2VVUkwgfHwgJyc7XG5cbiAgaWYgKHNvdXJjZVJvb3QpIHtcbiAgICAvLyBUaGlzIGZvbGxvd3Mgd2hhdCBDaHJvbWUgZG9lcy5cbiAgICBpZiAoc291cmNlUm9vdFtzb3VyY2VSb290Lmxlbmd0aCAtIDFdICE9PSAnLycgJiYgc291cmNlVVJMWzBdICE9PSAnLycpIHtcbiAgICAgIHNvdXJjZVJvb3QgKz0gJy8nO1xuICAgIH1cbiAgICAvLyBUaGUgc3BlYyBzYXlzOlxuICAgIC8vICAgTGluZSA0OiBBbiBvcHRpb25hbCBzb3VyY2Ugcm9vdCwgdXNlZnVsIGZvciByZWxvY2F0aW5nIHNvdXJjZVxuICAgIC8vICAgZmlsZXMgb24gYSBzZXJ2ZXIgb3IgcmVtb3ZpbmcgcmVwZWF0ZWQgdmFsdWVzIGluIHRoZVxuICAgIC8vICAg4oCcc291cmNlc+KAnSBlbnRyeS4gIFRoaXMgdmFsdWUgaXMgcHJlcGVuZGVkIHRvIHRoZSBpbmRpdmlkdWFsXG4gICAgLy8gICBlbnRyaWVzIGluIHRoZSDigJxzb3VyY2XigJ0gZmllbGQuXG4gICAgc291cmNlVVJMID0gc291cmNlUm9vdCArIHNvdXJjZVVSTDtcbiAgfVxuXG4gIC8vIEhpc3RvcmljYWxseSwgU291cmNlTWFwQ29uc3VtZXIgZGlkIG5vdCB0YWtlIHRoZSBzb3VyY2VNYXBVUkwgYXNcbiAgLy8gYSBwYXJhbWV0ZXIuICBUaGlzIG1vZGUgaXMgc3RpbGwgc29tZXdoYXQgc3VwcG9ydGVkLCB3aGljaCBpcyB3aHlcbiAgLy8gdGhpcyBjb2RlIGJsb2NrIGlzIGNvbmRpdGlvbmFsLiAgSG93ZXZlciwgaXQncyBwcmVmZXJhYmxlIHRvIHBhc3NcbiAgLy8gdGhlIHNvdXJjZSBtYXAgVVJMIHRvIFNvdXJjZU1hcENvbnN1bWVyLCBzbyB0aGF0IHRoaXMgZnVuY3Rpb25cbiAgLy8gY2FuIGltcGxlbWVudCB0aGUgc291cmNlIFVSTCByZXNvbHV0aW9uIGFsZ29yaXRobSBhcyBvdXRsaW5lZCBpblxuICAvLyB0aGUgc3BlYy4gIFRoaXMgYmxvY2sgaXMgYmFzaWNhbGx5IHRoZSBlcXVpdmFsZW50IG9mOlxuICAvLyAgICBuZXcgVVJMKHNvdXJjZVVSTCwgc291cmNlTWFwVVJMKS50b1N0cmluZygpXG4gIC8vIC4uLiBleGNlcHQgaXQgYXZvaWRzIHVzaW5nIFVSTCwgd2hpY2ggd2Fzbid0IGF2YWlsYWJsZSBpbiB0aGVcbiAgLy8gb2xkZXIgcmVsZWFzZXMgb2Ygbm9kZSBzdGlsbCBzdXBwb3J0ZWQgYnkgdGhpcyBsaWJyYXJ5LlxuICAvL1xuICAvLyBUaGUgc3BlYyBzYXlzOlxuICAvLyAgIElmIHRoZSBzb3VyY2VzIGFyZSBub3QgYWJzb2x1dGUgVVJMcyBhZnRlciBwcmVwZW5kaW5nIG9mIHRoZVxuICAvLyAgIOKAnHNvdXJjZVJvb3TigJ0sIHRoZSBzb3VyY2VzIGFyZSByZXNvbHZlZCByZWxhdGl2ZSB0byB0aGVcbiAgLy8gICBTb3VyY2VNYXAgKGxpa2UgcmVzb2x2aW5nIHNjcmlwdCBzcmMgaW4gYSBodG1sIGRvY3VtZW50KS5cbiAgaWYgKHNvdXJjZU1hcFVSTCkge1xuICAgIHZhciBwYXJzZWQgPSB1cmxQYXJzZShzb3VyY2VNYXBVUkwpO1xuICAgIGlmICghcGFyc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzb3VyY2VNYXBVUkwgY291bGQgbm90IGJlIHBhcnNlZFwiKTtcbiAgICB9XG4gICAgaWYgKHBhcnNlZC5wYXRoKSB7XG4gICAgICAvLyBTdHJpcCB0aGUgbGFzdCBwYXRoIGNvbXBvbmVudCwgYnV0IGtlZXAgdGhlIFwiL1wiLlxuICAgICAgdmFyIGluZGV4ID0gcGFyc2VkLnBhdGgubGFzdEluZGV4T2YoJy8nKTtcbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgIHBhcnNlZC5wYXRoID0gcGFyc2VkLnBhdGguc3Vic3RyaW5nKDAsIGluZGV4ICsgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHNvdXJjZVVSTCA9IGpvaW4odXJsR2VuZXJhdGUocGFyc2VkKSwgc291cmNlVVJMKTtcbiAgfVxuXG4gIHJldHVybiBub3JtYWxpemUoc291cmNlVVJMKTtcbn1cbmV4cG9ydHMuY29tcHV0ZVNvdXJjZVVSTCA9IGNvbXB1dGVTb3VyY2VVUkw7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBoYXNOYXRpdmVNYXAgPSB0eXBlb2YgTWFwICE9PSBcInVuZGVmaW5lZFwiO1xuXG4vKipcbiAqIEEgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggaXMgYSBjb21iaW5hdGlvbiBvZiBhbiBhcnJheSBhbmQgYSBzZXQuIEFkZGluZyBhIG5ld1xuICogbWVtYmVyIGlzIE8oMSksIHRlc3RpbmcgZm9yIG1lbWJlcnNoaXAgaXMgTygxKSwgYW5kIGZpbmRpbmcgdGhlIGluZGV4IG9mIGFuXG4gKiBlbGVtZW50IGlzIE8oMSkuIFJlbW92aW5nIGVsZW1lbnRzIGZyb20gdGhlIHNldCBpcyBub3Qgc3VwcG9ydGVkLiBPbmx5XG4gKiBzdHJpbmdzIGFyZSBzdXBwb3J0ZWQgZm9yIG1lbWJlcnNoaXAuXG4gKi9cbmZ1bmN0aW9uIEFycmF5U2V0KCkge1xuICB0aGlzLl9hcnJheSA9IFtdO1xuICB0aGlzLl9zZXQgPSBoYXNOYXRpdmVNYXAgPyBuZXcgTWFwKCkgOiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuXG4vKipcbiAqIFN0YXRpYyBtZXRob2QgZm9yIGNyZWF0aW5nIEFycmF5U2V0IGluc3RhbmNlcyBmcm9tIGFuIGV4aXN0aW5nIGFycmF5LlxuICovXG5BcnJheVNldC5mcm9tQXJyYXkgPSBmdW5jdGlvbiBBcnJheVNldF9mcm9tQXJyYXkoYUFycmF5LCBhQWxsb3dEdXBsaWNhdGVzKSB7XG4gIHZhciBzZXQgPSBuZXcgQXJyYXlTZXQoKTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFBcnJheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHNldC5hZGQoYUFycmF5W2ldLCBhQWxsb3dEdXBsaWNhdGVzKTtcbiAgfVxuICByZXR1cm4gc2V0O1xufTtcblxuLyoqXG4gKiBSZXR1cm4gaG93IG1hbnkgdW5pcXVlIGl0ZW1zIGFyZSBpbiB0aGlzIEFycmF5U2V0LiBJZiBkdXBsaWNhdGVzIGhhdmUgYmVlblxuICogYWRkZWQsIHRoYW4gdGhvc2UgZG8gbm90IGNvdW50IHRvd2FyZHMgdGhlIHNpemUuXG4gKlxuICogQHJldHVybnMgTnVtYmVyXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24gQXJyYXlTZXRfc2l6ZSgpIHtcbiAgcmV0dXJuIGhhc05hdGl2ZU1hcCA/IHRoaXMuX3NldC5zaXplIDogT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5fc2V0KS5sZW5ndGg7XG59O1xuXG4vKipcbiAqIEFkZCB0aGUgZ2l2ZW4gc3RyaW5nIHRvIHRoaXMgc2V0LlxuICpcbiAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICovXG5BcnJheVNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gQXJyYXlTZXRfYWRkKGFTdHIsIGFBbGxvd0R1cGxpY2F0ZXMpIHtcbiAgdmFyIHNTdHIgPSBoYXNOYXRpdmVNYXAgPyBhU3RyIDogdXRpbC50b1NldFN0cmluZyhhU3RyKTtcbiAgdmFyIGlzRHVwbGljYXRlID0gaGFzTmF0aXZlTWFwID8gdGhpcy5oYXMoYVN0cikgOiBoYXMuY2FsbCh0aGlzLl9zZXQsIHNTdHIpO1xuICB2YXIgaWR4ID0gdGhpcy5fYXJyYXkubGVuZ3RoO1xuICBpZiAoIWlzRHVwbGljYXRlIHx8IGFBbGxvd0R1cGxpY2F0ZXMpIHtcbiAgICB0aGlzLl9hcnJheS5wdXNoKGFTdHIpO1xuICB9XG4gIGlmICghaXNEdXBsaWNhdGUpIHtcbiAgICBpZiAoaGFzTmF0aXZlTWFwKSB7XG4gICAgICB0aGlzLl9zZXQuc2V0KGFTdHIsIGlkeCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3NldFtzU3RyXSA9IGlkeDtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogSXMgdGhlIGdpdmVuIHN0cmluZyBhIG1lbWJlciBvZiB0aGlzIHNldD9cbiAqXG4gKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIEFycmF5U2V0X2hhcyhhU3RyKSB7XG4gIGlmIChoYXNOYXRpdmVNYXApIHtcbiAgICByZXR1cm4gdGhpcy5fc2V0LmhhcyhhU3RyKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgc1N0ciA9IHV0aWwudG9TZXRTdHJpbmcoYVN0cik7XG4gICAgcmV0dXJuIGhhcy5jYWxsKHRoaXMuX3NldCwgc1N0cik7XG4gIH1cbn07XG5cbi8qKlxuICogV2hhdCBpcyB0aGUgaW5kZXggb2YgdGhlIGdpdmVuIHN0cmluZyBpbiB0aGUgYXJyYXk/XG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gQXJyYXlTZXRfaW5kZXhPZihhU3RyKSB7XG4gIGlmIChoYXNOYXRpdmVNYXApIHtcbiAgICB2YXIgaWR4ID0gdGhpcy5fc2V0LmdldChhU3RyKTtcbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgcmV0dXJuIGlkeDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNTdHIgPSB1dGlsLnRvU2V0U3RyaW5nKGFTdHIpO1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLl9zZXQsIHNTdHIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2V0W3NTdHJdO1xuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcignXCInICsgYVN0ciArICdcIiBpcyBub3QgaW4gdGhlIHNldC4nKTtcbn07XG5cbi8qKlxuICogV2hhdCBpcyB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXg/XG4gKlxuICogQHBhcmFtIE51bWJlciBhSWR4XG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5hdCA9IGZ1bmN0aW9uIEFycmF5U2V0X2F0KGFJZHgpIHtcbiAgaWYgKGFJZHggPj0gMCAmJiBhSWR4IDwgdGhpcy5fYXJyYXkubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FycmF5W2FJZHhdO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignTm8gZWxlbWVudCBpbmRleGVkIGJ5ICcgKyBhSWR4KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYXJyYXkgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzZXQgKHdoaWNoIGhhcyB0aGUgcHJvcGVyIGluZGljZXNcbiAqIGluZGljYXRlZCBieSBpbmRleE9mKS4gTm90ZSB0aGF0IHRoaXMgaXMgYSBjb3B5IG9mIHRoZSBpbnRlcm5hbCBhcnJheSB1c2VkXG4gKiBmb3Igc3RvcmluZyB0aGUgbWVtYmVycyBzbyB0aGF0IG5vIG9uZSBjYW4gbWVzcyB3aXRoIGludGVybmFsIHN0YXRlLlxuICovXG5BcnJheVNldC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIEFycmF5U2V0X3RvQXJyYXkoKSB7XG4gIHJldHVybiB0aGlzLl9hcnJheS5zbGljZSgpO1xufTtcblxuZXhwb3J0cy5BcnJheVNldCA9IEFycmF5U2V0O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDE0IE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIG1hcHBpbmdCIGlzIGFmdGVyIG1hcHBpbmdBIHdpdGggcmVzcGVjdCB0byBnZW5lcmF0ZWRcbiAqIHBvc2l0aW9uLlxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZWRQb3NpdGlvbkFmdGVyKG1hcHBpbmdBLCBtYXBwaW5nQikge1xuICAvLyBPcHRpbWl6ZWQgZm9yIG1vc3QgY29tbW9uIGNhc2VcbiAgdmFyIGxpbmVBID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZTtcbiAgdmFyIGxpbmVCID0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgdmFyIGNvbHVtbkEgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW47XG4gIHZhciBjb2x1bW5CID0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICByZXR1cm4gbGluZUIgPiBsaW5lQSB8fCBsaW5lQiA9PSBsaW5lQSAmJiBjb2x1bW5CID49IGNvbHVtbkEgfHxcbiAgICAgICAgIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZ0EsIG1hcHBpbmdCKSA8PSAwO1xufVxuXG4vKipcbiAqIEEgZGF0YSBzdHJ1Y3R1cmUgdG8gcHJvdmlkZSBhIHNvcnRlZCB2aWV3IG9mIGFjY3VtdWxhdGVkIG1hcHBpbmdzIGluIGFcbiAqIHBlcmZvcm1hbmNlIGNvbnNjaW91cyBtYW5uZXIuIEl0IHRyYWRlcyBhIG5lZ2xpYmFibGUgb3ZlcmhlYWQgaW4gZ2VuZXJhbFxuICogY2FzZSBmb3IgYSBsYXJnZSBzcGVlZHVwIGluIGNhc2Ugb2YgbWFwcGluZ3MgYmVpbmcgYWRkZWQgaW4gb3JkZXIuXG4gKi9cbmZ1bmN0aW9uIE1hcHBpbmdMaXN0KCkge1xuICB0aGlzLl9hcnJheSA9IFtdO1xuICB0aGlzLl9zb3J0ZWQgPSB0cnVlO1xuICAvLyBTZXJ2ZXMgYXMgaW5maW11bVxuICB0aGlzLl9sYXN0ID0ge2dlbmVyYXRlZExpbmU6IC0xLCBnZW5lcmF0ZWRDb2x1bW46IDB9O1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgdGhyb3VnaCBpbnRlcm5hbCBpdGVtcy4gVGhpcyBtZXRob2QgdGFrZXMgdGhlIHNhbWUgYXJndW1lbnRzIHRoYXRcbiAqIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgdGFrZXMuXG4gKlxuICogTk9URTogVGhlIG9yZGVyIG9mIHRoZSBtYXBwaW5ncyBpcyBOT1QgZ3VhcmFudGVlZC5cbiAqL1xuTWFwcGluZ0xpc3QucHJvdG90eXBlLnVuc29ydGVkRm9yRWFjaCA9XG4gIGZ1bmN0aW9uIE1hcHBpbmdMaXN0X2ZvckVhY2goYUNhbGxiYWNrLCBhVGhpc0FyZykge1xuICAgIHRoaXMuX2FycmF5LmZvckVhY2goYUNhbGxiYWNrLCBhVGhpc0FyZyk7XG4gIH07XG5cbi8qKlxuICogQWRkIHRoZSBnaXZlbiBzb3VyY2UgbWFwcGluZy5cbiAqXG4gKiBAcGFyYW0gT2JqZWN0IGFNYXBwaW5nXG4gKi9cbk1hcHBpbmdMaXN0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBNYXBwaW5nTGlzdF9hZGQoYU1hcHBpbmcpIHtcbiAgaWYgKGdlbmVyYXRlZFBvc2l0aW9uQWZ0ZXIodGhpcy5fbGFzdCwgYU1hcHBpbmcpKSB7XG4gICAgdGhpcy5fbGFzdCA9IGFNYXBwaW5nO1xuICAgIHRoaXMuX2FycmF5LnB1c2goYU1hcHBpbmcpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3NvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2FycmF5LnB1c2goYU1hcHBpbmcpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGZsYXQsIHNvcnRlZCBhcnJheSBvZiBtYXBwaW5ncy4gVGhlIG1hcHBpbmdzIGFyZSBzb3J0ZWQgYnlcbiAqIGdlbmVyYXRlZCBwb3NpdGlvbi5cbiAqXG4gKiBXQVJOSU5HOiBUaGlzIG1ldGhvZCByZXR1cm5zIGludGVybmFsIGRhdGEgd2l0aG91dCBjb3B5aW5nLCBmb3JcbiAqIHBlcmZvcm1hbmNlLiBUaGUgcmV0dXJuIHZhbHVlIG11c3QgTk9UIGJlIG11dGF0ZWQsIGFuZCBzaG91bGQgYmUgdHJlYXRlZCBhc1xuICogYW4gaW1tdXRhYmxlIGJvcnJvdy4gSWYgeW91IHdhbnQgdG8gdGFrZSBvd25lcnNoaXAsIHlvdSBtdXN0IG1ha2UgeW91ciBvd25cbiAqIGNvcHkuXG4gKi9cbk1hcHBpbmdMaXN0LnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gTWFwcGluZ0xpc3RfdG9BcnJheSgpIHtcbiAgaWYgKCF0aGlzLl9zb3J0ZWQpIHtcbiAgICB0aGlzLl9hcnJheS5zb3J0KHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQpO1xuICAgIHRoaXMuX3NvcnRlZCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX2FycmF5O1xufTtcblxuZXhwb3J0cy5NYXBwaW5nTGlzdCA9IE1hcHBpbmdMaXN0O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIGJpbmFyeVNlYXJjaCA9IHJlcXVpcmUoJy4vYmluYXJ5LXNlYXJjaCcpO1xudmFyIEFycmF5U2V0ID0gcmVxdWlyZSgnLi9hcnJheS1zZXQnKS5BcnJheVNldDtcbnZhciBiYXNlNjRWTFEgPSByZXF1aXJlKCcuL2Jhc2U2NC12bHEnKTtcbnZhciBxdWlja1NvcnQgPSByZXF1aXJlKCcuL3F1aWNrLXNvcnQnKS5xdWlja1NvcnQ7XG5cbmZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgdmFyIHNvdXJjZU1hcCA9IGFTb3VyY2VNYXA7XG4gIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICBzb3VyY2VNYXAgPSB1dGlsLnBhcnNlU291cmNlTWFwSW5wdXQoYVNvdXJjZU1hcCk7XG4gIH1cblxuICByZXR1cm4gc291cmNlTWFwLnNlY3Rpb25zICE9IG51bGxcbiAgICA/IG5ldyBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIoc291cmNlTWFwLCBhU291cmNlTWFwVVJMKVxuICAgIDogbmV3IEJhc2ljU291cmNlTWFwQ29uc3VtZXIoc291cmNlTWFwLCBhU291cmNlTWFwVVJMKTtcbn1cblxuU291cmNlTWFwQ29uc3VtZXIuZnJvbVNvdXJjZU1hcCA9IGZ1bmN0aW9uKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgcmV0dXJuIEJhc2ljU291cmNlTWFwQ29uc3VtZXIuZnJvbVNvdXJjZU1hcChhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKTtcbn1cblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcHBpbmcgc3BlYyB0aGF0IHdlIGFyZSBjb25zdW1pbmcuXG4gKi9cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbi8vIGBfX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmQgYF9fb3JpZ2luYWxNYXBwaW5nc2AgYXJlIGFycmF5cyB0aGF0IGhvbGQgdGhlXG4vLyBwYXJzZWQgbWFwcGluZyBjb29yZGluYXRlcyBmcm9tIHRoZSBzb3VyY2UgbWFwJ3MgXCJtYXBwaW5nc1wiIGF0dHJpYnV0ZS4gVGhleVxuLy8gYXJlIGxhemlseSBpbnN0YW50aWF0ZWQsIGFjY2Vzc2VkIHZpYSB0aGUgYF9nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kXG4vLyBgX29yaWdpbmFsTWFwcGluZ3NgIGdldHRlcnMgcmVzcGVjdGl2ZWx5LCBhbmQgd2Ugb25seSBwYXJzZSB0aGUgbWFwcGluZ3Ncbi8vIGFuZCBjcmVhdGUgdGhlc2UgYXJyYXlzIG9uY2UgcXVlcmllZCBmb3IgYSBzb3VyY2UgbG9jYXRpb24uIFdlIGp1bXAgdGhyb3VnaFxuLy8gdGhlc2UgaG9vcHMgYmVjYXVzZSB0aGVyZSBjYW4gYmUgbWFueSB0aG91c2FuZHMgb2YgbWFwcGluZ3MsIGFuZCBwYXJzaW5nXG4vLyB0aGVtIGlzIGV4cGVuc2l2ZSwgc28gd2Ugb25seSB3YW50IHRvIGRvIGl0IGlmIHdlIG11c3QuXG4vL1xuLy8gRWFjaCBvYmplY3QgaW4gdGhlIGFycmF5cyBpcyBvZiB0aGUgZm9ybTpcbi8vXG4vLyAgICAge1xuLy8gICAgICAgZ2VuZXJhdGVkTGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgY29kZSxcbi8vICAgICAgIGdlbmVyYXRlZENvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBjb2RlLFxuLy8gICAgICAgc291cmNlOiBUaGUgcGF0aCB0byB0aGUgb3JpZ2luYWwgc291cmNlIGZpbGUgdGhhdCBnZW5lcmF0ZWQgdGhpc1xuLy8gICAgICAgICAgICAgICBjaHVuayBvZiBjb2RlLFxuLy8gICAgICAgb3JpZ2luYWxMaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSB0aGF0XG4vLyAgICAgICAgICAgICAgICAgICAgIGNvcnJlc3BvbmRzIHRvIHRoaXMgY2h1bmsgb2YgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBvcmlnaW5hbENvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSB0aGF0XG4vLyAgICAgICAgICAgICAgICAgICAgICAgY29ycmVzcG9uZHMgdG8gdGhpcyBjaHVuayBvZiBnZW5lcmF0ZWQgY29kZSxcbi8vICAgICAgIG5hbWU6IFRoZSBuYW1lIG9mIHRoZSBvcmlnaW5hbCBzeW1ib2wgd2hpY2ggZ2VuZXJhdGVkIHRoaXMgY2h1bmsgb2Zcbi8vICAgICAgICAgICAgIGNvZGUuXG4vLyAgICAgfVxuLy9cbi8vIEFsbCBwcm9wZXJ0aWVzIGV4Y2VwdCBmb3IgYGdlbmVyYXRlZExpbmVgIGFuZCBgZ2VuZXJhdGVkQ29sdW1uYCBjYW4gYmVcbi8vIGBudWxsYC5cbi8vXG4vLyBgX2dlbmVyYXRlZE1hcHBpbmdzYCBpcyBvcmRlcmVkIGJ5IHRoZSBnZW5lcmF0ZWQgcG9zaXRpb25zLlxuLy9cbi8vIGBfb3JpZ2luYWxNYXBwaW5nc2AgaXMgb3JkZXJlZCBieSB0aGUgb3JpZ2luYWwgcG9zaXRpb25zLlxuXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IG51bGw7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnX2dlbmVyYXRlZE1hcHBpbmdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzKSB7XG4gICAgICB0aGlzLl9wYXJzZU1hcHBpbmdzKHRoaXMuX21hcHBpbmdzLCB0aGlzLnNvdXJjZVJvb3QpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gIH1cbn0pO1xuXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX19vcmlnaW5hbE1hcHBpbmdzID0gbnVsbDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdfb3JpZ2luYWxNYXBwaW5ncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX19vcmlnaW5hbE1hcHBpbmdzKSB7XG4gICAgICB0aGlzLl9wYXJzZU1hcHBpbmdzKHRoaXMuX21hcHBpbmdzLCB0aGlzLnNvdXJjZVJvb3QpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncztcbiAgfVxufSk7XG5cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fY2hhcklzTWFwcGluZ1NlcGFyYXRvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IoYVN0ciwgaW5kZXgpIHtcbiAgICB2YXIgYyA9IGFTdHIuY2hhckF0KGluZGV4KTtcbiAgICByZXR1cm4gYyA9PT0gXCI7XCIgfHwgYyA9PT0gXCIsXCI7XG4gIH07XG5cbi8qKlxuICogUGFyc2UgdGhlIG1hcHBpbmdzIGluIGEgc3RyaW5nIGluIHRvIGEgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggd2UgY2FuIGVhc2lseVxuICogcXVlcnkgKHRoZSBvcmRlcmVkIGFycmF5cyBpbiB0aGUgYHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kXG4gKiBgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NgIHByb3BlcnRpZXMpLlxuICovXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3BhcnNlTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9wYXJzZU1hcHBpbmdzKGFTdHIsIGFTb3VyY2VSb290KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3ViY2xhc3NlcyBtdXN0IGltcGxlbWVudCBfcGFyc2VNYXBwaW5nc1wiKTtcbiAgfTtcblxuU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSID0gMTtcblNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSID0gMjtcblxuU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQgPSAxO1xuU291cmNlTWFwQ29uc3VtZXIuTEVBU1RfVVBQRVJfQk9VTkQgPSAyO1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBlYWNoIG1hcHBpbmcgYmV0d2VlbiBhbiBvcmlnaW5hbCBzb3VyY2UvbGluZS9jb2x1bW4gYW5kIGFcbiAqIGdlbmVyYXRlZCBsaW5lL2NvbHVtbiBpbiB0aGlzIHNvdXJjZSBtYXAuXG4gKlxuICogQHBhcmFtIEZ1bmN0aW9uIGFDYWxsYmFja1xuICogICAgICAgIFRoZSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aXRoIGVhY2ggbWFwcGluZy5cbiAqIEBwYXJhbSBPYmplY3QgYUNvbnRleHRcbiAqICAgICAgICBPcHRpb25hbC4gSWYgc3BlY2lmaWVkLCB0aGlzIG9iamVjdCB3aWxsIGJlIHRoZSB2YWx1ZSBvZiBgdGhpc2AgZXZlcnlcbiAqICAgICAgICB0aW1lIHRoYXQgYGFDYWxsYmFja2AgaXMgY2FsbGVkLlxuICogQHBhcmFtIGFPcmRlclxuICogICAgICAgIEVpdGhlciBgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSYCBvclxuICogICAgICAgIGBTb3VyY2VNYXBDb25zdW1lci5PUklHSU5BTF9PUkRFUmAuIFNwZWNpZmllcyB3aGV0aGVyIHlvdSB3YW50IHRvXG4gKiAgICAgICAgaXRlcmF0ZSBvdmVyIHRoZSBtYXBwaW5ncyBzb3J0ZWQgYnkgdGhlIGdlbmVyYXRlZCBmaWxlJ3MgbGluZS9jb2x1bW5cbiAqICAgICAgICBvcmRlciBvciB0aGUgb3JpZ2luYWwncyBzb3VyY2UvbGluZS9jb2x1bW4gb3JkZXIsIHJlc3BlY3RpdmVseS4gRGVmYXVsdHMgdG9cbiAqICAgICAgICBgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSYC5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmVhY2hNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZWFjaE1hcHBpbmcoYUNhbGxiYWNrLCBhQ29udGV4dCwgYU9yZGVyKSB7XG4gICAgdmFyIGNvbnRleHQgPSBhQ29udGV4dCB8fCBudWxsO1xuICAgIHZhciBvcmRlciA9IGFPcmRlciB8fCBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVI7XG5cbiAgICB2YXIgbWFwcGluZ3M7XG4gICAgc3dpdGNoIChvcmRlcikge1xuICAgIGNhc2UgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSOlxuICAgICAgbWFwcGluZ3MgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVI6XG4gICAgICBtYXBwaW5ncyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3M7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBvcmRlciBvZiBpdGVyYXRpb24uXCIpO1xuICAgIH1cblxuICAgIHZhciBzb3VyY2VSb290ID0gdGhpcy5zb3VyY2VSb290O1xuICAgIG1hcHBpbmdzLm1hcChmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgdmFyIHNvdXJjZSA9IG1hcHBpbmcuc291cmNlID09PSBudWxsID8gbnVsbCA6IHRoaXMuX3NvdXJjZXMuYXQobWFwcGluZy5zb3VyY2UpO1xuICAgICAgc291cmNlID0gdXRpbC5jb21wdXRlU291cmNlVVJMKHNvdXJjZVJvb3QsIHNvdXJjZSwgdGhpcy5fc291cmNlTWFwVVJMKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICBnZW5lcmF0ZWRMaW5lOiBtYXBwaW5nLmdlbmVyYXRlZExpbmUsXG4gICAgICAgIGdlbmVyYXRlZENvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4sXG4gICAgICAgIG9yaWdpbmFsTGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgIG9yaWdpbmFsQ29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uLFxuICAgICAgICBuYW1lOiBtYXBwaW5nLm5hbWUgPT09IG51bGwgPyBudWxsIDogdGhpcy5fbmFtZXMuYXQobWFwcGluZy5uYW1lKVxuICAgICAgfTtcbiAgICB9LCB0aGlzKS5mb3JFYWNoKGFDYWxsYmFjaywgY29udGV4dCk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyBhbGwgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIG9yaWdpbmFsIHNvdXJjZSxcbiAqIGxpbmUsIGFuZCBjb2x1bW4gcHJvdmlkZWQuIElmIG5vIGNvbHVtbiBpcyBwcm92aWRlZCwgcmV0dXJucyBhbGwgbWFwcGluZ3NcbiAqIGNvcnJlc3BvbmRpbmcgdG8gYSBlaXRoZXIgdGhlIGxpbmUgd2UgYXJlIHNlYXJjaGluZyBmb3Igb3IgdGhlIG5leHRcbiAqIGNsb3Nlc3QgbGluZSB0aGF0IGhhcyBhbnkgbWFwcGluZ3MuIE90aGVyd2lzZSwgcmV0dXJucyBhbGwgbWFwcGluZ3NcbiAqIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIGxpbmUgYW5kIGVpdGhlciB0aGUgY29sdW1uIHdlIGFyZSBzZWFyY2hpbmcgZm9yXG4gKiBvciB0aGUgbmV4dCBjbG9zZXN0IGNvbHVtbiB0aGF0IGhhcyBhbnkgb2Zmc2V0cy5cbiAqXG4gKiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IE9wdGlvbmFsLiB0aGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqXG4gKiBhbmQgYW4gYXJyYXkgb2Ygb2JqZWN0cyBpcyByZXR1cm5lZCwgZWFjaCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gKiAgICBUaGUgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICovXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yKGFBcmdzKSB7XG4gICAgdmFyIGxpbmUgPSB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKTtcblxuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gZXhhY3QgbWF0Y2gsIEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9maW5kTWFwcGluZ1xuICAgIC8vIHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBjbG9zZXN0IG1hcHBpbmcgbGVzcyB0aGFuIHRoZSBuZWVkbGUuIEJ5XG4gICAgLy8gc2V0dGluZyBuZWVkbGUub3JpZ2luYWxDb2x1bW4gdG8gMCwgd2UgdGh1cyBmaW5kIHRoZSBsYXN0IG1hcHBpbmcgZm9yXG4gICAgLy8gdGhlIGdpdmVuIGxpbmUsIHByb3ZpZGVkIHN1Y2ggYSBtYXBwaW5nIGV4aXN0cy5cbiAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgc291cmNlOiB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScpLFxuICAgICAgb3JpZ2luYWxMaW5lOiBsaW5lLFxuICAgICAgb3JpZ2luYWxDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJywgMClcbiAgICB9O1xuXG4gICAgbmVlZGxlLnNvdXJjZSA9IHRoaXMuX2ZpbmRTb3VyY2VJbmRleChuZWVkbGUuc291cmNlKTtcbiAgICBpZiAobmVlZGxlLnNvdXJjZSA8IDApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB2YXIgbWFwcGluZ3MgPSBbXTtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRNYXBwaW5nKG5lZWRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3JpZ2luYWxMaW5lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcmlnaW5hbENvbHVtblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluYXJ5U2VhcmNoLkxFQVNUX1VQUEVSX0JPVU5EKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgaWYgKGFBcmdzLmNvbHVtbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBvcmlnaW5hbExpbmUgPSBtYXBwaW5nLm9yaWdpbmFsTGluZTtcblxuICAgICAgICAvLyBJdGVyYXRlIHVudGlsIGVpdGhlciB3ZSBydW4gb3V0IG9mIG1hcHBpbmdzLCBvciB3ZSBydW4gaW50b1xuICAgICAgICAvLyBhIG1hcHBpbmcgZm9yIGEgZGlmZmVyZW50IGxpbmUgdGhhbiB0aGUgb25lIHdlIGZvdW5kLiBTaW5jZVxuICAgICAgICAvLyBtYXBwaW5ncyBhcmUgc29ydGVkLCB0aGlzIGlzIGd1YXJhbnRlZWQgdG8gZmluZCBhbGwgbWFwcGluZ3MgZm9yXG4gICAgICAgIC8vIHRoZSBsaW5lIHdlIGZvdW5kLlxuICAgICAgICB3aGlsZSAobWFwcGluZyAmJiBtYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gb3JpZ2luYWxMaW5lKSB7XG4gICAgICAgICAgbWFwcGluZ3MucHVzaCh7XG4gICAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkTGluZScsIG51bGwpLFxuICAgICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgICBsYXN0Q29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbGFzdEdlbmVyYXRlZENvbHVtbicsIG51bGwpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1srK2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsQ29sdW1uID0gbWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICAvLyBJdGVyYXRlIHVudGlsIGVpdGhlciB3ZSBydW4gb3V0IG9mIG1hcHBpbmdzLCBvciB3ZSBydW4gaW50b1xuICAgICAgICAvLyBhIG1hcHBpbmcgZm9yIGEgZGlmZmVyZW50IGxpbmUgdGhhbiB0aGUgb25lIHdlIHdlcmUgc2VhcmNoaW5nIGZvci5cbiAgICAgICAgLy8gU2luY2UgbWFwcGluZ3MgYXJlIHNvcnRlZCwgdGhpcyBpcyBndWFyYW50ZWVkIHRvIGZpbmQgYWxsIG1hcHBpbmdzIGZvclxuICAgICAgICAvLyB0aGUgbGluZSB3ZSBhcmUgc2VhcmNoaW5nIGZvci5cbiAgICAgICAgd2hpbGUgKG1hcHBpbmcgJiZcbiAgICAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lID09PSBsaW5lICYmXG4gICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uID09IG9yaWdpbmFsQ29sdW1uKSB7XG4gICAgICAgICAgbWFwcGluZ3MucHVzaCh7XG4gICAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkTGluZScsIG51bGwpLFxuICAgICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgICBsYXN0Q29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbGFzdEdlbmVyYXRlZENvbHVtbicsIG51bGwpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1srK2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXBwaW5ncztcbiAgfTtcblxuZXhwb3J0cy5Tb3VyY2VNYXBDb25zdW1lciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIEEgQmFzaWNTb3VyY2VNYXBDb25zdW1lciBpbnN0YW5jZSByZXByZXNlbnRzIGEgcGFyc2VkIHNvdXJjZSBtYXAgd2hpY2ggd2UgY2FuXG4gKiBxdWVyeSBmb3IgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9yaWdpbmFsIGZpbGUgcG9zaXRpb25zIGJ5IGdpdmluZyBpdCBhIGZpbGVcbiAqIHBvc2l0aW9uIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLlxuICpcbiAqIFRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgdGhlIHJhdyBzb3VyY2UgbWFwIChlaXRoZXIgYXMgYSBKU09OIHN0cmluZywgb3JcbiAqIGFscmVhZHkgcGFyc2VkIHRvIGFuIG9iamVjdCkuIEFjY29yZGluZyB0byB0aGUgc3BlYywgc291cmNlIG1hcHMgaGF2ZSB0aGVcbiAqIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICpcbiAqICAgLSB2ZXJzaW9uOiBXaGljaCB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwIHNwZWMgdGhpcyBtYXAgaXMgZm9sbG93aW5nLlxuICogICAtIHNvdXJjZXM6IEFuIGFycmF5IG9mIFVSTHMgdG8gdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlcy5cbiAqICAgLSBuYW1lczogQW4gYXJyYXkgb2YgaWRlbnRpZmllcnMgd2hpY2ggY2FuIGJlIHJlZmVycmVuY2VkIGJ5IGluZGl2aWR1YWwgbWFwcGluZ3MuXG4gKiAgIC0gc291cmNlUm9vdDogT3B0aW9uYWwuIFRoZSBVUkwgcm9vdCBmcm9tIHdoaWNoIGFsbCBzb3VyY2VzIGFyZSByZWxhdGl2ZS5cbiAqICAgLSBzb3VyY2VzQ29udGVudDogT3B0aW9uYWwuIEFuIGFycmF5IG9mIGNvbnRlbnRzIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZXMuXG4gKiAgIC0gbWFwcGluZ3M6IEEgc3RyaW5nIG9mIGJhc2U2NCBWTFFzIHdoaWNoIGNvbnRhaW4gdGhlIGFjdHVhbCBtYXBwaW5ncy5cbiAqICAgLSBmaWxlOiBPcHRpb25hbC4gVGhlIGdlbmVyYXRlZCBmaWxlIHRoaXMgc291cmNlIG1hcCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gKlxuICogSGVyZSBpcyBhbiBleGFtcGxlIHNvdXJjZSBtYXAsIHRha2VuIGZyb20gdGhlIHNvdXJjZSBtYXAgc3BlY1swXTpcbiAqXG4gKiAgICAge1xuICogICAgICAgdmVyc2lvbiA6IDMsXG4gKiAgICAgICBmaWxlOiBcIm91dC5qc1wiLFxuICogICAgICAgc291cmNlUm9vdCA6IFwiXCIsXG4gKiAgICAgICBzb3VyY2VzOiBbXCJmb28uanNcIiwgXCJiYXIuanNcIl0sXG4gKiAgICAgICBuYW1lczogW1wic3JjXCIsIFwibWFwc1wiLCBcImFyZVwiLCBcImZ1blwiXSxcbiAqICAgICAgIG1hcHBpbmdzOiBcIkFBLEFCOztBQkNERTtcIlxuICogICAgIH1cbiAqXG4gKiBUaGUgc2Vjb25kIHBhcmFtZXRlciwgaWYgZ2l2ZW4sIGlzIGEgc3RyaW5nIHdob3NlIHZhbHVlIGlzIHRoZSBVUkxcbiAqIGF0IHdoaWNoIHRoZSBzb3VyY2UgbWFwIHdhcyBmb3VuZC4gIFRoaXMgVVJMIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGVcbiAqIHNvdXJjZXMgYXJyYXkuXG4gKlxuICogWzBdOiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzFVMVJHQWVoUXdSeXBVVG92RjFLUmxwaU9GemUwYi1fMmdjNmZBSDBLWTBrL2VkaXQ/cGxpPTEjXG4gKi9cbmZ1bmN0aW9uIEJhc2ljU291cmNlTWFwQ29uc3VtZXIoYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCkge1xuICB2YXIgc291cmNlTWFwID0gYVNvdXJjZU1hcDtcbiAgaWYgKHR5cGVvZiBhU291cmNlTWFwID09PSAnc3RyaW5nJykge1xuICAgIHNvdXJjZU1hcCA9IHV0aWwucGFyc2VTb3VyY2VNYXBJbnB1dChhU291cmNlTWFwKTtcbiAgfVxuXG4gIHZhciB2ZXJzaW9uID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAndmVyc2lvbicpO1xuICB2YXIgc291cmNlcyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NvdXJjZXMnKTtcbiAgLy8gU2FzcyAzLjMgbGVhdmVzIG91dCB0aGUgJ25hbWVzJyBhcnJheSwgc28gd2UgZGV2aWF0ZSBmcm9tIHRoZSBzcGVjICh3aGljaFxuICAvLyByZXF1aXJlcyB0aGUgYXJyYXkpIHRvIHBsYXkgbmljZSBoZXJlLlxuICB2YXIgbmFtZXMgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICduYW1lcycsIFtdKTtcbiAgdmFyIHNvdXJjZVJvb3QgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VSb290JywgbnVsbCk7XG4gIHZhciBzb3VyY2VzQ29udGVudCA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NvdXJjZXNDb250ZW50JywgbnVsbCk7XG4gIHZhciBtYXBwaW5ncyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ21hcHBpbmdzJyk7XG4gIHZhciBmaWxlID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnZmlsZScsIG51bGwpO1xuXG4gIC8vIE9uY2UgYWdhaW4sIFNhc3MgZGV2aWF0ZXMgZnJvbSB0aGUgc3BlYyBhbmQgc3VwcGxpZXMgdGhlIHZlcnNpb24gYXMgYVxuICAvLyBzdHJpbmcgcmF0aGVyIHRoYW4gYSBudW1iZXIsIHNvIHdlIHVzZSBsb29zZSBlcXVhbGl0eSBjaGVja2luZyBoZXJlLlxuICBpZiAodmVyc2lvbiAhPSB0aGlzLl92ZXJzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB2ZXJzaW9uOiAnICsgdmVyc2lvbik7XG4gIH1cblxuICBpZiAoc291cmNlUm9vdCkge1xuICAgIHNvdXJjZVJvb3QgPSB1dGlsLm5vcm1hbGl6ZShzb3VyY2VSb290KTtcbiAgfVxuXG4gIHNvdXJjZXMgPSBzb3VyY2VzXG4gICAgLm1hcChTdHJpbmcpXG4gICAgLy8gU29tZSBzb3VyY2UgbWFwcyBwcm9kdWNlIHJlbGF0aXZlIHNvdXJjZSBwYXRocyBsaWtlIFwiLi9mb28uanNcIiBpbnN0ZWFkIG9mXG4gICAgLy8gXCJmb28uanNcIi4gIE5vcm1hbGl6ZSB0aGVzZSBmaXJzdCBzbyB0aGF0IGZ1dHVyZSBjb21wYXJpc29ucyB3aWxsIHN1Y2NlZWQuXG4gICAgLy8gU2VlIGJ1Z3ppbC5sYS8xMDkwNzY4LlxuICAgIC5tYXAodXRpbC5ub3JtYWxpemUpXG4gICAgLy8gQWx3YXlzIGVuc3VyZSB0aGF0IGFic29sdXRlIHNvdXJjZXMgYXJlIGludGVybmFsbHkgc3RvcmVkIHJlbGF0aXZlIHRvXG4gICAgLy8gdGhlIHNvdXJjZSByb290LCBpZiB0aGUgc291cmNlIHJvb3QgaXMgYWJzb2x1dGUuIE5vdCBkb2luZyB0aGlzIHdvdWxkXG4gICAgLy8gYmUgcGFydGljdWxhcmx5IHByb2JsZW1hdGljIHdoZW4gdGhlIHNvdXJjZSByb290IGlzIGEgcHJlZml4IG9mIHRoZVxuICAgIC8vIHNvdXJjZSAodmFsaWQsIGJ1dCB3aHk/PykuIFNlZSBnaXRodWIgaXNzdWUgIzE5OSBhbmQgYnVnemlsLmxhLzExODg5ODIuXG4gICAgLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gc291cmNlUm9vdCAmJiB1dGlsLmlzQWJzb2x1dGUoc291cmNlUm9vdCkgJiYgdXRpbC5pc0Fic29sdXRlKHNvdXJjZSlcbiAgICAgICAgPyB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZSlcbiAgICAgICAgOiBzb3VyY2U7XG4gICAgfSk7XG5cbiAgLy8gUGFzcyBgdHJ1ZWAgYmVsb3cgdG8gYWxsb3cgZHVwbGljYXRlIG5hbWVzIGFuZCBzb3VyY2VzLiBXaGlsZSBzb3VyY2UgbWFwc1xuICAvLyBhcmUgaW50ZW5kZWQgdG8gYmUgY29tcHJlc3NlZCBhbmQgZGVkdXBsaWNhdGVkLCB0aGUgVHlwZVNjcmlwdCBjb21waWxlclxuICAvLyBzb21ldGltZXMgZ2VuZXJhdGVzIHNvdXJjZSBtYXBzIHdpdGggZHVwbGljYXRlcyBpbiB0aGVtLiBTZWUgR2l0aHViIGlzc3VlXG4gIC8vICM3MiBhbmQgYnVnemlsLmxhLzg4OTQ5Mi5cbiAgdGhpcy5fbmFtZXMgPSBBcnJheVNldC5mcm9tQXJyYXkobmFtZXMubWFwKFN0cmluZyksIHRydWUpO1xuICB0aGlzLl9zb3VyY2VzID0gQXJyYXlTZXQuZnJvbUFycmF5KHNvdXJjZXMsIHRydWUpO1xuXG4gIHRoaXMuX2Fic29sdXRlU291cmNlcyA9IHRoaXMuX3NvdXJjZXMudG9BcnJheSgpLm1hcChmdW5jdGlvbiAocykge1xuICAgIHJldHVybiB1dGlsLmNvbXB1dGVTb3VyY2VVUkwoc291cmNlUm9vdCwgcywgYVNvdXJjZU1hcFVSTCk7XG4gIH0pO1xuXG4gIHRoaXMuc291cmNlUm9vdCA9IHNvdXJjZVJvb3Q7XG4gIHRoaXMuc291cmNlc0NvbnRlbnQgPSBzb3VyY2VzQ29udGVudDtcbiAgdGhpcy5fbWFwcGluZ3MgPSBtYXBwaW5ncztcbiAgdGhpcy5fc291cmNlTWFwVVJMID0gYVNvdXJjZU1hcFVSTDtcbiAgdGhpcy5maWxlID0gZmlsZTtcbn1cblxuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSk7XG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb25zdW1lciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gZmluZCB0aGUgaW5kZXggb2YgYSBzb3VyY2UuICBSZXR1cm5zIC0xIGlmIG5vdFxuICogZm91bmQuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9maW5kU291cmNlSW5kZXggPSBmdW5jdGlvbihhU291cmNlKSB7XG4gIHZhciByZWxhdGl2ZVNvdXJjZSA9IGFTb3VyY2U7XG4gIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgIHJlbGF0aXZlU291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLnNvdXJjZVJvb3QsIHJlbGF0aXZlU291cmNlKTtcbiAgfVxuXG4gIGlmICh0aGlzLl9zb3VyY2VzLmhhcyhyZWxhdGl2ZVNvdXJjZSkpIHtcbiAgICByZXR1cm4gdGhpcy5fc291cmNlcy5pbmRleE9mKHJlbGF0aXZlU291cmNlKTtcbiAgfVxuXG4gIC8vIE1heWJlIGFTb3VyY2UgaXMgYW4gYWJzb2x1dGUgVVJMIGFzIHJldHVybmVkIGJ5IHxzb3VyY2VzfC4gIEluXG4gIC8vIHRoaXMgY2FzZSB3ZSBjYW4ndCBzaW1wbHkgdW5kbyB0aGUgdHJhbnNmb3JtLlxuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuX2Fic29sdXRlU291cmNlcy5sZW5ndGg7ICsraSkge1xuICAgIGlmICh0aGlzLl9hYnNvbHV0ZVNvdXJjZXNbaV0gPT0gYVNvdXJjZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyIGZyb20gYSBTb3VyY2VNYXBHZW5lcmF0b3IuXG4gKlxuICogQHBhcmFtIFNvdXJjZU1hcEdlbmVyYXRvciBhU291cmNlTWFwXG4gKiAgICAgICAgVGhlIHNvdXJjZSBtYXAgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuICogQHBhcmFtIFN0cmluZyBhU291cmNlTWFwVVJMXG4gKiAgICAgICAgVGhlIFVSTCBhdCB3aGljaCB0aGUgc291cmNlIG1hcCBjYW4gYmUgZm91bmQgKG9wdGlvbmFsKVxuICogQHJldHVybnMgQmFzaWNTb3VyY2VNYXBDb25zdW1lclxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9mcm9tU291cmNlTWFwKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgICB2YXIgc21jID0gT2JqZWN0LmNyZWF0ZShCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSk7XG5cbiAgICB2YXIgbmFtZXMgPSBzbWMuX25hbWVzID0gQXJyYXlTZXQuZnJvbUFycmF5KGFTb3VyY2VNYXAuX25hbWVzLnRvQXJyYXkoKSwgdHJ1ZSk7XG4gICAgdmFyIHNvdXJjZXMgPSBzbWMuX3NvdXJjZXMgPSBBcnJheVNldC5mcm9tQXJyYXkoYVNvdXJjZU1hcC5fc291cmNlcy50b0FycmF5KCksIHRydWUpO1xuICAgIHNtYy5zb3VyY2VSb290ID0gYVNvdXJjZU1hcC5fc291cmNlUm9vdDtcbiAgICBzbWMuc291cmNlc0NvbnRlbnQgPSBhU291cmNlTWFwLl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50KHNtYy5fc291cmNlcy50b0FycmF5KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbWMuc291cmNlUm9vdCk7XG4gICAgc21jLmZpbGUgPSBhU291cmNlTWFwLl9maWxlO1xuICAgIHNtYy5fc291cmNlTWFwVVJMID0gYVNvdXJjZU1hcFVSTDtcbiAgICBzbWMuX2Fic29sdXRlU291cmNlcyA9IHNtYy5fc291cmNlcy50b0FycmF5KCkubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICByZXR1cm4gdXRpbC5jb21wdXRlU291cmNlVVJMKHNtYy5zb3VyY2VSb290LCBzLCBhU291cmNlTWFwVVJMKTtcbiAgICB9KTtcblxuICAgIC8vIEJlY2F1c2Ugd2UgYXJlIG1vZGlmeWluZyB0aGUgZW50cmllcyAoYnkgY29udmVydGluZyBzdHJpbmcgc291cmNlcyBhbmRcbiAgICAvLyBuYW1lcyB0byBpbmRpY2VzIGludG8gdGhlIHNvdXJjZXMgYW5kIG5hbWVzIEFycmF5U2V0cyksIHdlIGhhdmUgdG8gbWFrZVxuICAgIC8vIGEgY29weSBvZiB0aGUgZW50cnkgb3IgZWxzZSBiYWQgdGhpbmdzIGhhcHBlbi4gU2hhcmVkIG11dGFibGUgc3RhdGVcbiAgICAvLyBzdHJpa2VzIGFnYWluISBTZWUgZ2l0aHViIGlzc3VlICMxOTEuXG5cbiAgICB2YXIgZ2VuZXJhdGVkTWFwcGluZ3MgPSBhU291cmNlTWFwLl9tYXBwaW5ncy50b0FycmF5KCkuc2xpY2UoKTtcbiAgICB2YXIgZGVzdEdlbmVyYXRlZE1hcHBpbmdzID0gc21jLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBbXTtcbiAgICB2YXIgZGVzdE9yaWdpbmFsTWFwcGluZ3MgPSBzbWMuX19vcmlnaW5hbE1hcHBpbmdzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2VuZXJhdGVkTWFwcGluZ3MubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzcmNNYXBwaW5nID0gZ2VuZXJhdGVkTWFwcGluZ3NbaV07XG4gICAgICB2YXIgZGVzdE1hcHBpbmcgPSBuZXcgTWFwcGluZztcbiAgICAgIGRlc3RNYXBwaW5nLmdlbmVyYXRlZExpbmUgPSBzcmNNYXBwaW5nLmdlbmVyYXRlZExpbmU7XG4gICAgICBkZXN0TWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gPSBzcmNNYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcblxuICAgICAgaWYgKHNyY01hcHBpbmcuc291cmNlKSB7XG4gICAgICAgIGRlc3RNYXBwaW5nLnNvdXJjZSA9IHNvdXJjZXMuaW5kZXhPZihzcmNNYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgIGRlc3RNYXBwaW5nLm9yaWdpbmFsTGluZSA9IHNyY01hcHBpbmcub3JpZ2luYWxMaW5lO1xuICAgICAgICBkZXN0TWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IHNyY01hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgaWYgKHNyY01hcHBpbmcubmFtZSkge1xuICAgICAgICAgIGRlc3RNYXBwaW5nLm5hbWUgPSBuYW1lcy5pbmRleE9mKHNyY01hcHBpbmcubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBkZXN0T3JpZ2luYWxNYXBwaW5ncy5wdXNoKGRlc3RNYXBwaW5nKTtcbiAgICAgIH1cblxuICAgICAgZGVzdEdlbmVyYXRlZE1hcHBpbmdzLnB1c2goZGVzdE1hcHBpbmcpO1xuICAgIH1cblxuICAgIHF1aWNrU29ydChzbWMuX19vcmlnaW5hbE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKTtcblxuICAgIHJldHVybiBzbWM7XG4gIH07XG5cbi8qKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXBwaW5nIHNwZWMgdGhhdCB3ZSBhcmUgY29uc3VtaW5nLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbi8qKlxuICogVGhlIGxpc3Qgb2Ygb3JpZ2luYWwgc291cmNlcy5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnc291cmNlcycsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Fic29sdXRlU291cmNlcy5zbGljZSgpO1xuICB9XG59KTtcblxuLyoqXG4gKiBQcm92aWRlIHRoZSBKSVQgd2l0aCBhIG5pY2Ugc2hhcGUgLyBoaWRkZW4gY2xhc3MuXG4gKi9cbmZ1bmN0aW9uIE1hcHBpbmcoKSB7XG4gIHRoaXMuZ2VuZXJhdGVkTGluZSA9IDA7XG4gIHRoaXMuZ2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICB0aGlzLm9yaWdpbmFsTGluZSA9IG51bGw7XG4gIHRoaXMub3JpZ2luYWxDb2x1bW4gPSBudWxsO1xuICB0aGlzLm5hbWUgPSBudWxsO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSBtYXBwaW5ncyBpbiBhIHN0cmluZyBpbiB0byBhIGRhdGEgc3RydWN0dXJlIHdoaWNoIHdlIGNhbiBlYXNpbHlcbiAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICogYHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzYCBwcm9wZXJ0aWVzKS5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3BhcnNlTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9wYXJzZU1hcHBpbmdzKGFTdHIsIGFTb3VyY2VSb290KSB7XG4gICAgdmFyIGdlbmVyYXRlZExpbmUgPSAxO1xuICAgIHZhciBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgdmFyIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gMDtcbiAgICB2YXIgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IDA7XG4gICAgdmFyIHByZXZpb3VzU291cmNlID0gMDtcbiAgICB2YXIgcHJldmlvdXNOYW1lID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYVN0ci5sZW5ndGg7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY2FjaGVkU2VnbWVudHMgPSB7fTtcbiAgICB2YXIgdGVtcCA9IHt9O1xuICAgIHZhciBvcmlnaW5hbE1hcHBpbmdzID0gW107XG4gICAgdmFyIGdlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgdmFyIG1hcHBpbmcsIHN0ciwgc2VnbWVudCwgZW5kLCB2YWx1ZTtcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFTdHIuY2hhckF0KGluZGV4KSA9PT0gJzsnKSB7XG4gICAgICAgIGdlbmVyYXRlZExpbmUrKztcbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoYVN0ci5jaGFyQXQoaW5kZXgpID09PSAnLCcpIHtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBtYXBwaW5nID0gbmV3IE1hcHBpbmcoKTtcbiAgICAgICAgbWFwcGluZy5nZW5lcmF0ZWRMaW5lID0gZ2VuZXJhdGVkTGluZTtcblxuICAgICAgICAvLyBCZWNhdXNlIGVhY2ggb2Zmc2V0IGlzIGVuY29kZWQgcmVsYXRpdmUgdG8gdGhlIHByZXZpb3VzIG9uZSxcbiAgICAgICAgLy8gbWFueSBzZWdtZW50cyBvZnRlbiBoYXZlIHRoZSBzYW1lIGVuY29kaW5nLiBXZSBjYW4gZXhwbG9pdCB0aGlzXG4gICAgICAgIC8vIGZhY3QgYnkgY2FjaGluZyB0aGUgcGFyc2VkIHZhcmlhYmxlIGxlbmd0aCBmaWVsZHMgb2YgZWFjaCBzZWdtZW50LFxuICAgICAgICAvLyBhbGxvd2luZyB1cyB0byBhdm9pZCBhIHNlY29uZCBwYXJzZSBpZiB3ZSBlbmNvdW50ZXIgdGhlIHNhbWVcbiAgICAgICAgLy8gc2VnbWVudCBhZ2Fpbi5cbiAgICAgICAgZm9yIChlbmQgPSBpbmRleDsgZW5kIDwgbGVuZ3RoOyBlbmQrKykge1xuICAgICAgICAgIGlmICh0aGlzLl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yKGFTdHIsIGVuZCkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdHIgPSBhU3RyLnNsaWNlKGluZGV4LCBlbmQpO1xuXG4gICAgICAgIHNlZ21lbnQgPSBjYWNoZWRTZWdtZW50c1tzdHJdO1xuICAgICAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICAgIGluZGV4ICs9IHN0ci5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VnbWVudCA9IFtdO1xuICAgICAgICAgIHdoaWxlIChpbmRleCA8IGVuZCkge1xuICAgICAgICAgICAgYmFzZTY0VkxRLmRlY29kZShhU3RyLCBpbmRleCwgdGVtcCk7XG4gICAgICAgICAgICB2YWx1ZSA9IHRlbXAudmFsdWU7XG4gICAgICAgICAgICBpbmRleCA9IHRlbXAucmVzdDtcbiAgICAgICAgICAgIHNlZ21lbnQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIGEgc291cmNlLCBidXQgbm8gbGluZSBhbmQgY29sdW1uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIGEgc291cmNlIGFuZCBsaW5lLCBidXQgbm8gY29sdW1uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2FjaGVkU2VnbWVudHNbc3RyXSA9IHNlZ21lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZW5lcmF0ZWQgY29sdW1uLlxuICAgICAgICBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiA9IHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uICsgc2VnbWVudFswXTtcbiAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcblxuICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgLy8gT3JpZ2luYWwgc291cmNlLlxuICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gcHJldmlvdXNTb3VyY2UgKyBzZWdtZW50WzFdO1xuICAgICAgICAgIHByZXZpb3VzU291cmNlICs9IHNlZ21lbnRbMV07XG5cbiAgICAgICAgICAvLyBPcmlnaW5hbCBsaW5lLlxuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lID0gcHJldmlvdXNPcmlnaW5hbExpbmUgKyBzZWdtZW50WzJdO1xuICAgICAgICAgIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gbWFwcGluZy5vcmlnaW5hbExpbmU7XG4gICAgICAgICAgLy8gTGluZXMgYXJlIHN0b3JlZCAwLWJhc2VkXG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgKz0gMTtcblxuICAgICAgICAgIC8vIE9yaWdpbmFsIGNvbHVtbi5cbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uID0gcHJldmlvdXNPcmlnaW5hbENvbHVtbiArIHNlZ21lbnRbM107XG4gICAgICAgICAgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IG1hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPiA0KSB7XG4gICAgICAgICAgICAvLyBPcmlnaW5hbCBuYW1lLlxuICAgICAgICAgICAgbWFwcGluZy5uYW1lID0gcHJldmlvdXNOYW1lICsgc2VnbWVudFs0XTtcbiAgICAgICAgICAgIHByZXZpb3VzTmFtZSArPSBzZWdtZW50WzRdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGdlbmVyYXRlZE1hcHBpbmdzLnB1c2gobWFwcGluZyk7XG4gICAgICAgIGlmICh0eXBlb2YgbWFwcGluZy5vcmlnaW5hbExpbmUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgb3JpZ2luYWxNYXBwaW5ncy5wdXNoKG1hcHBpbmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcXVpY2tTb3J0KGdlbmVyYXRlZE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkKTtcbiAgICB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBnZW5lcmF0ZWRNYXBwaW5ncztcblxuICAgIHF1aWNrU29ydChvcmlnaW5hbE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKTtcbiAgICB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncyA9IG9yaWdpbmFsTWFwcGluZ3M7XG4gIH07XG5cbi8qKlxuICogRmluZCB0aGUgbWFwcGluZyB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgaHlwb3RoZXRpY2FsIFwibmVlZGxlXCIgbWFwcGluZyB0aGF0XG4gKiB3ZSBhcmUgc2VhcmNoaW5nIGZvciBpbiB0aGUgZ2l2ZW4gXCJoYXlzdGFja1wiIG9mIG1hcHBpbmdzLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fZmluZE1hcHBpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9maW5kTWFwcGluZyhhTmVlZGxlLCBhTWFwcGluZ3MsIGFMaW5lTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYUNvbHVtbk5hbWUsIGFDb21wYXJhdG9yLCBhQmlhcykge1xuICAgIC8vIFRvIHJldHVybiB0aGUgcG9zaXRpb24gd2UgYXJlIHNlYXJjaGluZyBmb3IsIHdlIG11c3QgZmlyc3QgZmluZCB0aGVcbiAgICAvLyBtYXBwaW5nIGZvciB0aGUgZ2l2ZW4gcG9zaXRpb24gYW5kIHRoZW4gcmV0dXJuIHRoZSBvcHBvc2l0ZSBwb3NpdGlvbiBpdFxuICAgIC8vIHBvaW50cyB0by4gQmVjYXVzZSB0aGUgbWFwcGluZ3MgYXJlIHNvcnRlZCwgd2UgY2FuIHVzZSBiaW5hcnkgc2VhcmNoIHRvXG4gICAgLy8gZmluZCB0aGUgYmVzdCBtYXBwaW5nLlxuXG4gICAgaWYgKGFOZWVkbGVbYUxpbmVOYW1lXSA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdMaW5lIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDEsIGdvdCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICsgYU5lZWRsZVthTGluZU5hbWVdKTtcbiAgICB9XG4gICAgaWYgKGFOZWVkbGVbYUNvbHVtbk5hbWVdIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29sdW1uIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDAsIGdvdCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICsgYU5lZWRsZVthQ29sdW1uTmFtZV0pO1xuICAgIH1cblxuICAgIHJldHVybiBiaW5hcnlTZWFyY2guc2VhcmNoKGFOZWVkbGUsIGFNYXBwaW5ncywgYUNvbXBhcmF0b3IsIGFCaWFzKTtcbiAgfTtcblxuLyoqXG4gKiBDb21wdXRlIHRoZSBsYXN0IGNvbHVtbiBmb3IgZWFjaCBnZW5lcmF0ZWQgbWFwcGluZy4gVGhlIGxhc3QgY29sdW1uIGlzXG4gKiBpbmNsdXNpdmUuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmNvbXB1dGVDb2x1bW5TcGFucyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2NvbXB1dGVDb2x1bW5TcGFucygpIHtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3MubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgLy8gTWFwcGluZ3MgZG8gbm90IGNvbnRhaW4gYSBmaWVsZCBmb3IgdGhlIGxhc3QgZ2VuZXJhdGVkIGNvbHVtbnQuIFdlXG4gICAgICAvLyBjYW4gY29tZSB1cCB3aXRoIGFuIG9wdGltaXN0aWMgZXN0aW1hdGUsIGhvd2V2ZXIsIGJ5IGFzc3VtaW5nIHRoYXRcbiAgICAgIC8vIG1hcHBpbmdzIGFyZSBjb250aWd1b3VzIChpLmUuIGdpdmVuIHR3byBjb25zZWN1dGl2ZSBtYXBwaW5ncywgdGhlXG4gICAgICAvLyBmaXJzdCBtYXBwaW5nIGVuZHMgd2hlcmUgdGhlIHNlY29uZCBvbmUgc3RhcnRzKS5cbiAgICAgIGlmIChpbmRleCArIDEgPCB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIG5leHRNYXBwaW5nID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3NbaW5kZXggKyAxXTtcblxuICAgICAgICBpZiAobWFwcGluZy5nZW5lcmF0ZWRMaW5lID09PSBuZXh0TWFwcGluZy5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgbWFwcGluZy5sYXN0R2VuZXJhdGVkQ29sdW1uID0gbmV4dE1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uIC0gMTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgbGFzdCBtYXBwaW5nIGZvciBlYWNoIGxpbmUgc3BhbnMgdGhlIGVudGlyZSBsaW5lLlxuICAgICAgbWFwcGluZy5sYXN0R2VuZXJhdGVkQ29sdW1uID0gSW5maW5pdHk7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSwgbGluZSwgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGdlbmVyYXRlZFxuICogc291cmNlJ3MgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0XG4gKiB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLiAgVGhlIGxpbmUgbnVtYmVyXG4gKiAgICAgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLiAgVGhlIGNvbHVtblxuICogICAgIG51bWJlciBpcyAwLWJhc2VkLlxuICogICAtIGJpYXM6IEVpdGhlciAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ1NvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqICAgICBEZWZhdWx0cyB0byAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICpcbiAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlLCBvciBudWxsLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKiAgIC0gbmFtZTogVGhlIG9yaWdpbmFsIGlkZW50aWZpZXIsIG9yIG51bGwuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLm9yaWdpbmFsUG9zaXRpb25Gb3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9vcmlnaW5hbFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgIGdlbmVyYXRlZExpbmU6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpLFxuICAgICAgZ2VuZXJhdGVkQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicpXG4gICAgfTtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRNYXBwaW5nKFxuICAgICAgbmVlZGxlLFxuICAgICAgdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3MsXG4gICAgICBcImdlbmVyYXRlZExpbmVcIixcbiAgICAgIFwiZ2VuZXJhdGVkQ29sdW1uXCIsXG4gICAgICB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkLFxuICAgICAgdXRpbC5nZXRBcmcoYUFyZ3MsICdiaWFzJywgU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQpXG4gICAgKTtcblxuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgaWYgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9PT0gbmVlZGxlLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdzb3VyY2UnLCBudWxsKTtcbiAgICAgICAgaWYgKHNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHNvdXJjZSA9IHRoaXMuX3NvdXJjZXMuYXQoc291cmNlKTtcbiAgICAgICAgICBzb3VyY2UgPSB1dGlsLmNvbXB1dGVTb3VyY2VVUkwodGhpcy5zb3VyY2VSb290LCBzb3VyY2UsIHRoaXMuX3NvdXJjZU1hcFVSTCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5hbWUgPSB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbmFtZScsIG51bGwpO1xuICAgICAgICBpZiAobmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgIG5hbWUgPSB0aGlzLl9uYW1lcy5hdChuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdvcmlnaW5hbExpbmUnLCBudWxsKSxcbiAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdvcmlnaW5hbENvbHVtbicsIG51bGwpLFxuICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc291cmNlOiBudWxsLFxuICAgICAgbGluZTogbnVsbCxcbiAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgIG5hbWU6IG51bGxcbiAgICB9O1xuICB9O1xuXG4vKipcbiAqIFJldHVybiB0cnVlIGlmIHdlIGhhdmUgdGhlIHNvdXJjZSBjb250ZW50IGZvciBldmVyeSBzb3VyY2UgaW4gdGhlIHNvdXJjZVxuICogbWFwLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzID1cbiAgZnVuY3Rpb24gQmFzaWNTb3VyY2VNYXBDb25zdW1lcl9oYXNDb250ZW50c09mQWxsU291cmNlcygpIHtcbiAgICBpZiAoIXRoaXMuc291cmNlc0NvbnRlbnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnQubGVuZ3RoID49IHRoaXMuX3NvdXJjZXMuc2l6ZSgpICYmXG4gICAgICAhdGhpcy5zb3VyY2VzQ29udGVudC5zb21lKGZ1bmN0aW9uIChzYykgeyByZXR1cm4gc2MgPT0gbnVsbDsgfSk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlIGNvbnRlbnQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIHRoZSB1cmwgb2YgdGhlXG4gKiBvcmlnaW5hbCBzb3VyY2UgZmlsZS4gUmV0dXJucyBudWxsIGlmIG5vIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50IGlzXG4gKiBhdmFpbGFibGUuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLnNvdXJjZUNvbnRlbnRGb3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9zb3VyY2VDb250ZW50Rm9yKGFTb3VyY2UsIG51bGxPbk1pc3NpbmcpIHtcbiAgICBpZiAoIXRoaXMuc291cmNlc0NvbnRlbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRTb3VyY2VJbmRleChhU291cmNlKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnRbaW5kZXhdO1xuICAgIH1cblxuICAgIHZhciByZWxhdGl2ZVNvdXJjZSA9IGFTb3VyY2U7XG4gICAgaWYgKHRoaXMuc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICByZWxhdGl2ZVNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5zb3VyY2VSb290LCByZWxhdGl2ZVNvdXJjZSk7XG4gICAgfVxuXG4gICAgdmFyIHVybDtcbiAgICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGxcbiAgICAgICAgJiYgKHVybCA9IHV0aWwudXJsUGFyc2UodGhpcy5zb3VyY2VSb290KSkpIHtcbiAgICAgIC8vIFhYWDogZmlsZTovLyBVUklzIGFuZCBhYnNvbHV0ZSBwYXRocyBsZWFkIHRvIHVuZXhwZWN0ZWQgYmVoYXZpb3IgZm9yXG4gICAgICAvLyBtYW55IHVzZXJzLiBXZSBjYW4gaGVscCB0aGVtIG91dCB3aGVuIHRoZXkgZXhwZWN0IGZpbGU6Ly8gVVJJcyB0b1xuICAgICAgLy8gYmVoYXZlIGxpa2UgaXQgd291bGQgaWYgdGhleSB3ZXJlIHJ1bm5pbmcgYSBsb2NhbCBIVFRQIHNlcnZlci4gU2VlXG4gICAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04ODU1OTcuXG4gICAgICB2YXIgZmlsZVVyaUFic1BhdGggPSByZWxhdGl2ZVNvdXJjZS5yZXBsYWNlKC9eZmlsZTpcXC9cXC8vLCBcIlwiKTtcbiAgICAgIGlmICh1cmwuc2NoZW1lID09IFwiZmlsZVwiXG4gICAgICAgICAgJiYgdGhpcy5fc291cmNlcy5oYXMoZmlsZVVyaUFic1BhdGgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W3RoaXMuX3NvdXJjZXMuaW5kZXhPZihmaWxlVXJpQWJzUGF0aCldXG4gICAgICB9XG5cbiAgICAgIGlmICgoIXVybC5wYXRoIHx8IHVybC5wYXRoID09IFwiL1wiKVxuICAgICAgICAgICYmIHRoaXMuX3NvdXJjZXMuaGFzKFwiL1wiICsgcmVsYXRpdmVTb3VyY2UpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W3RoaXMuX3NvdXJjZXMuaW5kZXhPZihcIi9cIiArIHJlbGF0aXZlU291cmNlKV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHJlY3Vyc2l2ZWx5IGZyb21cbiAgICAvLyBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLnNvdXJjZUNvbnRlbnRGb3IuIEluIHRoYXQgY2FzZSwgd2VcbiAgICAvLyBkb24ndCB3YW50IHRvIHRocm93IGlmIHdlIGNhbid0IGZpbmQgdGhlIHNvdXJjZSAtIHdlIGp1c3Qgd2FudCB0b1xuICAgIC8vIHJldHVybiBudWxsLCBzbyB3ZSBwcm92aWRlIGEgZmxhZyB0byBleGl0IGdyYWNlZnVsbHkuXG4gICAgaWYgKG51bGxPbk1pc3NpbmcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCInICsgcmVsYXRpdmVTb3VyY2UgKyAnXCIgaXMgbm90IGluIHRoZSBTb3VyY2VNYXAuJyk7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBzb3VyY2UsXG4gKiBsaW5lLCBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0IHdpdGhcbiAqIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gc291cmNlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBsaW5lIG51bWJlclxuICogICAgIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLiAgVGhlIGNvbHVtblxuICogICAgIG51bWJlciBpcyAwLWJhc2VkLlxuICogICAtIGJpYXM6IEVpdGhlciAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ1NvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqICAgICBEZWZhdWx0cyB0byAnU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICpcbiAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAqICAgICBUaGUgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5nZW5lcmF0ZWRQb3NpdGlvbkZvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2dlbmVyYXRlZFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgdmFyIHNvdXJjZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJyk7XG4gICAgc291cmNlID0gdGhpcy5fZmluZFNvdXJjZUluZGV4KHNvdXJjZSk7XG4gICAgaWYgKHNvdXJjZSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbmU6IG51bGwsXG4gICAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgICAgbGFzdENvbHVtbjogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICBvcmlnaW5hbExpbmU6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpLFxuICAgICAgb3JpZ2luYWxDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJylcbiAgICB9O1xuXG4gICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZE1hcHBpbmcoXG4gICAgICBuZWVkbGUsXG4gICAgICB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzLFxuICAgICAgXCJvcmlnaW5hbExpbmVcIixcbiAgICAgIFwib3JpZ2luYWxDb2x1bW5cIixcbiAgICAgIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMsXG4gICAgICB1dGlsLmdldEFyZyhhQXJncywgJ2JpYXMnLCBTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORClcbiAgICApO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSA9PT0gbmVlZGxlLnNvdXJjZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRMaW5lJywgbnVsbCksXG4gICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgbGFzdENvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2xhc3RHZW5lcmF0ZWRDb2x1bW4nLCBudWxsKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsaW5lOiBudWxsLFxuICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgbGFzdENvbHVtbjogbnVsbFxuICAgIH07XG4gIH07XG5cbmV4cG9ydHMuQmFzaWNTb3VyY2VNYXBDb25zdW1lciA9IEJhc2ljU291cmNlTWFwQ29uc3VtZXI7XG5cbi8qKlxuICogQW4gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyIGluc3RhbmNlIHJlcHJlc2VudHMgYSBwYXJzZWQgc291cmNlIG1hcCB3aGljaFxuICogd2UgY2FuIHF1ZXJ5IGZvciBpbmZvcm1hdGlvbi4gSXQgZGlmZmVycyBmcm9tIEJhc2ljU291cmNlTWFwQ29uc3VtZXIgaW5cbiAqIHRoYXQgaXQgdGFrZXMgXCJpbmRleGVkXCIgc291cmNlIG1hcHMgKGkuZS4gb25lcyB3aXRoIGEgXCJzZWN0aW9uc1wiIGZpZWxkKSBhc1xuICogaW5wdXQuXG4gKlxuICogVGhlIGZpcnN0IHBhcmFtZXRlciBpcyBhIHJhdyBzb3VyY2UgbWFwIChlaXRoZXIgYXMgYSBKU09OIHN0cmluZywgb3IgYWxyZWFkeVxuICogcGFyc2VkIHRvIGFuIG9iamVjdCkuIEFjY29yZGluZyB0byB0aGUgc3BlYyBmb3IgaW5kZXhlZCBzb3VyY2UgbWFwcywgdGhleVxuICogaGF2ZSB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6XG4gKlxuICogICAtIHZlcnNpb246IFdoaWNoIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXAgc3BlYyB0aGlzIG1hcCBpcyBmb2xsb3dpbmcuXG4gKiAgIC0gZmlsZTogT3B0aW9uYWwuIFRoZSBnZW5lcmF0ZWQgZmlsZSB0aGlzIHNvdXJjZSBtYXAgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICogICAtIHNlY3Rpb25zOiBBIGxpc3Qgb2Ygc2VjdGlvbiBkZWZpbml0aW9ucy5cbiAqXG4gKiBFYWNoIHZhbHVlIHVuZGVyIHRoZSBcInNlY3Rpb25zXCIgZmllbGQgaGFzIHR3byBmaWVsZHM6XG4gKiAgIC0gb2Zmc2V0OiBUaGUgb2Zmc2V0IGludG8gdGhlIG9yaWdpbmFsIHNwZWNpZmllZCBhdCB3aGljaCB0aGlzIHNlY3Rpb25cbiAqICAgICAgIGJlZ2lucyB0byBhcHBseSwgZGVmaW5lZCBhcyBhbiBvYmplY3Qgd2l0aCBhIFwibGluZVwiIGFuZCBcImNvbHVtblwiXG4gKiAgICAgICBmaWVsZC5cbiAqICAgLSBtYXA6IEEgc291cmNlIG1hcCBkZWZpbml0aW9uLiBUaGlzIHNvdXJjZSBtYXAgY291bGQgYWxzbyBiZSBpbmRleGVkLFxuICogICAgICAgYnV0IGRvZXNuJ3QgaGF2ZSB0byBiZS5cbiAqXG4gKiBJbnN0ZWFkIG9mIHRoZSBcIm1hcFwiIGZpZWxkLCBpdCdzIGFsc28gcG9zc2libGUgdG8gaGF2ZSBhIFwidXJsXCIgZmllbGRcbiAqIHNwZWNpZnlpbmcgYSBVUkwgdG8gcmV0cmlldmUgYSBzb3VyY2UgbWFwIGZyb20sIGJ1dCB0aGF0J3MgY3VycmVudGx5XG4gKiB1bnN1cHBvcnRlZC5cbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBzb3VyY2UgbWFwLCB0YWtlbiBmcm9tIHRoZSBzb3VyY2UgbWFwIHNwZWNbMF0sIGJ1dFxuICogbW9kaWZpZWQgdG8gb21pdCBhIHNlY3Rpb24gd2hpY2ggdXNlcyB0aGUgXCJ1cmxcIiBmaWVsZC5cbiAqXG4gKiAge1xuICogICAgdmVyc2lvbiA6IDMsXG4gKiAgICBmaWxlOiBcImFwcC5qc1wiLFxuICogICAgc2VjdGlvbnM6IFt7XG4gKiAgICAgIG9mZnNldDoge2xpbmU6MTAwLCBjb2x1bW46MTB9LFxuICogICAgICBtYXA6IHtcbiAqICAgICAgICB2ZXJzaW9uIDogMyxcbiAqICAgICAgICBmaWxlOiBcInNlY3Rpb24uanNcIixcbiAqICAgICAgICBzb3VyY2VzOiBbXCJmb28uanNcIiwgXCJiYXIuanNcIl0sXG4gKiAgICAgICAgbmFtZXM6IFtcInNyY1wiLCBcIm1hcHNcIiwgXCJhcmVcIiwgXCJmdW5cIl0sXG4gKiAgICAgICAgbWFwcGluZ3M6IFwiQUFBQSxFOztBQkNERTtcIlxuICogICAgICB9XG4gKiAgICB9XSxcbiAqICB9XG4gKlxuICogVGhlIHNlY29uZCBwYXJhbWV0ZXIsIGlmIGdpdmVuLCBpcyBhIHN0cmluZyB3aG9zZSB2YWx1ZSBpcyB0aGUgVVJMXG4gKiBhdCB3aGljaCB0aGUgc291cmNlIG1hcCB3YXMgZm91bmQuICBUaGlzIFVSTCBpcyB1c2VkIHRvIGNvbXB1dGUgdGhlXG4gKiBzb3VyY2VzIGFycmF5LlxuICpcbiAqIFswXTogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xVTFSR0FlaFF3UnlwVVRvdkYxS1JscGlPRnplMGItXzJnYzZmQUgwS1kway9lZGl0I2hlYWRpbmc9aC41MzVlczN4ZXByZ3RcbiAqL1xuZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgdmFyIHNvdXJjZU1hcCA9IGFTb3VyY2VNYXA7XG4gIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICBzb3VyY2VNYXAgPSB1dGlsLnBhcnNlU291cmNlTWFwSW5wdXQoYVNvdXJjZU1hcCk7XG4gIH1cblxuICB2YXIgdmVyc2lvbiA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3ZlcnNpb24nKTtcbiAgdmFyIHNlY3Rpb25zID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc2VjdGlvbnMnKTtcblxuICBpZiAodmVyc2lvbiAhPSB0aGlzLl92ZXJzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB2ZXJzaW9uOiAnICsgdmVyc2lvbik7XG4gIH1cblxuICB0aGlzLl9zb3VyY2VzID0gbmV3IEFycmF5U2V0KCk7XG4gIHRoaXMuX25hbWVzID0gbmV3IEFycmF5U2V0KCk7XG5cbiAgdmFyIGxhc3RPZmZzZXQgPSB7XG4gICAgbGluZTogLTEsXG4gICAgY29sdW1uOiAwXG4gIH07XG4gIHRoaXMuX3NlY3Rpb25zID0gc2VjdGlvbnMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgaWYgKHMudXJsKSB7XG4gICAgICAvLyBUaGUgdXJsIGZpZWxkIHdpbGwgcmVxdWlyZSBzdXBwb3J0IGZvciBhc3luY2hyb25pY2l0eS5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL2lzc3Vlcy8xNlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdXBwb3J0IGZvciB1cmwgZmllbGQgaW4gc2VjdGlvbnMgbm90IGltcGxlbWVudGVkLicpO1xuICAgIH1cbiAgICB2YXIgb2Zmc2V0ID0gdXRpbC5nZXRBcmcocywgJ29mZnNldCcpO1xuICAgIHZhciBvZmZzZXRMaW5lID0gdXRpbC5nZXRBcmcob2Zmc2V0LCAnbGluZScpO1xuICAgIHZhciBvZmZzZXRDb2x1bW4gPSB1dGlsLmdldEFyZyhvZmZzZXQsICdjb2x1bW4nKTtcblxuICAgIGlmIChvZmZzZXRMaW5lIDwgbGFzdE9mZnNldC5saW5lIHx8XG4gICAgICAgIChvZmZzZXRMaW5lID09PSBsYXN0T2Zmc2V0LmxpbmUgJiYgb2Zmc2V0Q29sdW1uIDwgbGFzdE9mZnNldC5jb2x1bW4pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3Rpb24gb2Zmc2V0cyBtdXN0IGJlIG9yZGVyZWQgYW5kIG5vbi1vdmVybGFwcGluZy4nKTtcbiAgICB9XG4gICAgbGFzdE9mZnNldCA9IG9mZnNldDtcblxuICAgIHJldHVybiB7XG4gICAgICBnZW5lcmF0ZWRPZmZzZXQ6IHtcbiAgICAgICAgLy8gVGhlIG9mZnNldCBmaWVsZHMgYXJlIDAtYmFzZWQsIGJ1dCB3ZSB1c2UgMS1iYXNlZCBpbmRpY2VzIHdoZW5cbiAgICAgICAgLy8gZW5jb2RpbmcvZGVjb2RpbmcgZnJvbSBWTFEuXG4gICAgICAgIGdlbmVyYXRlZExpbmU6IG9mZnNldExpbmUgKyAxLFxuICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IG9mZnNldENvbHVtbiArIDFcbiAgICAgIH0sXG4gICAgICBjb25zdW1lcjogbmV3IFNvdXJjZU1hcENvbnN1bWVyKHV0aWwuZ2V0QXJnKHMsICdtYXAnKSwgYVNvdXJjZU1hcFVSTClcbiAgICB9XG4gIH0pO1xufVxuXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpO1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwcGluZyBzcGVjIHRoYXQgd2UgYXJlIGNvbnN1bWluZy5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbi8qKlxuICogVGhlIGxpc3Qgb2Ygb3JpZ2luYWwgc291cmNlcy5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdzb3VyY2VzJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5fc2VjdGlvbnNbaV0uY29uc3VtZXIuc291cmNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICBzb3VyY2VzLnB1c2godGhpcy5fc2VjdGlvbnNbaV0uY29uc3VtZXIuc291cmNlc1tqXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VzO1xuICB9XG59KTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UsIGxpbmUsIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBnZW5lcmF0ZWRcbiAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdFxuICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS4gIFRoZSBsaW5lIG51bWJlclxuICogICAgIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS4gIFRoZSBjb2x1bW5cbiAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSwgb3IgbnVsbC5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICogICAtIG5hbWU6IFRoZSBvcmlnaW5hbCBpZGVudGlmaWVyLCBvciBudWxsLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLm9yaWdpbmFsUG9zaXRpb25Gb3IgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfb3JpZ2luYWxQb3NpdGlvbkZvcihhQXJncykge1xuICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICBnZW5lcmF0ZWRMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKSxcbiAgICAgIGdlbmVyYXRlZENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nKVxuICAgIH07XG5cbiAgICAvLyBGaW5kIHRoZSBzZWN0aW9uIGNvbnRhaW5pbmcgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbiB3ZSdyZSB0cnlpbmcgdG8gbWFwXG4gICAgLy8gdG8gYW4gb3JpZ2luYWwgcG9zaXRpb24uXG4gICAgdmFyIHNlY3Rpb25JbmRleCA9IGJpbmFyeVNlYXJjaC5zZWFyY2gobmVlZGxlLCB0aGlzLl9zZWN0aW9ucyxcbiAgICAgIGZ1bmN0aW9uKG5lZWRsZSwgc2VjdGlvbikge1xuICAgICAgICB2YXIgY21wID0gbmVlZGxlLmdlbmVyYXRlZExpbmUgLSBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lO1xuICAgICAgICBpZiAoY21wKSB7XG4gICAgICAgICAgcmV0dXJuIGNtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAobmVlZGxlLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgICAgICAgICAgc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgIH0pO1xuICAgIHZhciBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbc2VjdGlvbkluZGV4XTtcblxuICAgIGlmICghc2VjdGlvbikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc291cmNlOiBudWxsLFxuICAgICAgICBsaW5lOiBudWxsLFxuICAgICAgICBjb2x1bW46IG51bGwsXG4gICAgICAgIG5hbWU6IG51bGxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlY3Rpb24uY29uc3VtZXIub3JpZ2luYWxQb3NpdGlvbkZvcih7XG4gICAgICBsaW5lOiBuZWVkbGUuZ2VuZXJhdGVkTGluZSAtXG4gICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lIC0gMSksXG4gICAgICBjb2x1bW46IG5lZWRsZS5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSA9PT0gbmVlZGxlLmdlbmVyYXRlZExpbmVcbiAgICAgICAgID8gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkQ29sdW1uIC0gMVxuICAgICAgICAgOiAwKSxcbiAgICAgIGJpYXM6IGFBcmdzLmJpYXNcbiAgICB9KTtcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm4gdHJ1ZSBpZiB3ZSBoYXZlIHRoZSBzb3VyY2UgY29udGVudCBmb3IgZXZlcnkgc291cmNlIGluIHRoZSBzb3VyY2VcbiAqIG1hcCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX2hhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCkge1xuICAgIHJldHVybiB0aGlzLl9zZWN0aW9ucy5ldmVyeShmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIHMuY29uc3VtZXIuaGFzQ29udGVudHNPZkFsbFNvdXJjZXMoKTtcbiAgICB9KTtcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UgY29udGVudC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgdGhlIHVybCBvZiB0aGVcbiAqIG9yaWdpbmFsIHNvdXJjZSBmaWxlLiBSZXR1cm5zIG51bGwgaWYgbm8gb3JpZ2luYWwgc291cmNlIGNvbnRlbnQgaXNcbiAqIGF2YWlsYWJsZS5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5zb3VyY2VDb250ZW50Rm9yID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX3NvdXJjZUNvbnRlbnRGb3IoYVNvdXJjZSwgbnVsbE9uTWlzc2luZykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbaV07XG5cbiAgICAgIHZhciBjb250ZW50ID0gc2VjdGlvbi5jb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKGFTb3VyY2UsIHRydWUpO1xuICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChudWxsT25NaXNzaW5nKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGFTb3VyY2UgKyAnXCIgaXMgbm90IGluIHRoZSBTb3VyY2VNYXAuJyk7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBzb3VyY2UsXG4gKiBsaW5lLCBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0IHdpdGhcbiAqIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gc291cmNlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBsaW5lIG51bWJlclxuICogICAgIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLiAgVGhlIGNvbHVtblxuICogICAgIG51bWJlciBpcyAwLWJhc2VkLlxuICpcbiAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuIFxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gKiAgICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5nZW5lcmF0ZWRQb3NpdGlvbkZvciA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9nZW5lcmF0ZWRQb3NpdGlvbkZvcihhQXJncykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbaV07XG5cbiAgICAgIC8vIE9ubHkgY29uc2lkZXIgdGhpcyBzZWN0aW9uIGlmIHRoZSByZXF1ZXN0ZWQgc291cmNlIGlzIGluIHRoZSBsaXN0IG9mXG4gICAgICAvLyBzb3VyY2VzIG9mIHRoZSBjb25zdW1lci5cbiAgICAgIGlmIChzZWN0aW9uLmNvbnN1bWVyLl9maW5kU291cmNlSW5kZXgodXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2UnKSkgPT09IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIGdlbmVyYXRlZFBvc2l0aW9uID0gc2VjdGlvbi5jb25zdW1lci5nZW5lcmF0ZWRQb3NpdGlvbkZvcihhQXJncyk7XG4gICAgICBpZiAoZ2VuZXJhdGVkUG9zaXRpb24pIHtcbiAgICAgICAgdmFyIHJldCA9IHtcbiAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWRQb3NpdGlvbi5saW5lICtcbiAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lIC0gMSksXG4gICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWRQb3NpdGlvbi5jb2x1bW4gK1xuICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IGdlbmVyYXRlZFBvc2l0aW9uLmxpbmVcbiAgICAgICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgICAgICA6IDApXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbmU6IG51bGwsXG4gICAgICBjb2x1bW46IG51bGxcbiAgICB9O1xuICB9O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBtYXBwaW5ncyBpbiBhIHN0cmluZyBpbiB0byBhIGRhdGEgc3RydWN0dXJlIHdoaWNoIHdlIGNhbiBlYXNpbHlcbiAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICogYHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzYCBwcm9wZXJ0aWVzKS5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fcGFyc2VNYXBwaW5ncyA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9wYXJzZU1hcHBpbmdzKGFTdHIsIGFTb3VyY2VSb290KSB7XG4gICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW2ldO1xuICAgICAgdmFyIHNlY3Rpb25NYXBwaW5ncyA9IHNlY3Rpb24uY29uc3VtZXIuX2dlbmVyYXRlZE1hcHBpbmdzO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWN0aW9uTWFwcGluZ3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIG1hcHBpbmcgPSBzZWN0aW9uTWFwcGluZ3Nbal07XG5cbiAgICAgICAgdmFyIHNvdXJjZSA9IHNlY3Rpb24uY29uc3VtZXIuX3NvdXJjZXMuYXQobWFwcGluZy5zb3VyY2UpO1xuICAgICAgICBzb3VyY2UgPSB1dGlsLmNvbXB1dGVTb3VyY2VVUkwoc2VjdGlvbi5jb25zdW1lci5zb3VyY2VSb290LCBzb3VyY2UsIHRoaXMuX3NvdXJjZU1hcFVSTCk7XG4gICAgICAgIHRoaXMuX3NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICAgIHNvdXJjZSA9IHRoaXMuX3NvdXJjZXMuaW5kZXhPZihzb3VyY2UpO1xuXG4gICAgICAgIHZhciBuYW1lID0gbnVsbDtcbiAgICAgICAgaWYgKG1hcHBpbmcubmFtZSkge1xuICAgICAgICAgIG5hbWUgPSBzZWN0aW9uLmNvbnN1bWVyLl9uYW1lcy5hdChtYXBwaW5nLm5hbWUpO1xuICAgICAgICAgIHRoaXMuX25hbWVzLmFkZChuYW1lKTtcbiAgICAgICAgICBuYW1lID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBtYXBwaW5ncyBjb21pbmcgZnJvbSB0aGUgY29uc3VtZXIgZm9yIHRoZSBzZWN0aW9uIGhhdmVcbiAgICAgICAgLy8gZ2VuZXJhdGVkIHBvc2l0aW9ucyByZWxhdGl2ZSB0byB0aGUgc3RhcnQgb2YgdGhlIHNlY3Rpb24sIHNvIHdlXG4gICAgICAgIC8vIG5lZWQgdG8gb2Zmc2V0IHRoZW0gdG8gYmUgcmVsYXRpdmUgdG8gdGhlIHN0YXJ0IG9mIHRoZSBjb25jYXRlbmF0ZWRcbiAgICAgICAgLy8gZ2VuZXJhdGVkIGZpbGUuXG4gICAgICAgIHZhciBhZGp1c3RlZE1hcHBpbmcgPSB7XG4gICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgZ2VuZXJhdGVkTGluZTogbWFwcGluZy5nZW5lcmF0ZWRMaW5lICtcbiAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lIC0gMSksXG4gICAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSA9PT0gbWFwcGluZy5nZW5lcmF0ZWRMaW5lXG4gICAgICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgICAgIDogMCksXG4gICAgICAgICAgb3JpZ2luYWxMaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICBvcmlnaW5hbENvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzLnB1c2goYWRqdXN0ZWRNYXBwaW5nKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhZGp1c3RlZE1hcHBpbmcub3JpZ2luYWxMaW5lID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzLnB1c2goYWRqdXN0ZWRNYXBwaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHF1aWNrU29ydCh0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQpO1xuICAgIHF1aWNrU29ydCh0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG4gIH07XG5cbmV4cG9ydHMuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyID0gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG5leHBvcnRzLkdSRUFURVNUX0xPV0VSX0JPVU5EID0gMTtcbmV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQgPSAyO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZSBpbXBsZW1lbnRhdGlvbiBvZiBiaW5hcnkgc2VhcmNoLlxuICpcbiAqIEBwYXJhbSBhTG93IEluZGljZXMgaGVyZSBhbmQgbG93ZXIgZG8gbm90IGNvbnRhaW4gdGhlIG5lZWRsZS5cbiAqIEBwYXJhbSBhSGlnaCBJbmRpY2VzIGhlcmUgYW5kIGhpZ2hlciBkbyBub3QgY29udGFpbiB0aGUgbmVlZGxlLlxuICogQHBhcmFtIGFOZWVkbGUgVGhlIGVsZW1lbnQgYmVpbmcgc2VhcmNoZWQgZm9yLlxuICogQHBhcmFtIGFIYXlzdGFjayBUaGUgbm9uLWVtcHR5IGFycmF5IGJlaW5nIHNlYXJjaGVkLlxuICogQHBhcmFtIGFDb21wYXJlIEZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3byBlbGVtZW50cyBhbmQgcmV0dXJucyAtMSwgMCwgb3IgMS5cbiAqIEBwYXJhbSBhQmlhcyBFaXRoZXIgJ2JpbmFyeVNlYXJjaC5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAqICAgICAnYmluYXJ5U2VhcmNoLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gcmVjdXJzaXZlU2VhcmNoKGFMb3csIGFIaWdoLCBhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcykge1xuICAvLyBUaGlzIGZ1bmN0aW9uIHRlcm1pbmF0ZXMgd2hlbiBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxuICAvL1xuICAvLyAgIDEuIFdlIGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQgd2UgYXJlIGxvb2tpbmcgZm9yLlxuICAvL1xuICAvLyAgIDIuIFdlIGRpZCBub3QgZmluZCB0aGUgZXhhY3QgZWxlbWVudCwgYnV0IHdlIGNhbiByZXR1cm4gdGhlIGluZGV4IG9mXG4gIC8vICAgICAgdGhlIG5leHQtY2xvc2VzdCBlbGVtZW50LlxuICAvL1xuICAvLyAgIDMuIFdlIGRpZCBub3QgZmluZCB0aGUgZXhhY3QgZWxlbWVudCwgYW5kIHRoZXJlIGlzIG5vIG5leHQtY2xvc2VzdFxuICAvLyAgICAgIGVsZW1lbnQgdGhhbiB0aGUgb25lIHdlIGFyZSBzZWFyY2hpbmcgZm9yLCBzbyB3ZSByZXR1cm4gLTEuXG4gIHZhciBtaWQgPSBNYXRoLmZsb29yKChhSGlnaCAtIGFMb3cpIC8gMikgKyBhTG93O1xuICB2YXIgY21wID0gYUNvbXBhcmUoYU5lZWRsZSwgYUhheXN0YWNrW21pZF0sIHRydWUpO1xuICBpZiAoY21wID09PSAwKSB7XG4gICAgLy8gRm91bmQgdGhlIGVsZW1lbnQgd2UgYXJlIGxvb2tpbmcgZm9yLlxuICAgIHJldHVybiBtaWQ7XG4gIH1cbiAgZWxzZSBpZiAoY21wID4gMCkge1xuICAgIC8vIE91ciBuZWVkbGUgaXMgZ3JlYXRlciB0aGFuIGFIYXlzdGFja1ttaWRdLlxuICAgIGlmIChhSGlnaCAtIG1pZCA+IDEpIHtcbiAgICAgIC8vIFRoZSBlbGVtZW50IGlzIGluIHRoZSB1cHBlciBoYWxmLlxuICAgICAgcmV0dXJuIHJlY3Vyc2l2ZVNlYXJjaChtaWQsIGFIaWdoLCBhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcyk7XG4gICAgfVxuXG4gICAgLy8gVGhlIGV4YWN0IG5lZWRsZSBlbGVtZW50IHdhcyBub3QgZm91bmQgaW4gdGhpcyBoYXlzdGFjay4gRGV0ZXJtaW5lIGlmXG4gICAgLy8gd2UgYXJlIGluIHRlcm1pbmF0aW9uIGNhc2UgKDMpIG9yICgyKSBhbmQgcmV0dXJuIHRoZSBhcHByb3ByaWF0ZSB0aGluZy5cbiAgICBpZiAoYUJpYXMgPT0gZXhwb3J0cy5MRUFTVF9VUFBFUl9CT1VORCkge1xuICAgICAgcmV0dXJuIGFIaWdoIDwgYUhheXN0YWNrLmxlbmd0aCA/IGFIaWdoIDogLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtaWQ7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIC8vIE91ciBuZWVkbGUgaXMgbGVzcyB0aGFuIGFIYXlzdGFja1ttaWRdLlxuICAgIGlmIChtaWQgLSBhTG93ID4gMSkge1xuICAgICAgLy8gVGhlIGVsZW1lbnQgaXMgaW4gdGhlIGxvd2VyIGhhbGYuXG4gICAgICByZXR1cm4gcmVjdXJzaXZlU2VhcmNoKGFMb3csIG1pZCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpO1xuICAgIH1cblxuICAgIC8vIHdlIGFyZSBpbiB0ZXJtaW5hdGlvbiBjYXNlICgzKSBvciAoMikgYW5kIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgdGhpbmcuXG4gICAgaWYgKGFCaWFzID09IGV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQpIHtcbiAgICAgIHJldHVybiBtaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhTG93IDwgMCA/IC0xIDogYUxvdztcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGJpbmFyeSBzZWFyY2ggd2hpY2ggd2lsbCBhbHdheXMgdHJ5IGFuZCByZXR1cm5cbiAqIHRoZSBpbmRleCBvZiB0aGUgY2xvc2VzdCBlbGVtZW50IGlmIHRoZXJlIGlzIG5vIGV4YWN0IGhpdC4gVGhpcyBpcyBiZWNhdXNlXG4gKiBtYXBwaW5ncyBiZXR3ZWVuIG9yaWdpbmFsIGFuZCBnZW5lcmF0ZWQgbGluZS9jb2wgcGFpcnMgYXJlIHNpbmdsZSBwb2ludHMsXG4gKiBhbmQgdGhlcmUgaXMgYW4gaW1wbGljaXQgcmVnaW9uIGJldHdlZW4gZWFjaCBvZiB0aGVtLCBzbyBhIG1pc3MganVzdCBtZWFuc1xuICogdGhhdCB5b3UgYXJlbid0IG9uIHRoZSB2ZXJ5IHN0YXJ0IG9mIGEgcmVnaW9uLlxuICpcbiAqIEBwYXJhbSBhTmVlZGxlIFRoZSBlbGVtZW50IHlvdSBhcmUgbG9va2luZyBmb3IuXG4gKiBAcGFyYW0gYUhheXN0YWNrIFRoZSBhcnJheSB0aGF0IGlzIGJlaW5nIHNlYXJjaGVkLlxuICogQHBhcmFtIGFDb21wYXJlIEEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgdGhlIG5lZWRsZSBhbmQgYW4gZWxlbWVudCBpbiB0aGVcbiAqICAgICBhcnJheSBhbmQgcmV0dXJucyAtMSwgMCwgb3IgMSBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgbmVlZGxlIGlzIGxlc3NcbiAqICAgICB0aGFuLCBlcXVhbCB0bywgb3IgZ3JlYXRlciB0aGFuIHRoZSBlbGVtZW50LCByZXNwZWN0aXZlbHkuXG4gKiBAcGFyYW0gYUJpYXMgRWl0aGVyICdiaW5hcnlTZWFyY2guR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ2JpbmFyeVNlYXJjaC5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKiAgICAgRGVmYXVsdHMgdG8gJ2JpbmFyeVNlYXJjaC5HUkVBVEVTVF9MT1dFUl9CT1VORCcuXG4gKi9cbmV4cG9ydHMuc2VhcmNoID0gZnVuY3Rpb24gc2VhcmNoKGFOZWVkbGUsIGFIYXlzdGFjaywgYUNvbXBhcmUsIGFCaWFzKSB7XG4gIGlmIChhSGF5c3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gcmVjdXJzaXZlU2VhcmNoKC0xLCBhSGF5c3RhY2subGVuZ3RoLCBhTmVlZGxlLCBhSGF5c3RhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhQ29tcGFyZSwgYUJpYXMgfHwgZXhwb3J0cy5HUkVBVEVTVF9MT1dFUl9CT1VORCk7XG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvLyBXZSBoYXZlIGZvdW5kIGVpdGhlciB0aGUgZXhhY3QgZWxlbWVudCwgb3IgdGhlIG5leHQtY2xvc2VzdCBlbGVtZW50IHRoYW5cbiAgLy8gdGhlIG9uZSB3ZSBhcmUgc2VhcmNoaW5nIGZvci4gSG93ZXZlciwgdGhlcmUgbWF5IGJlIG1vcmUgdGhhbiBvbmUgc3VjaFxuICAvLyBlbGVtZW50LiBNYWtlIHN1cmUgd2UgYWx3YXlzIHJldHVybiB0aGUgc21hbGxlc3Qgb2YgdGhlc2UuXG4gIHdoaWxlIChpbmRleCAtIDEgPj0gMCkge1xuICAgIGlmIChhQ29tcGFyZShhSGF5c3RhY2tbaW5kZXhdLCBhSGF5c3RhY2tbaW5kZXggLSAxXSwgdHJ1ZSkgIT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAtLWluZGV4O1xuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxuLy8gSXQgdHVybnMgb3V0IHRoYXQgc29tZSAobW9zdD8pIEphdmFTY3JpcHQgZW5naW5lcyBkb24ndCBzZWxmLWhvc3Rcbi8vIGBBcnJheS5wcm90b3R5cGUuc29ydGAuIFRoaXMgbWFrZXMgc2Vuc2UgYmVjYXVzZSBDKysgd2lsbCBsaWtlbHkgcmVtYWluXG4vLyBmYXN0ZXIgdGhhbiBKUyB3aGVuIGRvaW5nIHJhdyBDUFUtaW50ZW5zaXZlIHNvcnRpbmcuIEhvd2V2ZXIsIHdoZW4gdXNpbmcgYVxuLy8gY3VzdG9tIGNvbXBhcmF0b3IgZnVuY3Rpb24sIGNhbGxpbmcgYmFjayBhbmQgZm9ydGggYmV0d2VlbiB0aGUgVk0ncyBDKysgYW5kXG4vLyBKSVQnZCBKUyBpcyByYXRoZXIgc2xvdyAqYW5kKiBsb3NlcyBKSVQgdHlwZSBpbmZvcm1hdGlvbiwgcmVzdWx0aW5nIGluXG4vLyB3b3JzZSBnZW5lcmF0ZWQgY29kZSBmb3IgdGhlIGNvbXBhcmF0b3IgZnVuY3Rpb24gdGhhbiB3b3VsZCBiZSBvcHRpbWFsLiBJblxuLy8gZmFjdCwgd2hlbiBzb3J0aW5nIHdpdGggYSBjb21wYXJhdG9yLCB0aGVzZSBjb3N0cyBvdXR3ZWlnaCB0aGUgYmVuZWZpdHMgb2Zcbi8vIHNvcnRpbmcgaW4gQysrLiBCeSB1c2luZyBvdXIgb3duIEpTLWltcGxlbWVudGVkIFF1aWNrIFNvcnQgKGJlbG93KSwgd2UgZ2V0XG4vLyBhIH4zNTAwbXMgbWVhbiBzcGVlZC11cCBpbiBgYmVuY2gvYmVuY2guaHRtbGAuXG5cbi8qKlxuICogU3dhcCB0aGUgZWxlbWVudHMgaW5kZXhlZCBieSBgeGAgYW5kIGB5YCBpbiB0aGUgYXJyYXkgYGFyeWAuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJ5XG4gKiAgICAgICAgVGhlIGFycmF5LlxuICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAqICAgICAgICBUaGUgaW5kZXggb2YgdGhlIGZpcnN0IGl0ZW0uXG4gKiBAcGFyYW0ge051bWJlcn0geVxuICogICAgICAgIFRoZSBpbmRleCBvZiB0aGUgc2Vjb25kIGl0ZW0uXG4gKi9cbmZ1bmN0aW9uIHN3YXAoYXJ5LCB4LCB5KSB7XG4gIHZhciB0ZW1wID0gYXJ5W3hdO1xuICBhcnlbeF0gPSBhcnlbeV07XG4gIGFyeVt5XSA9IHRlbXA7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHJhbmRvbSBpbnRlZ2VyIHdpdGhpbiB0aGUgcmFuZ2UgYGxvdyAuLiBoaWdoYCBpbmNsdXNpdmUuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGxvd1xuICogICAgICAgIFRoZSBsb3dlciBib3VuZCBvbiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge051bWJlcn0gaGlnaFxuICogICAgICAgIFRoZSB1cHBlciBib3VuZCBvbiB0aGUgcmFuZ2UuXG4gKi9cbmZ1bmN0aW9uIHJhbmRvbUludEluUmFuZ2UobG93LCBoaWdoKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKGxvdyArIChNYXRoLnJhbmRvbSgpICogKGhpZ2ggLSBsb3cpKSk7XG59XG5cbi8qKlxuICogVGhlIFF1aWNrIFNvcnQgYWxnb3JpdGhtLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyeVxuICogICAgICAgIEFuIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wYXJhdG9yXG4gKiAgICAgICAgRnVuY3Rpb24gdG8gdXNlIHRvIGNvbXBhcmUgdHdvIGl0ZW1zLlxuICogQHBhcmFtIHtOdW1iZXJ9IHBcbiAqICAgICAgICBTdGFydCBpbmRleCBvZiB0aGUgYXJyYXlcbiAqIEBwYXJhbSB7TnVtYmVyfSByXG4gKiAgICAgICAgRW5kIGluZGV4IG9mIHRoZSBhcnJheVxuICovXG5mdW5jdGlvbiBkb1F1aWNrU29ydChhcnksIGNvbXBhcmF0b3IsIHAsIHIpIHtcbiAgLy8gSWYgb3VyIGxvd2VyIGJvdW5kIGlzIGxlc3MgdGhhbiBvdXIgdXBwZXIgYm91bmQsIHdlICgxKSBwYXJ0aXRpb24gdGhlXG4gIC8vIGFycmF5IGludG8gdHdvIHBpZWNlcyBhbmQgKDIpIHJlY3Vyc2Ugb24gZWFjaCBoYWxmLiBJZiBpdCBpcyBub3QsIHRoaXMgaXNcbiAgLy8gdGhlIGVtcHR5IGFycmF5IGFuZCBvdXIgYmFzZSBjYXNlLlxuXG4gIGlmIChwIDwgcikge1xuICAgIC8vICgxKSBQYXJ0aXRpb25pbmcuXG4gICAgLy9cbiAgICAvLyBUaGUgcGFydGl0aW9uaW5nIGNob29zZXMgYSBwaXZvdCBiZXR3ZWVuIGBwYCBhbmQgYHJgIGFuZCBtb3ZlcyBhbGxcbiAgICAvLyBlbGVtZW50cyB0aGF0IGFyZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHBpdm90IHRvIHRoZSBiZWZvcmUgaXQsIGFuZFxuICAgIC8vIGFsbCB0aGUgZWxlbWVudHMgdGhhdCBhcmUgZ3JlYXRlciB0aGFuIGl0IGFmdGVyIGl0LiBUaGUgZWZmZWN0IGlzIHRoYXRcbiAgICAvLyBvbmNlIHBhcnRpdGlvbiBpcyBkb25lLCB0aGUgcGl2b3QgaXMgaW4gdGhlIGV4YWN0IHBsYWNlIGl0IHdpbGwgYmUgd2hlblxuICAgIC8vIHRoZSBhcnJheSBpcyBwdXQgaW4gc29ydGVkIG9yZGVyLCBhbmQgaXQgd2lsbCBub3QgbmVlZCB0byBiZSBtb3ZlZFxuICAgIC8vIGFnYWluLiBUaGlzIHJ1bnMgaW4gTyhuKSB0aW1lLlxuXG4gICAgLy8gQWx3YXlzIGNob29zZSBhIHJhbmRvbSBwaXZvdCBzbyB0aGF0IGFuIGlucHV0IGFycmF5IHdoaWNoIGlzIHJldmVyc2VcbiAgICAvLyBzb3J0ZWQgZG9lcyBub3QgY2F1c2UgTyhuXjIpIHJ1bm5pbmcgdGltZS5cbiAgICB2YXIgcGl2b3RJbmRleCA9IHJhbmRvbUludEluUmFuZ2UocCwgcik7XG4gICAgdmFyIGkgPSBwIC0gMTtcblxuICAgIHN3YXAoYXJ5LCBwaXZvdEluZGV4LCByKTtcbiAgICB2YXIgcGl2b3QgPSBhcnlbcl07XG5cbiAgICAvLyBJbW1lZGlhdGVseSBhZnRlciBgamAgaXMgaW5jcmVtZW50ZWQgaW4gdGhpcyBsb29wLCB0aGUgZm9sbG93aW5nIGhvbGRcbiAgICAvLyB0cnVlOlxuICAgIC8vXG4gICAgLy8gICAqIEV2ZXJ5IGVsZW1lbnQgaW4gYGFyeVtwIC4uIGldYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHBpdm90LlxuICAgIC8vXG4gICAgLy8gICAqIEV2ZXJ5IGVsZW1lbnQgaW4gYGFyeVtpKzEgLi4gai0xXWAgaXMgZ3JlYXRlciB0aGFuIHRoZSBwaXZvdC5cbiAgICBmb3IgKHZhciBqID0gcDsgaiA8IHI7IGorKykge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJ5W2pdLCBwaXZvdCkgPD0gMCkge1xuICAgICAgICBpICs9IDE7XG4gICAgICAgIHN3YXAoYXJ5LCBpLCBqKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2FwKGFyeSwgaSArIDEsIGopO1xuICAgIHZhciBxID0gaSArIDE7XG5cbiAgICAvLyAoMikgUmVjdXJzZSBvbiBlYWNoIGhhbGYuXG5cbiAgICBkb1F1aWNrU29ydChhcnksIGNvbXBhcmF0b3IsIHAsIHEgLSAxKTtcbiAgICBkb1F1aWNrU29ydChhcnksIGNvbXBhcmF0b3IsIHEgKyAxLCByKTtcbiAgfVxufVxuXG4vKipcbiAqIFNvcnQgdGhlIGdpdmVuIGFycmF5IGluLXBsYWNlIHdpdGggdGhlIGdpdmVuIGNvbXBhcmF0b3IgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJ5XG4gKiAgICAgICAgQW4gYXJyYXkgdG8gc29ydC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmF0b3JcbiAqICAgICAgICBGdW5jdGlvbiB0byB1c2UgdG8gY29tcGFyZSB0d28gaXRlbXMuXG4gKi9cbmV4cG9ydHMucXVpY2tTb3J0ID0gZnVuY3Rpb24gKGFyeSwgY29tcGFyYXRvcikge1xuICBkb1F1aWNrU29ydChhcnksIGNvbXBhcmF0b3IsIDAsIGFyeS5sZW5ndGggLSAxKTtcbn07XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciBTb3VyY2VNYXBHZW5lcmF0b3IgPSByZXF1aXJlKCcuL3NvdXJjZS1tYXAtZ2VuZXJhdG9yJykuU291cmNlTWFwR2VuZXJhdG9yO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuLy8gTWF0Y2hlcyBhIFdpbmRvd3Mtc3R5bGUgYFxcclxcbmAgbmV3bGluZSBvciBhIGBcXG5gIG5ld2xpbmUgdXNlZCBieSBhbGwgb3RoZXJcbi8vIG9wZXJhdGluZyBzeXN0ZW1zIHRoZXNlIGRheXMgKGNhcHR1cmluZyB0aGUgcmVzdWx0KS5cbnZhciBSRUdFWF9ORVdMSU5FID0gLyhcXHI/XFxuKS87XG5cbi8vIE5ld2xpbmUgY2hhcmFjdGVyIGNvZGUgZm9yIGNoYXJDb2RlQXQoKSBjb21wYXJpc29uc1xudmFyIE5FV0xJTkVfQ09ERSA9IDEwO1xuXG4vLyBQcml2YXRlIHN5bWJvbCBmb3IgaWRlbnRpZnlpbmcgYFNvdXJjZU5vZGVgcyB3aGVuIG11bHRpcGxlIHZlcnNpb25zIG9mXG4vLyB0aGUgc291cmNlLW1hcCBsaWJyYXJ5IGFyZSBsb2FkZWQuIFRoaXMgTVVTVCBOT1QgQ0hBTkdFIGFjcm9zc1xuLy8gdmVyc2lvbnMhXG52YXIgaXNTb3VyY2VOb2RlID0gXCIkJCRpc1NvdXJjZU5vZGUkJCRcIjtcblxuLyoqXG4gKiBTb3VyY2VOb2RlcyBwcm92aWRlIGEgd2F5IHRvIGFic3RyYWN0IG92ZXIgaW50ZXJwb2xhdGluZy9jb25jYXRlbmF0aW5nXG4gKiBzbmlwcGV0cyBvZiBnZW5lcmF0ZWQgSmF2YVNjcmlwdCBzb3VyY2UgY29kZSB3aGlsZSBtYWludGFpbmluZyB0aGUgbGluZSBhbmRcbiAqIGNvbHVtbiBpbmZvcm1hdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIG9yaWdpbmFsIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwYXJhbSBhTGluZSBUaGUgb3JpZ2luYWwgbGluZSBudW1iZXIuXG4gKiBAcGFyYW0gYUNvbHVtbiBUaGUgb3JpZ2luYWwgY29sdW1uIG51bWJlci5cbiAqIEBwYXJhbSBhU291cmNlIFRoZSBvcmlnaW5hbCBzb3VyY2UncyBmaWxlbmFtZS5cbiAqIEBwYXJhbSBhQ2h1bmtzIE9wdGlvbmFsLiBBbiBhcnJheSBvZiBzdHJpbmdzIHdoaWNoIGFyZSBzbmlwcGV0cyBvZlxuICogICAgICAgIGdlbmVyYXRlZCBKUywgb3Igb3RoZXIgU291cmNlTm9kZXMuXG4gKiBAcGFyYW0gYU5hbWUgVGhlIG9yaWdpbmFsIGlkZW50aWZpZXIuXG4gKi9cbmZ1bmN0aW9uIFNvdXJjZU5vZGUoYUxpbmUsIGFDb2x1bW4sIGFTb3VyY2UsIGFDaHVua3MsIGFOYW1lKSB7XG4gIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgdGhpcy5zb3VyY2VDb250ZW50cyA9IHt9O1xuICB0aGlzLmxpbmUgPSBhTGluZSA9PSBudWxsID8gbnVsbCA6IGFMaW5lO1xuICB0aGlzLmNvbHVtbiA9IGFDb2x1bW4gPT0gbnVsbCA/IG51bGwgOiBhQ29sdW1uO1xuICB0aGlzLnNvdXJjZSA9IGFTb3VyY2UgPT0gbnVsbCA/IG51bGwgOiBhU291cmNlO1xuICB0aGlzLm5hbWUgPSBhTmFtZSA9PSBudWxsID8gbnVsbCA6IGFOYW1lO1xuICB0aGlzW2lzU291cmNlTm9kZV0gPSB0cnVlO1xuICBpZiAoYUNodW5rcyAhPSBudWxsKSB0aGlzLmFkZChhQ2h1bmtzKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgU291cmNlTm9kZSBmcm9tIGdlbmVyYXRlZCBjb2RlIGFuZCBhIFNvdXJjZU1hcENvbnN1bWVyLlxuICpcbiAqIEBwYXJhbSBhR2VuZXJhdGVkQ29kZSBUaGUgZ2VuZXJhdGVkIGNvZGVcbiAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIFNvdXJjZU1hcCBmb3IgdGhlIGdlbmVyYXRlZCBjb2RlXG4gKiBAcGFyYW0gYVJlbGF0aXZlUGF0aCBPcHRpb25hbC4gVGhlIHBhdGggdGhhdCByZWxhdGl2ZSBzb3VyY2VzIGluIHRoZVxuICogICAgICAgIFNvdXJjZU1hcENvbnN1bWVyIHNob3VsZCBiZSByZWxhdGl2ZSB0by5cbiAqL1xuU291cmNlTm9kZS5mcm9tU3RyaW5nV2l0aFNvdXJjZU1hcCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU5vZGVfZnJvbVN0cmluZ1dpdGhTb3VyY2VNYXAoYUdlbmVyYXRlZENvZGUsIGFTb3VyY2VNYXBDb25zdW1lciwgYVJlbGF0aXZlUGF0aCkge1xuICAgIC8vIFRoZSBTb3VyY2VOb2RlIHdlIHdhbnQgdG8gZmlsbCB3aXRoIHRoZSBnZW5lcmF0ZWQgY29kZVxuICAgIC8vIGFuZCB0aGUgU291cmNlTWFwXG4gICAgdmFyIG5vZGUgPSBuZXcgU291cmNlTm9kZSgpO1xuXG4gICAgLy8gQWxsIGV2ZW4gaW5kaWNlcyBvZiB0aGlzIGFycmF5IGFyZSBvbmUgbGluZSBvZiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4gICAgLy8gd2hpbGUgYWxsIG9kZCBpbmRpY2VzIGFyZSB0aGUgbmV3bGluZXMgYmV0d2VlbiB0d28gYWRqYWNlbnQgbGluZXNcbiAgICAvLyAoc2luY2UgYFJFR0VYX05FV0xJTkVgIGNhcHR1cmVzIGl0cyBtYXRjaCkuXG4gICAgLy8gUHJvY2Vzc2VkIGZyYWdtZW50cyBhcmUgYWNjZXNzZWQgYnkgY2FsbGluZyBgc2hpZnROZXh0TGluZWAuXG4gICAgdmFyIHJlbWFpbmluZ0xpbmVzID0gYUdlbmVyYXRlZENvZGUuc3BsaXQoUkVHRVhfTkVXTElORSk7XG4gICAgdmFyIHJlbWFpbmluZ0xpbmVzSW5kZXggPSAwO1xuICAgIHZhciBzaGlmdE5leHRMaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbGluZUNvbnRlbnRzID0gZ2V0TmV4dExpbmUoKTtcbiAgICAgIC8vIFRoZSBsYXN0IGxpbmUgb2YgYSBmaWxlIG1pZ2h0IG5vdCBoYXZlIGEgbmV3bGluZS5cbiAgICAgIHZhciBuZXdMaW5lID0gZ2V0TmV4dExpbmUoKSB8fCBcIlwiO1xuICAgICAgcmV0dXJuIGxpbmVDb250ZW50cyArIG5ld0xpbmU7XG5cbiAgICAgIGZ1bmN0aW9uIGdldE5leHRMaW5lKCkge1xuICAgICAgICByZXR1cm4gcmVtYWluaW5nTGluZXNJbmRleCA8IHJlbWFpbmluZ0xpbmVzLmxlbmd0aCA/XG4gICAgICAgICAgICByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4KytdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBXZSBuZWVkIHRvIHJlbWVtYmVyIHRoZSBwb3NpdGlvbiBvZiBcInJlbWFpbmluZ0xpbmVzXCJcbiAgICB2YXIgbGFzdEdlbmVyYXRlZExpbmUgPSAxLCBsYXN0R2VuZXJhdGVkQ29sdW1uID0gMDtcblxuICAgIC8vIFRoZSBnZW5lcmF0ZSBTb3VyY2VOb2RlcyB3ZSBuZWVkIGEgY29kZSByYW5nZS5cbiAgICAvLyBUbyBleHRyYWN0IGl0IGN1cnJlbnQgYW5kIGxhc3QgbWFwcGluZyBpcyB1c2VkLlxuICAgIC8vIEhlcmUgd2Ugc3RvcmUgdGhlIGxhc3QgbWFwcGluZy5cbiAgICB2YXIgbGFzdE1hcHBpbmcgPSBudWxsO1xuXG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLmVhY2hNYXBwaW5nKGZ1bmN0aW9uIChtYXBwaW5nKSB7XG4gICAgICBpZiAobGFzdE1hcHBpbmcgIT09IG51bGwpIHtcbiAgICAgICAgLy8gV2UgYWRkIHRoZSBjb2RlIGZyb20gXCJsYXN0TWFwcGluZ1wiIHRvIFwibWFwcGluZ1wiOlxuICAgICAgICAvLyBGaXJzdCBjaGVjayBpZiB0aGVyZSBpcyBhIG5ldyBsaW5lIGluIGJldHdlZW4uXG4gICAgICAgIGlmIChsYXN0R2VuZXJhdGVkTGluZSA8IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgIC8vIEFzc29jaWF0ZSBmaXJzdCBsaW5lIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgICAgYWRkTWFwcGluZ1dpdGhDb2RlKGxhc3RNYXBwaW5nLCBzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgICAgIGxhc3RHZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgICAgICAgLy8gVGhlIHJlbWFpbmluZyBjb2RlIGlzIGFkZGVkIHdpdGhvdXQgbWFwcGluZ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIG5ldyBsaW5lIGluIGJldHdlZW4uXG4gICAgICAgICAgLy8gQXNzb2NpYXRlIHRoZSBjb2RlIGJldHdlZW4gXCJsYXN0R2VuZXJhdGVkQ29sdW1uXCIgYW5kXG4gICAgICAgICAgLy8gXCJtYXBwaW5nLmdlbmVyYXRlZENvbHVtblwiIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgICAgdmFyIG5leHRMaW5lID0gcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gfHwgJyc7XG4gICAgICAgICAgdmFyIGNvZGUgPSBuZXh0TGluZS5zdWJzdHIoMCwgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICAgIHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXhdID0gbmV4dExpbmUuc3Vic3RyKG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG4gICAgICAgICAgYWRkTWFwcGluZ1dpdGhDb2RlKGxhc3RNYXBwaW5nLCBjb2RlKTtcbiAgICAgICAgICAvLyBObyBtb3JlIHJlbWFpbmluZyBjb2RlLCBjb250aW51ZVxuICAgICAgICAgIGxhc3RNYXBwaW5nID0gbWFwcGluZztcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFdlIGFkZCB0aGUgZ2VuZXJhdGVkIGNvZGUgdW50aWwgdGhlIGZpcnN0IG1hcHBpbmdcbiAgICAgIC8vIHRvIHRoZSBTb3VyY2VOb2RlIHdpdGhvdXQgYW55IG1hcHBpbmcuXG4gICAgICAvLyBFYWNoIGxpbmUgaXMgYWRkZWQgYXMgc2VwYXJhdGUgc3RyaW5nLlxuICAgICAgd2hpbGUgKGxhc3RHZW5lcmF0ZWRMaW5lIDwgbWFwcGluZy5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgIG5vZGUuYWRkKHNoaWZ0TmV4dExpbmUoKSk7XG4gICAgICAgIGxhc3RHZW5lcmF0ZWRMaW5lKys7XG4gICAgICB9XG4gICAgICBpZiAobGFzdEdlbmVyYXRlZENvbHVtbiA8IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uKSB7XG4gICAgICAgIHZhciBuZXh0TGluZSA9IHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXhdIHx8ICcnO1xuICAgICAgICBub2RlLmFkZChuZXh0TGluZS5zdWJzdHIoMCwgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4pKTtcbiAgICAgICAgcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gPSBuZXh0TGluZS5zdWJzdHIobWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG4gICAgICB9XG4gICAgICBsYXN0TWFwcGluZyA9IG1hcHBpbmc7XG4gICAgfSwgdGhpcyk7XG4gICAgLy8gV2UgaGF2ZSBwcm9jZXNzZWQgYWxsIG1hcHBpbmdzLlxuICAgIGlmIChyZW1haW5pbmdMaW5lc0luZGV4IDwgcmVtYWluaW5nTGluZXMubGVuZ3RoKSB7XG4gICAgICBpZiAobGFzdE1hcHBpbmcpIHtcbiAgICAgICAgLy8gQXNzb2NpYXRlIHRoZSByZW1haW5pbmcgY29kZSBpbiB0aGUgY3VycmVudCBsaW5lIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgIGFkZE1hcHBpbmdXaXRoQ29kZShsYXN0TWFwcGluZywgc2hpZnROZXh0TGluZSgpKTtcbiAgICAgIH1cbiAgICAgIC8vIGFuZCBhZGQgdGhlIHJlbWFpbmluZyBsaW5lcyB3aXRob3V0IGFueSBtYXBwaW5nXG4gICAgICBub2RlLmFkZChyZW1haW5pbmdMaW5lcy5zcGxpY2UocmVtYWluaW5nTGluZXNJbmRleCkuam9pbihcIlwiKSk7XG4gICAgfVxuXG4gICAgLy8gQ29weSBzb3VyY2VzQ29udGVudCBpbnRvIFNvdXJjZU5vZGVcbiAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICB2YXIgY29udGVudCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKHNvdXJjZUZpbGUpO1xuICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYVJlbGF0aXZlUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwuam9pbihhUmVsYXRpdmVQYXRoLCBzb3VyY2VGaWxlKTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbm9kZTtcblxuICAgIGZ1bmN0aW9uIGFkZE1hcHBpbmdXaXRoQ29kZShtYXBwaW5nLCBjb2RlKSB7XG4gICAgICBpZiAobWFwcGluZyA9PT0gbnVsbCB8fCBtYXBwaW5nLnNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vZGUuYWRkKGNvZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFSZWxhdGl2ZVBhdGhcbiAgICAgICAgICA/IHV0aWwuam9pbihhUmVsYXRpdmVQYXRoLCBtYXBwaW5nLnNvdXJjZSlcbiAgICAgICAgICA6IG1hcHBpbmcuc291cmNlO1xuICAgICAgICBub2RlLmFkZChuZXcgU291cmNlTm9kZShtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwaW5nLm5hbWUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbi8qKlxuICogQWRkIGEgY2h1bmsgb2YgZ2VuZXJhdGVkIEpTIHRvIHRoaXMgc291cmNlIG5vZGUuXG4gKlxuICogQHBhcmFtIGFDaHVuayBBIHN0cmluZyBzbmlwcGV0IG9mIGdlbmVyYXRlZCBKUyBjb2RlLCBhbm90aGVyIGluc3RhbmNlIG9mXG4gKiAgICAgICAgU291cmNlTm9kZSwgb3IgYW4gYXJyYXkgd2hlcmUgZWFjaCBtZW1iZXIgaXMgb25lIG9mIHRob3NlIHRoaW5ncy5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gU291cmNlTm9kZV9hZGQoYUNodW5rKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFDaHVuaykpIHtcbiAgICBhQ2h1bmsuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgIHRoaXMuYWRkKGNodW5rKTtcbiAgICB9LCB0aGlzKTtcbiAgfVxuICBlbHNlIGlmIChhQ2h1bmtbaXNTb3VyY2VOb2RlXSB8fCB0eXBlb2YgYUNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKGFDaHVuaykge1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGFDaHVuayk7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBcIkV4cGVjdGVkIGEgU291cmNlTm9kZSwgc3RyaW5nLCBvciBhbiBhcnJheSBvZiBTb3VyY2VOb2RlcyBhbmQgc3RyaW5ncy4gR290IFwiICsgYUNodW5rXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWRkIGEgY2h1bmsgb2YgZ2VuZXJhdGVkIEpTIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBzb3VyY2Ugbm9kZS5cbiAqXG4gKiBAcGFyYW0gYUNodW5rIEEgc3RyaW5nIHNuaXBwZXQgb2YgZ2VuZXJhdGVkIEpTIGNvZGUsIGFub3RoZXIgaW5zdGFuY2Ugb2ZcbiAqICAgICAgICBTb3VyY2VOb2RlLCBvciBhbiBhcnJheSB3aGVyZSBlYWNoIG1lbWJlciBpcyBvbmUgb2YgdGhvc2UgdGhpbmdzLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24gU291cmNlTm9kZV9wcmVwZW5kKGFDaHVuaykge1xuICBpZiAoQXJyYXkuaXNBcnJheShhQ2h1bmspKSB7XG4gICAgZm9yICh2YXIgaSA9IGFDaHVuay5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRoaXMucHJlcGVuZChhQ2h1bmtbaV0pO1xuICAgIH1cbiAgfVxuICBlbHNlIGlmIChhQ2h1bmtbaXNTb3VyY2VOb2RlXSB8fCB0eXBlb2YgYUNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgdGhpcy5jaGlsZHJlbi51bnNoaWZ0KGFDaHVuayk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIFwiRXhwZWN0ZWQgYSBTb3VyY2VOb2RlLCBzdHJpbmcsIG9yIGFuIGFycmF5IG9mIFNvdXJjZU5vZGVzIGFuZCBzdHJpbmdzLiBHb3QgXCIgKyBhQ2h1bmtcbiAgICApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBXYWxrIG92ZXIgdGhlIHRyZWUgb2YgSlMgc25pcHBldHMgaW4gdGhpcyBub2RlIGFuZCBpdHMgY2hpbGRyZW4uIFRoZVxuICogd2Fsa2luZyBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBmb3IgZWFjaCBzbmlwcGV0IG9mIEpTIGFuZCBpcyBwYXNzZWQgdGhhdFxuICogc25pcHBldCBhbmQgdGhlIGl0cyBvcmlnaW5hbCBhc3NvY2lhdGVkIHNvdXJjZSdzIGxpbmUvY29sdW1uIGxvY2F0aW9uLlxuICpcbiAqIEBwYXJhbSBhRm4gVGhlIHRyYXZlcnNhbCBmdW5jdGlvbi5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfd2FsayhhRm4pIHtcbiAgdmFyIGNodW5rO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNodW5rID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICBpZiAoY2h1bmtbaXNTb3VyY2VOb2RlXSkge1xuICAgICAgY2h1bmsud2FsayhhRm4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmIChjaHVuayAhPT0gJycpIHtcbiAgICAgICAgYUZuKGNodW5rLCB7IHNvdXJjZTogdGhpcy5zb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLmxpbmUsXG4gICAgICAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBMaWtlIGBTdHJpbmcucHJvdG90eXBlLmpvaW5gIGV4Y2VwdCBmb3IgU291cmNlTm9kZXMuIEluc2VydHMgYGFTdHJgIGJldHdlZW5cbiAqIGVhY2ggb2YgYHRoaXMuY2hpbGRyZW5gLlxuICpcbiAqIEBwYXJhbSBhU2VwIFRoZSBzZXBhcmF0b3IuXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBTb3VyY2VOb2RlX2pvaW4oYVNlcCkge1xuICB2YXIgbmV3Q2hpbGRyZW47XG4gIHZhciBpO1xuICB2YXIgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gIGlmIChsZW4gPiAwKSB7XG4gICAgbmV3Q2hpbGRyZW4gPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuLTE7IGkrKykge1xuICAgICAgbmV3Q2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcbiAgICAgIG5ld0NoaWxkcmVuLnB1c2goYVNlcCk7XG4gICAgfVxuICAgIG5ld0NoaWxkcmVuLnB1c2godGhpcy5jaGlsZHJlbltpXSk7XG4gICAgdGhpcy5jaGlsZHJlbiA9IG5ld0NoaWxkcmVuO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSBvbiB0aGUgdmVyeSByaWdodC1tb3N0IHNvdXJjZSBzbmlwcGV0LiBVc2VmdWxcbiAqIGZvciB0cmltbWluZyB3aGl0ZXNwYWNlIGZyb20gdGhlIGVuZCBvZiBhIHNvdXJjZSBub2RlLCBldGMuXG4gKlxuICogQHBhcmFtIGFQYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gKiBAcGFyYW0gYVJlcGxhY2VtZW50IFRoZSB0aGluZyB0byByZXBsYWNlIHRoZSBwYXR0ZXJuIHdpdGguXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnJlcGxhY2VSaWdodCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfcmVwbGFjZVJpZ2h0KGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpIHtcbiAgdmFyIGxhc3RDaGlsZCA9IHRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgaWYgKGxhc3RDaGlsZFtpc1NvdXJjZU5vZGVdKSB7XG4gICAgbGFzdENoaWxkLnJlcGxhY2VSaWdodChhUGF0dGVybiwgYVJlcGxhY2VtZW50KTtcbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgbGFzdENoaWxkID09PSAnc3RyaW5nJykge1xuICAgIHRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXSA9IGxhc3RDaGlsZC5yZXBsYWNlKGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpO1xuICB9XG4gIGVsc2Uge1xuICAgIHRoaXMuY2hpbGRyZW4ucHVzaCgnJy5yZXBsYWNlKGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IHRoZSBzb3VyY2UgY29udGVudCBmb3IgYSBzb3VyY2UgZmlsZS4gVGhpcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3JcbiAqIGluIHRoZSBzb3VyY2VzQ29udGVudCBmaWVsZC5cbiAqXG4gKiBAcGFyYW0gYVNvdXJjZUZpbGUgVGhlIGZpbGVuYW1lIG9mIHRoZSBzb3VyY2UgZmlsZVxuICogQHBhcmFtIGFTb3VyY2VDb250ZW50IFRoZSBjb250ZW50IG9mIHRoZSBzb3VyY2UgZmlsZVxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5zZXRTb3VyY2VDb250ZW50ID1cbiAgZnVuY3Rpb24gU291cmNlTm9kZV9zZXRTb3VyY2VDb250ZW50KGFTb3VyY2VGaWxlLCBhU291cmNlQ29udGVudCkge1xuICAgIHRoaXMuc291cmNlQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhhU291cmNlRmlsZSldID0gYVNvdXJjZUNvbnRlbnQ7XG4gIH07XG5cbi8qKlxuICogV2FsayBvdmVyIHRoZSB0cmVlIG9mIFNvdXJjZU5vZGVzLiBUaGUgd2Fsa2luZyBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIGVhY2hcbiAqIHNvdXJjZSBmaWxlIGNvbnRlbnQgYW5kIGlzIHBhc3NlZCB0aGUgZmlsZW5hbWUgYW5kIHNvdXJjZSBjb250ZW50LlxuICpcbiAqIEBwYXJhbSBhRm4gVGhlIHRyYXZlcnNhbCBmdW5jdGlvbi5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUud2Fsa1NvdXJjZUNvbnRlbnRzID1cbiAgZnVuY3Rpb24gU291cmNlTm9kZV93YWxrU291cmNlQ29udGVudHMoYUZuKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmNoaWxkcmVuW2ldW2lzU291cmNlTm9kZV0pIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbltpXS53YWxrU291cmNlQ29udGVudHMoYUZuKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc291cmNlcyA9IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQ29udGVudHMpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzb3VyY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhRm4odXRpbC5mcm9tU2V0U3RyaW5nKHNvdXJjZXNbaV0pLCB0aGlzLnNvdXJjZUNvbnRlbnRzW3NvdXJjZXNbaV1dKTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzb3VyY2Ugbm9kZS4gV2Fsa3Mgb3ZlciB0aGUgdHJlZVxuICogYW5kIGNvbmNhdGVuYXRlcyBhbGwgdGhlIHZhcmlvdXMgc25pcHBldHMgdG9nZXRoZXIgdG8gb25lIHN0cmluZy5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3RvU3RyaW5nKCkge1xuICB2YXIgc3RyID0gXCJcIjtcbiAgdGhpcy53YWxrKGZ1bmN0aW9uIChjaHVuaykge1xuICAgIHN0ciArPSBjaHVuaztcbiAgfSk7XG4gIHJldHVybiBzdHI7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNvdXJjZSBub2RlIGFsb25nIHdpdGggYSBzb3VyY2VcbiAqIG1hcC5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUudG9TdHJpbmdXaXRoU291cmNlTWFwID0gZnVuY3Rpb24gU291cmNlTm9kZV90b1N0cmluZ1dpdGhTb3VyY2VNYXAoYUFyZ3MpIHtcbiAgdmFyIGdlbmVyYXRlZCA9IHtcbiAgICBjb2RlOiBcIlwiLFxuICAgIGxpbmU6IDEsXG4gICAgY29sdW1uOiAwXG4gIH07XG4gIHZhciBtYXAgPSBuZXcgU291cmNlTWFwR2VuZXJhdG9yKGFBcmdzKTtcbiAgdmFyIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgdmFyIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gIHZhciBsYXN0T3JpZ2luYWxMaW5lID0gbnVsbDtcbiAgdmFyIGxhc3RPcmlnaW5hbENvbHVtbiA9IG51bGw7XG4gIHZhciBsYXN0T3JpZ2luYWxOYW1lID0gbnVsbDtcbiAgdGhpcy53YWxrKGZ1bmN0aW9uIChjaHVuaywgb3JpZ2luYWwpIHtcbiAgICBnZW5lcmF0ZWQuY29kZSArPSBjaHVuaztcbiAgICBpZiAob3JpZ2luYWwuc291cmNlICE9PSBudWxsXG4gICAgICAgICYmIG9yaWdpbmFsLmxpbmUgIT09IG51bGxcbiAgICAgICAgJiYgb3JpZ2luYWwuY29sdW1uICE9PSBudWxsKSB7XG4gICAgICBpZihsYXN0T3JpZ2luYWxTb3VyY2UgIT09IG9yaWdpbmFsLnNvdXJjZVxuICAgICAgICAgfHwgbGFzdE9yaWdpbmFsTGluZSAhPT0gb3JpZ2luYWwubGluZVxuICAgICAgICAgfHwgbGFzdE9yaWdpbmFsQ29sdW1uICE9PSBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgIHx8IGxhc3RPcmlnaW5hbE5hbWUgIT09IG9yaWdpbmFsLm5hbWUpIHtcbiAgICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgIHNvdXJjZTogb3JpZ2luYWwuc291cmNlLFxuICAgICAgICAgIG9yaWdpbmFsOiB7XG4gICAgICAgICAgICBsaW5lOiBvcmlnaW5hbC5saW5lLFxuICAgICAgICAgICAgY29sdW1uOiBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgICB9LFxuICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgbGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgICAgICBjb2x1bW46IGdlbmVyYXRlZC5jb2x1bW5cbiAgICAgICAgICB9LFxuICAgICAgICAgIG5hbWU6IG9yaWdpbmFsLm5hbWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBvcmlnaW5hbC5zb3VyY2U7XG4gICAgICBsYXN0T3JpZ2luYWxMaW5lID0gb3JpZ2luYWwubGluZTtcbiAgICAgIGxhc3RPcmlnaW5hbENvbHVtbiA9IG9yaWdpbmFsLmNvbHVtbjtcbiAgICAgIGxhc3RPcmlnaW5hbE5hbWUgPSBvcmlnaW5hbC5uYW1lO1xuICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChzb3VyY2VNYXBwaW5nQWN0aXZlKSB7XG4gICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbmd0aCA9IGNodW5rLmxlbmd0aDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgaWYgKGNodW5rLmNoYXJDb2RlQXQoaWR4KSA9PT0gTkVXTElORV9DT0RFKSB7XG4gICAgICAgIGdlbmVyYXRlZC5saW5lKys7XG4gICAgICAgIGdlbmVyYXRlZC5jb2x1bW4gPSAwO1xuICAgICAgICAvLyBNYXBwaW5ncyBlbmQgYXQgZW9sXG4gICAgICAgIGlmIChpZHggKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBudWxsO1xuICAgICAgICAgIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VNYXBwaW5nQWN0aXZlKSB7XG4gICAgICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgICAgc291cmNlOiBvcmlnaW5hbC5zb3VyY2UsXG4gICAgICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgICAgICBsaW5lOiBvcmlnaW5hbC5saW5lLFxuICAgICAgICAgICAgICBjb2x1bW46IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZTogb3JpZ2luYWwubmFtZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZW5lcmF0ZWQuY29sdW1uKys7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdGhpcy53YWxrU291cmNlQ29udGVudHMoZnVuY3Rpb24gKHNvdXJjZUZpbGUsIHNvdXJjZUNvbnRlbnQpIHtcbiAgICBtYXAuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBzb3VyY2VDb250ZW50KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHsgY29kZTogZ2VuZXJhdGVkLmNvZGUsIG1hcDogbWFwIH07XG59O1xuXG5leHBvcnRzLlNvdXJjZU5vZGUgPSBTb3VyY2VOb2RlO1xuIiwiLyoqXG4gKiBtYXJrZWQgLSBhIG1hcmtkb3duIHBhcnNlclxuICogQ29weXJpZ2h0IChjKSAyMDExLTIwMjIsIENocmlzdG9waGVyIEplZmZyZXkuIChNSVQgTGljZW5zZWQpXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWFya2VkanMvbWFya2VkXG4gKi9cblxuLyoqXG4gKiBETyBOT1QgRURJVCBUSElTIEZJTEVcbiAqIFRoZSBjb2RlIGluIHRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgZnJvbSBmaWxlcyBpbiAuL3NyYy9cbiAqL1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gIChnbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsIHx8IHNlbGYsIGZhY3RvcnkoZ2xvYmFsLm1hcmtlZCA9IHt9KSk7XG59KSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwge1xuICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgfSk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICAgIGlmICghbykgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gICAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICAgIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gICAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB9XG5cbiAgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtcblxuICAgIHJldHVybiBhcnIyO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvLCBhbGxvd0FycmF5TGlrZSkge1xuICAgIHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bXCJAQGl0ZXJhdG9yXCJdO1xuICAgIGlmIChpdCkgcmV0dXJuIChpdCA9IGl0LmNhbGwobykpLm5leHQuYmluZChpdCk7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpZiAoaXQpIG8gPSBpdDtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4ge1xuICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICB2YWx1ZTogb1tpKytdXG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERlZmF1bHRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhc3luYzogZmFsc2UsXG4gICAgICBiYXNlVXJsOiBudWxsLFxuICAgICAgYnJlYWtzOiBmYWxzZSxcbiAgICAgIGV4dGVuc2lvbnM6IG51bGwsXG4gICAgICBnZm06IHRydWUsXG4gICAgICBoZWFkZXJJZHM6IHRydWUsXG4gICAgICBoZWFkZXJQcmVmaXg6ICcnLFxuICAgICAgaGlnaGxpZ2h0OiBudWxsLFxuICAgICAgbGFuZ1ByZWZpeDogJ2xhbmd1YWdlLScsXG4gICAgICBtYW5nbGU6IHRydWUsXG4gICAgICBwZWRhbnRpYzogZmFsc2UsXG4gICAgICByZW5kZXJlcjogbnVsbCxcbiAgICAgIHNhbml0aXplOiBmYWxzZSxcbiAgICAgIHNhbml0aXplcjogbnVsbCxcbiAgICAgIHNpbGVudDogZmFsc2UsXG4gICAgICBzbWFydExpc3RzOiBmYWxzZSxcbiAgICAgIHNtYXJ0eXBhbnRzOiBmYWxzZSxcbiAgICAgIHRva2VuaXplcjogbnVsbCxcbiAgICAgIHdhbGtUb2tlbnM6IG51bGwsXG4gICAgICB4aHRtbDogZmFsc2VcbiAgICB9O1xuICB9XG4gIGV4cG9ydHMuZGVmYXVsdHMgPSBnZXREZWZhdWx0cygpO1xuICBmdW5jdGlvbiBjaGFuZ2VEZWZhdWx0cyhuZXdEZWZhdWx0cykge1xuICAgIGV4cG9ydHMuZGVmYXVsdHMgPSBuZXdEZWZhdWx0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXJzXG4gICAqL1xuICB2YXIgZXNjYXBlVGVzdCA9IC9bJjw+XCInXS87XG4gIHZhciBlc2NhcGVSZXBsYWNlID0gL1smPD5cIiddL2c7XG4gIHZhciBlc2NhcGVUZXN0Tm9FbmNvZGUgPSAvWzw+XCInXXwmKD8hIz9cXHcrOykvO1xuICB2YXIgZXNjYXBlUmVwbGFjZU5vRW5jb2RlID0gL1s8PlwiJ118Jig/ISM/XFx3KzspL2c7XG4gIHZhciBlc2NhcGVSZXBsYWNlbWVudHMgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnXG4gIH07XG5cbiAgdmFyIGdldEVzY2FwZVJlcGxhY2VtZW50ID0gZnVuY3Rpb24gZ2V0RXNjYXBlUmVwbGFjZW1lbnQoY2gpIHtcbiAgICByZXR1cm4gZXNjYXBlUmVwbGFjZW1lbnRzW2NoXTtcbiAgfTtcblxuICBmdW5jdGlvbiBlc2NhcGUoaHRtbCwgZW5jb2RlKSB7XG4gICAgaWYgKGVuY29kZSkge1xuICAgICAgaWYgKGVzY2FwZVRlc3QudGVzdChodG1sKSkge1xuICAgICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKGVzY2FwZVJlcGxhY2UsIGdldEVzY2FwZVJlcGxhY2VtZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGVzY2FwZVRlc3ROb0VuY29kZS50ZXN0KGh0bWwpKSB7XG4gICAgICAgIHJldHVybiBodG1sLnJlcGxhY2UoZXNjYXBlUmVwbGFjZU5vRW5jb2RlLCBnZXRFc2NhcGVSZXBsYWNlbWVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGh0bWw7XG4gIH1cbiAgdmFyIHVuZXNjYXBlVGVzdCA9IC8mKCMoPzpcXGQrKXwoPzojeFswLTlBLUZhLWZdKyl8KD86XFx3KykpOz8vaWc7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaHRtbFxuICAgKi9cblxuICBmdW5jdGlvbiB1bmVzY2FwZShodG1sKSB7XG4gICAgLy8gZXhwbGljaXRseSBtYXRjaCBkZWNpbWFsLCBoZXgsIGFuZCBuYW1lZCBIVE1MIGVudGl0aWVzXG4gICAgcmV0dXJuIGh0bWwucmVwbGFjZSh1bmVzY2FwZVRlc3QsIGZ1bmN0aW9uIChfLCBuKSB7XG4gICAgICBuID0gbi50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKG4gPT09ICdjb2xvbicpIHJldHVybiAnOic7XG5cbiAgICAgIGlmIChuLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICAgIHJldHVybiBuLmNoYXJBdCgxKSA9PT0gJ3gnID8gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChuLnN1YnN0cmluZygyKSwgMTYpKSA6IFN0cmluZy5mcm9tQ2hhckNvZGUoK24uc3Vic3RyaW5nKDEpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICcnO1xuICAgIH0pO1xuICB9XG4gIHZhciBjYXJldCA9IC8oXnxbXlxcW10pXFxeL2c7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IFJlZ0V4cH0gcmVnZXhcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdFxuICAgKi9cblxuICBmdW5jdGlvbiBlZGl0KHJlZ2V4LCBvcHQpIHtcbiAgICByZWdleCA9IHR5cGVvZiByZWdleCA9PT0gJ3N0cmluZycgPyByZWdleCA6IHJlZ2V4LnNvdXJjZTtcbiAgICBvcHQgPSBvcHQgfHwgJyc7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIHJlcGxhY2U6IGZ1bmN0aW9uIHJlcGxhY2UobmFtZSwgdmFsKSB7XG4gICAgICAgIHZhbCA9IHZhbC5zb3VyY2UgfHwgdmFsO1xuICAgICAgICB2YWwgPSB2YWwucmVwbGFjZShjYXJldCwgJyQxJyk7XG4gICAgICAgIHJlZ2V4ID0gcmVnZXgucmVwbGFjZShuYW1lLCB2YWwpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgfSxcbiAgICAgIGdldFJlZ2V4OiBmdW5jdGlvbiBnZXRSZWdleCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXgsIG9wdCk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIHZhciBub25Xb3JkQW5kQ29sb25UZXN0ID0gL1teXFx3Ol0vZztcbiAgdmFyIG9yaWdpbkluZGVwZW5kZW50VXJsID0gL14kfF5bYS16XVthLXowLTkrLi1dKjp8Xls/I10vaTtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2FuaXRpemVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhyZWZcbiAgICovXG5cbiAgZnVuY3Rpb24gY2xlYW5Vcmwoc2FuaXRpemUsIGJhc2UsIGhyZWYpIHtcbiAgICBpZiAoc2FuaXRpemUpIHtcbiAgICAgIHZhciBwcm90O1xuXG4gICAgICB0cnkge1xuICAgICAgICBwcm90ID0gZGVjb2RlVVJJQ29tcG9uZW50KHVuZXNjYXBlKGhyZWYpKS5yZXBsYWNlKG5vbldvcmRBbmRDb2xvblRlc3QsICcnKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3QuaW5kZXhPZignamF2YXNjcmlwdDonKSA9PT0gMCB8fCBwcm90LmluZGV4T2YoJ3Zic2NyaXB0OicpID09PSAwIHx8IHByb3QuaW5kZXhPZignZGF0YTonKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYmFzZSAmJiAhb3JpZ2luSW5kZXBlbmRlbnRVcmwudGVzdChocmVmKSkge1xuICAgICAgaHJlZiA9IHJlc29sdmVVcmwoYmFzZSwgaHJlZik7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGhyZWYgPSBlbmNvZGVVUkkoaHJlZikucmVwbGFjZSgvJTI1L2csICclJyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWY7XG4gIH1cbiAgdmFyIGJhc2VVcmxzID0ge307XG4gIHZhciBqdXN0RG9tYWluID0gL15bXjpdKzpcXC8qW14vXSokLztcbiAgdmFyIHByb3RvY29sID0gL14oW146XSs6KVtcXHNcXFNdKiQvO1xuICB2YXIgZG9tYWluID0gL14oW146XSs6XFwvKlteL10qKVtcXHNcXFNdKiQvO1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhyZWZcbiAgICovXG5cbiAgZnVuY3Rpb24gcmVzb2x2ZVVybChiYXNlLCBocmVmKSB7XG4gICAgaWYgKCFiYXNlVXJsc1snICcgKyBiYXNlXSkge1xuICAgICAgLy8gd2UgY2FuIGlnbm9yZSBldmVyeXRoaW5nIGluIGJhc2UgYWZ0ZXIgdGhlIGxhc3Qgc2xhc2ggb2YgaXRzIHBhdGggY29tcG9uZW50LFxuICAgICAgLy8gYnV0IHdlIG1pZ2h0IG5lZWQgdG8gYWRkIF90aGF0X1xuICAgICAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zXG4gICAgICBpZiAoanVzdERvbWFpbi50ZXN0KGJhc2UpKSB7XG4gICAgICAgIGJhc2VVcmxzWycgJyArIGJhc2VdID0gYmFzZSArICcvJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VVcmxzWycgJyArIGJhc2VdID0gcnRyaW0oYmFzZSwgJy8nLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBiYXNlID0gYmFzZVVybHNbJyAnICsgYmFzZV07XG4gICAgdmFyIHJlbGF0aXZlQmFzZSA9IGJhc2UuaW5kZXhPZignOicpID09PSAtMTtcblxuICAgIGlmIChocmVmLnN1YnN0cmluZygwLCAyKSA9PT0gJy8vJykge1xuICAgICAgaWYgKHJlbGF0aXZlQmFzZSkge1xuICAgICAgICByZXR1cm4gaHJlZjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJhc2UucmVwbGFjZShwcm90b2NvbCwgJyQxJykgKyBocmVmO1xuICAgIH0gZWxzZSBpZiAoaHJlZi5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgaWYgKHJlbGF0aXZlQmFzZSkge1xuICAgICAgICByZXR1cm4gaHJlZjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJhc2UucmVwbGFjZShkb21haW4sICckMScpICsgaHJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJhc2UgKyBocmVmO1xuICAgIH1cbiAgfVxuICB2YXIgbm9vcFRlc3QgPSB7XG4gICAgZXhlYzogZnVuY3Rpb24gbm9vcFRlc3QoKSB7fVxuICB9O1xuICBmdW5jdGlvbiBtZXJnZShvYmopIHtcbiAgICB2YXIgaSA9IDEsXG4gICAgICAgIHRhcmdldCxcbiAgICAgICAga2V5O1xuXG4gICAgZm9yICg7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRhcmdldCA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yIChrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBrZXkpKSB7XG4gICAgICAgICAgb2JqW2tleV0gPSB0YXJnZXRba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgZnVuY3Rpb24gc3BsaXRDZWxscyh0YWJsZVJvdywgY291bnQpIHtcbiAgICAvLyBlbnN1cmUgdGhhdCBldmVyeSBjZWxsLWRlbGltaXRpbmcgcGlwZSBoYXMgYSBzcGFjZVxuICAgIC8vIGJlZm9yZSBpdCB0byBkaXN0aW5ndWlzaCBpdCBmcm9tIGFuIGVzY2FwZWQgcGlwZVxuICAgIHZhciByb3cgPSB0YWJsZVJvdy5yZXBsYWNlKC9cXHwvZywgZnVuY3Rpb24gKG1hdGNoLCBvZmZzZXQsIHN0cikge1xuICAgICAgdmFyIGVzY2FwZWQgPSBmYWxzZSxcbiAgICAgICAgICBjdXJyID0gb2Zmc2V0O1xuXG4gICAgICB3aGlsZSAoLS1jdXJyID49IDAgJiYgc3RyW2N1cnJdID09PSAnXFxcXCcpIHtcbiAgICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgICAvLyBvZGQgbnVtYmVyIG9mIHNsYXNoZXMgbWVhbnMgfCBpcyBlc2NhcGVkXG4gICAgICAgIC8vIHNvIHdlIGxlYXZlIGl0IGFsb25lXG4gICAgICAgIHJldHVybiAnfCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBhZGQgc3BhY2UgYmVmb3JlIHVuZXNjYXBlZCB8XG4gICAgICAgIHJldHVybiAnIHwnO1xuICAgICAgfVxuICAgIH0pLFxuICAgICAgICBjZWxscyA9IHJvdy5zcGxpdCgvIFxcfC8pO1xuICAgIHZhciBpID0gMDsgLy8gRmlyc3QvbGFzdCBjZWxsIGluIGEgcm93IGNhbm5vdCBiZSBlbXB0eSBpZiBpdCBoYXMgbm8gbGVhZGluZy90cmFpbGluZyBwaXBlXG5cbiAgICBpZiAoIWNlbGxzWzBdLnRyaW0oKSkge1xuICAgICAgY2VsbHMuc2hpZnQoKTtcbiAgICB9XG5cbiAgICBpZiAoY2VsbHMubGVuZ3RoID4gMCAmJiAhY2VsbHNbY2VsbHMubGVuZ3RoIC0gMV0udHJpbSgpKSB7XG4gICAgICBjZWxscy5wb3AoKTtcbiAgICB9XG5cbiAgICBpZiAoY2VsbHMubGVuZ3RoID4gY291bnQpIHtcbiAgICAgIGNlbGxzLnNwbGljZShjb3VudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlIChjZWxscy5sZW5ndGggPCBjb3VudCkge1xuICAgICAgICBjZWxscy5wdXNoKCcnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBsZWFkaW5nIG9yIHRyYWlsaW5nIHdoaXRlc3BhY2UgaXMgaWdub3JlZCBwZXIgdGhlIGdmbSBzcGVjXG4gICAgICBjZWxsc1tpXSA9IGNlbGxzW2ldLnRyaW0oKS5yZXBsYWNlKC9cXFxcXFx8L2csICd8Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNlbGxzO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgdHJhaWxpbmcgJ2Mncy4gRXF1aXZhbGVudCB0byBzdHIucmVwbGFjZSgvYyokLywgJycpLlxuICAgKiAvYyokLyBpcyB2dWxuZXJhYmxlIHRvIFJFRE9TLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW52ZXJ0IFJlbW92ZSBzdWZmaXggb2Ygbm9uLWMgY2hhcnMgaW5zdGVhZC4gRGVmYXVsdCBmYWxzZXkuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHJ0cmltKHN0ciwgYywgaW52ZXJ0KSB7XG4gICAgdmFyIGwgPSBzdHIubGVuZ3RoO1xuXG4gICAgaWYgKGwgPT09IDApIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9IC8vIExlbmd0aCBvZiBzdWZmaXggbWF0Y2hpbmcgdGhlIGludmVydCBjb25kaXRpb24uXG5cblxuICAgIHZhciBzdWZmTGVuID0gMDsgLy8gU3RlcCBsZWZ0IHVudGlsIHdlIGZhaWwgdG8gbWF0Y2ggdGhlIGludmVydCBjb25kaXRpb24uXG5cbiAgICB3aGlsZSAoc3VmZkxlbiA8IGwpIHtcbiAgICAgIHZhciBjdXJyQ2hhciA9IHN0ci5jaGFyQXQobCAtIHN1ZmZMZW4gLSAxKTtcblxuICAgICAgaWYgKGN1cnJDaGFyID09PSBjICYmICFpbnZlcnQpIHtcbiAgICAgICAgc3VmZkxlbisrO1xuICAgICAgfSBlbHNlIGlmIChjdXJyQ2hhciAhPT0gYyAmJiBpbnZlcnQpIHtcbiAgICAgICAgc3VmZkxlbisrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0ci5zbGljZSgwLCBsIC0gc3VmZkxlbik7XG4gIH1cbiAgZnVuY3Rpb24gZmluZENsb3NpbmdCcmFja2V0KHN0ciwgYikge1xuICAgIGlmIChzdHIuaW5kZXhPZihiWzFdKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICB2YXIgbCA9IHN0ci5sZW5ndGg7XG4gICAgdmFyIGxldmVsID0gMCxcbiAgICAgICAgaSA9IDA7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKHN0cltpXSA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIGkrKztcbiAgICAgIH0gZWxzZSBpZiAoc3RyW2ldID09PSBiWzBdKSB7XG4gICAgICAgIGxldmVsKys7XG4gICAgICB9IGVsc2UgaWYgKHN0cltpXSA9PT0gYlsxXSkge1xuICAgICAgICBsZXZlbC0tO1xuXG4gICAgICAgIGlmIChsZXZlbCA8IDApIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfVxuICBmdW5jdGlvbiBjaGVja1Nhbml0aXplRGVwcmVjYXRpb24ob3B0KSB7XG4gICAgaWYgKG9wdCAmJiBvcHQuc2FuaXRpemUgJiYgIW9wdC5zaWxlbnQpIHtcbiAgICAgIGNvbnNvbGUud2FybignbWFya2VkKCk6IHNhbml0aXplIGFuZCBzYW5pdGl6ZXIgcGFyYW1ldGVycyBhcmUgZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDAuNy4wLCBzaG91bGQgbm90IGJlIHVzZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLiBSZWFkIG1vcmUgaGVyZTogaHR0cHM6Ly9tYXJrZWQuanMub3JnLyMvVVNJTkdfQURWQU5DRUQubWQjb3B0aW9ucycpO1xuICAgIH1cbiAgfSAvLyBjb3BpZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTQ1MDExMy84MDY3NzdcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdHRlcm5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gICAqL1xuXG4gIGZ1bmN0aW9uIHJlcGVhdFN0cmluZyhwYXR0ZXJuLCBjb3VudCkge1xuICAgIGlmIChjb3VudCA8IDEpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgICB3aGlsZSAoY291bnQgPiAxKSB7XG4gICAgICBpZiAoY291bnQgJiAxKSB7XG4gICAgICAgIHJlc3VsdCArPSBwYXR0ZXJuO1xuICAgICAgfVxuXG4gICAgICBjb3VudCA+Pj0gMTtcbiAgICAgIHBhdHRlcm4gKz0gcGF0dGVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0ICsgcGF0dGVybjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG91dHB1dExpbmsoY2FwLCBsaW5rLCByYXcsIGxleGVyKSB7XG4gICAgdmFyIGhyZWYgPSBsaW5rLmhyZWY7XG4gICAgdmFyIHRpdGxlID0gbGluay50aXRsZSA/IGVzY2FwZShsaW5rLnRpdGxlKSA6IG51bGw7XG4gICAgdmFyIHRleHQgPSBjYXBbMV0ucmVwbGFjZSgvXFxcXChbXFxbXFxdXSkvZywgJyQxJyk7XG5cbiAgICBpZiAoY2FwWzBdLmNoYXJBdCgwKSAhPT0gJyEnKSB7XG4gICAgICBsZXhlci5zdGF0ZS5pbkxpbmsgPSB0cnVlO1xuICAgICAgdmFyIHRva2VuID0ge1xuICAgICAgICB0eXBlOiAnbGluaycsXG4gICAgICAgIHJhdzogcmF3LFxuICAgICAgICBocmVmOiBocmVmLFxuICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgIHRva2VuczogbGV4ZXIuaW5saW5lVG9rZW5zKHRleHQpXG4gICAgICB9O1xuICAgICAgbGV4ZXIuc3RhdGUuaW5MaW5rID0gZmFsc2U7XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdpbWFnZScsXG4gICAgICByYXc6IHJhdyxcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICB0aXRsZTogdGl0bGUsXG4gICAgICB0ZXh0OiBlc2NhcGUodGV4dClcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaW5kZW50Q29kZUNvbXBlbnNhdGlvbihyYXcsIHRleHQpIHtcbiAgICB2YXIgbWF0Y2hJbmRlbnRUb0NvZGUgPSByYXcubWF0Y2goL14oXFxzKykoPzpgYGApLyk7XG5cbiAgICBpZiAobWF0Y2hJbmRlbnRUb0NvZGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cblxuICAgIHZhciBpbmRlbnRUb0NvZGUgPSBtYXRjaEluZGVudFRvQ29kZVsxXTtcbiAgICByZXR1cm4gdGV4dC5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgbWF0Y2hJbmRlbnRJbk5vZGUgPSBub2RlLm1hdGNoKC9eXFxzKy8pO1xuXG4gICAgICBpZiAobWF0Y2hJbmRlbnRJbk5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRlbnRJbk5vZGUgPSBtYXRjaEluZGVudEluTm9kZVswXTtcblxuICAgICAgaWYgKGluZGVudEluTm9kZS5sZW5ndGggPj0gaW5kZW50VG9Db2RlLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbm9kZS5zbGljZShpbmRlbnRUb0NvZGUubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSkuam9pbignXFxuJyk7XG4gIH1cbiAgLyoqXG4gICAqIFRva2VuaXplclxuICAgKi9cblxuXG4gIHZhciBUb2tlbml6ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRva2VuaXplcihvcHRpb25zKSB7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IGV4cG9ydHMuZGVmYXVsdHM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFRva2VuaXplci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uc3BhY2UgPSBmdW5jdGlvbiBzcGFjZShzcmMpIHtcbiAgICAgIHZhciBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLm5ld2xpbmUuZXhlYyhzcmMpO1xuXG4gICAgICBpZiAoY2FwICYmIGNhcFswXS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ3NwYWNlJyxcbiAgICAgICAgICByYXc6IGNhcFswXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uY29kZSA9IGZ1bmN0aW9uIGNvZGUoc3JjKSB7XG4gICAgICB2YXIgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5jb2RlLmV4ZWMoc3JjKTtcblxuICAgICAgaWYgKGNhcCkge1xuICAgICAgICB2YXIgdGV4dCA9IGNhcFswXS5yZXBsYWNlKC9eIHsxLDR9L2dtLCAnJyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ2NvZGUnLFxuICAgICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICAgIGNvZGVCbG9ja1N0eWxlOiAnaW5kZW50ZWQnLFxuICAgICAgICAgIHRleHQ6ICF0aGlzLm9wdGlvbnMucGVkYW50aWMgPyBydHJpbSh0ZXh0LCAnXFxuJykgOiB0ZXh0XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5mZW5jZXMgPSBmdW5jdGlvbiBmZW5jZXMoc3JjKSB7XG4gICAgICB2YXIgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5mZW5jZXMuZXhlYyhzcmMpO1xuXG4gICAgICBpZiAoY2FwKSB7XG4gICAgICAgIHZhciByYXcgPSBjYXBbMF07XG4gICAgICAgIHZhciB0ZXh0ID0gaW5kZW50Q29kZUNvbXBlbnNhdGlvbihyYXcsIGNhcFszXSB8fCAnJyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ2NvZGUnLFxuICAgICAgICAgIHJhdzogcmF3LFxuICAgICAgICAgIGxhbmc6IGNhcFsyXSA/IGNhcFsyXS50cmltKCkgOiBjYXBbMl0sXG4gICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uaGVhZGluZyA9IGZ1bmN0aW9uIGhlYWRpbmcoc3JjKSB7XG4gICAgICB2YXIgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5oZWFkaW5nLmV4ZWMoc3JjKTtcblxuICAgICAgaWYgKGNhcCkge1xuICAgICAgICB2YXIgdGV4dCA9IGNhcFsyXS50cmltKCk7IC8vIHJlbW92ZSB0cmFpbGluZyAjc1xuXG4gICAgICAgIGlmICgvIyQvLnRlc3QodGV4dCkpIHtcbiAgICAgICAgICB2YXIgdHJpbW1lZCA9IHJ0cmltKHRleHQsICcjJyk7XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgICAgICB0ZXh0ID0gdHJpbW1lZC50cmltKCk7XG4gICAgICAgICAgfSBlbHNlIGlmICghdHJpbW1lZCB8fCAvICQvLnRlc3QodHJpbW1lZCkpIHtcbiAgICAgICAgICAgIC8vIENvbW1vbk1hcmsgcmVxdWlyZXMgc3BhY2UgYmVmb3JlIHRyYWlsaW5nICNzXG4gICAgICAgICAgICB0ZXh0ID0gdHJpbW1lZC50cmltKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgICAgZGVwdGg6IGNhcFsxXS5sZW5ndGgsXG4gICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICB0b2tlbnM6IHRoaXMubGV4ZXIuaW5saW5lKHRleHQpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5ociA9IGZ1bmN0aW9uIGhyKHNyYykge1xuICAgICAgdmFyIGNhcCA9IHRoaXMucnVsZXMuYmxvY2suaHIuZXhlYyhzcmMpO1xuXG4gICAgICBpZiAoY2FwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ2hyJyxcbiAgICAgICAgICByYXc6IGNhcFswXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uYmxvY2txdW90ZSA9IGZ1bmN0aW9uIGJsb2NrcXVvdGUoc3JjKSB7XG4gICAgICB2YXIgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5ibG9ja3F1b3RlLmV4ZWMoc3JjKTtcblxuICAgICAgaWYgKGNhcCkge1xuICAgICAgICB2YXIgdGV4dCA9IGNhcFswXS5yZXBsYWNlKC9eICo+WyBcXHRdPy9nbSwgJycpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6ICdibG9ja3F1b3RlJyxcbiAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICB0b2tlbnM6IHRoaXMubGV4ZXIuYmxvY2tUb2tlbnModGV4dCwgW10pLFxuICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmxpc3QgPSBmdW5jdGlvbiBsaXN0KHNyYykge1xuICAgICAgdmFyIGNhcCA9IHRoaXMucnVsZXMuYmxvY2subGlzdC5leGVjKHNyYyk7XG5cbiAgICAgIGlmIChjYXApIHtcbiAgICAgICAgdmFyIHJhdywgaXN0YXNrLCBpc2NoZWNrZWQsIGluZGVudCwgaSwgYmxhbmtMaW5lLCBlbmRzV2l0aEJsYW5rTGluZSwgbGluZSwgbmV4dExpbmUsIHJhd0xpbmUsIGl0ZW1Db250ZW50cywgZW5kRWFybHk7XG4gICAgICAgIHZhciBidWxsID0gY2FwWzFdLnRyaW0oKTtcbiAgICAgICAgdmFyIGlzb3JkZXJlZCA9IGJ1bGwubGVuZ3RoID4gMTtcbiAgICAgICAgdmFyIGxpc3QgPSB7XG4gICAgICAgICAgdHlwZTogJ2xpc3QnLFxuICAgICAgICAgIHJhdzogJycsXG4gICAgICAgICAgb3JkZXJlZDogaXNvcmRlcmVkLFxuICAgICAgICAgIHN0YXJ0OiBpc29yZGVyZWQgPyArYnVsbC5zbGljZSgwLCAtMSkgOiAnJyxcbiAgICAgICAgICBsb29zZTogZmFsc2UsXG4gICAgICAgICAgaXRlbXM6IFtdXG4gICAgICAgIH07XG4gICAgICAgIGJ1bGwgPSBpc29yZGVyZWQgPyBcIlxcXFxkezEsOX1cXFxcXCIgKyBidWxsLnNsaWNlKC0xKSA6IFwiXFxcXFwiICsgYnVsbDtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgICAgYnVsbCA9IGlzb3JkZXJlZCA/IGJ1bGwgOiAnWyorLV0nO1xuICAgICAgICB9IC8vIEdldCBuZXh0IGxpc3QgaXRlbVxuXG5cbiAgICAgICAgdmFyIGl0ZW1SZWdleCA9IG5ldyBSZWdFeHAoXCJeKCB7MCwzfVwiICsgYnVsbCArIFwiKSgoPzpbXFx0IF1bXlxcXFxuXSopPyg/OlxcXFxufCQpKVwiKTsgLy8gQ2hlY2sgaWYgY3VycmVudCBidWxsZXQgcG9pbnQgY2FuIHN0YXJ0IGEgbmV3IExpc3QgSXRlbVxuXG4gICAgICAgIHdoaWxlIChzcmMpIHtcbiAgICAgICAgICBlbmRFYXJseSA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKCEoY2FwID0gaXRlbVJlZ2V4LmV4ZWMoc3JjKSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLnJ1bGVzLmJsb2NrLmhyLnRlc3Qoc3JjKSkge1xuICAgICAgICAgICAgLy8gRW5kIGxpc3QgaWYgYnVsbGV0IHdhcyBhY3R1YWxseSBIUiAocG9zc2libHkgbW92ZSBpbnRvIGl0ZW1SZWdleD8pXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByYXcgPSBjYXBbMF07XG4gICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhyYXcubGVuZ3RoKTtcbiAgICAgICAgICBsaW5lID0gY2FwWzJdLnNwbGl0KCdcXG4nLCAxKVswXTtcbiAgICAgICAgICBuZXh0TGluZSA9IHNyYy5zcGxpdCgnXFxuJywgMSlbMF07XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgICAgICBpbmRlbnQgPSAyO1xuICAgICAgICAgICAgaXRlbUNvbnRlbnRzID0gbGluZS50cmltTGVmdCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmRlbnQgPSBjYXBbMl0uc2VhcmNoKC9bXiBdLyk7IC8vIEZpbmQgZmlyc3Qgbm9uLXNwYWNlIGNoYXJcblxuICAgICAgICAgICAgaW5kZW50ID0gaW5kZW50ID4gNCA/IDEgOiBpbmRlbnQ7IC8vIFRyZWF0IGluZGVudGVkIGNvZGUgYmxvY2tzICg+IDQgc3BhY2VzKSBhcyBoYXZpbmcgb25seSAxIGluZGVudFxuXG4gICAgICAgICAgICBpdGVtQ29udGVudHMgPSBsaW5lLnNsaWNlKGluZGVudCk7XG4gICAgICAgICAgICBpbmRlbnQgKz0gY2FwWzFdLmxlbmd0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBibGFua0xpbmUgPSBmYWxzZTtcblxuICAgICAgICAgIGlmICghbGluZSAmJiAvXiAqJC8udGVzdChuZXh0TGluZSkpIHtcbiAgICAgICAgICAgIC8vIEl0ZW1zIGJlZ2luIHdpdGggYXQgbW9zdCBvbmUgYmxhbmsgbGluZVxuICAgICAgICAgICAgcmF3ICs9IG5leHRMaW5lICsgJ1xcbic7XG4gICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKG5leHRMaW5lLmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgZW5kRWFybHkgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghZW5kRWFybHkpIHtcbiAgICAgICAgICAgIHZhciBuZXh0QnVsbGV0UmVnZXggPSBuZXcgUmVnRXhwKFwiXiB7MCxcIiArIE1hdGgubWluKDMsIGluZGVudCAtIDEpICsgXCJ9KD86WyorLV18XFxcXGR7MSw5fVsuKV0pKCg/OiBbXlxcXFxuXSopPyg/OlxcXFxufCQpKVwiKTtcbiAgICAgICAgICAgIHZhciBoclJlZ2V4ID0gbmV3IFJlZ0V4cChcIl4gezAsXCIgKyBNYXRoLm1pbigzLCBpbmRlbnQgLSAxKSArIFwifSgoPzotICopezMsfXwoPzpfICopezMsfXwoPzpcXFxcKiAqKXszLH0pKD86XFxcXG4rfCQpXCIpO1xuICAgICAgICAgICAgdmFyIGZlbmNlc0JlZ2luUmVnZXggPSBuZXcgUmVnRXhwKFwiXiB7MCxcIiArIE1hdGgubWluKDMsIGluZGVudCAtIDEpICsgXCJ9KD86YGBgfH5+filcIik7XG4gICAgICAgICAgICB2YXIgaGVhZGluZ0JlZ2luUmVnZXggPSBuZXcgUmVnRXhwKFwiXiB7MCxcIiArIE1hdGgubWluKDMsIGluZGVudCAtIDEpICsgXCJ9I1wiKTsgLy8gQ2hlY2sgaWYgZm9sbG93aW5nIGxpbmVzIHNob3VsZCBiZSBpbmNsdWRlZCBpbiBMaXN0IEl0ZW1cblxuICAgICAgICAgICAgd2hpbGUgKHNyYykge1xuICAgICAgICAgICAgICByYXdMaW5lID0gc3JjLnNwbGl0KCdcXG4nLCAxKVswXTtcbiAgICAgICAgICAgICAgbGluZSA9IHJhd0xpbmU7IC8vIFJlLWFsaWduIHRvIGZvbGxvdyBjb21tb25tYXJrIG5lc3RpbmcgcnVsZXNcblxuICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgICAgICAgICAgbGluZSA9IGxpbmUucmVwbGFjZSgvXiB7MSw0fSg/PSggezR9KSpbXiBdKS9nLCAnICAnKTtcbiAgICAgICAgICAgICAgfSAvLyBFbmQgbGlzdCBpdGVtIGlmIGZvdW5kIGNvZGUgZmVuY2VzXG5cblxuICAgICAgICAgICAgICBpZiAoZmVuY2VzQmVnaW5SZWdleC50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH0gLy8gRW5kIGxpc3QgaXRlbSBpZiBmb3VuZCBzdGFydCBvZiBuZXcgaGVhZGluZ1xuXG5cbiAgICAgICAgICAgICAgaWYgKGhlYWRpbmdCZWdpblJlZ2V4LnRlc3QobGluZSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfSAvLyBFbmQgbGlzdCBpdGVtIGlmIGZvdW5kIHN0YXJ0IG9mIG5ldyBidWxsZXRcblxuXG4gICAgICAgICAgICAgIGlmIChuZXh0QnVsbGV0UmVnZXgudGVzdChsaW5lKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9IC8vIEhvcml6b250YWwgcnVsZSBmb3VuZFxuXG5cbiAgICAgICAgICAgICAgaWYgKGhyUmVnZXgudGVzdChzcmMpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAobGluZS5zZWFyY2goL1teIF0vKSA+PSBpbmRlbnQgfHwgIWxpbmUudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgLy8gRGVkZW50IGlmIHBvc3NpYmxlXG4gICAgICAgICAgICAgICAgaXRlbUNvbnRlbnRzICs9ICdcXG4nICsgbGluZS5zbGljZShpbmRlbnQpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFibGFua0xpbmUpIHtcbiAgICAgICAgICAgICAgICAvLyBVbnRpbCBibGFuayBsaW5lLCBpdGVtIGRvZXNuJ3QgbmVlZCBpbmRlbnRhdGlvblxuICAgICAgICAgICAgICAgIGl0ZW1Db250ZW50cyArPSAnXFxuJyArIGxpbmU7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBpbXByb3BlciBpbmRlbnRhdGlvbiBlbmRzIHRoaXMgaXRlbVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCFibGFua0xpbmUgJiYgIWxpbmUudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgY3VycmVudCBsaW5lIGlzIGJsYW5rXG4gICAgICAgICAgICAgICAgYmxhbmtMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJhdyArPSByYXdMaW5lICsgJ1xcbic7XG4gICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcocmF3TGluZS5sZW5ndGggKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWxpc3QubG9vc2UpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBwcmV2aW91cyBpdGVtIGVuZGVkIHdpdGggYSBibGFuayBsaW5lLCB0aGUgbGlzdCBpcyBsb29zZVxuICAgICAgICAgICAgaWYgKGVuZHNXaXRoQmxhbmtMaW5lKSB7XG4gICAgICAgICAgICAgIGxpc3QubG9vc2UgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvXFxuICpcXG4gKiQvLnRlc3QocmF3KSkge1xuICAgICAgICAgICAgICBlbmRzV2l0aEJsYW5rTGluZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBDaGVjayBmb3IgdGFzayBsaXN0IGl0ZW1zXG5cblxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ2ZtKSB7XG4gICAgICAgICAgICBpc3Rhc2sgPSAvXlxcW1sgeFhdXFxdIC8uZXhlYyhpdGVtQ29udGVudHMpO1xuXG4gICAgICAgICAgICBpZiAoaXN0YXNrKSB7XG4gICAgICAgICAgICAgIGlzY2hlY2tlZCA9IGlzdGFza1swXSAhPT0gJ1sgXSAnO1xuICAgICAgICAgICAgICBpdGVtQ29udGVudHMgPSBpdGVtQ29udGVudHMucmVwbGFjZSgvXlxcW1sgeFhdXFxdICsvLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGlzdC5pdGVtcy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdsaXN0X2l0ZW0nLFxuICAgICAgICAgICAgcmF3OiByYXcsXG4gICAgICAgICAgICB0YXNrOiAhIWlzdGFzayxcbiAgICAgICAgICAgIGNoZWNrZWQ6IGlzY2hlY2tlZCxcbiAgICAgICAgICAgIGxvb3NlOiBmYWxzZSxcbiAgICAgICAgICAgIHRleHQ6IGl0ZW1Db250ZW50c1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGxpc3QucmF3ICs9IHJhdztcbiAgICAgICAgfSAvLyBEbyBub3QgY29uc3VtZSBuZXdsaW5lcyBhdCBlbmQgb2YgZmluYWwgaXRlbS4gQWx0ZXJuYXRpdmVseSwgbWFrZSBpdGVtUmVnZXggKnN0YXJ0KiB3aXRoIGFueSBuZXdsaW5lcyB0byBzaW1wbGlmeS9zcGVlZCB1cCBlbmRzV2l0aEJsYW5rTGluZSBsb2dpY1xuXG5cbiAgICAgICAgbGlzdC5pdGVtc1tsaXN0Lml0ZW1zLmxlbmd0aCAtIDFdLnJhdyA9IHJhdy50cmltUmlnaHQoKTtcbiAgICAgICAgbGlzdC5pdGVtc1tsaXN0Lml0ZW1zLmxlbmd0aCAtIDFdLnRleHQgPSBpdGVtQ29udGVudHMudHJpbVJpZ2h0KCk7XG4gICAgICAgIGxpc3QucmF3ID0gbGlzdC5yYXcudHJpbVJpZ2h0KCk7XG4gICAgICAgIHZhciBsID0gbGlzdC5pdGVtcy5sZW5ndGg7IC8vIEl0ZW0gY2hpbGQgdG9rZW5zIGhhbmRsZWQgaGVyZSBhdCBlbmQgYmVjYXVzZSB3ZSBuZWVkZWQgdG8gaGF2ZSB0aGUgZmluYWwgaXRlbSB0byB0cmltIGl0IGZpcnN0XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIHRoaXMubGV4ZXIuc3RhdGUudG9wID0gZmFsc2U7XG4gICAgICAgICAgbGlzdC5pdGVtc1tpXS50b2tlbnMgPSB0aGlzLmxleGVyLmJsb2NrVG9rZW5zKGxpc3QuaXRlbXNbaV0udGV4dCwgW10pO1xuICAgICAgICAgIHZhciBzcGFjZXJzID0gbGlzdC5pdGVtc1tpXS50b2tlbnMuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC50eXBlID09PSAnc3BhY2UnO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBoYXNNdWx0aXBsZUxpbmVCcmVha3MgPSBzcGFjZXJzLmV2ZXJ5KGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgY2hhcnMgPSB0LnJhdy5zcGxpdCgnJyk7XG4gICAgICAgICAgICB2YXIgbGluZUJyZWFrcyA9IDA7XG5cbiAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UoY2hhcnMpLCBfc3RlcDsgIShfc3RlcCA9IF9pdGVyYXRvcigpKS5kb25lOykge1xuICAgICAgICAgICAgICB2YXIgX2NoYXIgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICBpZiAoX2NoYXIgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgbGluZUJyZWFrcyArPSAxO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGxpbmVCcmVha3MgPiAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKCFsaXN0Lmxvb3NlICYmIHNwYWNlcnMubGVuZ3RoICYmIGhhc011bHRpcGxlTGluZUJyZWFrcykge1xuICAgICAgICAgICAgLy8gSGF2aW5nIGEgc2luZ2xlIGxpbmUgYnJlYWsgZG9lc24ndCBtZWFuIGEgbGlzdCBpcyBsb29zZS4gQSBzaW5nbGUgbGluZSBicmVhayBpcyB0ZXJtaW5hdGluZyB0aGUgbGFzdCBsaXN0IGl0ZW1cbiAgICAgICAgICAgIGxpc3QubG9vc2UgPSB0cnVlO1xuICAgICAgICAgICAgbGlzdC5pdGVtc1tpXS5sb29zZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5odG1sID0gZnVuY3Rpb24gaHRtbChzcmMpIHtcbiAgICAgIHZhciBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmh0bWwuZXhlYyhzcmMpO1xuXG4gICAgICBpZiAoY2FwKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IHtcbiAgICAgICAgICB0eXBlOiAnaHRtbCcsXG4gICAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgICAgcHJlOiAhdGhpcy5vcHRpb25zLnNhbml0aXplciAmJiAoY2FwWzFdID09PSAncHJlJyB8fCBjYXBbMV0gPT09ICdzY3JpcHQnIHx8IGNhcFsxXSA9PT0gJ3N0eWxlJyksXG4gICAgICAgICAgdGV4dDogY2FwWzBdXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zYW5pdGl6ZSkge1xuICAgICAgICAgIHZhciB0ZXh0ID0gdGhpcy5vcHRpb25zLnNhbml0aXplciA/IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIoY2FwWzBdKSA6IGVzY2FwZShjYXBbMF0pO1xuICAgICAgICAgIHRva2VuLnR5cGUgPSAncGFyYWdyYXBoJztcbiAgICAgICAgICB0b2tlbi50ZXh0ID0gdGV4dDtcbiAgICAgICAgICB0b2tlbi50b2tlbnMgPSB0aGlzLmxleGVyLmlubGluZSh0ZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmRlZiA9IGZ1bmN0aW9uIGRlZihzcmMpIHtcbiAgICAgIHZhciBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmRlZi5leGVjKHNyYyk7XG5cbiAgICAgIGlmIChjYXApIHtcbiAgICAgICAgaWYgKGNhcFszXSkgY2FwWzNdID0gY2FwWzNdLnN1YnN0cmluZygxLCBjYXBbM10ubGVuZ3RoIC0gMSk7XG4gICAgICAgIHZhciB0YWcgPSBjYXBbMV0udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ2RlZicsXG4gICAgICAgICAgdGFnOiB0YWcsXG4gICAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgICAgaHJlZjogY2FwWzJdLFxuICAgICAgICAgIHRpdGxlOiBjYXBbM11cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnRhYmxlID0gZnVuY3Rpb24gdGFibGUoc3JjKSB7XG4gICAgICB2YXIgY2FwID0gdGhpcy5ydWxlcy5ibG9jay50YWJsZS5leGVjKHNyYyk7XG5cbiAgICAgIGlmIChjYXApIHtcbiAgICAgICAgdmFyIGl0ZW0gPSB7XG4gICAgICAgICAgdHlwZTogJ3RhYmxlJyxcbiAgICAgICAgICBoZWFkZXI6IHNwbGl0Q2VsbHMoY2FwWzFdKS5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHRleHQ6IGNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSksXG4gICAgICAgICAgYWxpZ246IGNhcFsyXS5yZXBsYWNlKC9eICp8XFx8ICokL2csICcnKS5zcGxpdCgvICpcXHwgKi8pLFxuICAgICAgICAgIHJvd3M6IGNhcFszXSAmJiBjYXBbM10udHJpbSgpID8gY2FwWzNdLnJlcGxhY2UoL1xcblsgXFx0XSokLywgJycpLnNwbGl0KCdcXG4nKSA6IFtdXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGl0ZW0uaGVhZGVyLmxlbmd0aCA9PT0gaXRlbS5hbGlnbi5sZW5ndGgpIHtcbiAgICAgICAgICBpdGVtLnJhdyA9IGNhcFswXTtcbiAgICAgICAgICB2YXIgbCA9IGl0ZW0uYWxpZ24ubGVuZ3RoO1xuICAgICAgICAgIHZhciBpLCBqLCBrLCByb3c7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoL14gKi0rOiAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ3JpZ2h0JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL14gKjotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdjZW50ZXInO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvXiAqOi0rICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnbGVmdCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsID0gaXRlbS5yb3dzLmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGl0ZW0ucm93c1tpXSA9IHNwbGl0Q2VsbHMoaXRlbS5yb3dzW2ldLCBpdGVtLmhlYWRlci5sZW5ndGgpLm1hcChmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRleHQ6IGNcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gLy8gcGFyc2UgY2hpbGQgdG9rZW5zIGluc2lkZSBoZWFkZXJzIGFuZCBjZWxsc1xuICAgICAgICAgIC8vIGhlYWRlciBjaGlsZCB0b2tlbnNcblxuXG4gICAgICAgICAgbCA9IGl0ZW0uaGVhZGVyLmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgICAgICAgIGl0ZW0uaGVhZGVyW2pdLnRva2VucyA9IHRoaXMubGV4ZXIuaW5saW5lKGl0ZW0uaGVhZGVyW2pdLnRleHQpO1xuICAgICAgICAgIH0gLy8gY2VsbCBjaGlsZCB0b2tlbnNcblxuXG4gICAgICAgICAgbCA9IGl0ZW0ucm93cy5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbDsgaisrKSB7XG4gICAgICAgICAgICByb3cgPSBpdGVtLnJvd3Nbal07XG5cbiAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCByb3cubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgcm93W2tdLnRva2VucyA9IHRoaXMubGV4ZXIuaW5saW5lKHJvd1trXS50ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ubGhlYWRpbmcgPSBmdW5jdGlvbiBsaGVhZGluZyhzcmMpIHtcbiAgICAgIHZhciBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmxoZWFkaW5nLmV4ZWMoc3JjKTtcblxuICAgICAgaWYgKGNhcCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICBkZXB0aDogY2FwWzJdLmNoYXJBdCgwKSA9PT0gJz0nID8gMSA6IDIsXG4gICAgICAgICAgdGV4dDogY2FwWzFdLFxuICAgICAgICAgIHRva2VuczogdGhpcy5sZXhlci5pbmxpbmUoY2FwWzFdKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucGFyYWdyYXBoID0gZnVuY3Rpb24gcGFyYWdyYXBoKHNyYykge1xuICAgICAgdmFyIGNhcCA9IHRoaXMucnVsZXMuYmxvY2sucGFyYWdyYXBoLmV4ZWMoc3JjKTtcblxuICAgICAgaWYgKGNhcCkge1xuICAgICAgICB2YXIgdGV4dCA9IGNhcFsxXS5jaGFyQXQoY2FwWzFdLmxlbmd0aCAtIDEpID09PSAnXFxuJyA/IGNhcFsxXS5zbGljZSgwLCAtMSkgOiBjYXBbMV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICB0b2tlbnM6IHRoaXMubGV4ZXIuaW5saW5lKHRleHQpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by50ZXh0ID0gZnVuY3Rpb24gdGV4dChzcmMpIHtcbiAgICAgIHZhciBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLnRleHQuZXhlYyhzcmMpO1xuXG4gICAgICBpZiAoY2FwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICAgIHRleHQ6IGNhcFswXSxcbiAgICAgICAgICB0b2tlbnM6IHRoaXMubGV4ZXIuaW5saW5lKGNhcFswXSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmVzY2FwZSA9IGZ1bmN0aW9uIGVzY2FwZSQxKHNyYykge1xuICAgICAgdmFyIGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLmVzY2FwZS5leGVjKHNyYyk7XG5cbiAgICAgIGlmIChjYXApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiAnZXNjYXBlJyxcbiAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICB0ZXh0OiBlc2NhcGUoY2FwWzFdKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8udGFnID0gZnVuY3Rpb24gdGFnKHNyYykge1xuICAgICAgdmFyIGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLnRhZy5leGVjKHNyYyk7XG5cbiAgICAgIGlmIChjYXApIHtcbiAgICAgICAgaWYgKCF0aGlzLmxleGVyLnN0YXRlLmluTGluayAmJiAvXjxhIC9pLnRlc3QoY2FwWzBdKSkge1xuICAgICAgICAgIHRoaXMubGV4ZXIuc3RhdGUuaW5MaW5rID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmxleGVyLnN0YXRlLmluTGluayAmJiAvXjxcXC9hPi9pLnRlc3QoY2FwWzBdKSkge1xuICAgICAgICAgIHRoaXMubGV4ZXIuc3RhdGUuaW5MaW5rID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMubGV4ZXIuc3RhdGUuaW5SYXdCbG9jayAmJiAvXjwocHJlfGNvZGV8a2JkfHNjcmlwdCkoXFxzfD4pL2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgICAgdGhpcy5sZXhlci5zdGF0ZS5pblJhd0Jsb2NrID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmxleGVyLnN0YXRlLmluUmF3QmxvY2sgJiYgL148XFwvKHByZXxjb2RlfGtiZHxzY3JpcHQpKFxcc3w+KS9pLnRlc3QoY2FwWzBdKSkge1xuICAgICAgICAgIHRoaXMubGV4ZXIuc3RhdGUuaW5SYXdCbG9jayA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiB0aGlzLm9wdGlvbnMuc2FuaXRpemUgPyAndGV4dCcgOiAnaHRtbCcsXG4gICAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgICAgaW5MaW5rOiB0aGlzLmxleGVyLnN0YXRlLmluTGluayxcbiAgICAgICAgICBpblJhd0Jsb2NrOiB0aGlzLmxleGVyLnN0YXRlLmluUmF3QmxvY2ssXG4gICAgICAgICAgdGV4dDogdGhpcy5vcHRpb25zLnNhbml0aXplID8gdGhpcy5vcHRpb25zLnNhbml0aXplciA/IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIoY2FwWzBdKSA6IGVzY2FwZShjYXBbMF0pIDogY2FwWzBdXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5saW5rID0gZnVuY3Rpb24gbGluayhzcmMpIHtcbiAgICAgIHZhciBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5saW5rLmV4ZWMoc3JjKTtcblxuICAgICAgaWYgKGNhcCkge1xuICAgICAgICB2YXIgdHJpbW1lZFVybCA9IGNhcFsyXS50cmltKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMucGVkYW50aWMgJiYgL148Ly50ZXN0KHRyaW1tZWRVcmwpKSB7XG4gICAgICAgICAgLy8gY29tbW9ubWFyayByZXF1aXJlcyBtYXRjaGluZyBhbmdsZSBicmFja2V0c1xuICAgICAgICAgIGlmICghLz4kLy50ZXN0KHRyaW1tZWRVcmwpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSAvLyBlbmRpbmcgYW5nbGUgYnJhY2tldCBjYW5ub3QgYmUgZXNjYXBlZFxuXG5cbiAgICAgICAgICB2YXIgcnRyaW1TbGFzaCA9IHJ0cmltKHRyaW1tZWRVcmwuc2xpY2UoMCwgLTEpLCAnXFxcXCcpO1xuXG4gICAgICAgICAgaWYgKCh0cmltbWVkVXJsLmxlbmd0aCAtIHJ0cmltU2xhc2gubGVuZ3RoKSAlIDIgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZmluZCBjbG9zaW5nIHBhcmVudGhlc2lzXG4gICAgICAgICAgdmFyIGxhc3RQYXJlbkluZGV4ID0gZmluZENsb3NpbmdCcmFja2V0KGNhcFsyXSwgJygpJyk7XG5cbiAgICAgICAgICBpZiAobGFzdFBhcmVuSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gY2FwWzBdLmluZGV4T2YoJyEnKSA9PT0gMCA/IDUgOiA0O1xuICAgICAgICAgICAgdmFyIGxpbmtMZW4gPSBzdGFydCArIGNhcFsxXS5sZW5ndGggKyBsYXN0UGFyZW5JbmRleDtcbiAgICAgICAgICAgIGNhcFsyXSA9IGNhcFsyXS5zdWJzdHJpbmcoMCwgbGFzdFBhcmVuSW5kZXgpO1xuICAgICAgICAgICAgY2FwWzBdID0gY2FwWzBdLnN1YnN0cmluZygwLCBsaW5rTGVuKS50cmltKCk7XG4gICAgICAgICAgICBjYXBbM10gPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaHJlZiA9IGNhcFsyXTtcbiAgICAgICAgdmFyIHRpdGxlID0gJyc7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgICAgICAgIC8vIHNwbGl0IHBlZGFudGljIGhyZWYgYW5kIHRpdGxlXG4gICAgICAgICAgdmFyIGxpbmsgPSAvXihbXidcIl0qW15cXHNdKVxccysoWydcIl0pKC4qKVxcMi8uZXhlYyhocmVmKTtcblxuICAgICAgICAgIGlmIChsaW5rKSB7XG4gICAgICAgICAgICBocmVmID0gbGlua1sxXTtcbiAgICAgICAgICAgIHRpdGxlID0gbGlua1szXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGl0bGUgPSBjYXBbM10gPyBjYXBbM10uc2xpY2UoMSwgLTEpIDogJyc7XG4gICAgICAgIH1cblxuICAgICAgICBocmVmID0gaHJlZi50cmltKCk7XG5cbiAgICAgICAgaWYgKC9ePC8udGVzdChocmVmKSkge1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMgJiYgIS8+JC8udGVzdCh0cmltbWVkVXJsKSkge1xuICAgICAgICAgICAgLy8gcGVkYW50aWMgYWxsb3dzIHN0YXJ0aW5nIGFuZ2xlIGJyYWNrZXQgd2l0aG91dCBlbmRpbmcgYW5nbGUgYnJhY2tldFxuICAgICAgICAgICAgaHJlZiA9IGhyZWYuc2xpY2UoMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhyZWYgPSBocmVmLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0cHV0TGluayhjYXAsIHtcbiAgICAgICAgICBocmVmOiBocmVmID8gaHJlZi5yZXBsYWNlKHRoaXMucnVsZXMuaW5saW5lLl9lc2NhcGVzLCAnJDEnKSA6IGhyZWYsXG4gICAgICAgICAgdGl0bGU6IHRpdGxlID8gdGl0bGUucmVwbGFjZSh0aGlzLnJ1bGVzLmlubGluZS5fZXNjYXBlcywgJyQxJykgOiB0aXRsZVxuICAgICAgICB9LCBjYXBbMF0sIHRoaXMubGV4ZXIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVmbGluayA9IGZ1bmN0aW9uIHJlZmxpbmsoc3JjLCBsaW5rcykge1xuICAgICAgdmFyIGNhcDtcblxuICAgICAgaWYgKChjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5yZWZsaW5rLmV4ZWMoc3JjKSkgfHwgKGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLm5vbGluay5leGVjKHNyYykpKSB7XG4gICAgICAgIHZhciBsaW5rID0gKGNhcFsyXSB8fCBjYXBbMV0pLnJlcGxhY2UoL1xccysvZywgJyAnKTtcbiAgICAgICAgbGluayA9IGxpbmtzW2xpbmsudG9Mb3dlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKCFsaW5rIHx8ICFsaW5rLmhyZWYpIHtcbiAgICAgICAgICB2YXIgdGV4dCA9IGNhcFswXS5jaGFyQXQoMCk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIHJhdzogdGV4dCxcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dExpbmsoY2FwLCBsaW5rLCBjYXBbMF0sIHRoaXMubGV4ZXIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZW1TdHJvbmcgPSBmdW5jdGlvbiBlbVN0cm9uZyhzcmMsIG1hc2tlZFNyYywgcHJldkNoYXIpIHtcbiAgICAgIGlmIChwcmV2Q2hhciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHByZXZDaGFyID0gJyc7XG4gICAgICB9XG5cbiAgICAgIHZhciBtYXRjaCA9IHRoaXMucnVsZXMuaW5saW5lLmVtU3Ryb25nLmxEZWxpbS5leGVjKHNyYyk7XG4gICAgICBpZiAoIW1hdGNoKSByZXR1cm47IC8vIF8gY2FuJ3QgYmUgYmV0d2VlbiB0d28gYWxwaGFudW1lcmljcy4gXFxwe0x9XFxwe059IGluY2x1ZGVzIG5vbi1lbmdsaXNoIGFscGhhYmV0L251bWJlcnMgYXMgd2VsbFxuXG4gICAgICBpZiAobWF0Y2hbM10gJiYgcHJldkNoYXIubWF0Y2goLyg/OlswLTlBLVphLXpcXHhBQVxceEIyXFx4QjNcXHhCNVxceEI5XFx4QkFcXHhCQy1cXHhCRVxceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyRlxcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYwLVxcdTA1ODhcXHUwNUQwLVxcdTA1RUFcXHUwNUVGLVxcdTA1RjJcXHUwNjIwLVxcdTA2NEFcXHUwNjYwLVxcdTA2NjlcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUUtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwXFx1MDcxMi1cXHUwNzJGXFx1MDc0RC1cXHUwN0E1XFx1MDdCMVxcdTA3QzAtXFx1MDdFQVxcdTA3RjRcXHUwN0Y1XFx1MDdGQVxcdTA4MDAtXFx1MDgxNVxcdTA4MUFcXHUwODI0XFx1MDgyOFxcdTA4NDAtXFx1MDg1OFxcdTA4NjAtXFx1MDg2QVxcdTA4NzAtXFx1MDg4N1xcdTA4ODktXFx1MDg4RVxcdTA4QTAtXFx1MDhDOVxcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk2Ni1cXHUwOTZGXFx1MDk3MS1cXHUwOTgwXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RTYtXFx1MDlGMVxcdTA5RjQtXFx1MDlGOVxcdTA5RkNcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTY2LVxcdTBBNkZcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQUU2LVxcdTBBRUZcXHUwQUY5XFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNjYtXFx1MEI2RlxcdTBCNzEtXFx1MEI3N1xcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJEMFxcdTBCRTYtXFx1MEJGMlxcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzOVxcdTBDM0RcXHUwQzU4LVxcdTBDNUFcXHUwQzVEXFx1MEM2MFxcdTBDNjFcXHUwQzY2LVxcdTBDNkZcXHUwQzc4LVxcdTBDN0VcXHUwQzgwXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDRERcXHUwQ0RFXFx1MENFMFxcdTBDRTFcXHUwQ0U2LVxcdTBDRUZcXHUwQ0YxXFx1MENGMlxcdTBEMDQtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQzQVxcdTBEM0RcXHUwRDRFXFx1MEQ1NC1cXHUwRDU2XFx1MEQ1OC1cXHUwRDYxXFx1MEQ2Ni1cXHUwRDc4XFx1MEQ3QS1cXHUwRDdGXFx1MEQ4NS1cXHUwRDk2XFx1MEQ5QS1cXHUwREIxXFx1MERCMy1cXHUwREJCXFx1MERCRFxcdTBEQzAtXFx1MERDNlxcdTBERTYtXFx1MERFRlxcdTBFMDEtXFx1MEUzMFxcdTBFMzJcXHUwRTMzXFx1MEU0MC1cXHUwRTQ2XFx1MEU1MC1cXHUwRTU5XFx1MEU4MVxcdTBFODJcXHUwRTg0XFx1MEU4Ni1cXHUwRThBXFx1MEU4Qy1cXHUwRUEzXFx1MEVBNVxcdTBFQTctXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRUQwLVxcdTBFRDlcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEYyMC1cXHUwRjMzXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY4OC1cXHUwRjhDXFx1MTAwMC1cXHUxMDJBXFx1MTAzRi1cXHUxMDQ5XFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwOTAtXFx1MTA5OVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzY5LVxcdTEzN0NcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjVcXHUxM0Y4LVxcdTEzRkRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkVFLVxcdTE2RjhcXHUxNzAwLVxcdTE3MTFcXHUxNzFGLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE3RTAtXFx1MTdFOVxcdTE3RjAtXFx1MTdGOVxcdTE4MTAtXFx1MTgxOVxcdTE4MjAtXFx1MTg3OFxcdTE4ODAtXFx1MTg4NFxcdTE4ODctXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTQ2LVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxOUQwLVxcdTE5REFcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQTgwLVxcdTFBODlcXHUxQTkwLVxcdTFBOTlcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRDXFx1MUI1MC1cXHUxQjU5XFx1MUI4My1cXHUxQkEwXFx1MUJBRS1cXHUxQkU1XFx1MUMwMC1cXHUxQzIzXFx1MUM0MC1cXHUxQzQ5XFx1MUM0RC1cXHUxQzdEXFx1MUM4MC1cXHUxQzg4XFx1MUM5MC1cXHUxQ0JBXFx1MUNCRC1cXHUxQ0JGXFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YzXFx1MUNGNVxcdTFDRjZcXHUxQ0ZBXFx1MUQwMC1cXHUxREJGXFx1MUUwMC1cXHUxRjE1XFx1MUYxOC1cXHUxRjFEXFx1MUYyMC1cXHUxRjQ1XFx1MUY0OC1cXHUxRjREXFx1MUY1MC1cXHUxRjU3XFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1Ri1cXHUxRjdEXFx1MUY4MC1cXHUxRkI0XFx1MUZCNi1cXHUxRkJDXFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzYtXFx1MUZDQ1xcdTFGRDAtXFx1MUZEM1xcdTFGRDYtXFx1MUZEQlxcdTFGRTAtXFx1MUZFQ1xcdTFGRjItXFx1MUZGNFxcdTFGRjYtXFx1MUZGQ1xcdTIwNzBcXHUyMDcxXFx1MjA3NC1cXHUyMDc5XFx1MjA3Ri1cXHUyMDg5XFx1MjA5MC1cXHUyMDlDXFx1MjEwMlxcdTIxMDdcXHUyMTBBLVxcdTIxMTNcXHUyMTE1XFx1MjExOS1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTJEXFx1MjEyRi1cXHUyMTM5XFx1MjEzQy1cXHUyMTNGXFx1MjE0NS1cXHUyMTQ5XFx1MjE0RVxcdTIxNTAtXFx1MjE4OVxcdTI0NjAtXFx1MjQ5QlxcdTI0RUEtXFx1MjRGRlxcdTI3NzYtXFx1Mjc5M1xcdTJDMDAtXFx1MkNFNFxcdTJDRUItXFx1MkNFRVxcdTJDRjJcXHUyQ0YzXFx1MkNGRFxcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJFMkZcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlELVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkZcXHUzMTMxLVxcdTMxOEVcXHUzMTkyLVxcdTMxOTVcXHUzMUEwLVxcdTMxQkZcXHUzMUYwLVxcdTMxRkZcXHUzMjIwLVxcdTMyMjlcXHUzMjQ4LVxcdTMyNEZcXHUzMjUxLVxcdTMyNUZcXHUzMjgwLVxcdTMyODlcXHUzMkIxLVxcdTMyQkZcXHUzNDAwLVxcdTREQkZcXHU0RTAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MkJcXHVBNjQwLVxcdUE2NkVcXHVBNjdGLVxcdUE2OURcXHVBNkEwLVxcdUE2RUZcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3Q0FcXHVBN0QwXFx1QTdEMVxcdUE3RDNcXHVBN0Q1LVxcdUE3RDlcXHVBN0YyLVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODMwLVxcdUE4MzVcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEQwLVxcdUE4RDlcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QThGRFxcdUE4RkVcXHVBOTAwLVxcdUE5MjVcXHVBOTMwLVxcdUE5NDZcXHVBOTYwLVxcdUE5N0NcXHVBOTg0LVxcdUE5QjJcXHVBOUNGLVxcdUE5RDlcXHVBOUUwLVxcdUE5RTRcXHVBOUU2LVxcdUE5RkVcXHVBQTAwLVxcdUFBMjhcXHVBQTQwLVxcdUFBNDJcXHVBQTQ0LVxcdUFBNEJcXHVBQTUwLVxcdUFBNTlcXHVBQTYwLVxcdUFBNzZcXHVBQTdBXFx1QUE3RS1cXHVBQUFGXFx1QUFCMVxcdUFBQjVcXHVBQUI2XFx1QUFCOS1cXHVBQUJEXFx1QUFDMFxcdUFBQzJcXHVBQURCLVxcdUFBRERcXHVBQUUwLVxcdUFBRUFcXHVBQUYyLVxcdUFBRjRcXHVBQjAxLVxcdUFCMDZcXHVBQjA5LVxcdUFCMEVcXHVBQjExLVxcdUFCMTZcXHVBQjIwLVxcdUFCMjZcXHVBQjI4LVxcdUFCMkVcXHVBQjMwLVxcdUFCNUFcXHVBQjVDLVxcdUFCNjlcXHVBQjcwLVxcdUFCRTJcXHVBQkYwLVxcdUFCRjlcXHVBQzAwLVxcdUQ3QTNcXHVEN0IwLVxcdUQ3QzZcXHVEN0NCLVxcdUQ3RkJcXHVGOTAwLVxcdUZBNkRcXHVGQTcwLVxcdUZBRDlcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzOC1cXHVGQjNDXFx1RkIzRVxcdUZCNDBcXHVGQjQxXFx1RkI0M1xcdUZCNDRcXHVGQjQ2LVxcdUZCQjFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkJcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNcXHVGRjEwLVxcdUZGMTlcXHVGRjIxLVxcdUZGM0FcXHVGRjQxLVxcdUZGNUFcXHVGRjY2LVxcdUZGQkVcXHVGRkMyLVxcdUZGQzdcXHVGRkNBLVxcdUZGQ0ZcXHVGRkQyLVxcdUZGRDdcXHVGRkRBLVxcdUZGRENdfFxcdUQ4MDBbXFx1REMwMC1cXHVEQzBCXFx1REMwRC1cXHVEQzI2XFx1REMyOC1cXHVEQzNBXFx1REMzQ1xcdURDM0RcXHVEQzNGLVxcdURDNERcXHVEQzUwLVxcdURDNURcXHVEQzgwLVxcdURDRkFcXHVERDA3LVxcdUREMzNcXHVERDQwLVxcdURENzhcXHVERDhBXFx1REQ4QlxcdURFODAtXFx1REU5Q1xcdURFQTAtXFx1REVEMFxcdURFRTEtXFx1REVGQlxcdURGMDAtXFx1REYyM1xcdURGMkQtXFx1REY0QVxcdURGNTAtXFx1REY3NVxcdURGODAtXFx1REY5RFxcdURGQTAtXFx1REZDM1xcdURGQzgtXFx1REZDRlxcdURGRDEtXFx1REZENV18XFx1RDgwMVtcXHVEQzAwLVxcdURDOURcXHVEQ0EwLVxcdURDQTlcXHVEQ0IwLVxcdURDRDNcXHVEQ0Q4LVxcdURDRkJcXHVERDAwLVxcdUREMjdcXHVERDMwLVxcdURENjNcXHVERDcwLVxcdUREN0FcXHVERDdDLVxcdUREOEFcXHVERDhDLVxcdUREOTJcXHVERDk0XFx1REQ5NVxcdUREOTctXFx1RERBMVxcdUREQTMtXFx1RERCMVxcdUREQjMtXFx1RERCOVxcdUREQkJcXHVEREJDXFx1REUwMC1cXHVERjM2XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjY3XFx1REY4MC1cXHVERjg1XFx1REY4Ny1cXHVERkIwXFx1REZCMi1cXHVERkJBXXxcXHVEODAyW1xcdURDMDAtXFx1REMwNVxcdURDMDhcXHVEQzBBLVxcdURDMzVcXHVEQzM3XFx1REMzOFxcdURDM0NcXHVEQzNGLVxcdURDNTVcXHVEQzU4LVxcdURDNzZcXHVEQzc5LVxcdURDOUVcXHVEQ0E3LVxcdURDQUZcXHVEQ0UwLVxcdURDRjJcXHVEQ0Y0XFx1RENGNVxcdURDRkItXFx1REQxQlxcdUREMjAtXFx1REQzOVxcdUREODAtXFx1RERCN1xcdUREQkMtXFx1RERDRlxcdURERDItXFx1REUwMFxcdURFMTAtXFx1REUxM1xcdURFMTUtXFx1REUxN1xcdURFMTktXFx1REUzNVxcdURFNDAtXFx1REU0OFxcdURFNjAtXFx1REU3RVxcdURFODAtXFx1REU5RlxcdURFQzAtXFx1REVDN1xcdURFQzktXFx1REVFNFxcdURFRUItXFx1REVFRlxcdURGMDAtXFx1REYzNVxcdURGNDAtXFx1REY1NVxcdURGNTgtXFx1REY3MlxcdURGNzgtXFx1REY5MVxcdURGQTktXFx1REZBRl18XFx1RDgwM1tcXHVEQzAwLVxcdURDNDhcXHVEQzgwLVxcdURDQjJcXHVEQ0MwLVxcdURDRjJcXHVEQ0ZBLVxcdUREMjNcXHVERDMwLVxcdUREMzlcXHVERTYwLVxcdURFN0VcXHVERTgwLVxcdURFQTlcXHVERUIwXFx1REVCMVxcdURGMDAtXFx1REYyN1xcdURGMzAtXFx1REY0NVxcdURGNTEtXFx1REY1NFxcdURGNzAtXFx1REY4MVxcdURGQjAtXFx1REZDQlxcdURGRTAtXFx1REZGNl18XFx1RDgwNFtcXHVEQzAzLVxcdURDMzdcXHVEQzUyLVxcdURDNkZcXHVEQzcxXFx1REM3MlxcdURDNzVcXHVEQzgzLVxcdURDQUZcXHVEQ0QwLVxcdURDRThcXHVEQ0YwLVxcdURDRjlcXHVERDAzLVxcdUREMjZcXHVERDM2LVxcdUREM0ZcXHVERDQ0XFx1REQ0N1xcdURENTAtXFx1REQ3MlxcdURENzZcXHVERDgzLVxcdUREQjJcXHVEREMxLVxcdUREQzRcXHVEREQwLVxcdUREREFcXHVERERDXFx1RERFMS1cXHVEREY0XFx1REUwMC1cXHVERTExXFx1REUxMy1cXHVERTJCXFx1REU4MC1cXHVERTg2XFx1REU4OFxcdURFOEEtXFx1REU4RFxcdURFOEYtXFx1REU5RFxcdURFOUYtXFx1REVBOFxcdURFQjAtXFx1REVERVxcdURFRjAtXFx1REVGOVxcdURGMDUtXFx1REYwQ1xcdURGMEZcXHVERjEwXFx1REYxMy1cXHVERjI4XFx1REYyQS1cXHVERjMwXFx1REYzMlxcdURGMzNcXHVERjM1LVxcdURGMzlcXHVERjNEXFx1REY1MFxcdURGNUQtXFx1REY2MV18XFx1RDgwNVtcXHVEQzAwLVxcdURDMzRcXHVEQzQ3LVxcdURDNEFcXHVEQzUwLVxcdURDNTlcXHVEQzVGLVxcdURDNjFcXHVEQzgwLVxcdURDQUZcXHVEQ0M0XFx1RENDNVxcdURDQzdcXHVEQ0QwLVxcdURDRDlcXHVERDgwLVxcdUREQUVcXHVEREQ4LVxcdUREREJcXHVERTAwLVxcdURFMkZcXHVERTQ0XFx1REU1MC1cXHVERTU5XFx1REU4MC1cXHVERUFBXFx1REVCOFxcdURFQzAtXFx1REVDOVxcdURGMDAtXFx1REYxQVxcdURGMzAtXFx1REYzQlxcdURGNDAtXFx1REY0Nl18XFx1RDgwNltcXHVEQzAwLVxcdURDMkJcXHVEQ0EwLVxcdURDRjJcXHVEQ0ZGLVxcdUREMDZcXHVERDA5XFx1REQwQy1cXHVERDEzXFx1REQxNVxcdUREMTZcXHVERDE4LVxcdUREMkZcXHVERDNGXFx1REQ0MVxcdURENTAtXFx1REQ1OVxcdUREQTAtXFx1RERBN1xcdUREQUEtXFx1REREMFxcdURERTFcXHVEREUzXFx1REUwMFxcdURFMEItXFx1REUzMlxcdURFM0FcXHVERTUwXFx1REU1Qy1cXHVERTg5XFx1REU5RFxcdURFQjAtXFx1REVGOF18XFx1RDgwN1tcXHVEQzAwLVxcdURDMDhcXHVEQzBBLVxcdURDMkVcXHVEQzQwXFx1REM1MC1cXHVEQzZDXFx1REM3Mi1cXHVEQzhGXFx1REQwMC1cXHVERDA2XFx1REQwOFxcdUREMDlcXHVERDBCLVxcdUREMzBcXHVERDQ2XFx1REQ1MC1cXHVERDU5XFx1REQ2MC1cXHVERDY1XFx1REQ2N1xcdURENjhcXHVERDZBLVxcdUREODlcXHVERDk4XFx1RERBMC1cXHVEREE5XFx1REVFMC1cXHVERUYyXFx1REZCMFxcdURGQzAtXFx1REZENF18XFx1RDgwOFtcXHVEQzAwLVxcdURGOTldfFxcdUQ4MDlbXFx1REMwMC1cXHVEQzZFXFx1REM4MC1cXHVERDQzXXxcXHVEODBCW1xcdURGOTAtXFx1REZGMF18W1xcdUQ4MENcXHVEODFDLVxcdUQ4MjBcXHVEODIyXFx1RDg0MC1cXHVEODY4XFx1RDg2QS1cXHVEODZDXFx1RDg2Ri1cXHVEODcyXFx1RDg3NC1cXHVEODc5XFx1RDg4MC1cXHVEODgzXVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4MERbXFx1REMwMC1cXHVEQzJFXXxcXHVEODExW1xcdURDMDAtXFx1REU0Nl18XFx1RDgxQVtcXHVEQzAwLVxcdURFMzhcXHVERTQwLVxcdURFNUVcXHVERTYwLVxcdURFNjlcXHVERTcwLVxcdURFQkVcXHVERUMwLVxcdURFQzlcXHVERUQwLVxcdURFRURcXHVERjAwLVxcdURGMkZcXHVERjQwLVxcdURGNDNcXHVERjUwLVxcdURGNTlcXHVERjVCLVxcdURGNjFcXHVERjYzLVxcdURGNzdcXHVERjdELVxcdURGOEZdfFxcdUQ4MUJbXFx1REU0MC1cXHVERTk2XFx1REYwMC1cXHVERjRBXFx1REY1MFxcdURGOTMtXFx1REY5RlxcdURGRTBcXHVERkUxXFx1REZFM118XFx1RDgyMVtcXHVEQzAwLVxcdURGRjddfFxcdUQ4MjNbXFx1REMwMC1cXHVEQ0Q1XFx1REQwMC1cXHVERDA4XXxcXHVEODJCW1xcdURGRjAtXFx1REZGM1xcdURGRjUtXFx1REZGQlxcdURGRkRcXHVERkZFXXxcXHVEODJDW1xcdURDMDAtXFx1REQyMlxcdURENTAtXFx1REQ1MlxcdURENjQtXFx1REQ2N1xcdURENzAtXFx1REVGQl18XFx1RDgyRltcXHVEQzAwLVxcdURDNkFcXHVEQzcwLVxcdURDN0NcXHVEQzgwLVxcdURDODhcXHVEQzkwLVxcdURDOTldfFxcdUQ4MzRbXFx1REVFMC1cXHVERUYzXFx1REY2MC1cXHVERjc4XXxcXHVEODM1W1xcdURDMDAtXFx1REM1NFxcdURDNTYtXFx1REM5Q1xcdURDOUVcXHVEQzlGXFx1RENBMlxcdURDQTVcXHVEQ0E2XFx1RENBOS1cXHVEQ0FDXFx1RENBRS1cXHVEQ0I5XFx1RENCQlxcdURDQkQtXFx1RENDM1xcdURDQzUtXFx1REQwNVxcdUREMDctXFx1REQwQVxcdUREMEQtXFx1REQxNFxcdUREMTYtXFx1REQxQ1xcdUREMUUtXFx1REQzOVxcdUREM0ItXFx1REQzRVxcdURENDAtXFx1REQ0NFxcdURENDZcXHVERDRBLVxcdURENTBcXHVERDUyLVxcdURFQTVcXHVERUE4LVxcdURFQzBcXHVERUMyLVxcdURFREFcXHVERURDLVxcdURFRkFcXHVERUZDLVxcdURGMTRcXHVERjE2LVxcdURGMzRcXHVERjM2LVxcdURGNEVcXHVERjUwLVxcdURGNkVcXHVERjcwLVxcdURGODhcXHVERjhBLVxcdURGQThcXHVERkFBLVxcdURGQzJcXHVERkM0LVxcdURGQ0JcXHVERkNFLVxcdURGRkZdfFxcdUQ4MzdbXFx1REYwMC1cXHVERjFFXXxcXHVEODM4W1xcdUREMDAtXFx1REQyQ1xcdUREMzctXFx1REQzRFxcdURENDAtXFx1REQ0OVxcdURENEVcXHVERTkwLVxcdURFQURcXHVERUMwLVxcdURFRUJcXHVERUYwLVxcdURFRjldfFxcdUQ4MzlbXFx1REZFMC1cXHVERkU2XFx1REZFOC1cXHVERkVCXFx1REZFRFxcdURGRUVcXHVERkYwLVxcdURGRkVdfFxcdUQ4M0FbXFx1REMwMC1cXHVEQ0M0XFx1RENDNy1cXHVEQ0NGXFx1REQwMC1cXHVERDQzXFx1REQ0QlxcdURENTAtXFx1REQ1OV18XFx1RDgzQltcXHVEQzcxLVxcdURDQUJcXHVEQ0FELVxcdURDQUZcXHVEQ0IxLVxcdURDQjRcXHVERDAxLVxcdUREMkRcXHVERDJGLVxcdUREM0RcXHVERTAwLVxcdURFMDNcXHVERTA1LVxcdURFMUZcXHVERTIxXFx1REUyMlxcdURFMjRcXHVERTI3XFx1REUyOS1cXHVERTMyXFx1REUzNC1cXHVERTM3XFx1REUzOVxcdURFM0JcXHVERTQyXFx1REU0N1xcdURFNDlcXHVERTRCXFx1REU0RC1cXHVERTRGXFx1REU1MVxcdURFNTJcXHVERTU0XFx1REU1N1xcdURFNTlcXHVERTVCXFx1REU1RFxcdURFNUZcXHVERTYxXFx1REU2MlxcdURFNjRcXHVERTY3LVxcdURFNkFcXHVERTZDLVxcdURFNzJcXHVERTc0LVxcdURFNzdcXHVERTc5LVxcdURFN0NcXHVERTdFXFx1REU4MC1cXHVERTg5XFx1REU4Qi1cXHVERTlCXFx1REVBMS1cXHVERUEzXFx1REVBNS1cXHVERUE5XFx1REVBQi1cXHVERUJCXXxcXHVEODNDW1xcdUREMDAtXFx1REQwQ118XFx1RDgzRVtcXHVERkYwLVxcdURGRjldfFxcdUQ4NjlbXFx1REMwMC1cXHVERURGXFx1REYwMC1cXHVERkZGXXxcXHVEODZEW1xcdURDMDAtXFx1REYzOFxcdURGNDAtXFx1REZGRl18XFx1RDg2RVtcXHVEQzAwLVxcdURDMURcXHVEQzIwLVxcdURGRkZdfFxcdUQ4NzNbXFx1REMwMC1cXHVERUExXFx1REVCMC1cXHVERkZGXXxcXHVEODdBW1xcdURDMDAtXFx1REZFMF18XFx1RDg3RVtcXHVEQzAwLVxcdURFMURdfFxcdUQ4ODRbXFx1REMwMC1cXHVERjRBXSkvKSkgcmV0dXJuO1xuICAgICAgdmFyIG5leHRDaGFyID0gbWF0Y2hbMV0gfHwgbWF0Y2hbMl0gfHwgJyc7XG5cbiAgICAgIGlmICghbmV4dENoYXIgfHwgbmV4dENoYXIgJiYgKHByZXZDaGFyID09PSAnJyB8fCB0aGlzLnJ1bGVzLmlubGluZS5wdW5jdHVhdGlvbi5leGVjKHByZXZDaGFyKSkpIHtcbiAgICAgICAgdmFyIGxMZW5ndGggPSBtYXRjaFswXS5sZW5ndGggLSAxO1xuICAgICAgICB2YXIgckRlbGltLFxuICAgICAgICAgICAgckxlbmd0aCxcbiAgICAgICAgICAgIGRlbGltVG90YWwgPSBsTGVuZ3RoLFxuICAgICAgICAgICAgbWlkRGVsaW1Ub3RhbCA9IDA7XG4gICAgICAgIHZhciBlbmRSZWcgPSBtYXRjaFswXVswXSA9PT0gJyonID8gdGhpcy5ydWxlcy5pbmxpbmUuZW1TdHJvbmcuckRlbGltQXN0IDogdGhpcy5ydWxlcy5pbmxpbmUuZW1TdHJvbmcuckRlbGltVW5kO1xuICAgICAgICBlbmRSZWcubGFzdEluZGV4ID0gMDsgLy8gQ2xpcCBtYXNrZWRTcmMgdG8gc2FtZSBzZWN0aW9uIG9mIHN0cmluZyBhcyBzcmMgKG1vdmUgdG8gbGV4ZXI/KVxuXG4gICAgICAgIG1hc2tlZFNyYyA9IG1hc2tlZFNyYy5zbGljZSgtMSAqIHNyYy5sZW5ndGggKyBsTGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKG1hdGNoID0gZW5kUmVnLmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgICAgIHJEZWxpbSA9IG1hdGNoWzFdIHx8IG1hdGNoWzJdIHx8IG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IG1hdGNoWzZdO1xuICAgICAgICAgIGlmICghckRlbGltKSBjb250aW51ZTsgLy8gc2tpcCBzaW5nbGUgKiBpbiBfX2FiYyphYmNfX1xuXG4gICAgICAgICAgckxlbmd0aCA9IHJEZWxpbS5sZW5ndGg7XG5cbiAgICAgICAgICBpZiAobWF0Y2hbM10gfHwgbWF0Y2hbNF0pIHtcbiAgICAgICAgICAgIC8vIGZvdW5kIGFub3RoZXIgTGVmdCBEZWxpbVxuICAgICAgICAgICAgZGVsaW1Ub3RhbCArPSByTGVuZ3RoO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFs1XSB8fCBtYXRjaFs2XSkge1xuICAgICAgICAgICAgLy8gZWl0aGVyIExlZnQgb3IgUmlnaHQgRGVsaW1cbiAgICAgICAgICAgIGlmIChsTGVuZ3RoICUgMyAmJiAhKChsTGVuZ3RoICsgckxlbmd0aCkgJSAzKSkge1xuICAgICAgICAgICAgICBtaWREZWxpbVRvdGFsICs9IHJMZW5ndGg7XG4gICAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBDb21tb25NYXJrIEVtcGhhc2lzIFJ1bGVzIDktMTBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkZWxpbVRvdGFsIC09IHJMZW5ndGg7XG4gICAgICAgICAgaWYgKGRlbGltVG90YWwgPiAwKSBjb250aW51ZTsgLy8gSGF2ZW4ndCBmb3VuZCBlbm91Z2ggY2xvc2luZyBkZWxpbWl0ZXJzXG4gICAgICAgICAgLy8gUmVtb3ZlIGV4dHJhIGNoYXJhY3RlcnMuICphKioqIC0+ICphKlxuXG4gICAgICAgICAgckxlbmd0aCA9IE1hdGgubWluKHJMZW5ndGgsIHJMZW5ndGggKyBkZWxpbVRvdGFsICsgbWlkRGVsaW1Ub3RhbCk7IC8vIENyZWF0ZSBgZW1gIGlmIHNtYWxsZXN0IGRlbGltaXRlciBoYXMgb2RkIGNoYXIgY291bnQuICphKioqXG5cbiAgICAgICAgICBpZiAoTWF0aC5taW4obExlbmd0aCwgckxlbmd0aCkgJSAyKSB7XG4gICAgICAgICAgICB2YXIgX3RleHQgPSBzcmMuc2xpY2UoMSwgbExlbmd0aCArIG1hdGNoLmluZGV4ICsgckxlbmd0aCk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHR5cGU6ICdlbScsXG4gICAgICAgICAgICAgIHJhdzogc3JjLnNsaWNlKDAsIGxMZW5ndGggKyBtYXRjaC5pbmRleCArIHJMZW5ndGggKyAxKSxcbiAgICAgICAgICAgICAgdGV4dDogX3RleHQsXG4gICAgICAgICAgICAgIHRva2VuczogdGhpcy5sZXhlci5pbmxpbmVUb2tlbnMoX3RleHQpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gLy8gQ3JlYXRlICdzdHJvbmcnIGlmIHNtYWxsZXN0IGRlbGltaXRlciBoYXMgZXZlbiBjaGFyIGNvdW50LiAqKmEqKipcblxuXG4gICAgICAgICAgdmFyIHRleHQgPSBzcmMuc2xpY2UoMiwgbExlbmd0aCArIG1hdGNoLmluZGV4ICsgckxlbmd0aCAtIDEpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnc3Ryb25nJyxcbiAgICAgICAgICAgIHJhdzogc3JjLnNsaWNlKDAsIGxMZW5ndGggKyBtYXRjaC5pbmRleCArIHJMZW5ndGggKyAxKSxcbiAgICAgICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgICAgICB0b2tlbnM6IHRoaXMubGV4ZXIuaW5saW5lVG9rZW5zKHRleHQpXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uY29kZXNwYW4gPSBmdW5jdGlvbiBjb2Rlc3BhbihzcmMpIHtcbiAgICAgIHZhciBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5jb2RlLmV4ZWMoc3JjKTtcblxuICAgICAgaWYgKGNhcCkge1xuICAgICAgICB2YXIgdGV4dCA9IGNhcFsyXS5yZXBsYWNlKC9cXG4vZywgJyAnKTtcbiAgICAgICAgdmFyIGhhc05vblNwYWNlQ2hhcnMgPSAvW14gXS8udGVzdCh0ZXh0KTtcbiAgICAgICAgdmFyIGhhc1NwYWNlQ2hhcnNPbkJvdGhFbmRzID0gL14gLy50ZXN0KHRleHQpICYmIC8gJC8udGVzdCh0ZXh0KTtcblxuICAgICAgICBpZiAoaGFzTm9uU3BhY2VDaGFycyAmJiBoYXNTcGFjZUNoYXJzT25Cb3RoRW5kcykge1xuICAgICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cmluZygxLCB0ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGV4dCA9IGVzY2FwZSh0ZXh0LCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiAnY29kZXNwYW4nLFxuICAgICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmJyID0gZnVuY3Rpb24gYnIoc3JjKSB7XG4gICAgICB2YXIgY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUuYnIuZXhlYyhzcmMpO1xuXG4gICAgICBpZiAoY2FwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ2JyJyxcbiAgICAgICAgICByYXc6IGNhcFswXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZGVsID0gZnVuY3Rpb24gZGVsKHNyYykge1xuICAgICAgdmFyIGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLmRlbC5leGVjKHNyYyk7XG5cbiAgICAgIGlmIChjYXApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiAnZGVsJyxcbiAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICB0ZXh0OiBjYXBbMl0sXG4gICAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZVRva2VucyhjYXBbMl0pXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5hdXRvbGluayA9IGZ1bmN0aW9uIGF1dG9saW5rKHNyYywgbWFuZ2xlKSB7XG4gICAgICB2YXIgY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUuYXV0b2xpbmsuZXhlYyhzcmMpO1xuXG4gICAgICBpZiAoY2FwKSB7XG4gICAgICAgIHZhciB0ZXh0LCBocmVmO1xuXG4gICAgICAgIGlmIChjYXBbMl0gPT09ICdAJykge1xuICAgICAgICAgIHRleHQgPSBlc2NhcGUodGhpcy5vcHRpb25zLm1hbmdsZSA/IG1hbmdsZShjYXBbMV0pIDogY2FwWzFdKTtcbiAgICAgICAgICBocmVmID0gJ21haWx0bzonICsgdGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0ID0gZXNjYXBlKGNhcFsxXSk7XG4gICAgICAgICAgaHJlZiA9IHRleHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6ICdsaW5rJyxcbiAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgICAgIGhyZWY6IGhyZWYsXG4gICAgICAgICAgdG9rZW5zOiBbe1xuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgcmF3OiB0ZXh0LFxuICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by51cmwgPSBmdW5jdGlvbiB1cmwoc3JjLCBtYW5nbGUpIHtcbiAgICAgIHZhciBjYXA7XG5cbiAgICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS51cmwuZXhlYyhzcmMpKSB7XG4gICAgICAgIHZhciB0ZXh0LCBocmVmO1xuXG4gICAgICAgIGlmIChjYXBbMl0gPT09ICdAJykge1xuICAgICAgICAgIHRleHQgPSBlc2NhcGUodGhpcy5vcHRpb25zLm1hbmdsZSA/IG1hbmdsZShjYXBbMF0pIDogY2FwWzBdKTtcbiAgICAgICAgICBocmVmID0gJ21haWx0bzonICsgdGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBkbyBleHRlbmRlZCBhdXRvbGluayBwYXRoIHZhbGlkYXRpb25cbiAgICAgICAgICB2YXIgcHJldkNhcFplcm87XG5cbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBwcmV2Q2FwWmVybyA9IGNhcFswXTtcbiAgICAgICAgICAgIGNhcFswXSA9IHRoaXMucnVsZXMuaW5saW5lLl9iYWNrcGVkYWwuZXhlYyhjYXBbMF0pWzBdO1xuICAgICAgICAgIH0gd2hpbGUgKHByZXZDYXBaZXJvICE9PSBjYXBbMF0pO1xuXG4gICAgICAgICAgdGV4dCA9IGVzY2FwZShjYXBbMF0pO1xuXG4gICAgICAgICAgaWYgKGNhcFsxXSA9PT0gJ3d3dy4nKSB7XG4gICAgICAgICAgICBocmVmID0gJ2h0dHA6Ly8nICsgdGV4dDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaHJlZiA9IHRleHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiAnbGluaycsXG4gICAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICBocmVmOiBocmVmLFxuICAgICAgICAgIHRva2VuczogW3tcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIHJhdzogdGV4dCxcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uaW5saW5lVGV4dCA9IGZ1bmN0aW9uIGlubGluZVRleHQoc3JjLCBzbWFydHlwYW50cykge1xuICAgICAgdmFyIGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLnRleHQuZXhlYyhzcmMpO1xuXG4gICAgICBpZiAoY2FwKSB7XG4gICAgICAgIHZhciB0ZXh0O1xuXG4gICAgICAgIGlmICh0aGlzLmxleGVyLnN0YXRlLmluUmF3QmxvY2spIHtcbiAgICAgICAgICB0ZXh0ID0gdGhpcy5vcHRpb25zLnNhbml0aXplID8gdGhpcy5vcHRpb25zLnNhbml0aXplciA/IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIoY2FwWzBdKSA6IGVzY2FwZShjYXBbMF0pIDogY2FwWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHQgPSBlc2NhcGUodGhpcy5vcHRpb25zLnNtYXJ0eXBhbnRzID8gc21hcnR5cGFudHMoY2FwWzBdKSA6IGNhcFswXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBUb2tlbml6ZXI7XG4gIH0oKTtcblxuICAvKipcbiAgICogQmxvY2stTGV2ZWwgR3JhbW1hclxuICAgKi9cblxuICB2YXIgYmxvY2sgPSB7XG4gICAgbmV3bGluZTogL14oPzogKig/OlxcbnwkKSkrLyxcbiAgICBjb2RlOiAvXiggezR9W15cXG5dKyg/Olxcbig/OiAqKD86XFxufCQpKSopPykrLyxcbiAgICBmZW5jZXM6IC9eIHswLDN9KGB7Myx9KD89W15gXFxuXSpcXG4pfH57Myx9KShbXlxcbl0qKVxcbig/OnwoW1xcc1xcU10qPylcXG4pKD86IHswLDN9XFwxW35gXSogKig/PVxcbnwkKXwkKS8sXG4gICAgaHI6IC9eIHswLDN9KCg/Oi1bXFx0IF0qKXszLH18KD86X1sgXFx0XSopezMsfXwoPzpcXCpbIFxcdF0qKXszLH0pKD86XFxuK3wkKS8sXG4gICAgaGVhZGluZzogL14gezAsM30oI3sxLDZ9KSg/PVxcc3wkKSguKikoPzpcXG4rfCQpLyxcbiAgICBibG9ja3F1b3RlOiAvXiggezAsM30+ID8ocGFyYWdyYXBofFteXFxuXSopKD86XFxufCQpKSsvLFxuICAgIGxpc3Q6IC9eKCB7MCwzfWJ1bGwpKFsgXFx0XVteXFxuXSs/KT8oPzpcXG58JCkvLFxuICAgIGh0bWw6ICdeIHswLDN9KD86JyAvLyBvcHRpb25hbCBpbmRlbnRhdGlvblxuICAgICsgJzwoc2NyaXB0fHByZXxzdHlsZXx0ZXh0YXJlYSlbXFxcXHM+XVtcXFxcc1xcXFxTXSo/KD86PC9cXFxcMT5bXlxcXFxuXSpcXFxcbit8JCknIC8vICgxKVxuICAgICsgJ3xjb21tZW50W15cXFxcbl0qKFxcXFxuK3wkKScgLy8gKDIpXG4gICAgKyAnfDxcXFxcP1tcXFxcc1xcXFxTXSo/KD86XFxcXD8+XFxcXG4qfCQpJyAvLyAoMylcbiAgICArICd8PCFbQS1aXVtcXFxcc1xcXFxTXSo/KD86PlxcXFxuKnwkKScgLy8gKDQpXG4gICAgKyAnfDwhXFxcXFtDREFUQVxcXFxbW1xcXFxzXFxcXFNdKj8oPzpcXFxcXVxcXFxdPlxcXFxuKnwkKScgLy8gKDUpXG4gICAgKyAnfDwvPyh0YWcpKD86ICt8XFxcXG58Lz8+KVtcXFxcc1xcXFxTXSo/KD86KD86XFxcXG4gKikrXFxcXG58JCknIC8vICg2KVxuICAgICsgJ3w8KD8hc2NyaXB0fHByZXxzdHlsZXx0ZXh0YXJlYSkoW2Etel1bXFxcXHctXSopKD86YXR0cmlidXRlKSo/ICovPz4oPz1bIFxcXFx0XSooPzpcXFxcbnwkKSlbXFxcXHNcXFxcU10qPyg/Oig/OlxcXFxuICopK1xcXFxufCQpJyAvLyAoNykgb3BlbiB0YWdcbiAgICArICd8PC8oPyFzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhKVthLXpdW1xcXFx3LV0qXFxcXHMqPig/PVsgXFxcXHRdKig/OlxcXFxufCQpKVtcXFxcc1xcXFxTXSo/KD86KD86XFxcXG4gKikrXFxcXG58JCknIC8vICg3KSBjbG9zaW5nIHRhZ1xuICAgICsgJyknLFxuICAgIGRlZjogL14gezAsM31cXFsobGFiZWwpXFxdOiAqKD86XFxuICopPzw/KFteXFxzPl0rKT4/KD86KD86ICsoPzpcXG4gKik/fCAqXFxuICopKHRpdGxlKSk/ICooPzpcXG4rfCQpLyxcbiAgICB0YWJsZTogbm9vcFRlc3QsXG4gICAgbGhlYWRpbmc6IC9eKFteXFxuXSspXFxuIHswLDN9KD0rfC0rKSAqKD86XFxuK3wkKS8sXG4gICAgLy8gcmVnZXggdGVtcGxhdGUsIHBsYWNlaG9sZGVycyB3aWxsIGJlIHJlcGxhY2VkIGFjY29yZGluZyB0byBkaWZmZXJlbnQgcGFyYWdyYXBoXG4gICAgLy8gaW50ZXJydXB0aW9uIHJ1bGVzIG9mIGNvbW1vbm1hcmsgYW5kIHRoZSBvcmlnaW5hbCBtYXJrZG93biBzcGVjOlxuICAgIF9wYXJhZ3JhcGg6IC9eKFteXFxuXSsoPzpcXG4oPyFocnxoZWFkaW5nfGxoZWFkaW5nfGJsb2NrcXVvdGV8ZmVuY2VzfGxpc3R8aHRtbHx0YWJsZXwgK1xcbilbXlxcbl0rKSopLyxcbiAgICB0ZXh0OiAvXlteXFxuXSsvXG4gIH07XG4gIGJsb2NrLl9sYWJlbCA9IC8oPyFcXHMqXFxdKSg/OlxcXFwufFteXFxbXFxdXFxcXF0pKy87XG4gIGJsb2NrLl90aXRsZSA9IC8oPzpcIig/OlxcXFxcIj98W15cIlxcXFxdKSpcInwnW14nXFxuXSooPzpcXG5bXidcXG5dKykqXFxuPyd8XFwoW14oKV0qXFwpKS87XG4gIGJsb2NrLmRlZiA9IGVkaXQoYmxvY2suZGVmKS5yZXBsYWNlKCdsYWJlbCcsIGJsb2NrLl9sYWJlbCkucmVwbGFjZSgndGl0bGUnLCBibG9jay5fdGl0bGUpLmdldFJlZ2V4KCk7XG4gIGJsb2NrLmJ1bGxldCA9IC8oPzpbKistXXxcXGR7MSw5fVsuKV0pLztcbiAgYmxvY2subGlzdEl0ZW1TdGFydCA9IGVkaXQoL14oICopKGJ1bGwpICovKS5yZXBsYWNlKCdidWxsJywgYmxvY2suYnVsbGV0KS5nZXRSZWdleCgpO1xuICBibG9jay5saXN0ID0gZWRpdChibG9jay5saXN0KS5yZXBsYWNlKC9idWxsL2csIGJsb2NrLmJ1bGxldCkucmVwbGFjZSgnaHInLCAnXFxcXG4rKD89XFxcXDE/KD86KD86LSAqKXszLH18KD86XyAqKXszLH18KD86XFxcXCogKil7Myx9KSg/OlxcXFxuK3wkKSknKS5yZXBsYWNlKCdkZWYnLCAnXFxcXG4rKD89JyArIGJsb2NrLmRlZi5zb3VyY2UgKyAnKScpLmdldFJlZ2V4KCk7XG4gIGJsb2NrLl90YWcgPSAnYWRkcmVzc3xhcnRpY2xlfGFzaWRlfGJhc2V8YmFzZWZvbnR8YmxvY2txdW90ZXxib2R5fGNhcHRpb24nICsgJ3xjZW50ZXJ8Y29sfGNvbGdyb3VwfGRkfGRldGFpbHN8ZGlhbG9nfGRpcnxkaXZ8ZGx8ZHR8ZmllbGRzZXR8ZmlnY2FwdGlvbicgKyAnfGZpZ3VyZXxmb290ZXJ8Zm9ybXxmcmFtZXxmcmFtZXNldHxoWzEtNl18aGVhZHxoZWFkZXJ8aHJ8aHRtbHxpZnJhbWUnICsgJ3xsZWdlbmR8bGl8bGlua3xtYWlufG1lbnV8bWVudWl0ZW18bWV0YXxuYXZ8bm9mcmFtZXN8b2x8b3B0Z3JvdXB8b3B0aW9uJyArICd8cHxwYXJhbXxzZWN0aW9ufHNvdXJjZXxzdW1tYXJ5fHRhYmxlfHRib2R5fHRkfHRmb290fHRofHRoZWFkfHRpdGxlfHRyJyArICd8dHJhY2t8dWwnO1xuICBibG9jay5fY29tbWVudCA9IC88IS0tKD8hLT8+KVtcXHNcXFNdKj8oPzotLT58JCkvO1xuICBibG9jay5odG1sID0gZWRpdChibG9jay5odG1sLCAnaScpLnJlcGxhY2UoJ2NvbW1lbnQnLCBibG9jay5fY29tbWVudCkucmVwbGFjZSgndGFnJywgYmxvY2suX3RhZykucmVwbGFjZSgnYXR0cmlidXRlJywgLyArW2EtekEtWjpfXVtcXHcuOi1dKig/OiAqPSAqXCJbXlwiXFxuXSpcInwgKj0gKidbXidcXG5dKid8ICo9ICpbXlxcc1wiJz08PmBdKyk/LykuZ2V0UmVnZXgoKTtcbiAgYmxvY2sucGFyYWdyYXBoID0gZWRpdChibG9jay5fcGFyYWdyYXBoKS5yZXBsYWNlKCdocicsIGJsb2NrLmhyKS5yZXBsYWNlKCdoZWFkaW5nJywgJyB7MCwzfSN7MSw2fSAnKS5yZXBsYWNlKCd8bGhlYWRpbmcnLCAnJykgLy8gc2V0ZXggaGVhZGluZ3MgZG9uJ3QgaW50ZXJydXB0IGNvbW1vbm1hcmsgcGFyYWdyYXBoc1xuICAucmVwbGFjZSgnfHRhYmxlJywgJycpLnJlcGxhY2UoJ2Jsb2NrcXVvdGUnLCAnIHswLDN9PicpLnJlcGxhY2UoJ2ZlbmNlcycsICcgezAsM30oPzpgezMsfSg/PVteYFxcXFxuXSpcXFxcbil8fnszLH0pW15cXFxcbl0qXFxcXG4nKS5yZXBsYWNlKCdsaXN0JywgJyB7MCwzfSg/OlsqKy1dfDFbLildKSAnKSAvLyBvbmx5IGxpc3RzIHN0YXJ0aW5nIGZyb20gMSBjYW4gaW50ZXJydXB0XG4gIC5yZXBsYWNlKCdodG1sJywgJzwvPyg/OnRhZykoPzogK3xcXFxcbnwvPz4pfDwoPzpzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhfCEtLSknKS5yZXBsYWNlKCd0YWcnLCBibG9jay5fdGFnKSAvLyBwYXJzIGNhbiBiZSBpbnRlcnJ1cHRlZCBieSB0eXBlICg2KSBodG1sIGJsb2Nrc1xuICAuZ2V0UmVnZXgoKTtcbiAgYmxvY2suYmxvY2txdW90ZSA9IGVkaXQoYmxvY2suYmxvY2txdW90ZSkucmVwbGFjZSgncGFyYWdyYXBoJywgYmxvY2sucGFyYWdyYXBoKS5nZXRSZWdleCgpO1xuICAvKipcbiAgICogTm9ybWFsIEJsb2NrIEdyYW1tYXJcbiAgICovXG5cbiAgYmxvY2subm9ybWFsID0gbWVyZ2Uoe30sIGJsb2NrKTtcbiAgLyoqXG4gICAqIEdGTSBCbG9jayBHcmFtbWFyXG4gICAqL1xuXG4gIGJsb2NrLmdmbSA9IG1lcmdlKHt9LCBibG9jay5ub3JtYWwsIHtcbiAgICB0YWJsZTogJ14gKihbXlxcXFxuIF0uKlxcXFx8LiopXFxcXG4nIC8vIEhlYWRlclxuICAgICsgJyB7MCwzfSg/OlxcXFx8ICopPyg6Py0rOj8gKig/OlxcXFx8ICo6Py0rOj8gKikqKSg/OlxcXFx8ICopPycgLy8gQWxpZ25cbiAgICArICcoPzpcXFxcbigoPzooPyEgKlxcXFxufGhyfGhlYWRpbmd8YmxvY2txdW90ZXxjb2RlfGZlbmNlc3xsaXN0fGh0bWwpLiooPzpcXFxcbnwkKSkqKVxcXFxuKnwkKScgLy8gQ2VsbHNcblxuICB9KTtcbiAgYmxvY2suZ2ZtLnRhYmxlID0gZWRpdChibG9jay5nZm0udGFibGUpLnJlcGxhY2UoJ2hyJywgYmxvY2suaHIpLnJlcGxhY2UoJ2hlYWRpbmcnLCAnIHswLDN9I3sxLDZ9ICcpLnJlcGxhY2UoJ2Jsb2NrcXVvdGUnLCAnIHswLDN9PicpLnJlcGxhY2UoJ2NvZGUnLCAnIHs0fVteXFxcXG5dJykucmVwbGFjZSgnZmVuY2VzJywgJyB7MCwzfSg/OmB7Myx9KD89W15gXFxcXG5dKlxcXFxuKXx+ezMsfSlbXlxcXFxuXSpcXFxcbicpLnJlcGxhY2UoJ2xpc3QnLCAnIHswLDN9KD86WyorLV18MVsuKV0pICcpIC8vIG9ubHkgbGlzdHMgc3RhcnRpbmcgZnJvbSAxIGNhbiBpbnRlcnJ1cHRcbiAgLnJlcGxhY2UoJ2h0bWwnLCAnPC8/KD86dGFnKSg/OiArfFxcXFxufC8/Pil8PCg/OnNjcmlwdHxwcmV8c3R5bGV8dGV4dGFyZWF8IS0tKScpLnJlcGxhY2UoJ3RhZycsIGJsb2NrLl90YWcpIC8vIHRhYmxlcyBjYW4gYmUgaW50ZXJydXB0ZWQgYnkgdHlwZSAoNikgaHRtbCBibG9ja3NcbiAgLmdldFJlZ2V4KCk7XG4gIGJsb2NrLmdmbS5wYXJhZ3JhcGggPSBlZGl0KGJsb2NrLl9wYXJhZ3JhcGgpLnJlcGxhY2UoJ2hyJywgYmxvY2suaHIpLnJlcGxhY2UoJ2hlYWRpbmcnLCAnIHswLDN9I3sxLDZ9ICcpLnJlcGxhY2UoJ3xsaGVhZGluZycsICcnKSAvLyBzZXRleCBoZWFkaW5ncyBkb24ndCBpbnRlcnJ1cHQgY29tbW9ubWFyayBwYXJhZ3JhcGhzXG4gIC5yZXBsYWNlKCd0YWJsZScsIGJsb2NrLmdmbS50YWJsZSkgLy8gaW50ZXJydXB0IHBhcmFncmFwaHMgd2l0aCB0YWJsZVxuICAucmVwbGFjZSgnYmxvY2txdW90ZScsICcgezAsM30+JykucmVwbGFjZSgnZmVuY2VzJywgJyB7MCwzfSg/OmB7Myx9KD89W15gXFxcXG5dKlxcXFxuKXx+ezMsfSlbXlxcXFxuXSpcXFxcbicpLnJlcGxhY2UoJ2xpc3QnLCAnIHswLDN9KD86WyorLV18MVsuKV0pICcpIC8vIG9ubHkgbGlzdHMgc3RhcnRpbmcgZnJvbSAxIGNhbiBpbnRlcnJ1cHRcbiAgLnJlcGxhY2UoJ2h0bWwnLCAnPC8/KD86dGFnKSg/OiArfFxcXFxufC8/Pil8PCg/OnNjcmlwdHxwcmV8c3R5bGV8dGV4dGFyZWF8IS0tKScpLnJlcGxhY2UoJ3RhZycsIGJsb2NrLl90YWcpIC8vIHBhcnMgY2FuIGJlIGludGVycnVwdGVkIGJ5IHR5cGUgKDYpIGh0bWwgYmxvY2tzXG4gIC5nZXRSZWdleCgpO1xuICAvKipcbiAgICogUGVkYW50aWMgZ3JhbW1hciAob3JpZ2luYWwgSm9obiBHcnViZXIncyBsb29zZSBtYXJrZG93biBzcGVjaWZpY2F0aW9uKVxuICAgKi9cblxuICBibG9jay5wZWRhbnRpYyA9IG1lcmdlKHt9LCBibG9jay5ub3JtYWwsIHtcbiAgICBodG1sOiBlZGl0KCdeICooPzpjb21tZW50ICooPzpcXFxcbnxcXFxccyokKScgKyAnfDwodGFnKVtcXFxcc1xcXFxTXSs/PC9cXFxcMT4gKig/OlxcXFxuezIsfXxcXFxccyokKScgLy8gY2xvc2VkIHRhZ1xuICAgICsgJ3w8dGFnKD86XCJbXlwiXSpcInxcXCdbXlxcJ10qXFwnfFxcXFxzW15cXCdcIi8+XFxcXHNdKikqPy8/PiAqKD86XFxcXG57Mix9fFxcXFxzKiQpKScpLnJlcGxhY2UoJ2NvbW1lbnQnLCBibG9jay5fY29tbWVudCkucmVwbGFjZSgvdGFnL2csICcoPyEoPzonICsgJ2F8ZW18c3Ryb25nfHNtYWxsfHN8Y2l0ZXxxfGRmbnxhYmJyfGRhdGF8dGltZXxjb2RlfHZhcnxzYW1wfGtiZHxzdWInICsgJ3xzdXB8aXxifHV8bWFya3xydWJ5fHJ0fHJwfGJkaXxiZG98c3Bhbnxicnx3YnJ8aW5zfGRlbHxpbWcpJyArICdcXFxcYilcXFxcdysoPyE6fFteXFxcXHdcXFxcc0BdKkApXFxcXGInKS5nZXRSZWdleCgpLFxuICAgIGRlZjogL14gKlxcWyhbXlxcXV0rKVxcXTogKjw/KFteXFxzPl0rKT4/KD86ICsoW1wiKF1bXlxcbl0rW1wiKV0pKT8gKig/Olxcbit8JCkvLFxuICAgIGhlYWRpbmc6IC9eKCN7MSw2fSkoLiopKD86XFxuK3wkKS8sXG4gICAgZmVuY2VzOiBub29wVGVzdCxcbiAgICAvLyBmZW5jZXMgbm90IHN1cHBvcnRlZFxuICAgIHBhcmFncmFwaDogZWRpdChibG9jay5ub3JtYWwuX3BhcmFncmFwaCkucmVwbGFjZSgnaHInLCBibG9jay5ocikucmVwbGFjZSgnaGVhZGluZycsICcgKiN7MSw2fSAqW15cXG5dJykucmVwbGFjZSgnbGhlYWRpbmcnLCBibG9jay5saGVhZGluZykucmVwbGFjZSgnYmxvY2txdW90ZScsICcgezAsM30+JykucmVwbGFjZSgnfGZlbmNlcycsICcnKS5yZXBsYWNlKCd8bGlzdCcsICcnKS5yZXBsYWNlKCd8aHRtbCcsICcnKS5nZXRSZWdleCgpXG4gIH0pO1xuICAvKipcbiAgICogSW5saW5lLUxldmVsIEdyYW1tYXJcbiAgICovXG5cbiAgdmFyIGlubGluZSA9IHtcbiAgICBlc2NhcGU6IC9eXFxcXChbIVwiIyQlJicoKSorLFxcLS4vOjs8PT4/QFxcW1xcXVxcXFxeX2B7fH1+XSkvLFxuICAgIGF1dG9saW5rOiAvXjwoc2NoZW1lOlteXFxzXFx4MDAtXFx4MWY8Pl0qfGVtYWlsKT4vLFxuICAgIHVybDogbm9vcFRlc3QsXG4gICAgdGFnOiAnXmNvbW1lbnQnICsgJ3xePC9bYS16QS1aXVtcXFxcdzotXSpcXFxccyo+JyAvLyBzZWxmLWNsb3NpbmcgdGFnXG4gICAgKyAnfF48W2EtekEtWl1bXFxcXHctXSooPzphdHRyaWJ1dGUpKj9cXFxccyovPz4nIC8vIG9wZW4gdGFnXG4gICAgKyAnfF48XFxcXD9bXFxcXHNcXFxcU10qP1xcXFw/PicgLy8gcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiwgZS5nLiA8P3BocCA/PlxuICAgICsgJ3xePCFbYS16QS1aXStcXFxcc1tcXFxcc1xcXFxTXSo/PicgLy8gZGVjbGFyYXRpb24sIGUuZy4gPCFET0NUWVBFIGh0bWw+XG4gICAgKyAnfF48IVxcXFxbQ0RBVEFcXFxcW1tcXFxcc1xcXFxTXSo/XFxcXF1cXFxcXT4nLFxuICAgIC8vIENEQVRBIHNlY3Rpb25cbiAgICBsaW5rOiAvXiE/XFxbKGxhYmVsKVxcXVxcKFxccyooaHJlZikoPzpcXHMrKHRpdGxlKSk/XFxzKlxcKS8sXG4gICAgcmVmbGluazogL14hP1xcWyhsYWJlbClcXF1cXFsocmVmKVxcXS8sXG4gICAgbm9saW5rOiAvXiE/XFxbKHJlZilcXF0oPzpcXFtcXF0pPy8sXG4gICAgcmVmbGlua1NlYXJjaDogJ3JlZmxpbmt8bm9saW5rKD8hXFxcXCgpJyxcbiAgICBlbVN0cm9uZzoge1xuICAgICAgbERlbGltOiAvXig/OlxcKisoPzooW3B1bmN0X10pfFteXFxzKl0pKXxeXysoPzooW3B1bmN0Kl0pfChbXlxcc19dKSkvLFxuICAgICAgLy8gICAgICAgICgxKSBhbmQgKDIpIGNhbiBvbmx5IGJlIGEgUmlnaHQgRGVsaW1pdGVyLiAoMykgYW5kICg0KSBjYW4gb25seSBiZSBMZWZ0LiAgKDUpIGFuZCAoNikgY2FuIGJlIGVpdGhlciBMZWZ0IG9yIFJpZ2h0LlxuICAgICAgLy8gICAgICAgICAgKCkgU2tpcCBvcnBoYW4gaW5zaWRlIHN0cm9uZyAgKCkgQ29uc3VtZSB0byBkZWxpbSAoMSkgIyoqKiAgICAgICAgICAgICAgICAoMikgYSoqKiMsIGEqKiogICAgICAgICAgICAgICAgICAgKDMpICMqKiphLCAqKiphICAgICAgICAgICAgICAgICAoNCkgKioqIyAgICAgICAgICAgICAgKDUpICMqKiojICAgICAgICAgICAgICAgICAoNikgYSoqKmFcbiAgICAgIHJEZWxpbUFzdDogL15bXl8qXSo/XFxfXFxfW15fKl0qP1xcKlteXypdKj8oPz1cXF9cXF8pfFteKl0rKD89W14qXSl8W3B1bmN0X10oXFwqKykoPz1bXFxzXXwkKXxbXnB1bmN0Kl9cXHNdKFxcKispKD89W3B1bmN0X1xcc118JCl8W3B1bmN0X1xcc10oXFwqKykoPz1bXnB1bmN0Kl9cXHNdKXxbXFxzXShcXCorKSg/PVtwdW5jdF9dKXxbcHVuY3RfXShcXCorKSg/PVtwdW5jdF9dKXxbXnB1bmN0Kl9cXHNdKFxcKispKD89W15wdW5jdCpfXFxzXSkvLFxuICAgICAgckRlbGltVW5kOiAvXlteXypdKj9cXCpcXCpbXl8qXSo/XFxfW15fKl0qPyg/PVxcKlxcKil8W15fXSsoPz1bXl9dKXxbcHVuY3QqXShcXF8rKSg/PVtcXHNdfCQpfFtecHVuY3QqX1xcc10oXFxfKykoPz1bcHVuY3QqXFxzXXwkKXxbcHVuY3QqXFxzXShcXF8rKSg/PVtecHVuY3QqX1xcc10pfFtcXHNdKFxcXyspKD89W3B1bmN0Kl0pfFtwdW5jdCpdKFxcXyspKD89W3B1bmN0Kl0pLyAvLyBeLSBOb3QgYWxsb3dlZCBmb3IgX1xuXG4gICAgfSxcbiAgICBjb2RlOiAvXihgKykoW15gXXxbXmBdW1xcc1xcU10qP1teYF0pXFwxKD8hYCkvLFxuICAgIGJyOiAvXiggezIsfXxcXFxcKVxcbig/IVxccyokKS8sXG4gICAgZGVsOiBub29wVGVzdCxcbiAgICB0ZXh0OiAvXihgK3xbXmBdKSg/Oig/PSB7Mix9XFxuKXxbXFxzXFxTXSo/KD86KD89W1xcXFw8IVxcW2AqX118XFxiX3wkKXxbXiBdKD89IHsyLH1cXG4pKSkvLFxuICAgIHB1bmN0dWF0aW9uOiAvXihbXFxzcHVuY3R1YXRpb25dKS9cbiAgfTsgLy8gbGlzdCBvZiBwdW5jdHVhdGlvbiBtYXJrcyBmcm9tIENvbW1vbk1hcmsgc3BlY1xuICAvLyB3aXRob3V0ICogYW5kIF8gdG8gaGFuZGxlIHRoZSBkaWZmZXJlbnQgZW1waGFzaXMgbWFya2VycyAqIGFuZCBfXG5cbiAgaW5saW5lLl9wdW5jdHVhdGlvbiA9ICchXCIjJCUmXFwnKCkrXFxcXC0uLC86Ozw9Pj9AXFxcXFtcXFxcXWBee3x9fic7XG4gIGlubGluZS5wdW5jdHVhdGlvbiA9IGVkaXQoaW5saW5lLnB1bmN0dWF0aW9uKS5yZXBsYWNlKC9wdW5jdHVhdGlvbi9nLCBpbmxpbmUuX3B1bmN0dWF0aW9uKS5nZXRSZWdleCgpOyAvLyBzZXF1ZW5jZXMgZW0gc2hvdWxkIHNraXAgb3ZlciBbdGl0bGVdKGxpbmspLCBgY29kZWAsIDxodG1sPlxuXG4gIGlubGluZS5ibG9ja1NraXAgPSAvXFxbW15cXF1dKj9cXF1cXChbXlxcKV0qP1xcKXxgW15gXSo/YHw8W14+XSo/Pi9nO1xuICBpbmxpbmUuZXNjYXBlZEVtU3QgPSAvXFxcXFxcKnxcXFxcXy9nO1xuICBpbmxpbmUuX2NvbW1lbnQgPSBlZGl0KGJsb2NrLl9jb21tZW50KS5yZXBsYWNlKCcoPzotLT58JCknLCAnLS0+JykuZ2V0UmVnZXgoKTtcbiAgaW5saW5lLmVtU3Ryb25nLmxEZWxpbSA9IGVkaXQoaW5saW5lLmVtU3Ryb25nLmxEZWxpbSkucmVwbGFjZSgvcHVuY3QvZywgaW5saW5lLl9wdW5jdHVhdGlvbikuZ2V0UmVnZXgoKTtcbiAgaW5saW5lLmVtU3Ryb25nLnJEZWxpbUFzdCA9IGVkaXQoaW5saW5lLmVtU3Ryb25nLnJEZWxpbUFzdCwgJ2cnKS5yZXBsYWNlKC9wdW5jdC9nLCBpbmxpbmUuX3B1bmN0dWF0aW9uKS5nZXRSZWdleCgpO1xuICBpbmxpbmUuZW1TdHJvbmcuckRlbGltVW5kID0gZWRpdChpbmxpbmUuZW1TdHJvbmcuckRlbGltVW5kLCAnZycpLnJlcGxhY2UoL3B1bmN0L2csIGlubGluZS5fcHVuY3R1YXRpb24pLmdldFJlZ2V4KCk7XG4gIGlubGluZS5fZXNjYXBlcyA9IC9cXFxcKFshXCIjJCUmJygpKissXFwtLi86Ozw9Pj9AXFxbXFxdXFxcXF5fYHt8fX5dKS9nO1xuICBpbmxpbmUuX3NjaGVtZSA9IC9bYS16QS1aXVthLXpBLVowLTkrLi1dezEsMzF9LztcbiAgaW5saW5lLl9lbWFpbCA9IC9bYS16QS1aMC05LiEjJCUmJyorLz0/Xl9ge3x9fi1dKyhAKVthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykrKD8hWy1fXSkvO1xuICBpbmxpbmUuYXV0b2xpbmsgPSBlZGl0KGlubGluZS5hdXRvbGluaykucmVwbGFjZSgnc2NoZW1lJywgaW5saW5lLl9zY2hlbWUpLnJlcGxhY2UoJ2VtYWlsJywgaW5saW5lLl9lbWFpbCkuZ2V0UmVnZXgoKTtcbiAgaW5saW5lLl9hdHRyaWJ1dGUgPSAvXFxzK1thLXpBLVo6X11bXFx3LjotXSooPzpcXHMqPVxccypcIlteXCJdKlwifFxccyo9XFxzKidbXiddKid8XFxzKj1cXHMqW15cXHNcIic9PD5gXSspPy87XG4gIGlubGluZS50YWcgPSBlZGl0KGlubGluZS50YWcpLnJlcGxhY2UoJ2NvbW1lbnQnLCBpbmxpbmUuX2NvbW1lbnQpLnJlcGxhY2UoJ2F0dHJpYnV0ZScsIGlubGluZS5fYXR0cmlidXRlKS5nZXRSZWdleCgpO1xuICBpbmxpbmUuX2xhYmVsID0gLyg/OlxcWyg/OlxcXFwufFteXFxbXFxdXFxcXF0pKlxcXXxcXFxcLnxgW15gXSpgfFteXFxbXFxdXFxcXGBdKSo/LztcbiAgaW5saW5lLl9ocmVmID0gLzwoPzpcXFxcLnxbXlxcbjw+XFxcXF0pKz58W15cXHNcXHgwMC1cXHgxZl0qLztcbiAgaW5saW5lLl90aXRsZSA9IC9cIig/OlxcXFxcIj98W15cIlxcXFxdKSpcInwnKD86XFxcXCc/fFteJ1xcXFxdKSonfFxcKCg/OlxcXFxcXCk/fFteKVxcXFxdKSpcXCkvO1xuICBpbmxpbmUubGluayA9IGVkaXQoaW5saW5lLmxpbmspLnJlcGxhY2UoJ2xhYmVsJywgaW5saW5lLl9sYWJlbCkucmVwbGFjZSgnaHJlZicsIGlubGluZS5faHJlZikucmVwbGFjZSgndGl0bGUnLCBpbmxpbmUuX3RpdGxlKS5nZXRSZWdleCgpO1xuICBpbmxpbmUucmVmbGluayA9IGVkaXQoaW5saW5lLnJlZmxpbmspLnJlcGxhY2UoJ2xhYmVsJywgaW5saW5lLl9sYWJlbCkucmVwbGFjZSgncmVmJywgYmxvY2suX2xhYmVsKS5nZXRSZWdleCgpO1xuICBpbmxpbmUubm9saW5rID0gZWRpdChpbmxpbmUubm9saW5rKS5yZXBsYWNlKCdyZWYnLCBibG9jay5fbGFiZWwpLmdldFJlZ2V4KCk7XG4gIGlubGluZS5yZWZsaW5rU2VhcmNoID0gZWRpdChpbmxpbmUucmVmbGlua1NlYXJjaCwgJ2cnKS5yZXBsYWNlKCdyZWZsaW5rJywgaW5saW5lLnJlZmxpbmspLnJlcGxhY2UoJ25vbGluaycsIGlubGluZS5ub2xpbmspLmdldFJlZ2V4KCk7XG4gIC8qKlxuICAgKiBOb3JtYWwgSW5saW5lIEdyYW1tYXJcbiAgICovXG5cbiAgaW5saW5lLm5vcm1hbCA9IG1lcmdlKHt9LCBpbmxpbmUpO1xuICAvKipcbiAgICogUGVkYW50aWMgSW5saW5lIEdyYW1tYXJcbiAgICovXG5cbiAgaW5saW5lLnBlZGFudGljID0gbWVyZ2Uoe30sIGlubGluZS5ub3JtYWwsIHtcbiAgICBzdHJvbmc6IHtcbiAgICAgIHN0YXJ0OiAvXl9ffFxcKlxcKi8sXG4gICAgICBtaWRkbGU6IC9eX18oPz1cXFMpKFtcXHNcXFNdKj9cXFMpX18oPyFfKXxeXFwqXFwqKD89XFxTKShbXFxzXFxTXSo/XFxTKVxcKlxcKig/IVxcKikvLFxuICAgICAgZW5kQXN0OiAvXFwqXFwqKD8hXFwqKS9nLFxuICAgICAgZW5kVW5kOiAvX18oPyFfKS9nXG4gICAgfSxcbiAgICBlbToge1xuICAgICAgc3RhcnQ6IC9eX3xcXCovLFxuICAgICAgbWlkZGxlOiAvXigpXFwqKD89XFxTKShbXFxzXFxTXSo/XFxTKVxcKig/IVxcKil8Xl8oPz1cXFMpKFtcXHNcXFNdKj9cXFMpXyg/IV8pLyxcbiAgICAgIGVuZEFzdDogL1xcKig/IVxcKikvZyxcbiAgICAgIGVuZFVuZDogL18oPyFfKS9nXG4gICAgfSxcbiAgICBsaW5rOiBlZGl0KC9eIT9cXFsobGFiZWwpXFxdXFwoKC4qPylcXCkvKS5yZXBsYWNlKCdsYWJlbCcsIGlubGluZS5fbGFiZWwpLmdldFJlZ2V4KCksXG4gICAgcmVmbGluazogZWRpdCgvXiE/XFxbKGxhYmVsKVxcXVxccypcXFsoW15cXF1dKilcXF0vKS5yZXBsYWNlKCdsYWJlbCcsIGlubGluZS5fbGFiZWwpLmdldFJlZ2V4KClcbiAgfSk7XG4gIC8qKlxuICAgKiBHRk0gSW5saW5lIEdyYW1tYXJcbiAgICovXG5cbiAgaW5saW5lLmdmbSA9IG1lcmdlKHt9LCBpbmxpbmUubm9ybWFsLCB7XG4gICAgZXNjYXBlOiBlZGl0KGlubGluZS5lc2NhcGUpLnJlcGxhY2UoJ10pJywgJ358XSknKS5nZXRSZWdleCgpLFxuICAgIF9leHRlbmRlZF9lbWFpbDogL1tBLVphLXowLTkuXystXSsoQClbYS16QS1aMC05LV9dKyg/OlxcLlthLXpBLVowLTktX10qW2EtekEtWjAtOV0pKyg/IVstX10pLyxcbiAgICB1cmw6IC9eKCg/OmZ0cHxodHRwcz8pOlxcL1xcL3x3d3dcXC4pKD86W2EtekEtWjAtOVxcLV0rXFwuPykrW15cXHM8XSp8XmVtYWlsLyxcbiAgICBfYmFja3BlZGFsOiAvKD86W14/IS4sOjsqX34oKSZdK3xcXChbXildKlxcKXwmKD8hW2EtekEtWjAtOV0rOyQpfFs/IS4sOjsqX34pXSsoPyEkKSkrLyxcbiAgICBkZWw6IC9eKH5+PykoPz1bXlxcc35dKShbXFxzXFxTXSo/W15cXHN+XSlcXDEoPz1bXn5dfCQpLyxcbiAgICB0ZXh0OiAvXihbYH5dK3xbXmB+XSkoPzooPz0gezIsfVxcbil8KD89W2EtekEtWjAtOS4hIyQlJicqK1xcLz0/X2B7XFx8fX4tXStAKXxbXFxzXFxTXSo/KD86KD89W1xcXFw8IVxcW2Aqfl9dfFxcYl98aHR0cHM/OlxcL1xcL3xmdHA6XFwvXFwvfHd3d1xcLnwkKXxbXiBdKD89IHsyLH1cXG4pfFteYS16QS1aMC05LiEjJCUmJyorXFwvPT9fYHtcXHx9fi1dKD89W2EtekEtWjAtOS4hIyQlJicqK1xcLz0/X2B7XFx8fX4tXStAKSkpL1xuICB9KTtcbiAgaW5saW5lLmdmbS51cmwgPSBlZGl0KGlubGluZS5nZm0udXJsLCAnaScpLnJlcGxhY2UoJ2VtYWlsJywgaW5saW5lLmdmbS5fZXh0ZW5kZWRfZW1haWwpLmdldFJlZ2V4KCk7XG4gIC8qKlxuICAgKiBHRk0gKyBMaW5lIEJyZWFrcyBJbmxpbmUgR3JhbW1hclxuICAgKi9cblxuICBpbmxpbmUuYnJlYWtzID0gbWVyZ2Uoe30sIGlubGluZS5nZm0sIHtcbiAgICBicjogZWRpdChpbmxpbmUuYnIpLnJlcGxhY2UoJ3syLH0nLCAnKicpLmdldFJlZ2V4KCksXG4gICAgdGV4dDogZWRpdChpbmxpbmUuZ2ZtLnRleHQpLnJlcGxhY2UoJ1xcXFxiXycsICdcXFxcYl98IHsyLH1cXFxcbicpLnJlcGxhY2UoL1xcezIsXFx9L2csICcqJykuZ2V0UmVnZXgoKVxuICB9KTtcblxuICAvKipcbiAgICogc21hcnR5cGFudHMgdGV4dCByZXBsYWNlbWVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICAgKi9cblxuICBmdW5jdGlvbiBzbWFydHlwYW50cyh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQgLy8gZW0tZGFzaGVzXG4gICAgLnJlcGxhY2UoLy0tLS9nLCBcIlxcdTIwMTRcIikgLy8gZW4tZGFzaGVzXG4gICAgLnJlcGxhY2UoLy0tL2csIFwiXFx1MjAxM1wiKSAvLyBvcGVuaW5nIHNpbmdsZXNcbiAgICAucmVwbGFjZSgvKF58Wy1cXHUyMDE0LyhcXFt7XCJcXHNdKScvZywgXCIkMVxcdTIwMThcIikgLy8gY2xvc2luZyBzaW5nbGVzICYgYXBvc3Ryb3BoZXNcbiAgICAucmVwbGFjZSgvJy9nLCBcIlxcdTIwMTlcIikgLy8gb3BlbmluZyBkb3VibGVzXG4gICAgLnJlcGxhY2UoLyhefFstXFx1MjAxNC8oXFxbe1xcdTIwMThcXHNdKVwiL2csIFwiJDFcXHUyMDFDXCIpIC8vIGNsb3NpbmcgZG91Ymxlc1xuICAgIC5yZXBsYWNlKC9cIi9nLCBcIlxcdTIwMURcIikgLy8gZWxsaXBzZXNcbiAgICAucmVwbGFjZSgvXFwuezN9L2csIFwiXFx1MjAyNlwiKTtcbiAgfVxuICAvKipcbiAgICogbWFuZ2xlIGVtYWlsIGFkZHJlc3Nlc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG1hbmdsZSh0ZXh0KSB7XG4gICAgdmFyIG91dCA9ICcnLFxuICAgICAgICBpLFxuICAgICAgICBjaDtcbiAgICB2YXIgbCA9IHRleHQubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgY2ggPSB0ZXh0LmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgIGlmIChNYXRoLnJhbmRvbSgpID4gMC41KSB7XG4gICAgICAgIGNoID0gJ3gnICsgY2gudG9TdHJpbmcoMTYpO1xuICAgICAgfVxuXG4gICAgICBvdXQgKz0gJyYjJyArIGNoICsgJzsnO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG4gIH1cbiAgLyoqXG4gICAqIEJsb2NrIExleGVyXG4gICAqL1xuXG5cbiAgdmFyIExleGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMZXhlcihvcHRpb25zKSB7XG4gICAgICB0aGlzLnRva2VucyA9IFtdO1xuICAgICAgdGhpcy50b2tlbnMubGlua3MgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBleHBvcnRzLmRlZmF1bHRzO1xuICAgICAgdGhpcy5vcHRpb25zLnRva2VuaXplciA9IHRoaXMub3B0aW9ucy50b2tlbml6ZXIgfHwgbmV3IFRva2VuaXplcigpO1xuICAgICAgdGhpcy50b2tlbml6ZXIgPSB0aGlzLm9wdGlvbnMudG9rZW5pemVyO1xuICAgICAgdGhpcy50b2tlbml6ZXIub3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIHRoaXMudG9rZW5pemVyLmxleGVyID0gdGhpcztcbiAgICAgIHRoaXMuaW5saW5lUXVldWUgPSBbXTtcbiAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgIGluTGluazogZmFsc2UsXG4gICAgICAgIGluUmF3QmxvY2s6IGZhbHNlLFxuICAgICAgICB0b3A6IHRydWVcbiAgICAgIH07XG4gICAgICB2YXIgcnVsZXMgPSB7XG4gICAgICAgIGJsb2NrOiBibG9jay5ub3JtYWwsXG4gICAgICAgIGlubGluZTogaW5saW5lLm5vcm1hbFxuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgICAgICBydWxlcy5ibG9jayA9IGJsb2NrLnBlZGFudGljO1xuICAgICAgICBydWxlcy5pbmxpbmUgPSBpbmxpbmUucGVkYW50aWM7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5nZm0pIHtcbiAgICAgICAgcnVsZXMuYmxvY2sgPSBibG9jay5nZm07XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5icmVha3MpIHtcbiAgICAgICAgICBydWxlcy5pbmxpbmUgPSBpbmxpbmUuYnJlYWtzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJ1bGVzLmlubGluZSA9IGlubGluZS5nZm07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy50b2tlbml6ZXIucnVsZXMgPSBydWxlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhwb3NlIFJ1bGVzXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBMZXggTWV0aG9kXG4gICAgICovXG4gICAgTGV4ZXIubGV4ID0gZnVuY3Rpb24gbGV4KHNyYywgb3B0aW9ucykge1xuICAgICAgdmFyIGxleGVyID0gbmV3IExleGVyKG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIGxleGVyLmxleChzcmMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGF0aWMgTGV4IElubGluZSBNZXRob2RcbiAgICAgKi9cbiAgICA7XG5cbiAgICBMZXhlci5sZXhJbmxpbmUgPSBmdW5jdGlvbiBsZXhJbmxpbmUoc3JjLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGV4ZXIgPSBuZXcgTGV4ZXIob3B0aW9ucyk7XG4gICAgICByZXR1cm4gbGV4ZXIuaW5saW5lVG9rZW5zKHNyYyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByZXByb2Nlc3NpbmdcbiAgICAgKi9cbiAgICA7XG5cbiAgICB2YXIgX3Byb3RvID0gTGV4ZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmxleCA9IGZ1bmN0aW9uIGxleChzcmMpIHtcbiAgICAgIHNyYyA9IHNyYy5yZXBsYWNlKC9cXHJcXG58XFxyL2csICdcXG4nKTtcbiAgICAgIHRoaXMuYmxvY2tUb2tlbnMoc3JjLCB0aGlzLnRva2Vucyk7XG4gICAgICB2YXIgbmV4dDtcblxuICAgICAgd2hpbGUgKG5leHQgPSB0aGlzLmlubGluZVF1ZXVlLnNoaWZ0KCkpIHtcbiAgICAgICAgdGhpcy5pbmxpbmVUb2tlbnMobmV4dC5zcmMsIG5leHQudG9rZW5zKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMudG9rZW5zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMZXhpbmdcbiAgICAgKi9cbiAgICA7XG5cbiAgICBfcHJvdG8uYmxvY2tUb2tlbnMgPSBmdW5jdGlvbiBibG9ja1Rva2VucyhzcmMsIHRva2Vucykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRva2VucyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRva2VucyA9IFtdO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgIHNyYyA9IHNyYy5yZXBsYWNlKC9cXHQvZywgJyAgICAnKS5yZXBsYWNlKC9eICskL2dtLCAnJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcmMgPSBzcmMucmVwbGFjZSgvXiggKikoXFx0KykvZ20sIGZ1bmN0aW9uIChfLCBsZWFkaW5nLCB0YWJzKSB7XG4gICAgICAgICAgcmV0dXJuIGxlYWRpbmcgKyAnICAgICcucmVwZWF0KHRhYnMubGVuZ3RoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0b2tlbiwgbGFzdFRva2VuLCBjdXRTcmMsIGxhc3RQYXJhZ3JhcGhDbGlwcGVkO1xuXG4gICAgICB3aGlsZSAoc3JjKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucyAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5ibG9jayAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5ibG9jay5zb21lKGZ1bmN0aW9uIChleHRUb2tlbml6ZXIpIHtcbiAgICAgICAgICBpZiAodG9rZW4gPSBleHRUb2tlbml6ZXIuY2FsbCh7XG4gICAgICAgICAgICBsZXhlcjogX3RoaXNcbiAgICAgICAgICB9LCBzcmMsIHRva2VucykpIHtcbiAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gLy8gbmV3bGluZVxuXG5cbiAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuc3BhY2Uoc3JjKSkge1xuICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG5cbiAgICAgICAgICBpZiAodG9rZW4ucmF3Lmxlbmd0aCA9PT0gMSAmJiB0b2tlbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gaWYgdGhlcmUncyBhIHNpbmdsZSBcXG4gYXMgYSBzcGFjZXIsIGl0J3MgdGVybWluYXRpbmcgdGhlIGxhc3QgbGluZSxcbiAgICAgICAgICAgIC8vIHNvIG1vdmUgaXQgdGhlcmUgc28gdGhhdCB3ZSBkb24ndCBnZXQgdW5lY2Vzc2FyeSBwYXJhZ3JhcGggdGFnc1xuICAgICAgICAgICAgdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXS5yYXcgKz0gJ1xcbic7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBjb2RlXG5cblxuICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5jb2RlKHNyYykpIHtcbiAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07IC8vIEFuIGluZGVudGVkIGNvZGUgYmxvY2sgY2Fubm90IGludGVycnVwdCBhIHBhcmFncmFwaC5cblxuICAgICAgICAgIGlmIChsYXN0VG9rZW4gJiYgKGxhc3RUb2tlbi50eXBlID09PSAncGFyYWdyYXBoJyB8fCBsYXN0VG9rZW4udHlwZSA9PT0gJ3RleHQnKSkge1xuICAgICAgICAgICAgbGFzdFRva2VuLnJhdyArPSAnXFxuJyArIHRva2VuLnJhdztcbiAgICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9ICdcXG4nICsgdG9rZW4udGV4dDtcbiAgICAgICAgICAgIHRoaXMuaW5saW5lUXVldWVbdGhpcy5pbmxpbmVRdWV1ZS5sZW5ndGggLSAxXS5zcmMgPSBsYXN0VG9rZW4udGV4dDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IC8vIGZlbmNlc1xuXG5cbiAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuZmVuY2VzKHNyYykpIHtcbiAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBoZWFkaW5nXG5cblxuICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5oZWFkaW5nKHNyYykpIHtcbiAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBoclxuXG5cbiAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuaHIoc3JjKSkge1xuICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IC8vIGJsb2NrcXVvdGVcblxuXG4gICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmJsb2NrcXVvdGUoc3JjKSkge1xuICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IC8vIGxpc3RcblxuXG4gICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmxpc3Qoc3JjKSkge1xuICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IC8vIGh0bWxcblxuXG4gICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmh0bWwoc3JjKSkge1xuICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IC8vIGRlZlxuXG5cbiAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuZGVmKHNyYykpIHtcbiAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICBpZiAobGFzdFRva2VuICYmIChsYXN0VG9rZW4udHlwZSA9PT0gJ3BhcmFncmFwaCcgfHwgbGFzdFRva2VuLnR5cGUgPT09ICd0ZXh0JykpIHtcbiAgICAgICAgICAgIGxhc3RUb2tlbi5yYXcgKz0gJ1xcbicgKyB0b2tlbi5yYXc7XG4gICAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSAnXFxuJyArIHRva2VuLnJhdztcbiAgICAgICAgICAgIHRoaXMuaW5saW5lUXVldWVbdGhpcy5pbmxpbmVRdWV1ZS5sZW5ndGggLSAxXS5zcmMgPSBsYXN0VG9rZW4udGV4dDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLnRva2Vucy5saW5rc1t0b2tlbi50YWddKSB7XG4gICAgICAgICAgICB0aGlzLnRva2Vucy5saW5rc1t0b2tlbi50YWddID0ge1xuICAgICAgICAgICAgICBocmVmOiB0b2tlbi5ocmVmLFxuICAgICAgICAgICAgICB0aXRsZTogdG9rZW4udGl0bGVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gLy8gdGFibGUgKGdmbSlcblxuXG4gICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnRhYmxlKHNyYykpIHtcbiAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBsaGVhZGluZ1xuXG5cbiAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIubGhlYWRpbmcoc3JjKSkge1xuICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IC8vIHRvcC1sZXZlbCBwYXJhZ3JhcGhcbiAgICAgICAgLy8gcHJldmVudCBwYXJhZ3JhcGggY29uc3VtaW5nIGV4dGVuc2lvbnMgYnkgY2xpcHBpbmcgJ3NyYycgdG8gZXh0ZW5zaW9uIHN0YXJ0XG5cblxuICAgICAgICBjdXRTcmMgPSBzcmM7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHRlbnNpb25zICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnN0YXJ0QmxvY2spIHtcbiAgICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0SW5kZXggPSBJbmZpbml0eTtcbiAgICAgICAgICAgIHZhciB0ZW1wU3JjID0gc3JjLnNsaWNlKDEpO1xuICAgICAgICAgICAgdmFyIHRlbXBTdGFydCA9IHZvaWQgMDtcblxuICAgICAgICAgICAgX3RoaXMub3B0aW9ucy5leHRlbnNpb25zLnN0YXJ0QmxvY2suZm9yRWFjaChmdW5jdGlvbiAoZ2V0U3RhcnRJbmRleCkge1xuICAgICAgICAgICAgICB0ZW1wU3RhcnQgPSBnZXRTdGFydEluZGV4LmNhbGwoe1xuICAgICAgICAgICAgICAgIGxleGVyOiB0aGlzXG4gICAgICAgICAgICAgIH0sIHRlbXBTcmMpO1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdGVtcFN0YXJ0ID09PSAnbnVtYmVyJyAmJiB0ZW1wU3RhcnQgPj0gMCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXggPSBNYXRoLm1pbihzdGFydEluZGV4LCB0ZW1wU3RhcnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHN0YXJ0SW5kZXggPCBJbmZpbml0eSAmJiBzdGFydEluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgY3V0U3JjID0gc3JjLnN1YnN0cmluZygwLCBzdGFydEluZGV4ICsgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnRvcCAmJiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5wYXJhZ3JhcGgoY3V0U3JjKSkpIHtcbiAgICAgICAgICBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgaWYgKGxhc3RQYXJhZ3JhcGhDbGlwcGVkICYmIGxhc3RUb2tlbi50eXBlID09PSAncGFyYWdyYXBoJykge1xuICAgICAgICAgICAgbGFzdFRva2VuLnJhdyArPSAnXFxuJyArIHRva2VuLnJhdztcbiAgICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9ICdcXG4nICsgdG9rZW4udGV4dDtcbiAgICAgICAgICAgIHRoaXMuaW5saW5lUXVldWUucG9wKCk7XG4gICAgICAgICAgICB0aGlzLmlubGluZVF1ZXVlW3RoaXMuaW5saW5lUXVldWUubGVuZ3RoIC0gMV0uc3JjID0gbGFzdFRva2VuLnRleHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsYXN0UGFyYWdyYXBoQ2xpcHBlZCA9IGN1dFNyYy5sZW5ndGggIT09IHNyYy5sZW5ndGg7XG4gICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyB0ZXh0XG5cblxuICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci50ZXh0KHNyYykpIHtcbiAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICBpZiAobGFzdFRva2VuICYmIGxhc3RUb2tlbi50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIGxhc3RUb2tlbi5yYXcgKz0gJ1xcbicgKyB0b2tlbi5yYXc7XG4gICAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSAnXFxuJyArIHRva2VuLnRleHQ7XG4gICAgICAgICAgICB0aGlzLmlubGluZVF1ZXVlLnBvcCgpO1xuICAgICAgICAgICAgdGhpcy5pbmxpbmVRdWV1ZVt0aGlzLmlubGluZVF1ZXVlLmxlbmd0aCAtIDFdLnNyYyA9IGxhc3RUb2tlbi50ZXh0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgdmFyIGVyck1zZyA9ICdJbmZpbml0ZSBsb29wIG9uIGJ5dGU6ICcgKyBzcmMuY2hhckNvZGVBdCgwKTtcblxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhdGUudG9wID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0b2tlbnM7XG4gICAgfTtcblxuICAgIF9wcm90by5pbmxpbmUgPSBmdW5jdGlvbiBpbmxpbmUoc3JjLCB0b2tlbnMpIHtcbiAgICAgIGlmICh0b2tlbnMgPT09IHZvaWQgMCkge1xuICAgICAgICB0b2tlbnMgPSBbXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbmxpbmVRdWV1ZS5wdXNoKHtcbiAgICAgICAgc3JjOiBzcmMsXG4gICAgICAgIHRva2VuczogdG9rZW5zXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0b2tlbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExleGluZy9Db21waWxpbmdcbiAgICAgKi9cbiAgICA7XG5cbiAgICBfcHJvdG8uaW5saW5lVG9rZW5zID0gZnVuY3Rpb24gaW5saW5lVG9rZW5zKHNyYywgdG9rZW5zKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKHRva2VucyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRva2VucyA9IFtdO1xuICAgICAgfVxuXG4gICAgICB2YXIgdG9rZW4sIGxhc3RUb2tlbiwgY3V0U3JjOyAvLyBTdHJpbmcgd2l0aCBsaW5rcyBtYXNrZWQgdG8gYXZvaWQgaW50ZXJmZXJlbmNlIHdpdGggZW0gYW5kIHN0cm9uZ1xuXG4gICAgICB2YXIgbWFza2VkU3JjID0gc3JjO1xuICAgICAgdmFyIG1hdGNoO1xuICAgICAgdmFyIGtlZXBQcmV2Q2hhciwgcHJldkNoYXI7IC8vIE1hc2sgb3V0IHJlZmxpbmtzXG5cbiAgICAgIGlmICh0aGlzLnRva2Vucy5saW5rcykge1xuICAgICAgICB2YXIgbGlua3MgPSBPYmplY3Qua2V5cyh0aGlzLnRva2Vucy5saW5rcyk7XG5cbiAgICAgICAgaWYgKGxpbmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gdGhpcy50b2tlbml6ZXIucnVsZXMuaW5saW5lLnJlZmxpbmtTZWFyY2guZXhlYyhtYXNrZWRTcmMpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobGlua3MuaW5jbHVkZXMobWF0Y2hbMF0uc2xpY2UobWF0Y2hbMF0ubGFzdEluZGV4T2YoJ1snKSArIDEsIC0xKSkpIHtcbiAgICAgICAgICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKDAsIG1hdGNoLmluZGV4KSArICdbJyArIHJlcGVhdFN0cmluZygnYScsIG1hdGNoWzBdLmxlbmd0aCAtIDIpICsgJ10nICsgbWFza2VkU3JjLnNsaWNlKHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5yZWZsaW5rU2VhcmNoLmxhc3RJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IC8vIE1hc2sgb3V0IG90aGVyIGJsb2Nrc1xuXG5cbiAgICAgIHdoaWxlICgobWF0Y2ggPSB0aGlzLnRva2VuaXplci5ydWxlcy5pbmxpbmUuYmxvY2tTa2lwLmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgICBtYXNrZWRTcmMgPSBtYXNrZWRTcmMuc2xpY2UoMCwgbWF0Y2guaW5kZXgpICsgJ1snICsgcmVwZWF0U3RyaW5nKCdhJywgbWF0Y2hbMF0ubGVuZ3RoIC0gMikgKyAnXScgKyBtYXNrZWRTcmMuc2xpY2UodGhpcy50b2tlbml6ZXIucnVsZXMuaW5saW5lLmJsb2NrU2tpcC5sYXN0SW5kZXgpO1xuICAgICAgfSAvLyBNYXNrIG91dCBlc2NhcGVkIGVtICYgc3Ryb25nIGRlbGltaXRlcnNcblxuXG4gICAgICB3aGlsZSAoKG1hdGNoID0gdGhpcy50b2tlbml6ZXIucnVsZXMuaW5saW5lLmVzY2FwZWRFbVN0LmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgICBtYXNrZWRTcmMgPSBtYXNrZWRTcmMuc2xpY2UoMCwgbWF0Y2guaW5kZXgpICsgJysrJyArIG1hc2tlZFNyYy5zbGljZSh0aGlzLnRva2VuaXplci5ydWxlcy5pbmxpbmUuZXNjYXBlZEVtU3QubGFzdEluZGV4KTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKHNyYykge1xuICAgICAgICBpZiAoIWtlZXBQcmV2Q2hhcikge1xuICAgICAgICAgIHByZXZDaGFyID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBrZWVwUHJldkNoYXIgPSBmYWxzZTsgLy8gZXh0ZW5zaW9uc1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucyAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5pbmxpbmUgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuaW5saW5lLnNvbWUoZnVuY3Rpb24gKGV4dFRva2VuaXplcikge1xuICAgICAgICAgIGlmICh0b2tlbiA9IGV4dFRva2VuaXplci5jYWxsKHtcbiAgICAgICAgICAgIGxleGVyOiBfdGhpczJcbiAgICAgICAgICB9LCBzcmMsIHRva2VucykpIHtcbiAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gLy8gZXNjYXBlXG5cblxuICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5lc2NhcGUoc3JjKSkge1xuICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IC8vIHRhZ1xuXG5cbiAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIudGFnKHNyYykpIHtcbiAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICBpZiAobGFzdFRva2VuICYmIHRva2VuLnR5cGUgPT09ICd0ZXh0JyAmJiBsYXN0VG9rZW4udHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICBsYXN0VG9rZW4ucmF3ICs9IHRva2VuLnJhdztcbiAgICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9IHRva2VuLnRleHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBsaW5rXG5cblxuICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5saW5rKHNyYykpIHtcbiAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyByZWZsaW5rLCBub2xpbmtcblxuXG4gICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnJlZmxpbmsoc3JjLCB0aGlzLnRva2Vucy5saW5rcykpIHtcbiAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICBpZiAobGFzdFRva2VuICYmIHRva2VuLnR5cGUgPT09ICd0ZXh0JyAmJiBsYXN0VG9rZW4udHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICBsYXN0VG9rZW4ucmF3ICs9IHRva2VuLnJhdztcbiAgICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9IHRva2VuLnRleHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBlbSAmIHN0cm9uZ1xuXG5cbiAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuZW1TdHJvbmcoc3JjLCBtYXNrZWRTcmMsIHByZXZDaGFyKSkge1xuICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IC8vIGNvZGVcblxuXG4gICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmNvZGVzcGFuKHNyYykpIHtcbiAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBiclxuXG5cbiAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuYnIoc3JjKSkge1xuICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IC8vIGRlbCAoZ2ZtKVxuXG5cbiAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuZGVsKHNyYykpIHtcbiAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBhdXRvbGlua1xuXG5cbiAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuYXV0b2xpbmsoc3JjLCBtYW5nbGUpKSB7XG4gICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gLy8gdXJsIChnZm0pXG5cblxuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuaW5MaW5rICYmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnVybChzcmMsIG1hbmdsZSkpKSB7XG4gICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gLy8gdGV4dFxuICAgICAgICAvLyBwcmV2ZW50IGlubGluZVRleHQgY29uc3VtaW5nIGV4dGVuc2lvbnMgYnkgY2xpcHBpbmcgJ3NyYycgdG8gZXh0ZW5zaW9uIHN0YXJ0XG5cblxuICAgICAgICBjdXRTcmMgPSBzcmM7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHRlbnNpb25zICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnN0YXJ0SW5saW5lKSB7XG4gICAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdGFydEluZGV4ID0gSW5maW5pdHk7XG4gICAgICAgICAgICB2YXIgdGVtcFNyYyA9IHNyYy5zbGljZSgxKTtcbiAgICAgICAgICAgIHZhciB0ZW1wU3RhcnQgPSB2b2lkIDA7XG5cbiAgICAgICAgICAgIF90aGlzMi5vcHRpb25zLmV4dGVuc2lvbnMuc3RhcnRJbmxpbmUuZm9yRWFjaChmdW5jdGlvbiAoZ2V0U3RhcnRJbmRleCkge1xuICAgICAgICAgICAgICB0ZW1wU3RhcnQgPSBnZXRTdGFydEluZGV4LmNhbGwoe1xuICAgICAgICAgICAgICAgIGxleGVyOiB0aGlzXG4gICAgICAgICAgICAgIH0sIHRlbXBTcmMpO1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdGVtcFN0YXJ0ID09PSAnbnVtYmVyJyAmJiB0ZW1wU3RhcnQgPj0gMCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXggPSBNYXRoLm1pbihzdGFydEluZGV4LCB0ZW1wU3RhcnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHN0YXJ0SW5kZXggPCBJbmZpbml0eSAmJiBzdGFydEluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgY3V0U3JjID0gc3JjLnN1YnN0cmluZygwLCBzdGFydEluZGV4ICsgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmlubGluZVRleHQoY3V0U3JjLCBzbWFydHlwYW50cykpIHtcbiAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuXG4gICAgICAgICAgaWYgKHRva2VuLnJhdy5zbGljZSgtMSkgIT09ICdfJykge1xuICAgICAgICAgICAgLy8gVHJhY2sgcHJldkNoYXIgYmVmb3JlIHN0cmluZyBvZiBfX19fIHN0YXJ0ZWRcbiAgICAgICAgICAgIHByZXZDaGFyID0gdG9rZW4ucmF3LnNsaWNlKC0xKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBrZWVwUHJldkNoYXIgPSB0cnVlO1xuICAgICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICBpZiAobGFzdFRva2VuICYmIGxhc3RUb2tlbi50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIGxhc3RUb2tlbi5yYXcgKz0gdG9rZW4ucmF3O1xuICAgICAgICAgICAgbGFzdFRva2VuLnRleHQgKz0gdG9rZW4udGV4dDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgIHZhciBlcnJNc2cgPSAnSW5maW5pdGUgbG9vcCBvbiBieXRlOiAnICsgc3JjLmNoYXJDb2RlQXQoMCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNpbGVudCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJNc2cpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoTGV4ZXIsIG51bGwsIFt7XG4gICAgICBrZXk6IFwicnVsZXNcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGJsb2NrOiBibG9jayxcbiAgICAgICAgICBpbmxpbmU6IGlubGluZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMZXhlcjtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBSZW5kZXJlclxuICAgKi9cblxuICB2YXIgUmVuZGVyZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlbmRlcmVyKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgZXhwb3J0cy5kZWZhdWx0cztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUmVuZGVyZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmNvZGUgPSBmdW5jdGlvbiBjb2RlKF9jb2RlLCBpbmZvc3RyaW5nLCBlc2NhcGVkKSB7XG4gICAgICB2YXIgbGFuZyA9IChpbmZvc3RyaW5nIHx8ICcnKS5tYXRjaCgvXFxTKi8pWzBdO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmhpZ2hsaWdodCkge1xuICAgICAgICB2YXIgb3V0ID0gdGhpcy5vcHRpb25zLmhpZ2hsaWdodChfY29kZSwgbGFuZyk7XG5cbiAgICAgICAgaWYgKG91dCAhPSBudWxsICYmIG91dCAhPT0gX2NvZGUpIHtcbiAgICAgICAgICBlc2NhcGVkID0gdHJ1ZTtcbiAgICAgICAgICBfY29kZSA9IG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfY29kZSA9IF9jb2RlLnJlcGxhY2UoL1xcbiQvLCAnJykgKyAnXFxuJztcblxuICAgICAgaWYgKCFsYW5nKSB7XG4gICAgICAgIHJldHVybiAnPHByZT48Y29kZT4nICsgKGVzY2FwZWQgPyBfY29kZSA6IGVzY2FwZShfY29kZSwgdHJ1ZSkpICsgJzwvY29kZT48L3ByZT5cXG4nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJzxwcmU+PGNvZGUgY2xhc3M9XCInICsgdGhpcy5vcHRpb25zLmxhbmdQcmVmaXggKyBlc2NhcGUobGFuZywgdHJ1ZSkgKyAnXCI+JyArIChlc2NhcGVkID8gX2NvZGUgOiBlc2NhcGUoX2NvZGUsIHRydWUpKSArICc8L2NvZGU+PC9wcmU+XFxuJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHF1b3RlXG4gICAgICovXG4gICAgO1xuXG4gICAgX3Byb3RvLmJsb2NrcXVvdGUgPSBmdW5jdGlvbiBibG9ja3F1b3RlKHF1b3RlKSB7XG4gICAgICByZXR1cm4gXCI8YmxvY2txdW90ZT5cXG5cIiArIHF1b3RlICsgXCI8L2Jsb2NrcXVvdGU+XFxuXCI7XG4gICAgfTtcblxuICAgIF9wcm90by5odG1sID0gZnVuY3Rpb24gaHRtbChfaHRtbCkge1xuICAgICAgcmV0dXJuIF9odG1sO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByYXdcbiAgICAgKiBAcGFyYW0ge2FueX0gc2x1Z2dlclxuICAgICAqL1xuICAgIDtcblxuICAgIF9wcm90by5oZWFkaW5nID0gZnVuY3Rpb24gaGVhZGluZyh0ZXh0LCBsZXZlbCwgcmF3LCBzbHVnZ2VyKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmhlYWRlcklkcykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzLm9wdGlvbnMuaGVhZGVyUHJlZml4ICsgc2x1Z2dlci5zbHVnKHJhdyk7XG4gICAgICAgIHJldHVybiBcIjxoXCIgKyBsZXZlbCArIFwiIGlkPVxcXCJcIiArIGlkICsgXCJcXFwiPlwiICsgdGV4dCArIFwiPC9oXCIgKyBsZXZlbCArIFwiPlxcblwiO1xuICAgICAgfSAvLyBpZ25vcmUgSURzXG5cblxuICAgICAgcmV0dXJuIFwiPGhcIiArIGxldmVsICsgXCI+XCIgKyB0ZXh0ICsgXCI8L2hcIiArIGxldmVsICsgXCI+XFxuXCI7XG4gICAgfTtcblxuICAgIF9wcm90by5ociA9IGZ1bmN0aW9uIGhyKCkge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy54aHRtbCA/ICc8aHIvPlxcbicgOiAnPGhyPlxcbic7XG4gICAgfTtcblxuICAgIF9wcm90by5saXN0ID0gZnVuY3Rpb24gbGlzdChib2R5LCBvcmRlcmVkLCBzdGFydCkge1xuICAgICAgdmFyIHR5cGUgPSBvcmRlcmVkID8gJ29sJyA6ICd1bCcsXG4gICAgICAgICAgc3RhcnRhdHQgPSBvcmRlcmVkICYmIHN0YXJ0ICE9PSAxID8gJyBzdGFydD1cIicgKyBzdGFydCArICdcIicgOiAnJztcbiAgICAgIHJldHVybiAnPCcgKyB0eXBlICsgc3RhcnRhdHQgKyAnPlxcbicgKyBib2R5ICsgJzwvJyArIHR5cGUgKyAnPlxcbic7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gICAgICovXG4gICAgO1xuXG4gICAgX3Byb3RvLmxpc3RpdGVtID0gZnVuY3Rpb24gbGlzdGl0ZW0odGV4dCkge1xuICAgICAgcmV0dXJuIFwiPGxpPlwiICsgdGV4dCArIFwiPC9saT5cXG5cIjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNoZWNrYm94ID0gZnVuY3Rpb24gY2hlY2tib3goY2hlY2tlZCkge1xuICAgICAgcmV0dXJuICc8aW5wdXQgJyArIChjaGVja2VkID8gJ2NoZWNrZWQ9XCJcIiAnIDogJycpICsgJ2Rpc2FibGVkPVwiXCIgdHlwZT1cImNoZWNrYm94XCInICsgKHRoaXMub3B0aW9ucy54aHRtbCA/ICcgLycgOiAnJykgKyAnPiAnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICAgICAqL1xuICAgIDtcblxuICAgIF9wcm90by5wYXJhZ3JhcGggPSBmdW5jdGlvbiBwYXJhZ3JhcGgodGV4dCkge1xuICAgICAgcmV0dXJuIFwiPHA+XCIgKyB0ZXh0ICsgXCI8L3A+XFxuXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBoZWFkZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYm9keVxuICAgICAqL1xuICAgIDtcblxuICAgIF9wcm90by50YWJsZSA9IGZ1bmN0aW9uIHRhYmxlKGhlYWRlciwgYm9keSkge1xuICAgICAgaWYgKGJvZHkpIGJvZHkgPSBcIjx0Ym9keT5cIiArIGJvZHkgKyBcIjwvdGJvZHk+XCI7XG4gICAgICByZXR1cm4gJzx0YWJsZT5cXG4nICsgJzx0aGVhZD5cXG4nICsgaGVhZGVyICsgJzwvdGhlYWQ+XFxuJyArIGJvZHkgKyAnPC90YWJsZT5cXG4nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICAgICAqL1xuICAgIDtcblxuICAgIF9wcm90by50YWJsZXJvdyA9IGZ1bmN0aW9uIHRhYmxlcm93KGNvbnRlbnQpIHtcbiAgICAgIHJldHVybiBcIjx0cj5cXG5cIiArIGNvbnRlbnQgKyBcIjwvdHI+XFxuXCI7XG4gICAgfTtcblxuICAgIF9wcm90by50YWJsZWNlbGwgPSBmdW5jdGlvbiB0YWJsZWNlbGwoY29udGVudCwgZmxhZ3MpIHtcbiAgICAgIHZhciB0eXBlID0gZmxhZ3MuaGVhZGVyID8gJ3RoJyA6ICd0ZCc7XG4gICAgICB2YXIgdGFnID0gZmxhZ3MuYWxpZ24gPyBcIjxcIiArIHR5cGUgKyBcIiBhbGlnbj1cXFwiXCIgKyBmbGFncy5hbGlnbiArIFwiXFxcIj5cIiA6IFwiPFwiICsgdHlwZSArIFwiPlwiO1xuICAgICAgcmV0dXJuIHRhZyArIGNvbnRlbnQgKyAoXCI8L1wiICsgdHlwZSArIFwiPlxcblwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogc3BhbiBsZXZlbCByZW5kZXJlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gICAgICovXG4gICAgO1xuXG4gICAgX3Byb3RvLnN0cm9uZyA9IGZ1bmN0aW9uIHN0cm9uZyh0ZXh0KSB7XG4gICAgICByZXR1cm4gXCI8c3Ryb25nPlwiICsgdGV4dCArIFwiPC9zdHJvbmc+XCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gICAgICovXG4gICAgO1xuXG4gICAgX3Byb3RvLmVtID0gZnVuY3Rpb24gZW0odGV4dCkge1xuICAgICAgcmV0dXJuIFwiPGVtPlwiICsgdGV4dCArIFwiPC9lbT5cIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICAgKi9cbiAgICA7XG5cbiAgICBfcHJvdG8uY29kZXNwYW4gPSBmdW5jdGlvbiBjb2Rlc3Bhbih0ZXh0KSB7XG4gICAgICByZXR1cm4gXCI8Y29kZT5cIiArIHRleHQgKyBcIjwvY29kZT5cIjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmJyID0gZnVuY3Rpb24gYnIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnhodG1sID8gJzxici8+JyA6ICc8YnI+JztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICAgKi9cbiAgICA7XG5cbiAgICBfcHJvdG8uZGVsID0gZnVuY3Rpb24gZGVsKHRleHQpIHtcbiAgICAgIHJldHVybiBcIjxkZWw+XCIgKyB0ZXh0ICsgXCI8L2RlbD5cIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGhyZWZcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICAgICAqL1xuICAgIDtcblxuICAgIF9wcm90by5saW5rID0gZnVuY3Rpb24gbGluayhocmVmLCB0aXRsZSwgdGV4dCkge1xuICAgICAgaHJlZiA9IGNsZWFuVXJsKHRoaXMub3B0aW9ucy5zYW5pdGl6ZSwgdGhpcy5vcHRpb25zLmJhc2VVcmwsIGhyZWYpO1xuXG4gICAgICBpZiAoaHJlZiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgIH1cblxuICAgICAgdmFyIG91dCA9ICc8YSBocmVmPVwiJyArIGVzY2FwZShocmVmKSArICdcIic7XG5cbiAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICBvdXQgKz0gJyB0aXRsZT1cIicgKyB0aXRsZSArICdcIic7XG4gICAgICB9XG5cbiAgICAgIG91dCArPSAnPicgKyB0ZXh0ICsgJzwvYT4nO1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGhyZWZcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICAgICAqL1xuICAgIDtcblxuICAgIF9wcm90by5pbWFnZSA9IGZ1bmN0aW9uIGltYWdlKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gICAgICBocmVmID0gY2xlYW5VcmwodGhpcy5vcHRpb25zLnNhbml0aXplLCB0aGlzLm9wdGlvbnMuYmFzZVVybCwgaHJlZik7XG5cbiAgICAgIGlmIChocmVmID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgICAgfVxuXG4gICAgICB2YXIgb3V0ID0gXCI8aW1nIHNyYz1cXFwiXCIgKyBocmVmICsgXCJcXFwiIGFsdD1cXFwiXCIgKyB0ZXh0ICsgXCJcXFwiXCI7XG5cbiAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICBvdXQgKz0gXCIgdGl0bGU9XFxcIlwiICsgdGl0bGUgKyBcIlxcXCJcIjtcbiAgICAgIH1cblxuICAgICAgb3V0ICs9IHRoaXMub3B0aW9ucy54aHRtbCA/ICcvPicgOiAnPic7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH07XG5cbiAgICBfcHJvdG8udGV4dCA9IGZ1bmN0aW9uIHRleHQoX3RleHQpIHtcbiAgICAgIHJldHVybiBfdGV4dDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlbmRlcmVyO1xuICB9KCk7XG5cbiAgLyoqXG4gICAqIFRleHRSZW5kZXJlclxuICAgKiByZXR1cm5zIG9ubHkgdGhlIHRleHR1YWwgcGFydCBvZiB0aGUgdG9rZW5cbiAgICovXG4gIHZhciBUZXh0UmVuZGVyZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRleHRSZW5kZXJlcigpIHt9XG5cbiAgICB2YXIgX3Byb3RvID0gVGV4dFJlbmRlcmVyLnByb3RvdHlwZTtcblxuICAgIC8vIG5vIG5lZWQgZm9yIGJsb2NrIGxldmVsIHJlbmRlcmVyc1xuICAgIF9wcm90by5zdHJvbmcgPSBmdW5jdGlvbiBzdHJvbmcodGV4dCkge1xuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfTtcblxuICAgIF9wcm90by5lbSA9IGZ1bmN0aW9uIGVtKHRleHQpIHtcbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29kZXNwYW4gPSBmdW5jdGlvbiBjb2Rlc3Bhbih0ZXh0KSB7XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRlbCA9IGZ1bmN0aW9uIGRlbCh0ZXh0KSB7XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmh0bWwgPSBmdW5jdGlvbiBodG1sKHRleHQpIHtcbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH07XG5cbiAgICBfcHJvdG8udGV4dCA9IGZ1bmN0aW9uIHRleHQoX3RleHQpIHtcbiAgICAgIHJldHVybiBfdGV4dDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmxpbmsgPSBmdW5jdGlvbiBsaW5rKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gICAgICByZXR1cm4gJycgKyB0ZXh0O1xuICAgIH07XG5cbiAgICBfcHJvdG8uaW1hZ2UgPSBmdW5jdGlvbiBpbWFnZShocmVmLCB0aXRsZSwgdGV4dCkge1xuICAgICAgcmV0dXJuICcnICsgdGV4dDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmJyID0gZnVuY3Rpb24gYnIoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfTtcblxuICAgIHJldHVybiBUZXh0UmVuZGVyZXI7XG4gIH0oKTtcblxuICAvKipcbiAgICogU2x1Z2dlciBnZW5lcmF0ZXMgaGVhZGVyIGlkXG4gICAqL1xuICB2YXIgU2x1Z2dlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2x1Z2dlcigpIHtcbiAgICAgIHRoaXMuc2VlbiA9IHt9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICAgKi9cblxuXG4gICAgdmFyIF9wcm90byA9IFNsdWdnZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCkudHJpbSgpIC8vIHJlbW92ZSBodG1sIHRhZ3NcbiAgICAgIC5yZXBsYWNlKC88WyFcXC9hLXpdLio/Pi9pZywgJycpIC8vIHJlbW92ZSB1bndhbnRlZCBjaGFyc1xuICAgICAgLnJlcGxhY2UoL1tcXHUyMDAwLVxcdTIwNkZcXHUyRTAwLVxcdTJFN0ZcXFxcJyFcIiMkJSYoKSorLC4vOjs8PT4/QFtcXF1eYHt8fX5dL2csICcnKS5yZXBsYWNlKC9cXHMvZywgJy0nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIG5leHQgc2FmZSAodW5pcXVlKSBzbHVnIHRvIHVzZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcmlnaW5hbFNsdWdcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzRHJ5UnVuXG4gICAgICovXG4gICAgO1xuXG4gICAgX3Byb3RvLmdldE5leHRTYWZlU2x1ZyA9IGZ1bmN0aW9uIGdldE5leHRTYWZlU2x1ZyhvcmlnaW5hbFNsdWcsIGlzRHJ5UnVuKSB7XG4gICAgICB2YXIgc2x1ZyA9IG9yaWdpbmFsU2x1ZztcbiAgICAgIHZhciBvY2N1cmVuY2VBY2N1bXVsYXRvciA9IDA7XG5cbiAgICAgIGlmICh0aGlzLnNlZW4uaGFzT3duUHJvcGVydHkoc2x1ZykpIHtcbiAgICAgICAgb2NjdXJlbmNlQWNjdW11bGF0b3IgPSB0aGlzLnNlZW5bb3JpZ2luYWxTbHVnXTtcblxuICAgICAgICBkbyB7XG4gICAgICAgICAgb2NjdXJlbmNlQWNjdW11bGF0b3IrKztcbiAgICAgICAgICBzbHVnID0gb3JpZ2luYWxTbHVnICsgJy0nICsgb2NjdXJlbmNlQWNjdW11bGF0b3I7XG4gICAgICAgIH0gd2hpbGUgKHRoaXMuc2Vlbi5oYXNPd25Qcm9wZXJ0eShzbHVnKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNEcnlSdW4pIHtcbiAgICAgICAgdGhpcy5zZWVuW29yaWdpbmFsU2x1Z10gPSBvY2N1cmVuY2VBY2N1bXVsYXRvcjtcbiAgICAgICAgdGhpcy5zZWVuW3NsdWddID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNsdWc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgc3RyaW5nIHRvIHVuaXF1ZSBpZFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRyeXJ1bl0gR2VuZXJhdGVzIHRoZSBuZXh0IHVuaXF1ZSBzbHVnIHdpdGhvdXRcbiAgICAgKiB1cGRhdGluZyB0aGUgaW50ZXJuYWwgYWNjdW11bGF0b3IuXG4gICAgICovXG4gICAgO1xuXG4gICAgX3Byb3RvLnNsdWcgPSBmdW5jdGlvbiBzbHVnKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNsdWcgPSB0aGlzLnNlcmlhbGl6ZSh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcy5nZXROZXh0U2FmZVNsdWcoc2x1Zywgb3B0aW9ucy5kcnlydW4pO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2x1Z2dlcjtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBQYXJzaW5nICYgQ29tcGlsaW5nXG4gICAqL1xuXG4gIHZhciBQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhcnNlcihvcHRpb25zKSB7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IGV4cG9ydHMuZGVmYXVsdHM7XG4gICAgICB0aGlzLm9wdGlvbnMucmVuZGVyZXIgPSB0aGlzLm9wdGlvbnMucmVuZGVyZXIgfHwgbmV3IFJlbmRlcmVyKCk7XG4gICAgICB0aGlzLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyO1xuICAgICAgdGhpcy5yZW5kZXJlci5vcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgdGhpcy50ZXh0UmVuZGVyZXIgPSBuZXcgVGV4dFJlbmRlcmVyKCk7XG4gICAgICB0aGlzLnNsdWdnZXIgPSBuZXcgU2x1Z2dlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGF0aWMgUGFyc2UgTWV0aG9kXG4gICAgICovXG5cblxuICAgIFBhcnNlci5wYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKHRva2Vucywgb3B0aW9ucykge1xuICAgICAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIob3B0aW9ucyk7XG4gICAgICByZXR1cm4gcGFyc2VyLnBhcnNlKHRva2Vucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBQYXJzZSBJbmxpbmUgTWV0aG9kXG4gICAgICovXG4gICAgO1xuXG4gICAgUGFyc2VyLnBhcnNlSW5saW5lID0gZnVuY3Rpb24gcGFyc2VJbmxpbmUodG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcihvcHRpb25zKTtcbiAgICAgIHJldHVybiBwYXJzZXIucGFyc2VJbmxpbmUodG9rZW5zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2UgTG9vcFxuICAgICAqL1xuICAgIDtcblxuICAgIHZhciBfcHJvdG8gPSBQYXJzZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UodG9rZW5zLCB0b3ApIHtcbiAgICAgIGlmICh0b3AgPT09IHZvaWQgMCkge1xuICAgICAgICB0b3AgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3V0ID0gJycsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBqLFxuICAgICAgICAgIGssXG4gICAgICAgICAgbDIsXG4gICAgICAgICAgbDMsXG4gICAgICAgICAgcm93LFxuICAgICAgICAgIGNlbGwsXG4gICAgICAgICAgaGVhZGVyLFxuICAgICAgICAgIGJvZHksXG4gICAgICAgICAgdG9rZW4sXG4gICAgICAgICAgb3JkZXJlZCxcbiAgICAgICAgICBzdGFydCxcbiAgICAgICAgICBsb29zZSxcbiAgICAgICAgICBpdGVtQm9keSxcbiAgICAgICAgICBpdGVtLFxuICAgICAgICAgIGNoZWNrZWQsXG4gICAgICAgICAgdGFzayxcbiAgICAgICAgICBjaGVja2JveCxcbiAgICAgICAgICByZXQ7XG4gICAgICB2YXIgbCA9IHRva2Vucy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV07IC8vIFJ1biBhbnkgcmVuZGVyZXIgZXh0ZW5zaW9uc1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucyAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5yZW5kZXJlcnMgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMucmVuZGVyZXJzW3Rva2VuLnR5cGVdKSB7XG4gICAgICAgICAgcmV0ID0gdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMucmVuZGVyZXJzW3Rva2VuLnR5cGVdLmNhbGwoe1xuICAgICAgICAgICAgcGFyc2VyOiB0aGlzXG4gICAgICAgICAgfSwgdG9rZW4pO1xuXG4gICAgICAgICAgaWYgKHJldCAhPT0gZmFsc2UgfHwgIVsnc3BhY2UnLCAnaHInLCAnaGVhZGluZycsICdjb2RlJywgJ3RhYmxlJywgJ2Jsb2NrcXVvdGUnLCAnbGlzdCcsICdodG1sJywgJ3BhcmFncmFwaCcsICd0ZXh0J10uaW5jbHVkZXModG9rZW4udHlwZSkpIHtcbiAgICAgICAgICAgIG91dCArPSByZXQgfHwgJyc7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgY2FzZSAnaHInOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5ocigpO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ2hlYWRpbmcnOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5oZWFkaW5nKHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zKSwgdG9rZW4uZGVwdGgsIHVuZXNjYXBlKHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zLCB0aGlzLnRleHRSZW5kZXJlcikpLCB0aGlzLnNsdWdnZXIpO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ2NvZGUnOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5jb2RlKHRva2VuLnRleHQsIHRva2VuLmxhbmcsIHRva2VuLmVzY2FwZWQpO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ3RhYmxlJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaGVhZGVyID0gJyc7IC8vIGhlYWRlclxuXG4gICAgICAgICAgICAgIGNlbGwgPSAnJztcbiAgICAgICAgICAgICAgbDIgPSB0b2tlbi5oZWFkZXIubGVuZ3RoO1xuXG4gICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBsMjsgaisrKSB7XG4gICAgICAgICAgICAgICAgY2VsbCArPSB0aGlzLnJlbmRlcmVyLnRhYmxlY2VsbCh0aGlzLnBhcnNlSW5saW5lKHRva2VuLmhlYWRlcltqXS50b2tlbnMpLCB7XG4gICAgICAgICAgICAgICAgICBoZWFkZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgICBhbGlnbjogdG9rZW4uYWxpZ25bal1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGhlYWRlciArPSB0aGlzLnJlbmRlcmVyLnRhYmxlcm93KGNlbGwpO1xuICAgICAgICAgICAgICBib2R5ID0gJyc7XG4gICAgICAgICAgICAgIGwyID0gdG9rZW4ucm93cy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGwyOyBqKyspIHtcbiAgICAgICAgICAgICAgICByb3cgPSB0b2tlbi5yb3dzW2pdO1xuICAgICAgICAgICAgICAgIGNlbGwgPSAnJztcbiAgICAgICAgICAgICAgICBsMyA9IHJvdy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbDM7IGsrKykge1xuICAgICAgICAgICAgICAgICAgY2VsbCArPSB0aGlzLnJlbmRlcmVyLnRhYmxlY2VsbCh0aGlzLnBhcnNlSW5saW5lKHJvd1trXS50b2tlbnMpLCB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGFsaWduOiB0b2tlbi5hbGlnbltrXVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYm9keSArPSB0aGlzLnJlbmRlcmVyLnRhYmxlcm93KGNlbGwpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIudGFibGUoaGVhZGVyLCBib2R5KTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlICdibG9ja3F1b3RlJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgYm9keSA9IHRoaXMucGFyc2UodG9rZW4udG9rZW5zKTtcbiAgICAgICAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuYmxvY2txdW90ZShib2R5KTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlICdsaXN0JzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgb3JkZXJlZCA9IHRva2VuLm9yZGVyZWQ7XG4gICAgICAgICAgICAgIHN0YXJ0ID0gdG9rZW4uc3RhcnQ7XG4gICAgICAgICAgICAgIGxvb3NlID0gdG9rZW4ubG9vc2U7XG4gICAgICAgICAgICAgIGwyID0gdG9rZW4uaXRlbXMubGVuZ3RoO1xuICAgICAgICAgICAgICBib2R5ID0gJyc7XG5cbiAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGwyOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpdGVtID0gdG9rZW4uaXRlbXNbal07XG4gICAgICAgICAgICAgICAgY2hlY2tlZCA9IGl0ZW0uY2hlY2tlZDtcbiAgICAgICAgICAgICAgICB0YXNrID0gaXRlbS50YXNrO1xuICAgICAgICAgICAgICAgIGl0ZW1Cb2R5ID0gJyc7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXRlbS50YXNrKSB7XG4gICAgICAgICAgICAgICAgICBjaGVja2JveCA9IHRoaXMucmVuZGVyZXIuY2hlY2tib3goY2hlY2tlZCk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChsb29zZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS50b2tlbnMubGVuZ3RoID4gMCAmJiBpdGVtLnRva2Vuc1swXS50eXBlID09PSAncGFyYWdyYXBoJykge1xuICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udG9rZW5zWzBdLnRleHQgPSBjaGVja2JveCArICcgJyArIGl0ZW0udG9rZW5zWzBdLnRleHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS50b2tlbnNbMF0udG9rZW5zICYmIGl0ZW0udG9rZW5zWzBdLnRva2Vucy5sZW5ndGggPiAwICYmIGl0ZW0udG9rZW5zWzBdLnRva2Vuc1swXS50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udG9rZW5zWzBdLnRva2Vuc1swXS50ZXh0ID0gY2hlY2tib3ggKyAnICcgKyBpdGVtLnRva2Vuc1swXS50b2tlbnNbMF0udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgaXRlbS50b2tlbnMudW5zaGlmdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBjaGVja2JveFxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpdGVtQm9keSArPSBjaGVja2JveDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpdGVtQm9keSArPSB0aGlzLnBhcnNlKGl0ZW0udG9rZW5zLCBsb29zZSk7XG4gICAgICAgICAgICAgICAgYm9keSArPSB0aGlzLnJlbmRlcmVyLmxpc3RpdGVtKGl0ZW1Cb2R5LCB0YXNrLCBjaGVja2VkKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmxpc3QoYm9keSwgb3JkZXJlZCwgc3RhcnQpO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAvLyBUT0RPIHBhcnNlIGlubGluZSBjb250ZW50IGlmIHBhcmFtZXRlciBtYXJrZG93bj0xXG4gICAgICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmh0bWwodG9rZW4udGV4dCk7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgY2FzZSAncGFyYWdyYXBoJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIucGFyYWdyYXBoKHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zKSk7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGJvZHkgPSB0b2tlbi50b2tlbnMgPyB0aGlzLnBhcnNlSW5saW5lKHRva2VuLnRva2VucykgOiB0b2tlbi50ZXh0O1xuXG4gICAgICAgICAgICAgIHdoaWxlIChpICsgMSA8IGwgJiYgdG9rZW5zW2kgKyAxXS50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1srK2ldO1xuICAgICAgICAgICAgICAgIGJvZHkgKz0gJ1xcbicgKyAodG9rZW4udG9rZW5zID8gdGhpcy5wYXJzZUlubGluZSh0b2tlbi50b2tlbnMpIDogdG9rZW4udGV4dCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBvdXQgKz0gdG9wID8gdGhpcy5yZW5kZXJlci5wYXJhZ3JhcGgoYm9keSkgOiBib2R5O1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZhciBlcnJNc2cgPSAnVG9rZW4gd2l0aCBcIicgKyB0b2tlbi50eXBlICsgJ1wiIHR5cGUgd2FzIG5vdCBmb3VuZC4nO1xuXG4gICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJNc2cpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyTXNnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlIElubGluZSBUb2tlbnNcbiAgICAgKi9cbiAgICA7XG5cbiAgICBfcHJvdG8ucGFyc2VJbmxpbmUgPSBmdW5jdGlvbiBwYXJzZUlubGluZSh0b2tlbnMsIHJlbmRlcmVyKSB7XG4gICAgICByZW5kZXJlciA9IHJlbmRlcmVyIHx8IHRoaXMucmVuZGVyZXI7XG4gICAgICB2YXIgb3V0ID0gJycsXG4gICAgICAgICAgaSxcbiAgICAgICAgICB0b2tlbixcbiAgICAgICAgICByZXQ7XG4gICAgICB2YXIgbCA9IHRva2Vucy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV07IC8vIFJ1biBhbnkgcmVuZGVyZXIgZXh0ZW5zaW9uc1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucyAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5yZW5kZXJlcnMgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMucmVuZGVyZXJzW3Rva2VuLnR5cGVdKSB7XG4gICAgICAgICAgcmV0ID0gdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMucmVuZGVyZXJzW3Rva2VuLnR5cGVdLmNhbGwoe1xuICAgICAgICAgICAgcGFyc2VyOiB0aGlzXG4gICAgICAgICAgfSwgdG9rZW4pO1xuXG4gICAgICAgICAgaWYgKHJldCAhPT0gZmFsc2UgfHwgIVsnZXNjYXBlJywgJ2h0bWwnLCAnbGluaycsICdpbWFnZScsICdzdHJvbmcnLCAnZW0nLCAnY29kZXNwYW4nLCAnYnInLCAnZGVsJywgJ3RleHQnXS5pbmNsdWRlcyh0b2tlbi50eXBlKSkge1xuICAgICAgICAgICAgb3V0ICs9IHJldCB8fCAnJztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2VzY2FwZSc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG91dCArPSByZW5kZXJlci50ZXh0KHRva2VuLnRleHQpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIuaHRtbCh0b2tlbi50ZXh0KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlICdsaW5rJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmxpbmsodG9rZW4uaHJlZiwgdG9rZW4udGl0bGUsIHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zLCByZW5kZXJlcikpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ2ltYWdlJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmltYWdlKHRva2VuLmhyZWYsIHRva2VuLnRpdGxlLCB0b2tlbi50ZXh0KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlICdzdHJvbmcnOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIuc3Ryb25nKHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zLCByZW5kZXJlcikpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ2VtJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmVtKHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zLCByZW5kZXJlcikpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ2NvZGVzcGFuJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmNvZGVzcGFuKHRva2VuLnRleHQpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ2JyJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmJyKCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgY2FzZSAnZGVsJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmRlbCh0aGlzLnBhcnNlSW5saW5lKHRva2VuLnRva2VucywgcmVuZGVyZXIpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLnRleHQodG9rZW4udGV4dCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdmFyIGVyck1zZyA9ICdUb2tlbiB3aXRoIFwiJyArIHRva2VuLnR5cGUgKyAnXCIgdHlwZSB3YXMgbm90IGZvdW5kLic7XG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFBhcnNlcjtcbiAgfSgpO1xuXG4gIC8qKlxuICAgKiBNYXJrZWRcbiAgICovXG5cbiAgZnVuY3Rpb24gbWFya2VkKHNyYywgb3B0LCBjYWxsYmFjaykge1xuICAgIC8vIHRocm93IGVycm9yIGluIGNhc2Ugb2Ygbm9uIHN0cmluZyBpbnB1dFxuICAgIGlmICh0eXBlb2Ygc3JjID09PSAndW5kZWZpbmVkJyB8fCBzcmMgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbWFya2VkKCk6IGlucHV0IHBhcmFtZXRlciBpcyB1bmRlZmluZWQgb3IgbnVsbCcpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc3JjICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXJrZWQoKTogaW5wdXQgcGFyYW1ldGVyIGlzIG9mIHR5cGUgJyArIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzcmMpICsgJywgc3RyaW5nIGV4cGVjdGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNhbGxiYWNrID0gb3B0O1xuICAgICAgb3B0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBvcHQgPSBtZXJnZSh7fSwgbWFya2VkLmRlZmF1bHRzLCBvcHQgfHwge30pO1xuICAgIGNoZWNrU2FuaXRpemVEZXByZWNhdGlvbihvcHQpO1xuXG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgaGlnaGxpZ2h0ID0gb3B0LmhpZ2hsaWdodDtcbiAgICAgIHZhciB0b2tlbnM7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHRva2VucyA9IExleGVyLmxleChzcmMsIG9wdCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRvbmUgPSBmdW5jdGlvbiBkb25lKGVycikge1xuICAgICAgICB2YXIgb3V0O1xuXG4gICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChvcHQud2Fsa1Rva2Vucykge1xuICAgICAgICAgICAgICBtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbnMsIG9wdC53YWxrVG9rZW5zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3V0ID0gUGFyc2VyLnBhcnNlKHRva2Vucywgb3B0KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnIgPSBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9wdC5oaWdobGlnaHQgPSBoaWdobGlnaHQ7XG4gICAgICAgIHJldHVybiBlcnIgPyBjYWxsYmFjayhlcnIpIDogY2FsbGJhY2sobnVsbCwgb3V0KTtcbiAgICAgIH07XG5cbiAgICAgIGlmICghaGlnaGxpZ2h0IHx8IGhpZ2hsaWdodC5sZW5ndGggPCAzKSB7XG4gICAgICAgIHJldHVybiBkb25lKCk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBvcHQuaGlnaGxpZ2h0O1xuICAgICAgaWYgKCF0b2tlbnMubGVuZ3RoKSByZXR1cm4gZG9uZSgpO1xuICAgICAgdmFyIHBlbmRpbmcgPSAwO1xuICAgICAgbWFya2VkLndhbGtUb2tlbnModG9rZW5zLCBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdjb2RlJykge1xuICAgICAgICAgIHBlbmRpbmcrKztcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGhpZ2hsaWdodCh0b2tlbi50ZXh0LCB0b2tlbi5sYW5nLCBmdW5jdGlvbiAoZXJyLCBjb2RlKSB7XG4gICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGNvZGUgIT0gbnVsbCAmJiBjb2RlICE9PSB0b2tlbi50ZXh0KSB7XG4gICAgICAgICAgICAgICAgdG9rZW4udGV4dCA9IGNvZGU7XG4gICAgICAgICAgICAgICAgdG9rZW4uZXNjYXBlZCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBwZW5kaW5nLS07XG5cbiAgICAgICAgICAgICAgaWYgKHBlbmRpbmcgPT09IDApIHtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKHBlbmRpbmcgPT09IDApIHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25FcnJvcihlKSB7XG4gICAgICBlLm1lc3NhZ2UgKz0gJ1xcblBsZWFzZSByZXBvcnQgdGhpcyB0byBodHRwczovL2dpdGh1Yi5jb20vbWFya2VkanMvbWFya2VkLic7XG5cbiAgICAgIGlmIChvcHQuc2lsZW50KSB7XG4gICAgICAgIHJldHVybiAnPHA+QW4gZXJyb3Igb2NjdXJyZWQ6PC9wPjxwcmU+JyArIGVzY2FwZShlLm1lc3NhZ2UgKyAnJywgdHJ1ZSkgKyAnPC9wcmU+JztcbiAgICAgIH1cblxuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdmFyIF90b2tlbnMgPSBMZXhlci5sZXgoc3JjLCBvcHQpO1xuXG4gICAgICBpZiAob3B0LndhbGtUb2tlbnMpIHtcbiAgICAgICAgaWYgKG9wdC5hc3luYykge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChtYXJrZWQud2Fsa1Rva2VucyhfdG9rZW5zLCBvcHQud2Fsa1Rva2VucykpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFBhcnNlci5wYXJzZShfdG9rZW5zLCBvcHQpO1xuICAgICAgICAgIH0pW1wiY2F0Y2hcIl0ob25FcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICBtYXJrZWQud2Fsa1Rva2VucyhfdG9rZW5zLCBvcHQud2Fsa1Rva2Vucyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQYXJzZXIucGFyc2UoX3Rva2Vucywgb3B0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBvbkVycm9yKGUpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogT3B0aW9uc1xuICAgKi9cblxuICBtYXJrZWQub3B0aW9ucyA9IG1hcmtlZC5zZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdCkge1xuICAgIG1lcmdlKG1hcmtlZC5kZWZhdWx0cywgb3B0KTtcbiAgICBjaGFuZ2VEZWZhdWx0cyhtYXJrZWQuZGVmYXVsdHMpO1xuICAgIHJldHVybiBtYXJrZWQ7XG4gIH07XG5cbiAgbWFya2VkLmdldERlZmF1bHRzID0gZ2V0RGVmYXVsdHM7XG4gIG1hcmtlZC5kZWZhdWx0cyA9IGV4cG9ydHMuZGVmYXVsdHM7XG4gIC8qKlxuICAgKiBVc2UgRXh0ZW5zaW9uXG4gICAqL1xuXG4gIG1hcmtlZC51c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBvcHRzID0gbWVyZ2UuYXBwbHkodm9pZCAwLCBbe31dLmNvbmNhdChhcmdzKSk7XG4gICAgdmFyIGV4dGVuc2lvbnMgPSBtYXJrZWQuZGVmYXVsdHMuZXh0ZW5zaW9ucyB8fCB7XG4gICAgICByZW5kZXJlcnM6IHt9LFxuICAgICAgY2hpbGRUb2tlbnM6IHt9XG4gICAgfTtcbiAgICB2YXIgaGFzRXh0ZW5zaW9ucztcbiAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKHBhY2spIHtcbiAgICAgIC8vID09LS0gUGFyc2UgXCJhZGRvblwiIGV4dGVuc2lvbnMgLS09PSAvL1xuICAgICAgaWYgKHBhY2suZXh0ZW5zaW9ucykge1xuICAgICAgICBoYXNFeHRlbnNpb25zID0gdHJ1ZTtcbiAgICAgICAgcGFjay5leHRlbnNpb25zLmZvckVhY2goZnVuY3Rpb24gKGV4dCkge1xuICAgICAgICAgIGlmICghZXh0Lm5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXh0ZW5zaW9uIG5hbWUgcmVxdWlyZWQnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZXh0LnJlbmRlcmVyKSB7XG4gICAgICAgICAgICAvLyBSZW5kZXJlciBleHRlbnNpb25zXG4gICAgICAgICAgICB2YXIgcHJldlJlbmRlcmVyID0gZXh0ZW5zaW9ucy5yZW5kZXJlcnMgPyBleHRlbnNpb25zLnJlbmRlcmVyc1tleHQubmFtZV0gOiBudWxsO1xuXG4gICAgICAgICAgICBpZiAocHJldlJlbmRlcmVyKSB7XG4gICAgICAgICAgICAgIC8vIFJlcGxhY2UgZXh0ZW5zaW9uIHdpdGggZnVuYyB0byBydW4gbmV3IGV4dGVuc2lvbiBidXQgZmFsbCBiYWNrIGlmIGZhbHNlXG4gICAgICAgICAgICAgIGV4dGVuc2lvbnMucmVuZGVyZXJzW2V4dC5uYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICAgICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0gZXh0LnJlbmRlcmVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgIHJldCA9IHByZXZSZW5kZXJlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5zaW9ucy5yZW5kZXJlcnNbZXh0Lm5hbWVdID0gZXh0LnJlbmRlcmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChleHQudG9rZW5pemVyKSB7XG4gICAgICAgICAgICAvLyBUb2tlbml6ZXIgRXh0ZW5zaW9uc1xuICAgICAgICAgICAgaWYgKCFleHQubGV2ZWwgfHwgZXh0LmxldmVsICE9PSAnYmxvY2snICYmIGV4dC5sZXZlbCAhPT0gJ2lubGluZScpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZXh0ZW5zaW9uIGxldmVsIG11c3QgYmUgJ2Jsb2NrJyBvciAnaW5saW5lJ1wiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGV4dGVuc2lvbnNbZXh0LmxldmVsXSkge1xuICAgICAgICAgICAgICBleHRlbnNpb25zW2V4dC5sZXZlbF0udW5zaGlmdChleHQudG9rZW5pemVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4dGVuc2lvbnNbZXh0LmxldmVsXSA9IFtleHQudG9rZW5pemVyXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGV4dC5zdGFydCkge1xuICAgICAgICAgICAgICAvLyBGdW5jdGlvbiB0byBjaGVjayBmb3Igc3RhcnQgb2YgdG9rZW5cbiAgICAgICAgICAgICAgaWYgKGV4dC5sZXZlbCA9PT0gJ2Jsb2NrJykge1xuICAgICAgICAgICAgICAgIGlmIChleHRlbnNpb25zLnN0YXJ0QmxvY2spIHtcbiAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMuc3RhcnRCbG9jay5wdXNoKGV4dC5zdGFydCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMuc3RhcnRCbG9jayA9IFtleHQuc3RhcnRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChleHQubGV2ZWwgPT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4dGVuc2lvbnMuc3RhcnRJbmxpbmUpIHtcbiAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMuc3RhcnRJbmxpbmUucHVzaChleHQuc3RhcnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBleHRlbnNpb25zLnN0YXJ0SW5saW5lID0gW2V4dC5zdGFydF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGV4dC5jaGlsZFRva2Vucykge1xuICAgICAgICAgICAgLy8gQ2hpbGQgdG9rZW5zIHRvIGJlIHZpc2l0ZWQgYnkgd2Fsa1Rva2Vuc1xuICAgICAgICAgICAgZXh0ZW5zaW9ucy5jaGlsZFRva2Vuc1tleHQubmFtZV0gPSBleHQuY2hpbGRUb2tlbnM7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gLy8gPT0tLSBQYXJzZSBcIm92ZXJ3cml0ZVwiIGV4dGVuc2lvbnMgLS09PSAvL1xuXG5cbiAgICAgIGlmIChwYWNrLnJlbmRlcmVyKSB7XG4gICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHJlbmRlcmVyID0gbWFya2VkLmRlZmF1bHRzLnJlbmRlcmVyIHx8IG5ldyBSZW5kZXJlcigpO1xuXG4gICAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AocHJvcCkge1xuICAgICAgICAgICAgdmFyIHByZXZSZW5kZXJlciA9IHJlbmRlcmVyW3Byb3BdOyAvLyBSZXBsYWNlIHJlbmRlcmVyIHdpdGggZnVuYyB0byBydW4gZXh0ZW5zaW9uLCBidXQgZmFsbCBiYWNrIGlmIGZhbHNlXG5cbiAgICAgICAgICAgIHJlbmRlcmVyW3Byb3BdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgcmV0ID0gcGFjay5yZW5kZXJlcltwcm9wXS5hcHBseShyZW5kZXJlciwgYXJncyk7XG5cbiAgICAgICAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXQgPSBwcmV2UmVuZGVyZXIuYXBwbHkocmVuZGVyZXIsIGFyZ3MpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gcGFjay5yZW5kZXJlcikge1xuICAgICAgICAgICAgX2xvb3AocHJvcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb3B0cy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgICAgICB9KSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFjay50b2tlbml6ZXIpIHtcbiAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgdG9rZW5pemVyID0gbWFya2VkLmRlZmF1bHRzLnRva2VuaXplciB8fCBuZXcgVG9rZW5pemVyKCk7XG5cbiAgICAgICAgICB2YXIgX2xvb3AyID0gZnVuY3Rpb24gX2xvb3AyKHByb3ApIHtcbiAgICAgICAgICAgIHZhciBwcmV2VG9rZW5pemVyID0gdG9rZW5pemVyW3Byb3BdOyAvLyBSZXBsYWNlIHRva2VuaXplciB3aXRoIGZ1bmMgdG8gcnVuIGV4dGVuc2lvbiwgYnV0IGZhbGwgYmFjayBpZiBmYWxzZVxuXG4gICAgICAgICAgICB0b2tlbml6ZXJbcHJvcF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHZhciByZXQgPSBwYWNrLnRva2VuaXplcltwcm9wXS5hcHBseSh0b2tlbml6ZXIsIGFyZ3MpO1xuXG4gICAgICAgICAgICAgIGlmIChyZXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gcHJldlRva2VuaXplci5hcHBseSh0b2tlbml6ZXIsIGFyZ3MpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gcGFjay50b2tlbml6ZXIpIHtcbiAgICAgICAgICAgIF9sb29wMihwcm9wKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvcHRzLnRva2VuaXplciA9IHRva2VuaXplcjtcbiAgICAgICAgfSkoKTtcbiAgICAgIH0gLy8gPT0tLSBQYXJzZSBXYWxrVG9rZW5zIGV4dGVuc2lvbnMgLS09PSAvL1xuXG5cbiAgICAgIGlmIChwYWNrLndhbGtUb2tlbnMpIHtcbiAgICAgICAgdmFyIF93YWxrVG9rZW5zID0gbWFya2VkLmRlZmF1bHRzLndhbGtUb2tlbnM7XG5cbiAgICAgICAgb3B0cy53YWxrVG9rZW5zID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICAgIHZhbHVlcy5wdXNoKHBhY2sud2Fsa1Rva2Vucy5jYWxsKHRoaXMsIHRva2VuKSk7XG5cbiAgICAgICAgICBpZiAoX3dhbGtUb2tlbnMpIHtcbiAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQoX3dhbGtUb2tlbnMuY2FsbCh0aGlzLCB0b2tlbikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNFeHRlbnNpb25zKSB7XG4gICAgICAgIG9wdHMuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XG4gICAgICB9XG5cbiAgICAgIG1hcmtlZC5zZXRPcHRpb25zKG9wdHMpO1xuICAgIH0pO1xuICB9O1xuICAvKipcbiAgICogUnVuIGNhbGxiYWNrIGZvciBldmVyeSB0b2tlblxuICAgKi9cblxuXG4gIG1hcmtlZC53YWxrVG9rZW5zID0gZnVuY3Rpb24gKHRva2VucywgY2FsbGJhY2spIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG5cbiAgICB2YXIgX2xvb3AzID0gZnVuY3Rpb24gX2xvb3AzKCkge1xuICAgICAgdmFyIHRva2VuID0gX3N0ZXAudmFsdWU7XG4gICAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KGNhbGxiYWNrLmNhbGwobWFya2VkLCB0b2tlbikpO1xuXG4gICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgY2FzZSAndGFibGUnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKHRva2VuLmhlYWRlciksIF9zdGVwMjsgIShfc3RlcDIgPSBfaXRlcmF0b3IyKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICAgIHZhciBjZWxsID0gX3N0ZXAyLnZhbHVlO1xuICAgICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KG1hcmtlZC53YWxrVG9rZW5zKGNlbGwudG9rZW5zLCBjYWxsYmFjaykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSh0b2tlbi5yb3dzKSwgX3N0ZXAzOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMoKSkuZG9uZTspIHtcbiAgICAgICAgICAgICAgdmFyIHJvdyA9IF9zdGVwMy52YWx1ZTtcblxuICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShyb3cpLCBfc3RlcDQ7ICEoX3N0ZXA0ID0gX2l0ZXJhdG9yNCgpKS5kb25lOykge1xuICAgICAgICAgICAgICAgIHZhciBfY2VsbCA9IF9zdGVwNC52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KG1hcmtlZC53YWxrVG9rZW5zKF9jZWxsLnRva2VucywgY2FsbGJhY2spKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAnbGlzdCc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdChtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbi5pdGVtcywgY2FsbGJhY2spKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmIChtYXJrZWQuZGVmYXVsdHMuZXh0ZW5zaW9ucyAmJiBtYXJrZWQuZGVmYXVsdHMuZXh0ZW5zaW9ucy5jaGlsZFRva2VucyAmJiBtYXJrZWQuZGVmYXVsdHMuZXh0ZW5zaW9ucy5jaGlsZFRva2Vuc1t0b2tlbi50eXBlXSkge1xuICAgICAgICAgICAgICAvLyBXYWxrIGFueSBleHRlbnNpb25zXG4gICAgICAgICAgICAgIG1hcmtlZC5kZWZhdWx0cy5leHRlbnNpb25zLmNoaWxkVG9rZW5zW3Rva2VuLnR5cGVdLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkVG9rZW5zKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdChtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbltjaGlsZFRva2Vuc10sIGNhbGxiYWNrKSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0b2tlbi50b2tlbnMpIHtcbiAgICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdChtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbi50b2tlbnMsIGNhbGxiYWNrKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKHRva2VucyksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yKCkpLmRvbmU7KSB7XG4gICAgICBfbG9vcDMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9O1xuICAvKipcbiAgICogUGFyc2UgSW5saW5lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzcmNcbiAgICovXG5cblxuICBtYXJrZWQucGFyc2VJbmxpbmUgPSBmdW5jdGlvbiAoc3JjLCBvcHQpIHtcbiAgICAvLyB0aHJvdyBlcnJvciBpbiBjYXNlIG9mIG5vbiBzdHJpbmcgaW5wdXRcbiAgICBpZiAodHlwZW9mIHNyYyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3JjID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcmtlZC5wYXJzZUlubGluZSgpOiBpbnB1dCBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkIG9yIG51bGwnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNyYyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbWFya2VkLnBhcnNlSW5saW5lKCk6IGlucHV0IHBhcmFtZXRlciBpcyBvZiB0eXBlICcgKyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3JjKSArICcsIHN0cmluZyBleHBlY3RlZCcpO1xuICAgIH1cblxuICAgIG9wdCA9IG1lcmdlKHt9LCBtYXJrZWQuZGVmYXVsdHMsIG9wdCB8fCB7fSk7XG4gICAgY2hlY2tTYW5pdGl6ZURlcHJlY2F0aW9uKG9wdCk7XG5cbiAgICB0cnkge1xuICAgICAgdmFyIHRva2VucyA9IExleGVyLmxleElubGluZShzcmMsIG9wdCk7XG5cbiAgICAgIGlmIChvcHQud2Fsa1Rva2Vucykge1xuICAgICAgICBtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbnMsIG9wdC53YWxrVG9rZW5zKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFBhcnNlci5wYXJzZUlubGluZSh0b2tlbnMsIG9wdCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZS5tZXNzYWdlICs9ICdcXG5QbGVhc2UgcmVwb3J0IHRoaXMgdG8gaHR0cHM6Ly9naXRodWIuY29tL21hcmtlZGpzL21hcmtlZC4nO1xuXG4gICAgICBpZiAob3B0LnNpbGVudCkge1xuICAgICAgICByZXR1cm4gJzxwPkFuIGVycm9yIG9jY3VycmVkOjwvcD48cHJlPicgKyBlc2NhcGUoZS5tZXNzYWdlICsgJycsIHRydWUpICsgJzwvcHJlPic7XG4gICAgICB9XG5cbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogRXhwb3NlXG4gICAqL1xuXG5cbiAgbWFya2VkLlBhcnNlciA9IFBhcnNlcjtcbiAgbWFya2VkLnBhcnNlciA9IFBhcnNlci5wYXJzZTtcbiAgbWFya2VkLlJlbmRlcmVyID0gUmVuZGVyZXI7XG4gIG1hcmtlZC5UZXh0UmVuZGVyZXIgPSBUZXh0UmVuZGVyZXI7XG4gIG1hcmtlZC5MZXhlciA9IExleGVyO1xuICBtYXJrZWQubGV4ZXIgPSBMZXhlci5sZXg7XG4gIG1hcmtlZC5Ub2tlbml6ZXIgPSBUb2tlbml6ZXI7XG4gIG1hcmtlZC5TbHVnZ2VyID0gU2x1Z2dlcjtcbiAgbWFya2VkLnBhcnNlID0gbWFya2VkO1xuICB2YXIgb3B0aW9ucyA9IG1hcmtlZC5vcHRpb25zO1xuICB2YXIgc2V0T3B0aW9ucyA9IG1hcmtlZC5zZXRPcHRpb25zO1xuICB2YXIgdXNlID0gbWFya2VkLnVzZTtcbiAgdmFyIHdhbGtUb2tlbnMgPSBtYXJrZWQud2Fsa1Rva2VucztcbiAgdmFyIHBhcnNlSW5saW5lID0gbWFya2VkLnBhcnNlSW5saW5lO1xuICB2YXIgcGFyc2UgPSBtYXJrZWQ7XG4gIHZhciBwYXJzZXIgPSBQYXJzZXIucGFyc2U7XG4gIHZhciBsZXhlciA9IExleGVyLmxleDtcblxuICBleHBvcnRzLkxleGVyID0gTGV4ZXI7XG4gIGV4cG9ydHMuUGFyc2VyID0gUGFyc2VyO1xuICBleHBvcnRzLlJlbmRlcmVyID0gUmVuZGVyZXI7XG4gIGV4cG9ydHMuU2x1Z2dlciA9IFNsdWdnZXI7XG4gIGV4cG9ydHMuVGV4dFJlbmRlcmVyID0gVGV4dFJlbmRlcmVyO1xuICBleHBvcnRzLlRva2VuaXplciA9IFRva2VuaXplcjtcbiAgZXhwb3J0cy5nZXREZWZhdWx0cyA9IGdldERlZmF1bHRzO1xuICBleHBvcnRzLmxleGVyID0gbGV4ZXI7XG4gIGV4cG9ydHMubWFya2VkID0gbWFya2VkO1xuICBleHBvcnRzLm9wdGlvbnMgPSBvcHRpb25zO1xuICBleHBvcnRzLnBhcnNlID0gcGFyc2U7XG4gIGV4cG9ydHMucGFyc2VJbmxpbmUgPSBwYXJzZUlubGluZTtcbiAgZXhwb3J0cy5wYXJzZXIgPSBwYXJzZXI7XG4gIGV4cG9ydHMuc2V0T3B0aW9ucyA9IHNldE9wdGlvbnM7XG4gIGV4cG9ydHMudXNlID0gdXNlO1xuICBleHBvcnRzLndhbGtUb2tlbnMgPSB3YWxrVG9rZW5zO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKTtcbiIsImV4cG9ydCBjb25zdCBwYXJzZUxpbmtzID0gKGNvbnRlbnQ6IHN0cmluZykgPT4ge1xuXHQvLyBbW2FsaWFzfHBhc3NhZ2VOYW1lXV0gLSBncm91cCAxIGlzIGFsaWFzIG9yIHBhc3NhZ2VOYW1lIGlmIHRoZXJlIGlzIG5vIGFsaWFzLCBncm91cCAyIGlzIHBhc3NhZ2VOYW1lIGlmIHRoZXJlJ3MgYW4gYWxpYXNcblx0Y29uc3QgbGlua1JlZ2V4ID0gbmV3IFJlZ0V4cCgvXFxbXFxbKFtefFxcXV0rKVxcfD8oW15cXF1dKilcXF1cXF0vLCBcImdcIik7XG5cblx0cmV0dXJuIGNvbnRlbnQucmVwbGFjZShsaW5rUmVnZXgsIChtLCBncm91cDEsIGdyb3VwMikgPT4ge1xuXHRcdGNvbnN0IHBhc3NhZ2VOYW1lID0gZ3JvdXAyIHx8IGdyb3VwMTtcblx0XHRjb25zdCBhbGlhcyA9IGdyb3VwMiA/IGdyb3VwMSA6IHBhc3NhZ2VOYW1lO1xuXHRcdGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcblx0XHRsaW5rLmlubmVySFRNTCA9IGFsaWFzO1xuXHRcdGxpbmsuZGF0YXNldC5wYXNzYWdlTmFtZSA9IHBhc3NhZ2VOYW1lO1xuXHRcdHJldHVybiBsaW5rLm91dGVySFRNTDtcblx0fSk7XG59O1xuXG5leHBvcnQgY29uc3QgdW5lc2NhcGUgPSAoY29udGVudDogc3RyaW5nKSA9PiB7XG5cdGNvbnN0IHVuZXNjYXBlU2VxdWVuY2VzID0gW1xuXHRcdFtcIiZhbXA7XCIsIFwiJlwiXSxcblx0XHRbXCImbHQ7XCIsIFwiPFwiXSxcblx0XHRbXCImZ3Q7XCIsIFwiPlwiXSxcblx0XHRbXCImcXVvdDtcIiwgJ1wiJ10sXG5cdFx0W1wiJiN4Mjc7XCIsIFwiJ1wiXSxcblx0XHRbXCImI3g2MDtcIiwgXCJgXCJdLFxuXHRdO1xuXG5cdHVuZXNjYXBlU2VxdWVuY2VzLmZvckVhY2goKFtydWxlLCB0ZW1wbGF0ZV0pID0+IHtcblx0XHRjb250ZW50ID0gY29udGVudC5yZXBsYWNlKG5ldyBSZWdFeHAocnVsZSwgXCJnXCIpLCB0ZW1wbGF0ZSk7XG5cdH0pO1xuXG5cdHJldHVybiBjb250ZW50O1xufTtcblxuLyoqXG4gKiBPbmNlIHdlIHBhc3MgdGhlIGNvbnRlbnQgdGhyb3VnaCBtYXJrZWQsIGl0IHdpbGwgcmVwbGFjZSBxdW90ZXMgaW5cbiAqIG11c3RhY2hlIGJsb2NrcyAoaS5lLiB7eyNzZXQgdGhpbmc9XCJ2YWx1ZVwifX17ey9zZXR9fSkgd2l0aCBgJnF1b3Q7YFxuICogVGhpcyB3aWxsIHVuZG8gdGhhdC5cbiAqL1xuZXhwb3J0IGNvbnN0IGZpeEhhbmRsZWJhcnNBdHRyaWJ1dGVRdW90ZXMgPSAoY29udGVudDogc3RyaW5nKSA9PiB7XG5cdGNvbnN0IGhhbmRsZWJhcnNBdHRyaWJ1dGVRdW90ZVJlZ2V4ID0gbmV3IFJlZ0V4cChcblx0XHQvXFx7XFx7LiooJnF1b3Q7KS4qXFx9XFx9Lyxcblx0XHRcImdcIlxuXHQpO1xuXG5cdHJldHVybiBjb250ZW50LnJlcGxhY2UoaGFuZGxlYmFyc0F0dHJpYnV0ZVF1b3RlUmVnZXgsIChtKSA9PiB7XG5cdFx0cmV0dXJuIG0ucmVwbGFjZShuZXcgUmVnRXhwKFwiJnF1b3Q7XCIsIFwiZ1wiKSwgJ1wiJyk7XG5cdH0pO1xufTtcbiIsImltcG9ydCB7IG1hcmtlZCB9IGZyb20gXCJtYXJrZWRcIjtcbmltcG9ydCB7IGZpeEhhbmRsZWJhcnNBdHRyaWJ1dGVRdW90ZXMsIHBhcnNlTGlua3MsIHVuZXNjYXBlIH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5jbGFzcyBQYXNzYWdlIHtcblx0cGlkOiBzdHJpbmc7XG5cdG5hbWU6IHN0cmluZztcblx0cmF3Q29udGVudDogc3RyaW5nO1xuXHR0YWdzOiBzdHJpbmdbXTtcblx0cG9zaXRpb246IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfTtcblx0c2l6ZTogeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9O1xuXG5cdGNvbnN0cnVjdG9yKHBhc3NhZ2VOb2RlOiBIVE1MRWxlbWVudCkge1xuXHRcdGNvbnN0IHBpZCA9IHBhc3NhZ2VOb2RlLmdldEF0dHJpYnV0ZShcInBpZFwiKTtcblx0XHRjb25zdCBuYW1lID0gcGFzc2FnZU5vZGUuZ2V0QXR0cmlidXRlKFwibmFtZVwiKTtcblxuXHRcdGlmICghcGlkKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEEgcGFzc2FnZSAobmFtZTogJHtuYW1lfSkgaXMgbWlzc2luZyBhIHBpZCFgKTtcblx0XHR9XG5cdFx0aWYgKCFuYW1lKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEEgcGFzc2FnZSB3aXRoIHBpZCAke3BpZH0gaXMgbWlzc2luZyBhIG5hbWUhYCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdGFnc1JhdyA9IHBhc3NhZ2VOb2RlLmdldEF0dHJpYnV0ZShcInRhZ3NcIik7XG5cdFx0Y29uc3QgcG9zaXRpb25SYXcgPSBwYXNzYWdlTm9kZS5nZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiKTtcblx0XHRjb25zdCBzaXplUmF3ID0gcGFzc2FnZU5vZGUuZ2V0QXR0cmlidXRlKFwic2l6ZVwiKTtcblx0XHRjb25zdCBjb250ZW50ID0gcGFzc2FnZU5vZGUuaW5uZXJIVE1MO1xuXG5cdFx0Y29uc3QgdGFncyA9IHRhZ3NSYXc/LnNwbGl0KFwiIFwiKSB8fCBbXTtcblx0XHRjb25zdCBwb3NpdGlvbiA9IHsgeDogMCwgeTogMCB9O1xuXHRcdGlmIChwb3NpdGlvblJhdykge1xuXHRcdFx0Y29uc3QgcG9zaXRpb25Db29yZHMgPSBwb3NpdGlvblJhd1xuXHRcdFx0XHQuc3BsaXQoXCIsXCIpXG5cdFx0XHRcdC5tYXAoKG4pID0+IHBhcnNlRmxvYXQobikpO1xuXHRcdFx0cG9zaXRpb24ueCA9IHBvc2l0aW9uQ29vcmRzWzBdO1xuXHRcdFx0cG9zaXRpb24ueSA9IHBvc2l0aW9uQ29vcmRzWzFdO1xuXHRcdH1cblx0XHRjb25zdCBzaXplID0geyB3aWR0aDogMTAwLCBoZWlnaHQ6IDEwMCB9O1xuXHRcdGlmIChzaXplUmF3KSB7XG5cdFx0XHRjb25zdCBkaW1zID0gc2l6ZVJhdy5zcGxpdChcIixcIikubWFwKChuKSA9PiBwYXJzZUZsb2F0KG4pKTtcblx0XHRcdHNpemUud2lkdGggPSBkaW1zWzBdO1xuXHRcdFx0c2l6ZS5oZWlnaHQgPSBkaW1zWzFdO1xuXHRcdH1cblxuXHRcdHRoaXMucGlkID0gcGlkO1xuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cdFx0dGhpcy50YWdzID0gdGFncztcblx0XHR0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG5cdFx0dGhpcy5zaXplID0gc2l6ZTtcblx0XHR0aGlzLnJhd0NvbnRlbnQgPSBjb250ZW50O1xuXHR9XG5cblx0Z2V0IHJpY2hDb250ZW50KCkge1xuXHRcdGNvbnN0IGxpbmtzUGFyc2VkID0gcGFyc2VMaW5rcyh0aGlzLnJhd0NvbnRlbnQpO1xuXHRcdGNvbnN0IHVuZXNjYXBlZCA9IHVuZXNjYXBlKGxpbmtzUGFyc2VkKTtcblx0XHRjb25zdCBodG1sID0gbWFya2VkLnBhcnNlKHVuZXNjYXBlZCk7XG5cblx0XHRyZXR1cm4gZml4SGFuZGxlYmFyc0F0dHJpYnV0ZVF1b3RlcyhodG1sKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBQYXNzYWdlO1xuIiwidHlwZSBHbG9iYWxTdGF0ZSA9IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xudHlwZSBTdGF0ZUxpc3RlbmVyID0gKGdsb2JhbFN0YXRlOiBHbG9iYWxTdGF0ZSkgPT4gdm9pZDtcblxuY2xhc3MgU3RhdGUge1xuXHRzdG9yZTogR2xvYmFsU3RhdGU7XG5cdGxpc3RlbmVyczogU3RhdGVMaXN0ZW5lcltdO1xuXG5cdGNvbnN0cnVjdG9yKGluaXRpYWxHbG9iYWxTdGF0ZTogR2xvYmFsU3RhdGUgPSB7fSkge1xuXHRcdHRoaXMuc3RvcmUgPSBpbml0aWFsR2xvYmFsU3RhdGU7XG5cdFx0dGhpcy5saXN0ZW5lcnMgPSBbXTtcblx0fVxuXG5cdGFkZExpc3RlbmVyKGxpc3RlbmVyOiBTdGF0ZUxpc3RlbmVyKSB7XG5cdFx0dGhpcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cdH1cblxuXHRjYWxsTGlzdGVuZXJzKCkge1xuXHRcdHRoaXMubGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG5cdFx0XHRsaXN0ZW5lcih0aGlzLnN0b3JlKTtcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIGEga2V5IGZyb20gdGhlIHN0YXRlLlxuXHQgKiBTYWlkIGtleSBjYW4gYmUgYSBkb3QtZGVsaW1pdGVkIHN0cmluZyB0byBkcmlsbCB0aHJvdWdoIHRoZSBzdGF0ZSBvYmplY3QuXG5cdCAqIGkuZS4gXCJwYXJlbnQuY2hpbGQuZ3JhbmRjaGlsZFwiIHdpbGwgZmV0Y2ggdGhlIFwiZm9vXCIgZnJvbSBnbG9iYWwgc3RhdGU6IHsgcGFyZW50OiB7IGNoaWxkOiB7IGdyYW5kY2hpbGQ6IFwiZm9vXCIgfSB9IH1cblx0ICovXG5cdGdldChrZXk6IHN0cmluZykge1xuXHRcdGNvbnN0IHBhcnRzID0ga2V5LnNwbGl0KFwiLlwiKTtcblxuXHRcdHJldHVybiBwYXJ0cy5yZWR1Y2UoKGxhc3Q6IGFueSwgcGFydGlhbEtleSkgPT4ge1xuXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChsYXN0LCBwYXJ0aWFsS2V5KSkge1xuXHRcdFx0XHRyZXR1cm4gbGFzdFtwYXJ0aWFsS2V5XTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGdldCB2YXJpYWJsZSB3aXRoIGtleSAke2tleX1gKTtcblx0XHRcdH1cblx0XHR9LCB0aGlzLnN0b3JlKTtcblx0fVxuXG5cdHNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xuXHRcdHRoaXMuc3RvcmVba2V5XSA9IHZhbHVlO1xuXG5cdFx0dGhpcy5jYWxsTGlzdGVuZXJzKCk7XG5cdH1cblxuXHRjbGVhcihrZXk6IHN0cmluZyB8IG51bGwpIHtcblx0XHRpZiAoIWtleSkge1xuXHRcdFx0dGhpcy5zdG9yZSA9IHt9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZWxldGUgdGhpcy5zdG9yZVtrZXldO1xuXHRcdH1cblxuXHRcdHRoaXMuY2FsbExpc3RlbmVycygpO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRlO1xuIiwiaW1wb3J0IHsgY3JlYXRlRnJhbWUsIGV4dGVuZCwgdG9TdHJpbmcgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi9leGNlcHRpb24nO1xuaW1wb3J0IHsgcmVnaXN0ZXJEZWZhdWx0SGVscGVycyB9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyByZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzIH0gZnJvbSAnLi9kZWNvcmF0b3JzJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgcmVzZXRMb2dnZWRQcm9wZXJ0aWVzIH0gZnJvbSAnLi9pbnRlcm5hbC9wcm90by1hY2Nlc3MnO1xuXG5leHBvcnQgY29uc3QgVkVSU0lPTiA9ICc0LjcuNyc7XG5leHBvcnQgY29uc3QgQ09NUElMRVJfUkVWSVNJT04gPSA4O1xuZXhwb3J0IGNvbnN0IExBU1RfQ09NUEFUSUJMRV9DT01QSUxFUl9SRVZJU0lPTiA9IDc7XG5cbmV4cG9ydCBjb25zdCBSRVZJU0lPTl9DSEFOR0VTID0ge1xuICAxOiAnPD0gMS4wLnJjLjInLCAvLyAxLjAucmMuMiBpcyBhY3R1YWxseSByZXYyIGJ1dCBkb2Vzbid0IHJlcG9ydCBpdFxuICAyOiAnPT0gMS4wLjAtcmMuMycsXG4gIDM6ICc9PSAxLjAuMC1yYy40JyxcbiAgNDogJz09IDEueC54JyxcbiAgNTogJz09IDIuMC4wLWFscGhhLngnLFxuICA2OiAnPj0gMi4wLjAtYmV0YS4xJyxcbiAgNzogJz49IDQuMC4wIDw0LjMuMCcsXG4gIDg6ICc+PSA0LjMuMCdcbn07XG5cbmNvbnN0IG9iamVjdFR5cGUgPSAnW29iamVjdCBPYmplY3RdJztcblxuZXhwb3J0IGZ1bmN0aW9uIEhhbmRsZWJhcnNFbnZpcm9ubWVudChoZWxwZXJzLCBwYXJ0aWFscywgZGVjb3JhdG9ycykge1xuICB0aGlzLmhlbHBlcnMgPSBoZWxwZXJzIHx8IHt9O1xuICB0aGlzLnBhcnRpYWxzID0gcGFydGlhbHMgfHwge307XG4gIHRoaXMuZGVjb3JhdG9ycyA9IGRlY29yYXRvcnMgfHwge307XG5cbiAgcmVnaXN0ZXJEZWZhdWx0SGVscGVycyh0aGlzKTtcbiAgcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyh0aGlzKTtcbn1cblxuSGFuZGxlYmFyc0Vudmlyb25tZW50LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEhhbmRsZWJhcnNFbnZpcm9ubWVudCxcblxuICBsb2dnZXI6IGxvZ2dlcixcbiAgbG9nOiBsb2dnZXIubG9nLFxuXG4gIHJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbihuYW1lLCBmbikge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBoZWxwZXJzJyk7XG4gICAgICB9XG4gICAgICBleHRlbmQodGhpcy5oZWxwZXJzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oZWxwZXJzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuaGVscGVyc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUsIHBhcnRpYWwpIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgZXh0ZW5kKHRoaXMucGFydGlhbHMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnRpYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXG4gICAgICAgICAgYEF0dGVtcHRpbmcgdG8gcmVnaXN0ZXIgYSBwYXJ0aWFsIGNhbGxlZCBcIiR7bmFtZX1cIiBhcyB1bmRlZmluZWRgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLnBhcnRpYWxzW25hbWVdID0gcGFydGlhbDtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXJQYXJ0aWFsOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMucGFydGlhbHNbbmFtZV07XG4gIH0sXG5cbiAgcmVnaXN0ZXJEZWNvcmF0b3I6IGZ1bmN0aW9uKG5hbWUsIGZuKSB7XG4gICAgaWYgKHRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChmbikge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGRlY29yYXRvcnMnKTtcbiAgICAgIH1cbiAgICAgIGV4dGVuZCh0aGlzLmRlY29yYXRvcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlY29yYXRvcnNbbmFtZV0gPSBmbjtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXJEZWNvcmF0b3I6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5kZWNvcmF0b3JzW25hbWVdO1xuICB9LFxuICAvKipcbiAgICogUmVzZXQgdGhlIG1lbW9yeSBvZiBpbGxlZ2FsIHByb3BlcnR5IGFjY2Vzc2VzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gbG9nZ2VkLlxuICAgKiBAZGVwcmVjYXRlZCBzaG91bGQgb25seSBiZSB1c2VkIGluIGhhbmRsZWJhcnMgdGVzdC1jYXNlc1xuICAgKi9cbiAgcmVzZXRMb2dnZWRQcm9wZXJ0eUFjY2Vzc2VzKCkge1xuICAgIHJlc2V0TG9nZ2VkUHJvcGVydGllcygpO1xuICB9XG59O1xuXG5leHBvcnQgbGV0IGxvZyA9IGxvZ2dlci5sb2c7XG5cbmV4cG9ydCB7IGNyZWF0ZUZyYW1lLCBsb2dnZXIgfTtcbiIsImNvbnN0IGVzY2FwZSA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjeDI3OycsXG4gICdgJzogJyYjeDYwOycsXG4gICc9JzogJyYjeDNEOydcbn07XG5cbmNvbnN0IGJhZENoYXJzID0gL1smPD5cIidgPV0vZyxcbiAgcG9zc2libGUgPSAvWyY8PlwiJ2A9XS87XG5cbmZ1bmN0aW9uIGVzY2FwZUNoYXIoY2hyKSB7XG4gIHJldHVybiBlc2NhcGVbY2hyXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChvYmogLyogLCAuLi5zb3VyY2UgKi8pIHtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBrZXkgaW4gYXJndW1lbnRzW2ldKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFyZ3VtZW50c1tpXSwga2V5KSkge1xuICAgICAgICBvYmpba2V5XSA9IGFyZ3VtZW50c1tpXVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBsZXQgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vLyBTb3VyY2VkIGZyb20gbG9kYXNoXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYmVzdGllanMvbG9kYXNoL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0XG4vKiBlc2xpbnQtZGlzYWJsZSBmdW5jLXN0eWxlICovXG5sZXQgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59O1xuLy8gZmFsbGJhY2sgZm9yIG9sZGVyIHZlcnNpb25zIG9mIENocm9tZSBhbmQgU2FmYXJpXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGlzRnVuY3Rpb24oL3gvKSkge1xuICBpc0Z1bmN0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmXG4gICAgICB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJ1xuICAgICk7XG4gIH07XG59XG5leHBvcnQgeyBpc0Z1bmN0aW9uIH07XG4vKiBlc2xpbnQtZW5hYmxlIGZ1bmMtc3R5bGUgKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBpc0FycmF5ID1cbiAgQXJyYXkuaXNBcnJheSB8fFxuICBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG4gICAgICA/IHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4vLyBPbGRlciBJRSB2ZXJzaW9ucyBkbyBub3QgZGlyZWN0bHkgc3VwcG9ydCBpbmRleE9mIHNvIHdlIG11c3QgaW1wbGVtZW50IG91ciBvd24sIHNhZGx5LlxuZXhwb3J0IGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChhcnJheVtpXSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVFeHByZXNzaW9uKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBlc2NhcGUgU2FmZVN0cmluZ3MsIHNpbmNlIHRoZXkncmUgYWxyZWFkeSBzYWZlXG4gICAgaWYgKHN0cmluZyAmJiBzdHJpbmcudG9IVE1MKSB7XG4gICAgICByZXR1cm4gc3RyaW5nLnRvSFRNTCgpO1xuICAgIH0gZWxzZSBpZiAoc3RyaW5nID09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9IGVsc2UgaWYgKCFzdHJpbmcpIHtcbiAgICAgIHJldHVybiBzdHJpbmcgKyAnJztcbiAgICB9XG5cbiAgICAvLyBGb3JjZSBhIHN0cmluZyBjb252ZXJzaW9uIGFzIHRoaXMgd2lsbCBiZSBkb25lIGJ5IHRoZSBhcHBlbmQgcmVnYXJkbGVzcyBhbmRcbiAgICAvLyB0aGUgcmVnZXggdGVzdCB3aWxsIGRvIHRoaXMgdHJhbnNwYXJlbnRseSBiZWhpbmQgdGhlIHNjZW5lcywgY2F1c2luZyBpc3N1ZXMgaWZcbiAgICAvLyBhbiBvYmplY3QncyB0byBzdHJpbmcgaGFzIGVzY2FwZWQgY2hhcmFjdGVycyBpbiBpdC5cbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZztcbiAgfVxuXG4gIGlmICghcG9zc2libGUudGVzdChzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfVxuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoYmFkQ2hhcnMsIGVzY2FwZUNoYXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGcmFtZShvYmplY3QpIHtcbiAgbGV0IGZyYW1lID0gZXh0ZW5kKHt9LCBvYmplY3QpO1xuICBmcmFtZS5fcGFyZW50ID0gb2JqZWN0O1xuICByZXR1cm4gZnJhbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBibG9ja1BhcmFtcyhwYXJhbXMsIGlkcykge1xuICBwYXJhbXMucGF0aCA9IGlkcztcbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZENvbnRleHRQYXRoKGNvbnRleHRQYXRoLCBpZCkge1xuICByZXR1cm4gKGNvbnRleHRQYXRoID8gY29udGV4dFBhdGggKyAnLicgOiAnJykgKyBpZDtcbn1cbiIsImNvbnN0IGVycm9yUHJvcHMgPSBbXG4gICdkZXNjcmlwdGlvbicsXG4gICdmaWxlTmFtZScsXG4gICdsaW5lTnVtYmVyJyxcbiAgJ2VuZExpbmVOdW1iZXInLFxuICAnbWVzc2FnZScsXG4gICduYW1lJyxcbiAgJ251bWJlcicsXG4gICdzdGFjaydcbl07XG5cbmZ1bmN0aW9uIEV4Y2VwdGlvbihtZXNzYWdlLCBub2RlKSB7XG4gIGxldCBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxuICAgIGxpbmUsXG4gICAgZW5kTGluZU51bWJlcixcbiAgICBjb2x1bW4sXG4gICAgZW5kQ29sdW1uO1xuXG4gIGlmIChsb2MpIHtcbiAgICBsaW5lID0gbG9jLnN0YXJ0LmxpbmU7XG4gICAgZW5kTGluZU51bWJlciA9IGxvYy5lbmQubGluZTtcbiAgICBjb2x1bW4gPSBsb2Muc3RhcnQuY29sdW1uO1xuICAgIGVuZENvbHVtbiA9IGxvYy5lbmQuY29sdW1uO1xuXG4gICAgbWVzc2FnZSArPSAnIC0gJyArIGxpbmUgKyAnOicgKyBjb2x1bW47XG4gIH1cblxuICBsZXQgdG1wID0gRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cbiAgLy8gVW5mb3J0dW5hdGVseSBlcnJvcnMgYXJlIG5vdCBlbnVtZXJhYmxlIGluIENocm9tZSAoYXQgbGVhc3QpLCBzbyBgZm9yIHByb3AgaW4gdG1wYCBkb2Vzbid0IHdvcmsuXG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVycm9yUHJvcHMubGVuZ3RoOyBpZHgrKykge1xuICAgIHRoaXNbZXJyb3JQcm9wc1tpZHhdXSA9IHRtcFtlcnJvclByb3BzW2lkeF1dO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXhjZXB0aW9uKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGxvYykge1xuICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZTtcbiAgICAgIHRoaXMuZW5kTGluZU51bWJlciA9IGVuZExpbmVOdW1iZXI7XG5cbiAgICAgIC8vIFdvcmsgYXJvdW5kIGlzc3VlIHVuZGVyIHNhZmFyaSB3aGVyZSB3ZSBjYW4ndCBkaXJlY3RseSBzZXQgdGhlIGNvbHVtbiB2YWx1ZVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb2x1bW4nLCB7XG4gICAgICAgICAgdmFsdWU6IGNvbHVtbixcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2VuZENvbHVtbicsIHtcbiAgICAgICAgICB2YWx1ZTogZW5kQ29sdW1uLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgICAgdGhpcy5lbmRDb2x1bW4gPSBlbmRDb2x1bW47XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChub3ApIHtcbiAgICAvKiBJZ25vcmUgaWYgdGhlIGJyb3dzZXIgaXMgdmVyeSBwYXJ0aWN1bGFyICovXG4gIH1cbn1cblxuRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuXG5leHBvcnQgZGVmYXVsdCBFeGNlcHRpb247XG4iLCJpbXBvcnQgcmVnaXN0ZXJCbG9ja0hlbHBlck1pc3NpbmcgZnJvbSAnLi9oZWxwZXJzL2Jsb2NrLWhlbHBlci1taXNzaW5nJztcbmltcG9ydCByZWdpc3RlckVhY2ggZnJvbSAnLi9oZWxwZXJzL2VhY2gnO1xuaW1wb3J0IHJlZ2lzdGVySGVscGVyTWlzc2luZyBmcm9tICcuL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcnO1xuaW1wb3J0IHJlZ2lzdGVySWYgZnJvbSAnLi9oZWxwZXJzL2lmJztcbmltcG9ydCByZWdpc3RlckxvZyBmcm9tICcuL2hlbHBlcnMvbG9nJztcbmltcG9ydCByZWdpc3Rlckxvb2t1cCBmcm9tICcuL2hlbHBlcnMvbG9va3VwJztcbmltcG9ydCByZWdpc3RlcldpdGggZnJvbSAnLi9oZWxwZXJzL3dpdGgnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0SGVscGVycyhpbnN0YW5jZSkge1xuICByZWdpc3RlckJsb2NrSGVscGVyTWlzc2luZyhpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyRWFjaChpbnN0YW5jZSk7XG4gIHJlZ2lzdGVySGVscGVyTWlzc2luZyhpbnN0YW5jZSk7XG4gIHJlZ2lzdGVySWYoaW5zdGFuY2UpO1xuICByZWdpc3RlckxvZyhpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyTG9va3VwKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJXaXRoKGluc3RhbmNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVIZWxwZXJUb0hvb2tzKGluc3RhbmNlLCBoZWxwZXJOYW1lLCBrZWVwSGVscGVyKSB7XG4gIGlmIChpbnN0YW5jZS5oZWxwZXJzW2hlbHBlck5hbWVdKSB7XG4gICAgaW5zdGFuY2UuaG9va3NbaGVscGVyTmFtZV0gPSBpbnN0YW5jZS5oZWxwZXJzW2hlbHBlck5hbWVdO1xuICAgIGlmICgha2VlcEhlbHBlcikge1xuICAgICAgZGVsZXRlIGluc3RhbmNlLmhlbHBlcnNbaGVscGVyTmFtZV07XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBhcHBlbmRDb250ZXh0UGF0aCwgY3JlYXRlRnJhbWUsIGlzQXJyYXkgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgbGV0IGludmVyc2UgPSBvcHRpb25zLmludmVyc2UsXG4gICAgICBmbiA9IG9wdGlvbnMuZm47XG5cbiAgICBpZiAoY29udGV4dCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGZuKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoY29udGV4dCA9PT0gZmFsc2UgfHwgY29udGV4dCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gaW52ZXJzZSh0aGlzKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoY29udGV4dCkpIHtcbiAgICAgIGlmIChjb250ZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaWRzKSB7XG4gICAgICAgICAgb3B0aW9ucy5pZHMgPSBbb3B0aW9ucy5uYW1lXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbnN0YW5jZS5oZWxwZXJzLmVhY2goY29udGV4dCwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaW52ZXJzZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuICAgICAgICBsZXQgZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBhcHBlbmRDb250ZXh0UGF0aChcbiAgICAgICAgICBvcHRpb25zLmRhdGEuY29udGV4dFBhdGgsXG4gICAgICAgICAgb3B0aW9ucy5uYW1lXG4gICAgICAgICk7XG4gICAgICAgIG9wdGlvbnMgPSB7IGRhdGE6IGRhdGEgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJpbXBvcnQge1xuICBhcHBlbmRDb250ZXh0UGF0aCxcbiAgYmxvY2tQYXJhbXMsXG4gIGNyZWF0ZUZyYW1lLFxuICBpc0FycmF5LFxuICBpc0Z1bmN0aW9uXG59IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2VhY2gnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdNdXN0IHBhc3MgaXRlcmF0b3IgdG8gI2VhY2gnKTtcbiAgICB9XG5cbiAgICBsZXQgZm4gPSBvcHRpb25zLmZuLFxuICAgICAgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgIGkgPSAwLFxuICAgICAgcmV0ID0gJycsXG4gICAgICBkYXRhLFxuICAgICAgY29udGV4dFBhdGg7XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICBjb250ZXh0UGF0aCA9XG4gICAgICAgIGFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pICsgJy4nO1xuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRleHQpKSB7XG4gICAgICBjb250ZXh0ID0gY29udGV4dC5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBjcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4ZWNJdGVyYXRpb24oZmllbGQsIGluZGV4LCBsYXN0KSB7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBkYXRhLmtleSA9IGZpZWxkO1xuICAgICAgICBkYXRhLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIGRhdGEuZmlyc3QgPSBpbmRleCA9PT0gMDtcbiAgICAgICAgZGF0YS5sYXN0ID0gISFsYXN0O1xuXG4gICAgICAgIGlmIChjb250ZXh0UGF0aCkge1xuICAgICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBjb250ZXh0UGF0aCArIGZpZWxkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldCA9XG4gICAgICAgIHJldCArXG4gICAgICAgIGZuKGNvbnRleHRbZmllbGRdLCB7XG4gICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICBibG9ja1BhcmFtczogYmxvY2tQYXJhbXMoXG4gICAgICAgICAgICBbY29udGV4dFtmaWVsZF0sIGZpZWxkXSxcbiAgICAgICAgICAgIFtjb250ZXh0UGF0aCArIGZpZWxkLCBudWxsXVxuICAgICAgICAgIClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgICBmb3IgKGxldCBqID0gY29udGV4dC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBpZiAoaSBpbiBjb250ZXh0KSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKGksIGksIGkgPT09IGNvbnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGdsb2JhbC5TeW1ib2wgJiYgY29udGV4dFtnbG9iYWwuU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgICBjb25zdCBuZXdDb250ZXh0ID0gW107XG4gICAgICAgIGNvbnN0IGl0ZXJhdG9yID0gY29udGV4dFtnbG9iYWwuU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgICBmb3IgKGxldCBpdCA9IGl0ZXJhdG9yLm5leHQoKTsgIWl0LmRvbmU7IGl0ID0gaXRlcmF0b3IubmV4dCgpKSB7XG4gICAgICAgICAgbmV3Q29udGV4dC5wdXNoKGl0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0ID0gbmV3Q29udGV4dDtcbiAgICAgICAgZm9yIChsZXQgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgZXhlY0l0ZXJhdGlvbihpLCBpLCBpID09PSBjb250ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJpb3JLZXk7XG5cbiAgICAgICAgT2JqZWN0LmtleXMoY29udGV4dCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIC8vIFdlJ3JlIHJ1bm5pbmcgdGhlIGl0ZXJhdGlvbnMgb25lIHN0ZXAgb3V0IG9mIHN5bmMgc28gd2UgY2FuIGRldGVjdFxuICAgICAgICAgIC8vIHRoZSBsYXN0IGl0ZXJhdGlvbiB3aXRob3V0IGhhdmUgdG8gc2NhbiB0aGUgb2JqZWN0IHR3aWNlIGFuZCBjcmVhdGVcbiAgICAgICAgICAvLyBhbiBpdGVybWVkaWF0ZSBrZXlzIGFycmF5LlxuICAgICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByaW9yS2V5ID0ga2V5O1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIHJldCA9IGludmVyc2UodGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59XG4iLCJpbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdoZWxwZXJNaXNzaW5nJywgZnVuY3Rpb24oLyogW2FyZ3MsIF1vcHRpb25zICovKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIEEgbWlzc2luZyBmaWVsZCBpbiBhIHt7Zm9vfX0gY29uc3RydWN0LlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU29tZW9uZSBpcyBhY3R1YWxseSB0cnlpbmcgdG8gY2FsbCBzb21ldGhpbmcsIGJsb3cgdXAuXG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFxuICAgICAgICAnTWlzc2luZyBoZWxwZXI6IFwiJyArIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV0ubmFtZSArICdcIidcbiAgICAgICk7XG4gICAgfVxuICB9KTtcbn1cbiIsImltcG9ydCB7IGlzRW1wdHksIGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdpZicsIGZ1bmN0aW9uKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT0gMikge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignI2lmIHJlcXVpcmVzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIGlmIChpc0Z1bmN0aW9uKGNvbmRpdGlvbmFsKSkge1xuICAgICAgY29uZGl0aW9uYWwgPSBjb25kaXRpb25hbC5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgaXMgdG8gcmVuZGVyIHRoZSBwb3NpdGl2ZSBwYXRoIGlmIHRoZSB2YWx1ZSBpcyB0cnV0aHkgYW5kIG5vdCBlbXB0eS5cbiAgICAvLyBUaGUgYGluY2x1ZGVaZXJvYCBvcHRpb24gbWF5IGJlIHNldCB0byB0cmVhdCB0aGUgY29uZHRpb25hbCBhcyBwdXJlbHkgbm90IGVtcHR5IGJhc2VkIG9uIHRoZVxuICAgIC8vIGJlaGF2aW9yIG9mIGlzRW1wdHkuIEVmZmVjdGl2ZWx5IHRoaXMgZGV0ZXJtaW5lcyBpZiAwIGlzIGhhbmRsZWQgYnkgdGhlIHBvc2l0aXZlIHBhdGggb3IgbmVnYXRpdmUuXG4gICAgaWYgKCghb3B0aW9ucy5oYXNoLmluY2x1ZGVaZXJvICYmICFjb25kaXRpb25hbCkgfHwgaXNFbXB0eShjb25kaXRpb25hbCkpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3VubGVzcycsIGZ1bmN0aW9uKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT0gMikge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignI3VubGVzcyByZXF1aXJlcyBleGFjdGx5IG9uZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdGFuY2UuaGVscGVyc1snaWYnXS5jYWxsKHRoaXMsIGNvbmRpdGlvbmFsLCB7XG4gICAgICBmbjogb3B0aW9ucy5pbnZlcnNlLFxuICAgICAgaW52ZXJzZTogb3B0aW9ucy5mbixcbiAgICAgIGhhc2g6IG9wdGlvbnMuaGFzaFxuICAgIH0pO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb2cnLCBmdW5jdGlvbigvKiBtZXNzYWdlLCBvcHRpb25zICovKSB7XG4gICAgbGV0IGFyZ3MgPSBbdW5kZWZpbmVkXSxcbiAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgfVxuXG4gICAgbGV0IGxldmVsID0gMTtcbiAgICBpZiAob3B0aW9ucy5oYXNoLmxldmVsICE9IG51bGwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5oYXNoLmxldmVsO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YS5sZXZlbCAhPSBudWxsKSB7XG4gICAgICBsZXZlbCA9IG9wdGlvbnMuZGF0YS5sZXZlbDtcbiAgICB9XG4gICAgYXJnc1swXSA9IGxldmVsO1xuXG4gICAgaW5zdGFuY2UubG9nKC4uLmFyZ3MpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb29rdXAnLCBmdW5jdGlvbihvYmosIGZpZWxkLCBvcHRpb25zKSB7XG4gICAgaWYgKCFvYmopIHtcbiAgICAgIC8vIE5vdGUgZm9yIDUuMDogQ2hhbmdlIHRvIFwib2JqID09IG51bGxcIiBpbiA1LjBcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zLmxvb2t1cFByb3BlcnR5KG9iaiwgZmllbGQpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7XG4gIGFwcGVuZENvbnRleHRQYXRoLFxuICBibG9ja1BhcmFtcyxcbiAgY3JlYXRlRnJhbWUsXG4gIGlzRW1wdHksXG4gIGlzRnVuY3Rpb25cbn0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignd2l0aCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPSAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCcjd2l0aCByZXF1aXJlcyBleGFjdGx5IG9uZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgICBpZiAoaXNGdW5jdGlvbihjb250ZXh0KSkge1xuICAgICAgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICBsZXQgZm4gPSBvcHRpb25zLmZuO1xuXG4gICAgaWYgKCFpc0VtcHR5KGNvbnRleHQpKSB7XG4gICAgICBsZXQgZGF0YSA9IG9wdGlvbnMuZGF0YTtcbiAgICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgICAgZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBhcHBlbmRDb250ZXh0UGF0aChcbiAgICAgICAgICBvcHRpb25zLmRhdGEuY29udGV4dFBhdGgsXG4gICAgICAgICAgb3B0aW9ucy5pZHNbMF1cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgYmxvY2tQYXJhbXM6IGJsb2NrUGFyYW1zKFtjb250ZXh0XSwgW2RhdGEgJiYgZGF0YS5jb250ZXh0UGF0aF0pXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiaW1wb3J0IHJlZ2lzdGVySW5saW5lIGZyb20gJy4vZGVjb3JhdG9ycy9pbmxpbmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyhpbnN0YW5jZSkge1xuICByZWdpc3RlcklubGluZShpbnN0YW5jZSk7XG59XG4iLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVyRGVjb3JhdG9yKCdpbmxpbmUnLCBmdW5jdGlvbihmbiwgcHJvcHMsIGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIGxldCByZXQgPSBmbjtcbiAgICBpZiAoIXByb3BzLnBhcnRpYWxzKSB7XG4gICAgICBwcm9wcy5wYXJ0aWFscyA9IHt9O1xuICAgICAgcmV0ID0gZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgcGFydGlhbHMgc3RhY2sgZnJhbWUgcHJpb3IgdG8gZXhlYy5cbiAgICAgICAgbGV0IG9yaWdpbmFsID0gY29udGFpbmVyLnBhcnRpYWxzO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBleHRlbmQoe30sIG9yaWdpbmFsLCBwcm9wcy5wYXJ0aWFscyk7XG4gICAgICAgIGxldCByZXQgPSBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3JpZ2luYWw7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHByb3BzLnBhcnRpYWxzW29wdGlvbnMuYXJnc1swXV0gPSBvcHRpb25zLmZuO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59XG4iLCJpbXBvcnQgeyBpbmRleE9mIH0gZnJvbSAnLi91dGlscyc7XG5cbmxldCBsb2dnZXIgPSB7XG4gIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcbiAgbGV2ZWw6ICdpbmZvJyxcblxuICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG4gIGxvb2t1cExldmVsOiBmdW5jdGlvbihsZXZlbCkge1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgbGV2ZWxNYXAgPSBpbmRleE9mKGxvZ2dlci5tZXRob2RNYXAsIGxldmVsLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKGxldmVsTWFwID49IDApIHtcbiAgICAgICAgbGV2ZWwgPSBsZXZlbE1hcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsID0gcGFyc2VJbnQobGV2ZWwsIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV2ZWw7XG4gIH0sXG5cbiAgLy8gQ2FuIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGhvc3QgZW52aXJvbm1lbnRcbiAgbG9nOiBmdW5jdGlvbihsZXZlbCwgLi4ubWVzc2FnZSkge1xuICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWxcbiAgICApIHtcbiAgICAgIGxldCBtZXRob2QgPSBsb2dnZXIubWV0aG9kTWFwW2xldmVsXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBpZiAoIWNvbnNvbGVbbWV0aG9kXSkge1xuICAgICAgICBtZXRob2QgPSAnbG9nJztcbiAgICAgIH1cbiAgICAgIGNvbnNvbGVbbWV0aG9kXSguLi5tZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2dnZXI7XG4iLCJpbXBvcnQgeyBjcmVhdGVOZXdMb29rdXBPYmplY3QgfSBmcm9tICcuL2NyZWF0ZS1uZXctbG9va3VwLW9iamVjdCc7XG5pbXBvcnQgKiBhcyBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcblxuY29uc3QgbG9nZ2VkUHJvcGVydGllcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm90b0FjY2Vzc0NvbnRyb2wocnVudGltZU9wdGlvbnMpIHtcbiAgbGV0IGRlZmF1bHRNZXRob2RXaGl0ZUxpc3QgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBkZWZhdWx0TWV0aG9kV2hpdGVMaXN0Wydjb25zdHJ1Y3RvciddID0gZmFsc2U7XG4gIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3RbJ19fZGVmaW5lR2V0dGVyX18nXSA9IGZhbHNlO1xuICBkZWZhdWx0TWV0aG9kV2hpdGVMaXN0WydfX2RlZmluZVNldHRlcl9fJ10gPSBmYWxzZTtcbiAgZGVmYXVsdE1ldGhvZFdoaXRlTGlzdFsnX19sb29rdXBHZXR0ZXJfXyddID0gZmFsc2U7XG5cbiAgbGV0IGRlZmF1bHRQcm9wZXJ0eVdoaXRlTGlzdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b1xuICBkZWZhdWx0UHJvcGVydHlXaGl0ZUxpc3RbJ19fcHJvdG9fXyddID0gZmFsc2U7XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICB3aGl0ZWxpc3Q6IGNyZWF0ZU5ld0xvb2t1cE9iamVjdChcbiAgICAgICAgZGVmYXVsdFByb3BlcnR5V2hpdGVMaXN0LFxuICAgICAgICBydW50aW1lT3B0aW9ucy5hbGxvd2VkUHJvdG9Qcm9wZXJ0aWVzXG4gICAgICApLFxuICAgICAgZGVmYXVsdFZhbHVlOiBydW50aW1lT3B0aW9ucy5hbGxvd1Byb3RvUHJvcGVydGllc0J5RGVmYXVsdFxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgd2hpdGVsaXN0OiBjcmVhdGVOZXdMb29rdXBPYmplY3QoXG4gICAgICAgIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3QsXG4gICAgICAgIHJ1bnRpbWVPcHRpb25zLmFsbG93ZWRQcm90b01ldGhvZHNcbiAgICAgICksXG4gICAgICBkZWZhdWx0VmFsdWU6IHJ1bnRpbWVPcHRpb25zLmFsbG93UHJvdG9NZXRob2RzQnlEZWZhdWx0XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzdWx0SXNBbGxvd2VkKHJlc3VsdCwgcHJvdG9BY2Nlc3NDb250cm9sLCBwcm9wZXJ0eU5hbWUpIHtcbiAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY2hlY2tXaGl0ZUxpc3QocHJvdG9BY2Nlc3NDb250cm9sLm1ldGhvZHMsIHByb3BlcnR5TmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNoZWNrV2hpdGVMaXN0KHByb3RvQWNjZXNzQ29udHJvbC5wcm9wZXJ0aWVzLCBwcm9wZXJ0eU5hbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrV2hpdGVMaXN0KHByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUsIHByb3BlcnR5TmFtZSkge1xuICBpZiAocHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS53aGl0ZWxpc3RbcHJvcGVydHlOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUud2hpdGVsaXN0W3Byb3BlcnR5TmFtZV0gPT09IHRydWU7XG4gIH1cbiAgaWYgKHByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS5kZWZhdWx0VmFsdWU7XG4gIH1cbiAgbG9nVW5leHBlY2VkUHJvcGVydHlBY2Nlc3NPbmNlKHByb3BlcnR5TmFtZSk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbG9nVW5leHBlY2VkUHJvcGVydHlBY2Nlc3NPbmNlKHByb3BlcnR5TmFtZSkge1xuICBpZiAobG9nZ2VkUHJvcGVydGllc1twcm9wZXJ0eU5hbWVdICE9PSB0cnVlKSB7XG4gICAgbG9nZ2VkUHJvcGVydGllc1twcm9wZXJ0eU5hbWVdID0gdHJ1ZTtcbiAgICBsb2dnZXIubG9nKFxuICAgICAgJ2Vycm9yJyxcbiAgICAgIGBIYW5kbGViYXJzOiBBY2Nlc3MgaGFzIGJlZW4gZGVuaWVkIHRvIHJlc29sdmUgdGhlIHByb3BlcnR5IFwiJHtwcm9wZXJ0eU5hbWV9XCIgYmVjYXVzZSBpdCBpcyBub3QgYW4gXCJvd24gcHJvcGVydHlcIiBvZiBpdHMgcGFyZW50LlxcbmAgK1xuICAgICAgICBgWW91IGNhbiBhZGQgYSBydW50aW1lIG9wdGlvbiB0byBkaXNhYmxlIHRoZSBjaGVjayBvciB0aGlzIHdhcm5pbmc6XFxuYCArXG4gICAgICAgIGBTZWUgaHR0cHM6Ly9oYW5kbGViYXJzanMuY29tL2FwaS1yZWZlcmVuY2UvcnVudGltZS1vcHRpb25zLmh0bWwjb3B0aW9ucy10by1jb250cm9sLXByb3RvdHlwZS1hY2Nlc3MgZm9yIGRldGFpbHNgXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRMb2dnZWRQcm9wZXJ0aWVzKCkge1xuICBPYmplY3Qua2V5cyhsb2dnZWRQcm9wZXJ0aWVzKS5mb3JFYWNoKHByb3BlcnR5TmFtZSA9PiB7XG4gICAgZGVsZXRlIGxvZ2dlZFByb3BlcnRpZXNbcHJvcGVydHlOYW1lXTtcbiAgfSk7XG59XG4iLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi91dGlscyc7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIFwibnVsbFwiLXByb3RvdHlwZSB0byBhdm9pZCB0cnV0aHkgcmVzdWx0cyBvbiBwcm90b3R5cGUgcHJvcGVydGllcy5cbiAqIFRoZSByZXN1bHRpbmcgb2JqZWN0IGNhbiBiZSB1c2VkIHdpdGggXCJvYmplY3RbcHJvcGVydHldXCIgdG8gY2hlY2sgaWYgYSBwcm9wZXJ0eSBleGlzdHNcbiAqIEBwYXJhbSB7Li4ub2JqZWN0fSBzb3VyY2VzIGEgdmFyYXJncyBwYXJhbWV0ZXIgb2Ygc291cmNlIG9iamVjdHMgdGhhdCB3aWxsIGJlIG1lcmdlZFxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5ld0xvb2t1cE9iamVjdCguLi5zb3VyY2VzKSB7XG4gIHJldHVybiBleHRlbmQoT2JqZWN0LmNyZWF0ZShudWxsKSwgLi4uc291cmNlcyk7XG59XG4iLCJpbXBvcnQgKiBhcyBiYXNlIGZyb20gJy4vaGFuZGxlYmFycy9iYXNlJztcblxuLy8gRWFjaCBvZiB0aGVzZSBhdWdtZW50IHRoZSBIYW5kbGViYXJzIG9iamVjdC4gTm8gbmVlZCB0byBzZXR1cCBoZXJlLlxuLy8gKFRoaXMgaXMgZG9uZSB0byBlYXNpbHkgc2hhcmUgY29kZSBiZXR3ZWVuIGNvbW1vbmpzIGFuZCBicm93c2UgZW52cylcbmltcG9ydCBTYWZlU3RyaW5nIGZyb20gJy4vaGFuZGxlYmFycy9zYWZlLXN0cmluZyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4vaGFuZGxlYmFycy9leGNlcHRpb24nO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi9oYW5kbGViYXJzL3V0aWxzJztcbmltcG9ydCAqIGFzIHJ1bnRpbWUgZnJvbSAnLi9oYW5kbGViYXJzL3J1bnRpbWUnO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG4vLyBGb3IgY29tcGF0aWJpbGl0eSBhbmQgdXNhZ2Ugb3V0c2lkZSBvZiBtb2R1bGUgc3lzdGVtcywgbWFrZSB0aGUgSGFuZGxlYmFycyBvYmplY3QgYSBuYW1lc3BhY2VcbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgbGV0IGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XG5cbiAgVXRpbHMuZXh0ZW5kKGhiLCBiYXNlKTtcbiAgaGIuU2FmZVN0cmluZyA9IFNhZmVTdHJpbmc7XG4gIGhiLkV4Y2VwdGlvbiA9IEV4Y2VwdGlvbjtcbiAgaGIuVXRpbHMgPSBVdGlscztcbiAgaGIuZXNjYXBlRXhwcmVzc2lvbiA9IFV0aWxzLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgaGIuVk0gPSBydW50aW1lO1xuICBoYi50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHNwZWMpIHtcbiAgICByZXR1cm4gcnVudGltZS50ZW1wbGF0ZShzcGVjLCBoYik7XG4gIH07XG5cbiAgcmV0dXJuIGhiO1xufVxuXG5sZXQgaW5zdCA9IGNyZWF0ZSgpO1xuaW5zdC5jcmVhdGUgPSBjcmVhdGU7XG5cbm5vQ29uZmxpY3QoaW5zdCk7XG5cbmluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3Q7XG4iLCIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJyArIHRoaXMuc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2FmZVN0cmluZztcbiIsImltcG9ydCAqIGFzIFV0aWxzIGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2V4Y2VwdGlvbic7XG5pbXBvcnQge1xuICBDT01QSUxFUl9SRVZJU0lPTixcbiAgY3JlYXRlRnJhbWUsXG4gIExBU1RfQ09NUEFUSUJMRV9DT01QSUxFUl9SRVZJU0lPTixcbiAgUkVWSVNJT05fQ0hBTkdFU1xufSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgbW92ZUhlbHBlclRvSG9va3MgfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgd3JhcEhlbHBlciB9IGZyb20gJy4vaW50ZXJuYWwvd3JhcEhlbHBlcic7XG5pbXBvcnQge1xuICBjcmVhdGVQcm90b0FjY2Vzc0NvbnRyb2wsXG4gIHJlc3VsdElzQWxsb3dlZFxufSBmcm9tICcuL2ludGVybmFsL3Byb3RvLWFjY2Vzcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1JldmlzaW9uKGNvbXBpbGVySW5mbykge1xuICBjb25zdCBjb21waWxlclJldmlzaW9uID0gKGNvbXBpbGVySW5mbyAmJiBjb21waWxlckluZm9bMF0pIHx8IDEsXG4gICAgY3VycmVudFJldmlzaW9uID0gQ09NUElMRVJfUkVWSVNJT047XG5cbiAgaWYgKFxuICAgIGNvbXBpbGVyUmV2aXNpb24gPj0gTEFTVF9DT01QQVRJQkxFX0NPTVBJTEVSX1JFVklTSU9OICYmXG4gICAgY29tcGlsZXJSZXZpc2lvbiA8PSBDT01QSUxFUl9SRVZJU0lPTlxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoY29tcGlsZXJSZXZpc2lvbiA8IExBU1RfQ09NUEFUSUJMRV9DT01QSUxFUl9SRVZJU0lPTikge1xuICAgIGNvbnN0IHJ1bnRpbWVWZXJzaW9ucyA9IFJFVklTSU9OX0NIQU5HRVNbY3VycmVudFJldmlzaW9uXSxcbiAgICAgIGNvbXBpbGVyVmVyc2lvbnMgPSBSRVZJU0lPTl9DSEFOR0VTW2NvbXBpbGVyUmV2aXNpb25dO1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oXG4gICAgICAnVGVtcGxhdGUgd2FzIHByZWNvbXBpbGVkIHdpdGggYW4gb2xkZXIgdmVyc2lvbiBvZiBIYW5kbGViYXJzIHRoYW4gdGhlIGN1cnJlbnQgcnVudGltZS4gJyArXG4gICAgICAgICdQbGVhc2UgdXBkYXRlIHlvdXIgcHJlY29tcGlsZXIgdG8gYSBuZXdlciB2ZXJzaW9uICgnICtcbiAgICAgICAgcnVudGltZVZlcnNpb25zICtcbiAgICAgICAgJykgb3IgZG93bmdyYWRlIHlvdXIgcnVudGltZSB0byBhbiBvbGRlciB2ZXJzaW9uICgnICtcbiAgICAgICAgY29tcGlsZXJWZXJzaW9ucyArXG4gICAgICAgICcpLidcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIFVzZSB0aGUgZW1iZWRkZWQgdmVyc2lvbiBpbmZvIHNpbmNlIHRoZSBydW50aW1lIGRvZXNuJ3Qga25vdyBhYm91dCB0aGlzIHJldmlzaW9uIHlldFxuICAgIHRocm93IG5ldyBFeGNlcHRpb24oXG4gICAgICAnVGVtcGxhdGUgd2FzIHByZWNvbXBpbGVkIHdpdGggYSBuZXdlciB2ZXJzaW9uIG9mIEhhbmRsZWJhcnMgdGhhbiB0aGUgY3VycmVudCBydW50aW1lLiAnICtcbiAgICAgICAgJ1BsZWFzZSB1cGRhdGUgeW91ciBydW50aW1lIHRvIGEgbmV3ZXIgdmVyc2lvbiAoJyArXG4gICAgICAgIGNvbXBpbGVySW5mb1sxXSArXG4gICAgICAgICcpLidcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZSh0ZW1wbGF0ZVNwZWMsIGVudikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoIWVudikge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ05vIGVudmlyb25tZW50IHBhc3NlZCB0byB0ZW1wbGF0ZScpO1xuICB9XG4gIGlmICghdGVtcGxhdGVTcGVjIHx8ICF0ZW1wbGF0ZVNwZWMubWFpbikge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1Vua25vd24gdGVtcGxhdGUgb2JqZWN0OiAnICsgdHlwZW9mIHRlbXBsYXRlU3BlYyk7XG4gIH1cblxuICB0ZW1wbGF0ZVNwZWMubWFpbi5kZWNvcmF0b3IgPSB0ZW1wbGF0ZVNwZWMubWFpbl9kO1xuXG4gIC8vIE5vdGU6IFVzaW5nIGVudi5WTSByZWZlcmVuY2VzIHJhdGhlciB0aGFuIGxvY2FsIHZhciByZWZlcmVuY2VzIHRocm91Z2hvdXQgdGhpcyBzZWN0aW9uIHRvIGFsbG93XG4gIC8vIGZvciBleHRlcm5hbCB1c2VycyB0byBvdmVycmlkZSB0aGVzZSBhcyBwc2V1ZG8tc3VwcG9ydGVkIEFQSXMuXG4gIGVudi5WTS5jaGVja1JldmlzaW9uKHRlbXBsYXRlU3BlYy5jb21waWxlcik7XG5cbiAgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIHByZWNvbXBpbGVkIHRlbXBsYXRlcyB3aXRoIGNvbXBpbGVyLXZlcnNpb24gNyAoPDQuMy4wKVxuICBjb25zdCB0ZW1wbGF0ZVdhc1ByZWNvbXBpbGVkV2l0aENvbXBpbGVyVjcgPVxuICAgIHRlbXBsYXRlU3BlYy5jb21waWxlciAmJiB0ZW1wbGF0ZVNwZWMuY29tcGlsZXJbMF0gPT09IDc7XG5cbiAgZnVuY3Rpb24gaW52b2tlUGFydGlhbFdyYXBwZXIocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICAgIGNvbnRleHQgPSBVdGlscy5leHRlbmQoe30sIGNvbnRleHQsIG9wdGlvbnMuaGFzaCk7XG4gICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgb3B0aW9ucy5pZHNbMF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBwYXJ0aWFsID0gZW52LlZNLnJlc29sdmVQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCwgY29udGV4dCwgb3B0aW9ucyk7XG5cbiAgICBsZXQgZXh0ZW5kZWRPcHRpb25zID0gVXRpbHMuZXh0ZW5kKHt9LCBvcHRpb25zLCB7XG4gICAgICBob29rczogdGhpcy5ob29rcyxcbiAgICAgIHByb3RvQWNjZXNzQ29udHJvbDogdGhpcy5wcm90b0FjY2Vzc0NvbnRyb2xcbiAgICB9KTtcblxuICAgIGxldCByZXN1bHQgPSBlbnYuVk0uaW52b2tlUGFydGlhbC5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgIHBhcnRpYWwsXG4gICAgICBjb250ZXh0LFxuICAgICAgZXh0ZW5kZWRPcHRpb25zXG4gICAgKTtcblxuICAgIGlmIChyZXN1bHQgPT0gbnVsbCAmJiBlbnYuY29tcGlsZSkge1xuICAgICAgb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdID0gZW52LmNvbXBpbGUoXG4gICAgICAgIHBhcnRpYWwsXG4gICAgICAgIHRlbXBsYXRlU3BlYy5jb21waWxlck9wdGlvbnMsXG4gICAgICAgIGVudlxuICAgICAgKTtcbiAgICAgIHJlc3VsdCA9IG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXShjb250ZXh0LCBleHRlbmRlZE9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgIGlmIChvcHRpb25zLmluZGVudCkge1xuICAgICAgICBsZXQgbGluZXMgPSByZXN1bHQuc3BsaXQoJ1xcbicpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGxpbmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGlmICghbGluZXNbaV0gJiYgaSArIDEgPT09IGwpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpbmVzW2ldID0gb3B0aW9ucy5pbmRlbnQgKyBsaW5lc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSBsaW5lcy5qb2luKCdcXG4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXG4gICAgICAgICdUaGUgcGFydGlhbCAnICtcbiAgICAgICAgICBvcHRpb25zLm5hbWUgK1xuICAgICAgICAgICcgY291bGQgbm90IGJlIGNvbXBpbGVkIHdoZW4gcnVubmluZyBpbiBydW50aW1lLW9ubHkgbW9kZSdcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gSnVzdCBhZGQgd2F0ZXJcbiAgbGV0IGNvbnRhaW5lciA9IHtcbiAgICBzdHJpY3Q6IGZ1bmN0aW9uKG9iaiwgbmFtZSwgbG9jKSB7XG4gICAgICBpZiAoIW9iaiB8fCAhKG5hbWUgaW4gb2JqKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdcIicgKyBuYW1lICsgJ1wiIG5vdCBkZWZpbmVkIGluICcgKyBvYmosIHtcbiAgICAgICAgICBsb2M6IGxvY1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250YWluZXIubG9va3VwUHJvcGVydHkob2JqLCBuYW1lKTtcbiAgICB9LFxuICAgIGxvb2t1cFByb3BlcnR5OiBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgbGV0IHJlc3VsdCA9IHBhcmVudFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgaWYgKHJlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzdWx0SXNBbGxvd2VkKHJlc3VsdCwgY29udGFpbmVyLnByb3RvQWNjZXNzQ29udHJvbCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIGxvb2t1cDogZnVuY3Rpb24oZGVwdGhzLCBuYW1lKSB7XG4gICAgICBjb25zdCBsZW4gPSBkZXB0aHMubGVuZ3RoO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBsZXQgcmVzdWx0ID0gZGVwdGhzW2ldICYmIGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eShkZXB0aHNbaV0sIG5hbWUpO1xuICAgICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZGVwdGhzW2ldW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBsYW1iZGE6IGZ1bmN0aW9uKGN1cnJlbnQsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgY3VycmVudCA9PT0gJ2Z1bmN0aW9uJyA/IGN1cnJlbnQuY2FsbChjb250ZXh0KSA6IGN1cnJlbnQ7XG4gICAgfSxcblxuICAgIGVzY2FwZUV4cHJlc3Npb246IFV0aWxzLmVzY2FwZUV4cHJlc3Npb24sXG4gICAgaW52b2tlUGFydGlhbDogaW52b2tlUGFydGlhbFdyYXBwZXIsXG5cbiAgICBmbjogZnVuY3Rpb24oaSkge1xuICAgICAgbGV0IHJldCA9IHRlbXBsYXRlU3BlY1tpXTtcbiAgICAgIHJldC5kZWNvcmF0b3IgPSB0ZW1wbGF0ZVNwZWNbaSArICdfZCddO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuXG4gICAgcHJvZ3JhbXM6IFtdLFxuICAgIHByb2dyYW06IGZ1bmN0aW9uKGksIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgICAgIGxldCBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0sXG4gICAgICAgIGZuID0gdGhpcy5mbihpKTtcbiAgICAgIGlmIChkYXRhIHx8IGRlcHRocyB8fCBibG9ja1BhcmFtcyB8fCBkZWNsYXJlZEJsb2NrUGFyYW1zKSB7XG4gICAgICAgIHByb2dyYW1XcmFwcGVyID0gd3JhcFByb2dyYW0oXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGZuLFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgZGVjbGFyZWRCbG9ja1BhcmFtcyxcbiAgICAgICAgICBibG9ja1BhcmFtcyxcbiAgICAgICAgICBkZXB0aHNcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoIXByb2dyYW1XcmFwcGVyKSB7XG4gICAgICAgIHByb2dyYW1XcmFwcGVyID0gdGhpcy5wcm9ncmFtc1tpXSA9IHdyYXBQcm9ncmFtKHRoaXMsIGksIGZuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9ncmFtV3JhcHBlcjtcbiAgICB9LFxuXG4gICAgZGF0YTogZnVuY3Rpb24odmFsdWUsIGRlcHRoKSB7XG4gICAgICB3aGlsZSAodmFsdWUgJiYgZGVwdGgtLSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLl9wYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBtZXJnZUlmTmVlZGVkOiBmdW5jdGlvbihwYXJhbSwgY29tbW9uKSB7XG4gICAgICBsZXQgb2JqID0gcGFyYW0gfHwgY29tbW9uO1xuXG4gICAgICBpZiAocGFyYW0gJiYgY29tbW9uICYmIHBhcmFtICE9PSBjb21tb24pIHtcbiAgICAgICAgb2JqID0gVXRpbHMuZXh0ZW5kKHt9LCBjb21tb24sIHBhcmFtKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIC8vIEFuIGVtcHR5IG9iamVjdCB0byB1c2UgYXMgcmVwbGFjZW1lbnQgZm9yIG51bGwtY29udGV4dHNcbiAgICBudWxsQ29udGV4dDogT2JqZWN0LnNlYWwoe30pLFxuXG4gICAgbm9vcDogZW52LlZNLm5vb3AsXG4gICAgY29tcGlsZXJJbmZvOiB0ZW1wbGF0ZVNwZWMuY29tcGlsZXJcbiAgfTtcblxuICBmdW5jdGlvbiByZXQoY29udGV4dCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IGRhdGEgPSBvcHRpb25zLmRhdGE7XG5cbiAgICByZXQuX3NldHVwKG9wdGlvbnMpO1xuICAgIGlmICghb3B0aW9ucy5wYXJ0aWFsICYmIHRlbXBsYXRlU3BlYy51c2VEYXRhKSB7XG4gICAgICBkYXRhID0gaW5pdERhdGEoY29udGV4dCwgZGF0YSk7XG4gICAgfVxuICAgIGxldCBkZXB0aHMsXG4gICAgICBibG9ja1BhcmFtcyA9IHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyA/IFtdIDogdW5kZWZpbmVkO1xuICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlRGVwdGhzKSB7XG4gICAgICBpZiAob3B0aW9ucy5kZXB0aHMpIHtcbiAgICAgICAgZGVwdGhzID1cbiAgICAgICAgICBjb250ZXh0ICE9IG9wdGlvbnMuZGVwdGhzWzBdXG4gICAgICAgICAgICA/IFtjb250ZXh0XS5jb25jYXQob3B0aW9ucy5kZXB0aHMpXG4gICAgICAgICAgICA6IG9wdGlvbnMuZGVwdGhzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVwdGhzID0gW2NvbnRleHRdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1haW4oY29udGV4dCAvKiwgb3B0aW9ucyovKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAnJyArXG4gICAgICAgIHRlbXBsYXRlU3BlYy5tYWluKFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIGNvbnRhaW5lci5oZWxwZXJzLFxuICAgICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyxcbiAgICAgICAgICBkYXRhLFxuICAgICAgICAgIGJsb2NrUGFyYW1zLFxuICAgICAgICAgIGRlcHRoc1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIG1haW4gPSBleGVjdXRlRGVjb3JhdG9ycyhcbiAgICAgIHRlbXBsYXRlU3BlYy5tYWluLFxuICAgICAgbWFpbixcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIG9wdGlvbnMuZGVwdGhzIHx8IFtdLFxuICAgICAgZGF0YSxcbiAgICAgIGJsb2NrUGFyYW1zXG4gICAgKTtcbiAgICByZXR1cm4gbWFpbihjb250ZXh0LCBvcHRpb25zKTtcbiAgfVxuXG4gIHJldC5pc1RvcCA9IHRydWU7XG5cbiAgcmV0Ll9zZXR1cCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMucGFydGlhbCkge1xuICAgICAgbGV0IG1lcmdlZEhlbHBlcnMgPSBVdGlscy5leHRlbmQoe30sIGVudi5oZWxwZXJzLCBvcHRpb25zLmhlbHBlcnMpO1xuICAgICAgd3JhcEhlbHBlcnNUb1Bhc3NMb29rdXBQcm9wZXJ0eShtZXJnZWRIZWxwZXJzLCBjb250YWluZXIpO1xuICAgICAgY29udGFpbmVyLmhlbHBlcnMgPSBtZXJnZWRIZWxwZXJzO1xuXG4gICAgICBpZiAodGVtcGxhdGVTcGVjLnVzZVBhcnRpYWwpIHtcbiAgICAgICAgLy8gVXNlIG1lcmdlSWZOZWVkZWQgaGVyZSB0byBwcmV2ZW50IGNvbXBpbGluZyBnbG9iYWwgcGFydGlhbHMgbXVsdGlwbGUgdGltZXNcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gY29udGFpbmVyLm1lcmdlSWZOZWVkZWQoXG4gICAgICAgICAgb3B0aW9ucy5wYXJ0aWFscyxcbiAgICAgICAgICBlbnYucGFydGlhbHNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlUGFydGlhbCB8fCB0ZW1wbGF0ZVNwZWMudXNlRGVjb3JhdG9ycykge1xuICAgICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IFV0aWxzLmV4dGVuZChcbiAgICAgICAgICB7fSxcbiAgICAgICAgICBlbnYuZGVjb3JhdG9ycyxcbiAgICAgICAgICBvcHRpb25zLmRlY29yYXRvcnNcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29udGFpbmVyLmhvb2tzID0ge307XG4gICAgICBjb250YWluZXIucHJvdG9BY2Nlc3NDb250cm9sID0gY3JlYXRlUHJvdG9BY2Nlc3NDb250cm9sKG9wdGlvbnMpO1xuXG4gICAgICBsZXQga2VlcEhlbHBlckluSGVscGVycyA9XG4gICAgICAgIG9wdGlvbnMuYWxsb3dDYWxsc1RvSGVscGVyTWlzc2luZyB8fFxuICAgICAgICB0ZW1wbGF0ZVdhc1ByZWNvbXBpbGVkV2l0aENvbXBpbGVyVjc7XG4gICAgICBtb3ZlSGVscGVyVG9Ib29rcyhjb250YWluZXIsICdoZWxwZXJNaXNzaW5nJywga2VlcEhlbHBlckluSGVscGVycyk7XG4gICAgICBtb3ZlSGVscGVyVG9Ib29rcyhjb250YWluZXIsICdibG9ja0hlbHBlck1pc3NpbmcnLCBrZWVwSGVscGVySW5IZWxwZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFpbmVyLnByb3RvQWNjZXNzQ29udHJvbCA9IG9wdGlvbnMucHJvdG9BY2Nlc3NDb250cm9sOyAvLyBpbnRlcm5hbCBvcHRpb25cbiAgICAgIGNvbnRhaW5lci5oZWxwZXJzID0gb3B0aW9ucy5oZWxwZXJzO1xuICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3B0aW9ucy5wYXJ0aWFscztcbiAgICAgIGNvbnRhaW5lci5kZWNvcmF0b3JzID0gb3B0aW9ucy5kZWNvcmF0b3JzO1xuICAgICAgY29udGFpbmVyLmhvb2tzID0gb3B0aW9ucy5ob29rcztcbiAgICB9XG4gIH07XG5cbiAgcmV0Ll9jaGlsZCA9IGZ1bmN0aW9uKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZUJsb2NrUGFyYW1zICYmICFibG9ja1BhcmFtcykge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignbXVzdCBwYXNzIGJsb2NrIHBhcmFtcycpO1xuICAgIH1cbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZURlcHRocyAmJiAhZGVwdGhzKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdtdXN0IHBhc3MgcGFyZW50IGRlcHRocycpO1xuICAgIH1cblxuICAgIHJldHVybiB3cmFwUHJvZ3JhbShcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGksXG4gICAgICB0ZW1wbGF0ZVNwZWNbaV0sXG4gICAgICBkYXRhLFxuICAgICAgMCxcbiAgICAgIGJsb2NrUGFyYW1zLFxuICAgICAgZGVwdGhzXG4gICAgKTtcbiAgfTtcbiAgcmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBQcm9ncmFtKFxuICBjb250YWluZXIsXG4gIGksXG4gIGZuLFxuICBkYXRhLFxuICBkZWNsYXJlZEJsb2NrUGFyYW1zLFxuICBibG9ja1BhcmFtcyxcbiAgZGVwdGhzXG4pIHtcbiAgZnVuY3Rpb24gcHJvZyhjb250ZXh0LCBvcHRpb25zID0ge30pIHtcbiAgICBsZXQgY3VycmVudERlcHRocyA9IGRlcHRocztcbiAgICBpZiAoXG4gICAgICBkZXB0aHMgJiZcbiAgICAgIGNvbnRleHQgIT0gZGVwdGhzWzBdICYmXG4gICAgICAhKGNvbnRleHQgPT09IGNvbnRhaW5lci5udWxsQ29udGV4dCAmJiBkZXB0aHNbMF0gPT09IG51bGwpXG4gICAgKSB7XG4gICAgICBjdXJyZW50RGVwdGhzID0gW2NvbnRleHRdLmNvbmNhdChkZXB0aHMpO1xuICAgIH1cblxuICAgIHJldHVybiBmbihcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGNvbnRleHQsXG4gICAgICBjb250YWluZXIuaGVscGVycyxcbiAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyxcbiAgICAgIG9wdGlvbnMuZGF0YSB8fCBkYXRhLFxuICAgICAgYmxvY2tQYXJhbXMgJiYgW29wdGlvbnMuYmxvY2tQYXJhbXNdLmNvbmNhdChibG9ja1BhcmFtcyksXG4gICAgICBjdXJyZW50RGVwdGhzXG4gICAgKTtcbiAgfVxuXG4gIHByb2cgPSBleGVjdXRlRGVjb3JhdG9ycyhmbiwgcHJvZywgY29udGFpbmVyLCBkZXB0aHMsIGRhdGEsIGJsb2NrUGFyYW1zKTtcblxuICBwcm9nLnByb2dyYW0gPSBpO1xuICBwcm9nLmRlcHRoID0gZGVwdGhzID8gZGVwdGhzLmxlbmd0aCA6IDA7XG4gIHByb2cuYmxvY2tQYXJhbXMgPSBkZWNsYXJlZEJsb2NrUGFyYW1zIHx8IDA7XG4gIHJldHVybiBwcm9nO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgY3VycmVudGx5IHBhcnQgb2YgdGhlIG9mZmljaWFsIEFQSSwgdGhlcmVmb3JlIGltcGxlbWVudGF0aW9uIGRldGFpbHMgc2hvdWxkIG5vdCBiZSBjaGFuZ2VkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVBhcnRpYWwocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuICBpZiAoIXBhcnRpYWwpIHtcbiAgICBpZiAob3B0aW9ucy5uYW1lID09PSAnQHBhcnRpYWwtYmxvY2snKSB7XG4gICAgICBwYXJ0aWFsID0gb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ107XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV07XG4gICAgfVxuICB9IGVsc2UgaWYgKCFwYXJ0aWFsLmNhbGwgJiYgIW9wdGlvbnMubmFtZSkge1xuICAgIC8vIFRoaXMgaXMgYSBkeW5hbWljIHBhcnRpYWwgdGhhdCByZXR1cm5lZCBhIHN0cmluZ1xuICAgIG9wdGlvbnMubmFtZSA9IHBhcnRpYWw7XG4gICAgcGFydGlhbCA9IG9wdGlvbnMucGFydGlhbHNbcGFydGlhbF07XG4gIH1cbiAgcmV0dXJuIHBhcnRpYWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZva2VQYXJ0aWFsKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgLy8gVXNlIHRoZSBjdXJyZW50IGNsb3N1cmUgY29udGV4dCB0byBzYXZlIHRoZSBwYXJ0aWFsLWJsb2NrIGlmIHRoaXMgcGFydGlhbFxuICBjb25zdCBjdXJyZW50UGFydGlhbEJsb2NrID0gb3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddO1xuICBvcHRpb25zLnBhcnRpYWwgPSB0cnVlO1xuICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICBvcHRpb25zLmRhdGEuY29udGV4dFBhdGggPSBvcHRpb25zLmlkc1swXSB8fCBvcHRpb25zLmRhdGEuY29udGV4dFBhdGg7XG4gIH1cblxuICBsZXQgcGFydGlhbEJsb2NrO1xuICBpZiAob3B0aW9ucy5mbiAmJiBvcHRpb25zLmZuICE9PSBub29wKSB7XG4gICAgb3B0aW9ucy5kYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAvLyBXcmFwcGVyIGZ1bmN0aW9uIHRvIGdldCBhY2Nlc3MgdG8gY3VycmVudFBhcnRpYWxCbG9jayBmcm9tIHRoZSBjbG9zdXJlXG4gICAgbGV0IGZuID0gb3B0aW9ucy5mbjtcbiAgICBwYXJ0aWFsQmxvY2sgPSBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXSA9IGZ1bmN0aW9uIHBhcnRpYWxCbG9ja1dyYXBwZXIoXG4gICAgICBjb250ZXh0LFxuICAgICAgb3B0aW9ucyA9IHt9XG4gICAgKSB7XG4gICAgICAvLyBSZXN0b3JlIHRoZSBwYXJ0aWFsLWJsb2NrIGZyb20gdGhlIGNsb3N1cmUgZm9yIHRoZSBleGVjdXRpb24gb2YgdGhlIGJsb2NrXG4gICAgICAvLyBpLmUuIHRoZSBwYXJ0IGluc2lkZSB0aGUgYmxvY2sgb2YgdGhlIHBhcnRpYWwgY2FsbC5cbiAgICAgIG9wdGlvbnMuZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXSA9IGN1cnJlbnRQYXJ0aWFsQmxvY2s7XG4gICAgICByZXR1cm4gZm4oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBpZiAoZm4ucGFydGlhbHMpIHtcbiAgICAgIG9wdGlvbnMucGFydGlhbHMgPSBVdGlscy5leHRlbmQoe30sIG9wdGlvbnMucGFydGlhbHMsIGZuLnBhcnRpYWxzKTtcbiAgICB9XG4gIH1cblxuICBpZiAocGFydGlhbCA9PT0gdW5kZWZpbmVkICYmIHBhcnRpYWxCbG9jaykge1xuICAgIHBhcnRpYWwgPSBwYXJ0aWFsQmxvY2s7XG4gIH1cblxuICBpZiAocGFydGlhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVGhlIHBhcnRpYWwgJyArIG9wdGlvbnMubmFtZSArICcgY291bGQgbm90IGJlIGZvdW5kJyk7XG4gIH0gZWxzZSBpZiAocGFydGlhbCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIHBhcnRpYWwoY29udGV4dCwgb3B0aW9ucyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7XG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gaW5pdERhdGEoY29udGV4dCwgZGF0YSkge1xuICBpZiAoIWRhdGEgfHwgISgncm9vdCcgaW4gZGF0YSkpIHtcbiAgICBkYXRhID0gZGF0YSA/IGNyZWF0ZUZyYW1lKGRhdGEpIDoge307XG4gICAgZGF0YS5yb290ID0gY29udGV4dDtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZXhlY3V0ZURlY29yYXRvcnMoZm4sIHByb2csIGNvbnRhaW5lciwgZGVwdGhzLCBkYXRhLCBibG9ja1BhcmFtcykge1xuICBpZiAoZm4uZGVjb3JhdG9yKSB7XG4gICAgbGV0IHByb3BzID0ge307XG4gICAgcHJvZyA9IGZuLmRlY29yYXRvcihcbiAgICAgIHByb2csXG4gICAgICBwcm9wcyxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGRlcHRocyAmJiBkZXB0aHNbMF0sXG4gICAgICBkYXRhLFxuICAgICAgYmxvY2tQYXJhbXMsXG4gICAgICBkZXB0aHNcbiAgICApO1xuICAgIFV0aWxzLmV4dGVuZChwcm9nLCBwcm9wcyk7XG4gIH1cbiAgcmV0dXJuIHByb2c7XG59XG5cbmZ1bmN0aW9uIHdyYXBIZWxwZXJzVG9QYXNzTG9va3VwUHJvcGVydHkobWVyZ2VkSGVscGVycywgY29udGFpbmVyKSB7XG4gIE9iamVjdC5rZXlzKG1lcmdlZEhlbHBlcnMpLmZvckVhY2goaGVscGVyTmFtZSA9PiB7XG4gICAgbGV0IGhlbHBlciA9IG1lcmdlZEhlbHBlcnNbaGVscGVyTmFtZV07XG4gICAgbWVyZ2VkSGVscGVyc1toZWxwZXJOYW1lXSA9IHBhc3NMb29rdXBQcm9wZXJ0eU9wdGlvbihoZWxwZXIsIGNvbnRhaW5lcik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXNzTG9va3VwUHJvcGVydHlPcHRpb24oaGVscGVyLCBjb250YWluZXIpIHtcbiAgY29uc3QgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHk7XG4gIHJldHVybiB3cmFwSGVscGVyKGhlbHBlciwgb3B0aW9ucyA9PiB7XG4gICAgcmV0dXJuIFV0aWxzLmV4dGVuZCh7IGxvb2t1cFByb3BlcnR5IH0sIG9wdGlvbnMpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB3cmFwSGVscGVyKGhlbHBlciwgdHJhbnNmb3JtT3B0aW9uc0ZuKSB7XG4gIGlmICh0eXBlb2YgaGVscGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVGhpcyBzaG91bGQgbm90IGhhcHBlbiwgYnV0IGFwcGFyZW50bHkgaXQgZG9lcyBpbiBodHRwczovL2dpdGh1Yi5jb20vd3ljYXRzL2hhbmRsZWJhcnMuanMvaXNzdWVzLzE2MzlcbiAgICAvLyBXZSB0cnkgdG8gbWFrZSB0aGUgd3JhcHBlciBsZWFzdC1pbnZhc2l2ZSBieSBub3Qgd3JhcHBpbmcgaXQsIGlmIHRoZSBoZWxwZXIgaXMgbm90IGEgZnVuY3Rpb24uXG4gICAgcmV0dXJuIGhlbHBlcjtcbiAgfVxuICBsZXQgd3JhcHBlciA9IGZ1bmN0aW9uKC8qIGR5bmFtaWMgYXJndW1lbnRzICovKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSA9IHRyYW5zZm9ybU9wdGlvbnNGbihvcHRpb25zKTtcbiAgICByZXR1cm4gaGVscGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG4gIHJldHVybiB3cmFwcGVyO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oSGFuZGxlYmFycykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBsZXQgcm9vdCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93LFxuICAgICRIYW5kbGViYXJzID0gcm9vdC5IYW5kbGViYXJzO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBIYW5kbGViYXJzLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAocm9vdC5IYW5kbGViYXJzID09PSBIYW5kbGViYXJzKSB7XG4gICAgICByb290LkhhbmRsZWJhcnMgPSAkSGFuZGxlYmFycztcbiAgICB9XG4gICAgcmV0dXJuIEhhbmRsZWJhcnM7XG4gIH07XG59XG4iLCJsZXQgQVNUID0ge1xuICAvLyBQdWJsaWMgQVBJIHVzZWQgdG8gZXZhbHVhdGUgZGVyaXZlZCBhdHRyaWJ1dGVzIHJlZ2FyZGluZyBBU1Qgbm9kZXNcbiAgaGVscGVyczoge1xuICAgIC8vIGEgbXVzdGFjaGUgaXMgZGVmaW5pdGVseSBhIGhlbHBlciBpZjpcbiAgICAvLyAqIGl0IGlzIGFuIGVsaWdpYmxlIGhlbHBlciwgYW5kXG4gICAgLy8gKiBpdCBoYXMgYXQgbGVhc3Qgb25lIHBhcmFtZXRlciBvciBoYXNoIHNlZ21lbnRcbiAgICBoZWxwZXJFeHByZXNzaW9uOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBub2RlLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJyB8fFxuICAgICAgICAoKG5vZGUudHlwZSA9PT0gJ011c3RhY2hlU3RhdGVtZW50JyB8fFxuICAgICAgICAgIG5vZGUudHlwZSA9PT0gJ0Jsb2NrU3RhdGVtZW50JykgJiZcbiAgICAgICAgICAhISgobm9kZS5wYXJhbXMgJiYgbm9kZS5wYXJhbXMubGVuZ3RoKSB8fCBub2RlLmhhc2gpKVxuICAgICAgKTtcbiAgICB9LFxuXG4gICAgc2NvcGVkSWQ6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHJldHVybiAvXlxcLnx0aGlzXFxiLy50ZXN0KHBhdGgub3JpZ2luYWwpO1xuICAgIH0sXG5cbiAgICAvLyBhbiBJRCBpcyBzaW1wbGUgaWYgaXQgb25seSBoYXMgb25lIHBhcnQsIGFuZCB0aGF0IHBhcnQgaXMgbm90XG4gICAgLy8gYC4uYCBvciBgdGhpc2AuXG4gICAgc2ltcGxlSWQ6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBhdGgucGFydHMubGVuZ3RoID09PSAxICYmICFBU1QuaGVscGVycy5zY29wZWRJZChwYXRoKSAmJiAhcGF0aC5kZXB0aFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIE11c3QgYmUgZXhwb3J0ZWQgYXMgYW4gb2JqZWN0IHJhdGhlciB0aGFuIHRoZSByb290IG9mIHRoZSBtb2R1bGUgYXMgdGhlIGppc29uIGxleGVyXG4vLyBtdXN0IG1vZGlmeSB0aGUgb2JqZWN0IHRvIG9wZXJhdGUgcHJvcGVybHkuXG5leHBvcnQgZGVmYXVsdCBBU1Q7XG4iLCJpbXBvcnQgcGFyc2VyIGZyb20gJy4vcGFyc2VyJztcbmltcG9ydCBXaGl0ZXNwYWNlQ29udHJvbCBmcm9tICcuL3doaXRlc3BhY2UtY29udHJvbCc7XG5pbXBvcnQgKiBhcyBIZWxwZXJzIGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCB7IHBhcnNlciB9O1xuXG5sZXQgeXkgPSB7fTtcbmV4dGVuZCh5eSwgSGVscGVycyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVdpdGhvdXRQcm9jZXNzaW5nKGlucHV0LCBvcHRpb25zKSB7XG4gIC8vIEp1c3QgcmV0dXJuIGlmIGFuIGFscmVhZHktY29tcGlsZWQgQVNUIHdhcyBwYXNzZWQgaW4uXG4gIGlmIChpbnB1dC50eXBlID09PSAnUHJvZ3JhbScpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICBwYXJzZXIueXkgPSB5eTtcblxuICAvLyBBbHRlcmluZyB0aGUgc2hhcmVkIG9iamVjdCBoZXJlLCBidXQgdGhpcyBpcyBvayBhcyBwYXJzZXIgaXMgYSBzeW5jIG9wZXJhdGlvblxuICB5eS5sb2NJbmZvID0gZnVuY3Rpb24obG9jSW5mbykge1xuICAgIHJldHVybiBuZXcgeXkuU291cmNlTG9jYXRpb24ob3B0aW9ucyAmJiBvcHRpb25zLnNyY05hbWUsIGxvY0luZm8pO1xuICB9O1xuXG4gIGxldCBhc3QgPSBwYXJzZXIucGFyc2UoaW5wdXQpO1xuXG4gIHJldHVybiBhc3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShpbnB1dCwgb3B0aW9ucykge1xuICBsZXQgYXN0ID0gcGFyc2VXaXRob3V0UHJvY2Vzc2luZyhpbnB1dCwgb3B0aW9ucyk7XG4gIGxldCBzdHJpcCA9IG5ldyBXaGl0ZXNwYWNlQ29udHJvbChvcHRpb25zKTtcblxuICByZXR1cm4gc3RyaXAuYWNjZXB0KGFzdCk7XG59XG4iLCIvLyBGaWxlIGlnbm9yZWQgaW4gY292ZXJhZ2UgdGVzdHMgdmlhIHNldHRpbmcgaW4gLmlzdGFuYnVsLnltbFxuLyogSmlzb24gZ2VuZXJhdGVkIHBhcnNlciAqL1xudmFyIGhhbmRsZWJhcnMgPSAoZnVuY3Rpb24oKXtcbnZhciBwYXJzZXIgPSB7dHJhY2U6IGZ1bmN0aW9uIHRyYWNlICgpIHsgfSxcbnl5OiB7fSxcbnN5bWJvbHNfOiB7XCJlcnJvclwiOjIsXCJyb290XCI6MyxcInByb2dyYW1cIjo0LFwiRU9GXCI6NSxcInByb2dyYW1fcmVwZXRpdGlvbjBcIjo2LFwic3RhdGVtZW50XCI6NyxcIm11c3RhY2hlXCI6OCxcImJsb2NrXCI6OSxcInJhd0Jsb2NrXCI6MTAsXCJwYXJ0aWFsXCI6MTEsXCJwYXJ0aWFsQmxvY2tcIjoxMixcImNvbnRlbnRcIjoxMyxcIkNPTU1FTlRcIjoxNCxcIkNPTlRFTlRcIjoxNSxcIm9wZW5SYXdCbG9ja1wiOjE2LFwicmF3QmxvY2tfcmVwZXRpdGlvbjBcIjoxNyxcIkVORF9SQVdfQkxPQ0tcIjoxOCxcIk9QRU5fUkFXX0JMT0NLXCI6MTksXCJoZWxwZXJOYW1lXCI6MjAsXCJvcGVuUmF3QmxvY2tfcmVwZXRpdGlvbjBcIjoyMSxcIm9wZW5SYXdCbG9ja19vcHRpb24wXCI6MjIsXCJDTE9TRV9SQVdfQkxPQ0tcIjoyMyxcIm9wZW5CbG9ja1wiOjI0LFwiYmxvY2tfb3B0aW9uMFwiOjI1LFwiY2xvc2VCbG9ja1wiOjI2LFwib3BlbkludmVyc2VcIjoyNyxcImJsb2NrX29wdGlvbjFcIjoyOCxcIk9QRU5fQkxPQ0tcIjoyOSxcIm9wZW5CbG9ja19yZXBldGl0aW9uMFwiOjMwLFwib3BlbkJsb2NrX29wdGlvbjBcIjozMSxcIm9wZW5CbG9ja19vcHRpb24xXCI6MzIsXCJDTE9TRVwiOjMzLFwiT1BFTl9JTlZFUlNFXCI6MzQsXCJvcGVuSW52ZXJzZV9yZXBldGl0aW9uMFwiOjM1LFwib3BlbkludmVyc2Vfb3B0aW9uMFwiOjM2LFwib3BlbkludmVyc2Vfb3B0aW9uMVwiOjM3LFwib3BlbkludmVyc2VDaGFpblwiOjM4LFwiT1BFTl9JTlZFUlNFX0NIQUlOXCI6MzksXCJvcGVuSW52ZXJzZUNoYWluX3JlcGV0aXRpb24wXCI6NDAsXCJvcGVuSW52ZXJzZUNoYWluX29wdGlvbjBcIjo0MSxcIm9wZW5JbnZlcnNlQ2hhaW5fb3B0aW9uMVwiOjQyLFwiaW52ZXJzZUFuZFByb2dyYW1cIjo0MyxcIklOVkVSU0VcIjo0NCxcImludmVyc2VDaGFpblwiOjQ1LFwiaW52ZXJzZUNoYWluX29wdGlvbjBcIjo0NixcIk9QRU5fRU5EQkxPQ0tcIjo0NyxcIk9QRU5cIjo0OCxcIm11c3RhY2hlX3JlcGV0aXRpb24wXCI6NDksXCJtdXN0YWNoZV9vcHRpb24wXCI6NTAsXCJPUEVOX1VORVNDQVBFRFwiOjUxLFwibXVzdGFjaGVfcmVwZXRpdGlvbjFcIjo1MixcIm11c3RhY2hlX29wdGlvbjFcIjo1MyxcIkNMT1NFX1VORVNDQVBFRFwiOjU0LFwiT1BFTl9QQVJUSUFMXCI6NTUsXCJwYXJ0aWFsTmFtZVwiOjU2LFwicGFydGlhbF9yZXBldGl0aW9uMFwiOjU3LFwicGFydGlhbF9vcHRpb24wXCI6NTgsXCJvcGVuUGFydGlhbEJsb2NrXCI6NTksXCJPUEVOX1BBUlRJQUxfQkxPQ0tcIjo2MCxcIm9wZW5QYXJ0aWFsQmxvY2tfcmVwZXRpdGlvbjBcIjo2MSxcIm9wZW5QYXJ0aWFsQmxvY2tfb3B0aW9uMFwiOjYyLFwicGFyYW1cIjo2MyxcInNleHByXCI6NjQsXCJPUEVOX1NFWFBSXCI6NjUsXCJzZXhwcl9yZXBldGl0aW9uMFwiOjY2LFwic2V4cHJfb3B0aW9uMFwiOjY3LFwiQ0xPU0VfU0VYUFJcIjo2OCxcImhhc2hcIjo2OSxcImhhc2hfcmVwZXRpdGlvbl9wbHVzMFwiOjcwLFwiaGFzaFNlZ21lbnRcIjo3MSxcIklEXCI6NzIsXCJFUVVBTFNcIjo3MyxcImJsb2NrUGFyYW1zXCI6NzQsXCJPUEVOX0JMT0NLX1BBUkFNU1wiOjc1LFwiYmxvY2tQYXJhbXNfcmVwZXRpdGlvbl9wbHVzMFwiOjc2LFwiQ0xPU0VfQkxPQ0tfUEFSQU1TXCI6NzcsXCJwYXRoXCI6NzgsXCJkYXRhTmFtZVwiOjc5LFwiU1RSSU5HXCI6ODAsXCJOVU1CRVJcIjo4MSxcIkJPT0xFQU5cIjo4MixcIlVOREVGSU5FRFwiOjgzLFwiTlVMTFwiOjg0LFwiREFUQVwiOjg1LFwicGF0aFNlZ21lbnRzXCI6ODYsXCJTRVBcIjo4NyxcIiRhY2NlcHRcIjowLFwiJGVuZFwiOjF9LFxudGVybWluYWxzXzogezI6XCJlcnJvclwiLDU6XCJFT0ZcIiwxNDpcIkNPTU1FTlRcIiwxNTpcIkNPTlRFTlRcIiwxODpcIkVORF9SQVdfQkxPQ0tcIiwxOTpcIk9QRU5fUkFXX0JMT0NLXCIsMjM6XCJDTE9TRV9SQVdfQkxPQ0tcIiwyOTpcIk9QRU5fQkxPQ0tcIiwzMzpcIkNMT1NFXCIsMzQ6XCJPUEVOX0lOVkVSU0VcIiwzOTpcIk9QRU5fSU5WRVJTRV9DSEFJTlwiLDQ0OlwiSU5WRVJTRVwiLDQ3OlwiT1BFTl9FTkRCTE9DS1wiLDQ4OlwiT1BFTlwiLDUxOlwiT1BFTl9VTkVTQ0FQRURcIiw1NDpcIkNMT1NFX1VORVNDQVBFRFwiLDU1OlwiT1BFTl9QQVJUSUFMXCIsNjA6XCJPUEVOX1BBUlRJQUxfQkxPQ0tcIiw2NTpcIk9QRU5fU0VYUFJcIiw2ODpcIkNMT1NFX1NFWFBSXCIsNzI6XCJJRFwiLDczOlwiRVFVQUxTXCIsNzU6XCJPUEVOX0JMT0NLX1BBUkFNU1wiLDc3OlwiQ0xPU0VfQkxPQ0tfUEFSQU1TXCIsODA6XCJTVFJJTkdcIiw4MTpcIk5VTUJFUlwiLDgyOlwiQk9PTEVBTlwiLDgzOlwiVU5ERUZJTkVEXCIsODQ6XCJOVUxMXCIsODU6XCJEQVRBXCIsODc6XCJTRVBcIn0sXG5wcm9kdWN0aW9uc186IFswLFszLDJdLFs0LDFdLFs3LDFdLFs3LDFdLFs3LDFdLFs3LDFdLFs3LDFdLFs3LDFdLFs3LDFdLFsxMywxXSxbMTAsM10sWzE2LDVdLFs5LDRdLFs5LDRdLFsyNCw2XSxbMjcsNl0sWzM4LDZdLFs0MywyXSxbNDUsM10sWzQ1LDFdLFsyNiwzXSxbOCw1XSxbOCw1XSxbMTEsNV0sWzEyLDNdLFs1OSw1XSxbNjMsMV0sWzYzLDFdLFs2NCw1XSxbNjksMV0sWzcxLDNdLFs3NCwzXSxbMjAsMV0sWzIwLDFdLFsyMCwxXSxbMjAsMV0sWzIwLDFdLFsyMCwxXSxbMjAsMV0sWzU2LDFdLFs1NiwxXSxbNzksMl0sWzc4LDFdLFs4NiwzXSxbODYsMV0sWzYsMF0sWzYsMl0sWzE3LDBdLFsxNywyXSxbMjEsMF0sWzIxLDJdLFsyMiwwXSxbMjIsMV0sWzI1LDBdLFsyNSwxXSxbMjgsMF0sWzI4LDFdLFszMCwwXSxbMzAsMl0sWzMxLDBdLFszMSwxXSxbMzIsMF0sWzMyLDFdLFszNSwwXSxbMzUsMl0sWzM2LDBdLFszNiwxXSxbMzcsMF0sWzM3LDFdLFs0MCwwXSxbNDAsMl0sWzQxLDBdLFs0MSwxXSxbNDIsMF0sWzQyLDFdLFs0NiwwXSxbNDYsMV0sWzQ5LDBdLFs0OSwyXSxbNTAsMF0sWzUwLDFdLFs1MiwwXSxbNTIsMl0sWzUzLDBdLFs1MywxXSxbNTcsMF0sWzU3LDJdLFs1OCwwXSxbNTgsMV0sWzYxLDBdLFs2MSwyXSxbNjIsMF0sWzYyLDFdLFs2NiwwXSxbNjYsMl0sWzY3LDBdLFs2NywxXSxbNzAsMV0sWzcwLDJdLFs3NiwxXSxbNzYsMl1dLFxucGVyZm9ybUFjdGlvbjogZnVuY3Rpb24gYW5vbnltb3VzKHl5dGV4dCx5eWxlbmcseXlsaW5lbm8seXkseXlzdGF0ZSwkJCxfJFxuKSB7XG5cbnZhciAkMCA9ICQkLmxlbmd0aCAtIDE7XG5zd2l0Y2ggKHl5c3RhdGUpIHtcbmNhc2UgMTogcmV0dXJuICQkWyQwLTFdOyBcbmJyZWFrO1xuY2FzZSAyOnRoaXMuJCA9IHl5LnByZXBhcmVQcm9ncmFtKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgMzp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgNDp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgNTp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgNjp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgNzp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgODp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgOTpcbiAgICB0aGlzLiQgPSB7XG4gICAgICB0eXBlOiAnQ29tbWVudFN0YXRlbWVudCcsXG4gICAgICB2YWx1ZTogeXkuc3RyaXBDb21tZW50KCQkWyQwXSksXG4gICAgICBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMF0sICQkWyQwXSksXG4gICAgICBsb2M6IHl5LmxvY0luZm8odGhpcy5fJClcbiAgICB9O1xuICBcbmJyZWFrO1xuY2FzZSAxMDpcbiAgICB0aGlzLiQgPSB7XG4gICAgICB0eXBlOiAnQ29udGVudFN0YXRlbWVudCcsXG4gICAgICBvcmlnaW5hbDogJCRbJDBdLFxuICAgICAgdmFsdWU6ICQkWyQwXSxcbiAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxuICAgIH07XG4gIFxuYnJlYWs7XG5jYXNlIDExOnRoaXMuJCA9IHl5LnByZXBhcmVSYXdCbG9jaygkJFskMC0yXSwgJCRbJDAtMV0sICQkWyQwXSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMTI6dGhpcy4kID0geyBwYXRoOiAkJFskMC0zXSwgcGFyYW1zOiAkJFskMC0yXSwgaGFzaDogJCRbJDAtMV0gfTtcbmJyZWFrO1xuY2FzZSAxMzp0aGlzLiQgPSB5eS5wcmVwYXJlQmxvY2soJCRbJDAtM10sICQkWyQwLTJdLCAkJFskMC0xXSwgJCRbJDBdLCBmYWxzZSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMTQ6dGhpcy4kID0geXkucHJlcGFyZUJsb2NrKCQkWyQwLTNdLCAkJFskMC0yXSwgJCRbJDAtMV0sICQkWyQwXSwgdHJ1ZSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMTU6dGhpcy4kID0geyBvcGVuOiAkJFskMC01XSwgcGF0aDogJCRbJDAtNF0sIHBhcmFtczogJCRbJDAtM10sIGhhc2g6ICQkWyQwLTJdLCBibG9ja1BhcmFtczogJCRbJDAtMV0sIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwLTVdLCAkJFskMF0pIH07XG5icmVhaztcbmNhc2UgMTY6dGhpcy4kID0geyBwYXRoOiAkJFskMC00XSwgcGFyYW1zOiAkJFskMC0zXSwgaGFzaDogJCRbJDAtMl0sIGJsb2NrUGFyYW1zOiAkJFskMC0xXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtNV0sICQkWyQwXSkgfTtcbmJyZWFrO1xuY2FzZSAxNzp0aGlzLiQgPSB7IHBhdGg6ICQkWyQwLTRdLCBwYXJhbXM6ICQkWyQwLTNdLCBoYXNoOiAkJFskMC0yXSwgYmxvY2tQYXJhbXM6ICQkWyQwLTFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMC01XSwgJCRbJDBdKSB9O1xuYnJlYWs7XG5jYXNlIDE4OnRoaXMuJCA9IHsgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtMV0sICQkWyQwLTFdKSwgcHJvZ3JhbTogJCRbJDBdIH07XG5icmVhaztcbmNhc2UgMTk6XG4gICAgdmFyIGludmVyc2UgPSB5eS5wcmVwYXJlQmxvY2soJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMF0sICQkWyQwXSwgZmFsc2UsIHRoaXMuXyQpLFxuICAgICAgICBwcm9ncmFtID0geXkucHJlcGFyZVByb2dyYW0oW2ludmVyc2VdLCAkJFskMC0xXS5sb2MpO1xuICAgIHByb2dyYW0uY2hhaW5lZCA9IHRydWU7XG5cbiAgICB0aGlzLiQgPSB7IHN0cmlwOiAkJFskMC0yXS5zdHJpcCwgcHJvZ3JhbTogcHJvZ3JhbSwgY2hhaW46IHRydWUgfTtcbiAgXG5icmVhaztcbmNhc2UgMjA6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDIxOnRoaXMuJCA9IHtwYXRoOiAkJFskMC0xXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAtMl0sICQkWyQwXSl9O1xuYnJlYWs7XG5jYXNlIDIyOnRoaXMuJCA9IHl5LnByZXBhcmVNdXN0YWNoZSgkJFskMC0zXSwgJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMC00XSwgeXkuc3RyaXBGbGFncygkJFskMC00XSwgJCRbJDBdKSwgdGhpcy5fJCk7XG5icmVhaztcbmNhc2UgMjM6dGhpcy4kID0geXkucHJlcGFyZU11c3RhY2hlKCQkWyQwLTNdLCAkJFskMC0yXSwgJCRbJDAtMV0sICQkWyQwLTRdLCB5eS5zdHJpcEZsYWdzKCQkWyQwLTRdLCAkJFskMF0pLCB0aGlzLl8kKTtcbmJyZWFrO1xuY2FzZSAyNDpcbiAgICB0aGlzLiQgPSB7XG4gICAgICB0eXBlOiAnUGFydGlhbFN0YXRlbWVudCcsXG4gICAgICBuYW1lOiAkJFskMC0zXSxcbiAgICAgIHBhcmFtczogJCRbJDAtMl0sXG4gICAgICBoYXNoOiAkJFskMC0xXSxcbiAgICAgIGluZGVudDogJycsXG4gICAgICBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMC00XSwgJCRbJDBdKSxcbiAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxuICAgIH07XG4gIFxuYnJlYWs7XG5jYXNlIDI1OnRoaXMuJCA9IHl5LnByZXBhcmVQYXJ0aWFsQmxvY2soJCRbJDAtMl0sICQkWyQwLTFdLCAkJFskMF0sIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDI2OnRoaXMuJCA9IHsgcGF0aDogJCRbJDAtM10sIHBhcmFtczogJCRbJDAtMl0sIGhhc2g6ICQkWyQwLTFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMC00XSwgJCRbJDBdKSB9O1xuYnJlYWs7XG5jYXNlIDI3OnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSAyODp0aGlzLiQgPSAkJFskMF07XG5icmVhaztcbmNhc2UgMjk6XG4gICAgdGhpcy4kID0ge1xuICAgICAgdHlwZTogJ1N1YkV4cHJlc3Npb24nLFxuICAgICAgcGF0aDogJCRbJDAtM10sXG4gICAgICBwYXJhbXM6ICQkWyQwLTJdLFxuICAgICAgaGFzaDogJCRbJDAtMV0sXG4gICAgICBsb2M6IHl5LmxvY0luZm8odGhpcy5fJClcbiAgICB9O1xuICBcbmJyZWFrO1xuY2FzZSAzMDp0aGlzLiQgPSB7dHlwZTogJ0hhc2gnLCBwYWlyczogJCRbJDBdLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDMxOnRoaXMuJCA9IHt0eXBlOiAnSGFzaFBhaXInLCBrZXk6IHl5LmlkKCQkWyQwLTJdKSwgdmFsdWU6ICQkWyQwXSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpfTtcbmJyZWFrO1xuY2FzZSAzMjp0aGlzLiQgPSB5eS5pZCgkJFskMC0xXSk7XG5icmVhaztcbmNhc2UgMzM6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDM0OnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSAzNTp0aGlzLiQgPSB7dHlwZTogJ1N0cmluZ0xpdGVyYWwnLCB2YWx1ZTogJCRbJDBdLCBvcmlnaW5hbDogJCRbJDBdLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDM2OnRoaXMuJCA9IHt0eXBlOiAnTnVtYmVyTGl0ZXJhbCcsIHZhbHVlOiBOdW1iZXIoJCRbJDBdKSwgb3JpZ2luYWw6IE51bWJlcigkJFskMF0pLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDM3OnRoaXMuJCA9IHt0eXBlOiAnQm9vbGVhbkxpdGVyYWwnLCB2YWx1ZTogJCRbJDBdID09PSAndHJ1ZScsIG9yaWdpbmFsOiAkJFskMF0gPT09ICd0cnVlJywgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpfTtcbmJyZWFrO1xuY2FzZSAzODp0aGlzLiQgPSB7dHlwZTogJ1VuZGVmaW5lZExpdGVyYWwnLCBvcmlnaW5hbDogdW5kZWZpbmVkLCB2YWx1ZTogdW5kZWZpbmVkLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCl9O1xuYnJlYWs7XG5jYXNlIDM5OnRoaXMuJCA9IHt0eXBlOiAnTnVsbExpdGVyYWwnLCBvcmlnaW5hbDogbnVsbCwgdmFsdWU6IG51bGwsIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKX07XG5icmVhaztcbmNhc2UgNDA6dGhpcy4kID0gJCRbJDBdO1xuYnJlYWs7XG5jYXNlIDQxOnRoaXMuJCA9ICQkWyQwXTtcbmJyZWFrO1xuY2FzZSA0Mjp0aGlzLiQgPSB5eS5wcmVwYXJlUGF0aCh0cnVlLCAkJFskMF0sIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDQzOnRoaXMuJCA9IHl5LnByZXBhcmVQYXRoKGZhbHNlLCAkJFskMF0sIHRoaXMuXyQpO1xuYnJlYWs7XG5jYXNlIDQ0OiAkJFskMC0yXS5wdXNoKHtwYXJ0OiB5eS5pZCgkJFskMF0pLCBvcmlnaW5hbDogJCRbJDBdLCBzZXBhcmF0b3I6ICQkWyQwLTFdfSk7IHRoaXMuJCA9ICQkWyQwLTJdOyBcbmJyZWFrO1xuY2FzZSA0NTp0aGlzLiQgPSBbe3BhcnQ6IHl5LmlkKCQkWyQwXSksIG9yaWdpbmFsOiAkJFskMF19XTtcbmJyZWFrO1xuY2FzZSA0Njp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA0NzokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgNDg6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgNDk6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDUwOnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDUxOiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA1ODp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA1OTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgNjQ6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgNjU6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDcwOnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDcxOiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA3ODp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA3OTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgODI6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgODM6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDg2OnRoaXMuJCA9IFtdO1xuYnJlYWs7XG5jYXNlIDg3OiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSA5MDp0aGlzLiQgPSBbXTtcbmJyZWFrO1xuY2FzZSA5MTokJFskMC0xXS5wdXNoKCQkWyQwXSk7XG5icmVhaztcbmNhc2UgOTQ6dGhpcy4kID0gW107XG5icmVhaztcbmNhc2UgOTU6JCRbJDAtMV0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG5jYXNlIDk4OnRoaXMuJCA9IFskJFskMF1dO1xuYnJlYWs7XG5jYXNlIDk5OiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xuY2FzZSAxMDA6dGhpcy4kID0gWyQkWyQwXV07XG5icmVhaztcbmNhc2UgMTAxOiQkWyQwLTFdLnB1c2goJCRbJDBdKTtcbmJyZWFrO1xufVxufSxcbnRhYmxlOiBbezM6MSw0OjIsNTpbMiw0Nl0sNjozLDE0OlsyLDQ2XSwxNTpbMiw0Nl0sMTk6WzIsNDZdLDI5OlsyLDQ2XSwzNDpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7MTpbM119LHs1OlsxLDRdfSx7NTpbMiwyXSw3OjUsODo2LDk6NywxMDo4LDExOjksMTI6MTAsMTM6MTEsMTQ6WzEsMTJdLDE1OlsxLDIwXSwxNjoxNywxOTpbMSwyM10sMjQ6MTUsMjc6MTYsMjk6WzEsMjFdLDM0OlsxLDIyXSwzOTpbMiwyXSw0NDpbMiwyXSw0NzpbMiwyXSw0ODpbMSwxM10sNTE6WzEsMTRdLDU1OlsxLDE4XSw1OToxOSw2MDpbMSwyNF19LHsxOlsyLDFdfSx7NTpbMiw0N10sMTQ6WzIsNDddLDE1OlsyLDQ3XSwxOTpbMiw0N10sMjk6WzIsNDddLDM0OlsyLDQ3XSwzOTpbMiw0N10sNDQ6WzIsNDddLDQ3OlsyLDQ3XSw0ODpbMiw0N10sNTE6WzIsNDddLDU1OlsyLDQ3XSw2MDpbMiw0N119LHs1OlsyLDNdLDE0OlsyLDNdLDE1OlsyLDNdLDE5OlsyLDNdLDI5OlsyLDNdLDM0OlsyLDNdLDM5OlsyLDNdLDQ0OlsyLDNdLDQ3OlsyLDNdLDQ4OlsyLDNdLDUxOlsyLDNdLDU1OlsyLDNdLDYwOlsyLDNdfSx7NTpbMiw0XSwxNDpbMiw0XSwxNTpbMiw0XSwxOTpbMiw0XSwyOTpbMiw0XSwzNDpbMiw0XSwzOTpbMiw0XSw0NDpbMiw0XSw0NzpbMiw0XSw0ODpbMiw0XSw1MTpbMiw0XSw1NTpbMiw0XSw2MDpbMiw0XX0sezU6WzIsNV0sMTQ6WzIsNV0sMTU6WzIsNV0sMTk6WzIsNV0sMjk6WzIsNV0sMzQ6WzIsNV0sMzk6WzIsNV0sNDQ6WzIsNV0sNDc6WzIsNV0sNDg6WzIsNV0sNTE6WzIsNV0sNTU6WzIsNV0sNjA6WzIsNV19LHs1OlsyLDZdLDE0OlsyLDZdLDE1OlsyLDZdLDE5OlsyLDZdLDI5OlsyLDZdLDM0OlsyLDZdLDM5OlsyLDZdLDQ0OlsyLDZdLDQ3OlsyLDZdLDQ4OlsyLDZdLDUxOlsyLDZdLDU1OlsyLDZdLDYwOlsyLDZdfSx7NTpbMiw3XSwxNDpbMiw3XSwxNTpbMiw3XSwxOTpbMiw3XSwyOTpbMiw3XSwzNDpbMiw3XSwzOTpbMiw3XSw0NDpbMiw3XSw0NzpbMiw3XSw0ODpbMiw3XSw1MTpbMiw3XSw1NTpbMiw3XSw2MDpbMiw3XX0sezU6WzIsOF0sMTQ6WzIsOF0sMTU6WzIsOF0sMTk6WzIsOF0sMjk6WzIsOF0sMzQ6WzIsOF0sMzk6WzIsOF0sNDQ6WzIsOF0sNDc6WzIsOF0sNDg6WzIsOF0sNTE6WzIsOF0sNTU6WzIsOF0sNjA6WzIsOF19LHs1OlsyLDldLDE0OlsyLDldLDE1OlsyLDldLDE5OlsyLDldLDI5OlsyLDldLDM0OlsyLDldLDM5OlsyLDldLDQ0OlsyLDldLDQ3OlsyLDldLDQ4OlsyLDldLDUxOlsyLDldLDU1OlsyLDldLDYwOlsyLDldfSx7MjA6MjUsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6MzYsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NDozNyw2OjMsMTQ6WzIsNDZdLDE1OlsyLDQ2XSwxOTpbMiw0Nl0sMjk6WzIsNDZdLDM0OlsyLDQ2XSwzOTpbMiw0Nl0sNDQ6WzIsNDZdLDQ3OlsyLDQ2XSw0ODpbMiw0Nl0sNTE6WzIsNDZdLDU1OlsyLDQ2XSw2MDpbMiw0Nl19LHs0OjM4LDY6MywxNDpbMiw0Nl0sMTU6WzIsNDZdLDE5OlsyLDQ2XSwyOTpbMiw0Nl0sMzQ6WzIsNDZdLDQ0OlsyLDQ2XSw0NzpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7MTU6WzIsNDhdLDE3OjM5LDE4OlsyLDQ4XX0sezIwOjQxLDU2OjQwLDY0OjQyLDY1OlsxLDQzXSw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHs0OjQ0LDY6MywxNDpbMiw0Nl0sMTU6WzIsNDZdLDE5OlsyLDQ2XSwyOTpbMiw0Nl0sMzQ6WzIsNDZdLDQ3OlsyLDQ2XSw0ODpbMiw0Nl0sNTE6WzIsNDZdLDU1OlsyLDQ2XSw2MDpbMiw0Nl19LHs1OlsyLDEwXSwxNDpbMiwxMF0sMTU6WzIsMTBdLDE4OlsyLDEwXSwxOTpbMiwxMF0sMjk6WzIsMTBdLDM0OlsyLDEwXSwzOTpbMiwxMF0sNDQ6WzIsMTBdLDQ3OlsyLDEwXSw0ODpbMiwxMF0sNTE6WzIsMTBdLDU1OlsyLDEwXSw2MDpbMiwxMF19LHsyMDo0NSw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDo0Niw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDo0Nyw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDo0MSw1Njo0OCw2NDo0Miw2NTpbMSw0M10sNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MzM6WzIsNzhdLDQ5OjQ5LDY1OlsyLDc4XSw3MjpbMiw3OF0sODA6WzIsNzhdLDgxOlsyLDc4XSw4MjpbMiw3OF0sODM6WzIsNzhdLDg0OlsyLDc4XSw4NTpbMiw3OF19LHsyMzpbMiwzM10sMzM6WzIsMzNdLDU0OlsyLDMzXSw2NTpbMiwzM10sNjg6WzIsMzNdLDcyOlsyLDMzXSw3NTpbMiwzM10sODA6WzIsMzNdLDgxOlsyLDMzXSw4MjpbMiwzM10sODM6WzIsMzNdLDg0OlsyLDMzXSw4NTpbMiwzM119LHsyMzpbMiwzNF0sMzM6WzIsMzRdLDU0OlsyLDM0XSw2NTpbMiwzNF0sNjg6WzIsMzRdLDcyOlsyLDM0XSw3NTpbMiwzNF0sODA6WzIsMzRdLDgxOlsyLDM0XSw4MjpbMiwzNF0sODM6WzIsMzRdLDg0OlsyLDM0XSw4NTpbMiwzNF19LHsyMzpbMiwzNV0sMzM6WzIsMzVdLDU0OlsyLDM1XSw2NTpbMiwzNV0sNjg6WzIsMzVdLDcyOlsyLDM1XSw3NTpbMiwzNV0sODA6WzIsMzVdLDgxOlsyLDM1XSw4MjpbMiwzNV0sODM6WzIsMzVdLDg0OlsyLDM1XSw4NTpbMiwzNV19LHsyMzpbMiwzNl0sMzM6WzIsMzZdLDU0OlsyLDM2XSw2NTpbMiwzNl0sNjg6WzIsMzZdLDcyOlsyLDM2XSw3NTpbMiwzNl0sODA6WzIsMzZdLDgxOlsyLDM2XSw4MjpbMiwzNl0sODM6WzIsMzZdLDg0OlsyLDM2XSw4NTpbMiwzNl19LHsyMzpbMiwzN10sMzM6WzIsMzddLDU0OlsyLDM3XSw2NTpbMiwzN10sNjg6WzIsMzddLDcyOlsyLDM3XSw3NTpbMiwzN10sODA6WzIsMzddLDgxOlsyLDM3XSw4MjpbMiwzN10sODM6WzIsMzddLDg0OlsyLDM3XSw4NTpbMiwzN119LHsyMzpbMiwzOF0sMzM6WzIsMzhdLDU0OlsyLDM4XSw2NTpbMiwzOF0sNjg6WzIsMzhdLDcyOlsyLDM4XSw3NTpbMiwzOF0sODA6WzIsMzhdLDgxOlsyLDM4XSw4MjpbMiwzOF0sODM6WzIsMzhdLDg0OlsyLDM4XSw4NTpbMiwzOF19LHsyMzpbMiwzOV0sMzM6WzIsMzldLDU0OlsyLDM5XSw2NTpbMiwzOV0sNjg6WzIsMzldLDcyOlsyLDM5XSw3NTpbMiwzOV0sODA6WzIsMzldLDgxOlsyLDM5XSw4MjpbMiwzOV0sODM6WzIsMzldLDg0OlsyLDM5XSw4NTpbMiwzOV19LHsyMzpbMiw0M10sMzM6WzIsNDNdLDU0OlsyLDQzXSw2NTpbMiw0M10sNjg6WzIsNDNdLDcyOlsyLDQzXSw3NTpbMiw0M10sODA6WzIsNDNdLDgxOlsyLDQzXSw4MjpbMiw0M10sODM6WzIsNDNdLDg0OlsyLDQzXSw4NTpbMiw0M10sODc6WzEsNTBdfSx7NzI6WzEsMzVdLDg2OjUxfSx7MjM6WzIsNDVdLDMzOlsyLDQ1XSw1NDpbMiw0NV0sNjU6WzIsNDVdLDY4OlsyLDQ1XSw3MjpbMiw0NV0sNzU6WzIsNDVdLDgwOlsyLDQ1XSw4MTpbMiw0NV0sODI6WzIsNDVdLDgzOlsyLDQ1XSw4NDpbMiw0NV0sODU6WzIsNDVdLDg3OlsyLDQ1XX0sezUyOjUyLDU0OlsyLDgyXSw2NTpbMiw4Ml0sNzI6WzIsODJdLDgwOlsyLDgyXSw4MTpbMiw4Ml0sODI6WzIsODJdLDgzOlsyLDgyXSw4NDpbMiw4Ml0sODU6WzIsODJdfSx7MjU6NTMsMzg6NTUsMzk6WzEsNTddLDQzOjU2LDQ0OlsxLDU4XSw0NTo1NCw0NzpbMiw1NF19LHsyODo1OSw0Mzo2MCw0NDpbMSw1OF0sNDc6WzIsNTZdfSx7MTM6NjIsMTU6WzEsMjBdLDE4OlsxLDYxXX0sezMzOlsyLDg2XSw1Nzo2Myw2NTpbMiw4Nl0sNzI6WzIsODZdLDgwOlsyLDg2XSw4MTpbMiw4Nl0sODI6WzIsODZdLDgzOlsyLDg2XSw4NDpbMiw4Nl0sODU6WzIsODZdfSx7MzM6WzIsNDBdLDY1OlsyLDQwXSw3MjpbMiw0MF0sODA6WzIsNDBdLDgxOlsyLDQwXSw4MjpbMiw0MF0sODM6WzIsNDBdLDg0OlsyLDQwXSw4NTpbMiw0MF19LHszMzpbMiw0MV0sNjU6WzIsNDFdLDcyOlsyLDQxXSw4MDpbMiw0MV0sODE6WzIsNDFdLDgyOlsyLDQxXSw4MzpbMiw0MV0sODQ6WzIsNDFdLDg1OlsyLDQxXX0sezIwOjY0LDcyOlsxLDM1XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezI2OjY1LDQ3OlsxLDY2XX0sezMwOjY3LDMzOlsyLDU4XSw2NTpbMiw1OF0sNzI6WzIsNThdLDc1OlsyLDU4XSw4MDpbMiw1OF0sODE6WzIsNThdLDgyOlsyLDU4XSw4MzpbMiw1OF0sODQ6WzIsNThdLDg1OlsyLDU4XX0sezMzOlsyLDY0XSwzNTo2OCw2NTpbMiw2NF0sNzI6WzIsNjRdLDc1OlsyLDY0XSw4MDpbMiw2NF0sODE6WzIsNjRdLDgyOlsyLDY0XSw4MzpbMiw2NF0sODQ6WzIsNjRdLDg1OlsyLDY0XX0sezIxOjY5LDIzOlsyLDUwXSw2NTpbMiw1MF0sNzI6WzIsNTBdLDgwOlsyLDUwXSw4MTpbMiw1MF0sODI6WzIsNTBdLDgzOlsyLDUwXSw4NDpbMiw1MF0sODU6WzIsNTBdfSx7MzM6WzIsOTBdLDYxOjcwLDY1OlsyLDkwXSw3MjpbMiw5MF0sODA6WzIsOTBdLDgxOlsyLDkwXSw4MjpbMiw5MF0sODM6WzIsOTBdLDg0OlsyLDkwXSw4NTpbMiw5MF19LHsyMDo3NCwzMzpbMiw4MF0sNTA6NzEsNjM6NzIsNjQ6NzUsNjU6WzEsNDNdLDY5OjczLDcwOjc2LDcxOjc3LDcyOlsxLDc4XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezcyOlsxLDc5XX0sezIzOlsyLDQyXSwzMzpbMiw0Ml0sNTQ6WzIsNDJdLDY1OlsyLDQyXSw2ODpbMiw0Ml0sNzI6WzIsNDJdLDc1OlsyLDQyXSw4MDpbMiw0Ml0sODE6WzIsNDJdLDgyOlsyLDQyXSw4MzpbMiw0Ml0sODQ6WzIsNDJdLDg1OlsyLDQyXSw4NzpbMSw1MF19LHsyMDo3NCw1Mzo4MCw1NDpbMiw4NF0sNjM6ODEsNjQ6NzUsNjU6WzEsNDNdLDY5OjgyLDcwOjc2LDcxOjc3LDcyOlsxLDc4XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezI2OjgzLDQ3OlsxLDY2XX0sezQ3OlsyLDU1XX0sezQ6ODQsNjozLDE0OlsyLDQ2XSwxNTpbMiw0Nl0sMTk6WzIsNDZdLDI5OlsyLDQ2XSwzNDpbMiw0Nl0sMzk6WzIsNDZdLDQ0OlsyLDQ2XSw0NzpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7NDc6WzIsMjBdfSx7MjA6ODUsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NDo4Niw2OjMsMTQ6WzIsNDZdLDE1OlsyLDQ2XSwxOTpbMiw0Nl0sMjk6WzIsNDZdLDM0OlsyLDQ2XSw0NzpbMiw0Nl0sNDg6WzIsNDZdLDUxOlsyLDQ2XSw1NTpbMiw0Nl0sNjA6WzIsNDZdfSx7MjY6ODcsNDc6WzEsNjZdfSx7NDc6WzIsNTddfSx7NTpbMiwxMV0sMTQ6WzIsMTFdLDE1OlsyLDExXSwxOTpbMiwxMV0sMjk6WzIsMTFdLDM0OlsyLDExXSwzOTpbMiwxMV0sNDQ6WzIsMTFdLDQ3OlsyLDExXSw0ODpbMiwxMV0sNTE6WzIsMTFdLDU1OlsyLDExXSw2MDpbMiwxMV19LHsxNTpbMiw0OV0sMTg6WzIsNDldfSx7MjA6NzQsMzM6WzIsODhdLDU4Ojg4LDYzOjg5LDY0Ojc1LDY1OlsxLDQzXSw2OTo5MCw3MDo3Niw3MTo3Nyw3MjpbMSw3OF0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHs2NTpbMiw5NF0sNjY6OTEsNjg6WzIsOTRdLDcyOlsyLDk0XSw4MDpbMiw5NF0sODE6WzIsOTRdLDgyOlsyLDk0XSw4MzpbMiw5NF0sODQ6WzIsOTRdLDg1OlsyLDk0XX0sezU6WzIsMjVdLDE0OlsyLDI1XSwxNTpbMiwyNV0sMTk6WzIsMjVdLDI5OlsyLDI1XSwzNDpbMiwyNV0sMzk6WzIsMjVdLDQ0OlsyLDI1XSw0NzpbMiwyNV0sNDg6WzIsMjVdLDUxOlsyLDI1XSw1NTpbMiwyNV0sNjA6WzIsMjVdfSx7MjA6OTIsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NzQsMzE6OTMsMzM6WzIsNjBdLDYzOjk0LDY0Ojc1LDY1OlsxLDQzXSw2OTo5NSw3MDo3Niw3MTo3Nyw3MjpbMSw3OF0sNzU6WzIsNjBdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NzQsMzM6WzIsNjZdLDM2Ojk2LDYzOjk3LDY0Ojc1LDY1OlsxLDQzXSw2OTo5OCw3MDo3Niw3MTo3Nyw3MjpbMSw3OF0sNzU6WzIsNjZdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjA6NzQsMjI6OTksMjM6WzIsNTJdLDYzOjEwMCw2NDo3NSw2NTpbMSw0M10sNjk6MTAxLDcwOjc2LDcxOjc3LDcyOlsxLDc4XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezIwOjc0LDMzOlsyLDkyXSw2MjoxMDIsNjM6MTAzLDY0Ojc1LDY1OlsxLDQzXSw2OToxMDQsNzA6NzYsNzE6NzcsNzI6WzEsNzhdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MzM6WzEsMTA1XX0sezMzOlsyLDc5XSw2NTpbMiw3OV0sNzI6WzIsNzldLDgwOlsyLDc5XSw4MTpbMiw3OV0sODI6WzIsNzldLDgzOlsyLDc5XSw4NDpbMiw3OV0sODU6WzIsNzldfSx7MzM6WzIsODFdfSx7MjM6WzIsMjddLDMzOlsyLDI3XSw1NDpbMiwyN10sNjU6WzIsMjddLDY4OlsyLDI3XSw3MjpbMiwyN10sNzU6WzIsMjddLDgwOlsyLDI3XSw4MTpbMiwyN10sODI6WzIsMjddLDgzOlsyLDI3XSw4NDpbMiwyN10sODU6WzIsMjddfSx7MjM6WzIsMjhdLDMzOlsyLDI4XSw1NDpbMiwyOF0sNjU6WzIsMjhdLDY4OlsyLDI4XSw3MjpbMiwyOF0sNzU6WzIsMjhdLDgwOlsyLDI4XSw4MTpbMiwyOF0sODI6WzIsMjhdLDgzOlsyLDI4XSw4NDpbMiwyOF0sODU6WzIsMjhdfSx7MjM6WzIsMzBdLDMzOlsyLDMwXSw1NDpbMiwzMF0sNjg6WzIsMzBdLDcxOjEwNiw3MjpbMSwxMDddLDc1OlsyLDMwXX0sezIzOlsyLDk4XSwzMzpbMiw5OF0sNTQ6WzIsOThdLDY4OlsyLDk4XSw3MjpbMiw5OF0sNzU6WzIsOThdfSx7MjM6WzIsNDVdLDMzOlsyLDQ1XSw1NDpbMiw0NV0sNjU6WzIsNDVdLDY4OlsyLDQ1XSw3MjpbMiw0NV0sNzM6WzEsMTA4XSw3NTpbMiw0NV0sODA6WzIsNDVdLDgxOlsyLDQ1XSw4MjpbMiw0NV0sODM6WzIsNDVdLDg0OlsyLDQ1XSw4NTpbMiw0NV0sODc6WzIsNDVdfSx7MjM6WzIsNDRdLDMzOlsyLDQ0XSw1NDpbMiw0NF0sNjU6WzIsNDRdLDY4OlsyLDQ0XSw3MjpbMiw0NF0sNzU6WzIsNDRdLDgwOlsyLDQ0XSw4MTpbMiw0NF0sODI6WzIsNDRdLDgzOlsyLDQ0XSw4NDpbMiw0NF0sODU6WzIsNDRdLDg3OlsyLDQ0XX0sezU0OlsxLDEwOV19LHs1NDpbMiw4M10sNjU6WzIsODNdLDcyOlsyLDgzXSw4MDpbMiw4M10sODE6WzIsODNdLDgyOlsyLDgzXSw4MzpbMiw4M10sODQ6WzIsODNdLDg1OlsyLDgzXX0sezU0OlsyLDg1XX0sezU6WzIsMTNdLDE0OlsyLDEzXSwxNTpbMiwxM10sMTk6WzIsMTNdLDI5OlsyLDEzXSwzNDpbMiwxM10sMzk6WzIsMTNdLDQ0OlsyLDEzXSw0NzpbMiwxM10sNDg6WzIsMTNdLDUxOlsyLDEzXSw1NTpbMiwxM10sNjA6WzIsMTNdfSx7Mzg6NTUsMzk6WzEsNTddLDQzOjU2LDQ0OlsxLDU4XSw0NToxMTEsNDY6MTEwLDQ3OlsyLDc2XX0sezMzOlsyLDcwXSw0MDoxMTIsNjU6WzIsNzBdLDcyOlsyLDcwXSw3NTpbMiw3MF0sODA6WzIsNzBdLDgxOlsyLDcwXSw4MjpbMiw3MF0sODM6WzIsNzBdLDg0OlsyLDcwXSw4NTpbMiw3MF19LHs0NzpbMiwxOF19LHs1OlsyLDE0XSwxNDpbMiwxNF0sMTU6WzIsMTRdLDE5OlsyLDE0XSwyOTpbMiwxNF0sMzQ6WzIsMTRdLDM5OlsyLDE0XSw0NDpbMiwxNF0sNDc6WzIsMTRdLDQ4OlsyLDE0XSw1MTpbMiwxNF0sNTU6WzIsMTRdLDYwOlsyLDE0XX0sezMzOlsxLDExM119LHszMzpbMiw4N10sNjU6WzIsODddLDcyOlsyLDg3XSw4MDpbMiw4N10sODE6WzIsODddLDgyOlsyLDg3XSw4MzpbMiw4N10sODQ6WzIsODddLDg1OlsyLDg3XX0sezMzOlsyLDg5XX0sezIwOjc0LDYzOjExNSw2NDo3NSw2NTpbMSw0M10sNjc6MTE0LDY4OlsyLDk2XSw2OToxMTYsNzA6NzYsNzE6NzcsNzI6WzEsNzhdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MzM6WzEsMTE3XX0sezMyOjExOCwzMzpbMiw2Ml0sNzQ6MTE5LDc1OlsxLDEyMF19LHszMzpbMiw1OV0sNjU6WzIsNTldLDcyOlsyLDU5XSw3NTpbMiw1OV0sODA6WzIsNTldLDgxOlsyLDU5XSw4MjpbMiw1OV0sODM6WzIsNTldLDg0OlsyLDU5XSw4NTpbMiw1OV19LHszMzpbMiw2MV0sNzU6WzIsNjFdfSx7MzM6WzIsNjhdLDM3OjEyMSw3NDoxMjIsNzU6WzEsMTIwXX0sezMzOlsyLDY1XSw2NTpbMiw2NV0sNzI6WzIsNjVdLDc1OlsyLDY1XSw4MDpbMiw2NV0sODE6WzIsNjVdLDgyOlsyLDY1XSw4MzpbMiw2NV0sODQ6WzIsNjVdLDg1OlsyLDY1XX0sezMzOlsyLDY3XSw3NTpbMiw2N119LHsyMzpbMSwxMjNdfSx7MjM6WzIsNTFdLDY1OlsyLDUxXSw3MjpbMiw1MV0sODA6WzIsNTFdLDgxOlsyLDUxXSw4MjpbMiw1MV0sODM6WzIsNTFdLDg0OlsyLDUxXSw4NTpbMiw1MV19LHsyMzpbMiw1M119LHszMzpbMSwxMjRdfSx7MzM6WzIsOTFdLDY1OlsyLDkxXSw3MjpbMiw5MV0sODA6WzIsOTFdLDgxOlsyLDkxXSw4MjpbMiw5MV0sODM6WzIsOTFdLDg0OlsyLDkxXSw4NTpbMiw5MV19LHszMzpbMiw5M119LHs1OlsyLDIyXSwxNDpbMiwyMl0sMTU6WzIsMjJdLDE5OlsyLDIyXSwyOTpbMiwyMl0sMzQ6WzIsMjJdLDM5OlsyLDIyXSw0NDpbMiwyMl0sNDc6WzIsMjJdLDQ4OlsyLDIyXSw1MTpbMiwyMl0sNTU6WzIsMjJdLDYwOlsyLDIyXX0sezIzOlsyLDk5XSwzMzpbMiw5OV0sNTQ6WzIsOTldLDY4OlsyLDk5XSw3MjpbMiw5OV0sNzU6WzIsOTldfSx7NzM6WzEsMTA4XX0sezIwOjc0LDYzOjEyNSw2NDo3NSw2NTpbMSw0M10sNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NTpbMiwyM10sMTQ6WzIsMjNdLDE1OlsyLDIzXSwxOTpbMiwyM10sMjk6WzIsMjNdLDM0OlsyLDIzXSwzOTpbMiwyM10sNDQ6WzIsMjNdLDQ3OlsyLDIzXSw0ODpbMiwyM10sNTE6WzIsMjNdLDU1OlsyLDIzXSw2MDpbMiwyM119LHs0NzpbMiwxOV19LHs0NzpbMiw3N119LHsyMDo3NCwzMzpbMiw3Ml0sNDE6MTI2LDYzOjEyNyw2NDo3NSw2NTpbMSw0M10sNjk6MTI4LDcwOjc2LDcxOjc3LDcyOlsxLDc4XSw3NTpbMiw3Ml0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHs1OlsyLDI0XSwxNDpbMiwyNF0sMTU6WzIsMjRdLDE5OlsyLDI0XSwyOTpbMiwyNF0sMzQ6WzIsMjRdLDM5OlsyLDI0XSw0NDpbMiwyNF0sNDc6WzIsMjRdLDQ4OlsyLDI0XSw1MTpbMiwyNF0sNTU6WzIsMjRdLDYwOlsyLDI0XX0sezY4OlsxLDEyOV19LHs2NTpbMiw5NV0sNjg6WzIsOTVdLDcyOlsyLDk1XSw4MDpbMiw5NV0sODE6WzIsOTVdLDgyOlsyLDk1XSw4MzpbMiw5NV0sODQ6WzIsOTVdLDg1OlsyLDk1XX0sezY4OlsyLDk3XX0sezU6WzIsMjFdLDE0OlsyLDIxXSwxNTpbMiwyMV0sMTk6WzIsMjFdLDI5OlsyLDIxXSwzNDpbMiwyMV0sMzk6WzIsMjFdLDQ0OlsyLDIxXSw0NzpbMiwyMV0sNDg6WzIsMjFdLDUxOlsyLDIxXSw1NTpbMiwyMV0sNjA6WzIsMjFdfSx7MzM6WzEsMTMwXX0sezMzOlsyLDYzXX0sezcyOlsxLDEzMl0sNzY6MTMxfSx7MzM6WzEsMTMzXX0sezMzOlsyLDY5XX0sezE1OlsyLDEyXSwxODpbMiwxMl19LHsxNDpbMiwyNl0sMTU6WzIsMjZdLDE5OlsyLDI2XSwyOTpbMiwyNl0sMzQ6WzIsMjZdLDQ3OlsyLDI2XSw0ODpbMiwyNl0sNTE6WzIsMjZdLDU1OlsyLDI2XSw2MDpbMiwyNl19LHsyMzpbMiwzMV0sMzM6WzIsMzFdLDU0OlsyLDMxXSw2ODpbMiwzMV0sNzI6WzIsMzFdLDc1OlsyLDMxXX0sezMzOlsyLDc0XSw0MjoxMzQsNzQ6MTM1LDc1OlsxLDEyMF19LHszMzpbMiw3MV0sNjU6WzIsNzFdLDcyOlsyLDcxXSw3NTpbMiw3MV0sODA6WzIsNzFdLDgxOlsyLDcxXSw4MjpbMiw3MV0sODM6WzIsNzFdLDg0OlsyLDcxXSw4NTpbMiw3MV19LHszMzpbMiw3M10sNzU6WzIsNzNdfSx7MjM6WzIsMjldLDMzOlsyLDI5XSw1NDpbMiwyOV0sNjU6WzIsMjldLDY4OlsyLDI5XSw3MjpbMiwyOV0sNzU6WzIsMjldLDgwOlsyLDI5XSw4MTpbMiwyOV0sODI6WzIsMjldLDgzOlsyLDI5XSw4NDpbMiwyOV0sODU6WzIsMjldfSx7MTQ6WzIsMTVdLDE1OlsyLDE1XSwxOTpbMiwxNV0sMjk6WzIsMTVdLDM0OlsyLDE1XSwzOTpbMiwxNV0sNDQ6WzIsMTVdLDQ3OlsyLDE1XSw0ODpbMiwxNV0sNTE6WzIsMTVdLDU1OlsyLDE1XSw2MDpbMiwxNV19LHs3MjpbMSwxMzddLDc3OlsxLDEzNl19LHs3MjpbMiwxMDBdLDc3OlsyLDEwMF19LHsxNDpbMiwxNl0sMTU6WzIsMTZdLDE5OlsyLDE2XSwyOTpbMiwxNl0sMzQ6WzIsMTZdLDQ0OlsyLDE2XSw0NzpbMiwxNl0sNDg6WzIsMTZdLDUxOlsyLDE2XSw1NTpbMiwxNl0sNjA6WzIsMTZdfSx7MzM6WzEsMTM4XX0sezMzOlsyLDc1XX0sezMzOlsyLDMyXX0sezcyOlsyLDEwMV0sNzc6WzIsMTAxXX0sezE0OlsyLDE3XSwxNTpbMiwxN10sMTk6WzIsMTddLDI5OlsyLDE3XSwzNDpbMiwxN10sMzk6WzIsMTddLDQ0OlsyLDE3XSw0NzpbMiwxN10sNDg6WzIsMTddLDUxOlsyLDE3XSw1NTpbMiwxN10sNjA6WzIsMTddfV0sXG5kZWZhdWx0QWN0aW9uczogezQ6WzIsMV0sNTQ6WzIsNTVdLDU2OlsyLDIwXSw2MDpbMiw1N10sNzM6WzIsODFdLDgyOlsyLDg1XSw4NjpbMiwxOF0sOTA6WzIsODldLDEwMTpbMiw1M10sMTA0OlsyLDkzXSwxMTA6WzIsMTldLDExMTpbMiw3N10sMTE2OlsyLDk3XSwxMTk6WzIsNjNdLDEyMjpbMiw2OV0sMTM1OlsyLDc1XSwxMzY6WzIsMzJdfSxcbnBhcnNlRXJyb3I6IGZ1bmN0aW9uIHBhcnNlRXJyb3IgKHN0ciwgaGFzaCkge1xuICAgIHRocm93IG5ldyBFcnJvcihzdHIpO1xufSxcbnBhcnNlOiBmdW5jdGlvbiBwYXJzZShpbnB1dCkge1xuICAgIHZhciBzZWxmID0gdGhpcywgc3RhY2sgPSBbMF0sIHZzdGFjayA9IFtudWxsXSwgbHN0YWNrID0gW10sIHRhYmxlID0gdGhpcy50YWJsZSwgeXl0ZXh0ID0gXCJcIiwgeXlsaW5lbm8gPSAwLCB5eWxlbmcgPSAwLCByZWNvdmVyaW5nID0gMCwgVEVSUk9SID0gMiwgRU9GID0gMTtcbiAgICB0aGlzLmxleGVyLnNldElucHV0KGlucHV0KTtcbiAgICB0aGlzLmxleGVyLnl5ID0gdGhpcy55eTtcbiAgICB0aGlzLnl5LmxleGVyID0gdGhpcy5sZXhlcjtcbiAgICB0aGlzLnl5LnBhcnNlciA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmxleGVyLnl5bGxvYyA9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICB0aGlzLmxleGVyLnl5bGxvYyA9IHt9O1xuICAgIHZhciB5eWxvYyA9IHRoaXMubGV4ZXIueXlsbG9jO1xuICAgIGxzdGFjay5wdXNoKHl5bG9jKTtcbiAgICB2YXIgcmFuZ2VzID0gdGhpcy5sZXhlci5vcHRpb25zICYmIHRoaXMubGV4ZXIub3B0aW9ucy5yYW5nZXM7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnl5LnBhcnNlRXJyb3IgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgdGhpcy5wYXJzZUVycm9yID0gdGhpcy55eS5wYXJzZUVycm9yO1xuICAgIGZ1bmN0aW9uIHBvcFN0YWNrKG4pIHtcbiAgICAgICAgc3RhY2subGVuZ3RoID0gc3RhY2subGVuZ3RoIC0gMiAqIG47XG4gICAgICAgIHZzdGFjay5sZW5ndGggPSB2c3RhY2subGVuZ3RoIC0gbjtcbiAgICAgICAgbHN0YWNrLmxlbmd0aCA9IGxzdGFjay5sZW5ndGggLSBuO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsZXgoKSB7XG4gICAgICAgIHZhciB0b2tlbjtcbiAgICAgICAgdG9rZW4gPSBzZWxmLmxleGVyLmxleCgpIHx8IDE7XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRva2VuID0gc2VsZi5zeW1ib2xzX1t0b2tlbl0gfHwgdG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH1cbiAgICB2YXIgc3ltYm9sLCBwcmVFcnJvclN5bWJvbCwgc3RhdGUsIGFjdGlvbiwgYSwgciwgeXl2YWwgPSB7fSwgcCwgbGVuLCBuZXdTdGF0ZSwgZXhwZWN0ZWQ7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKHRoaXMuZGVmYXVsdEFjdGlvbnNbc3RhdGVdKSB7XG4gICAgICAgICAgICBhY3Rpb24gPSB0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzeW1ib2wgPT09IG51bGwgfHwgdHlwZW9mIHN5bWJvbCA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgc3ltYm9sID0gbGV4KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3Rpb24gPSB0YWJsZVtzdGF0ZV0gJiYgdGFibGVbc3RhdGVdW3N5bWJvbF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09IFwidW5kZWZpbmVkXCIgfHwgIWFjdGlvbi5sZW5ndGggfHwgIWFjdGlvblswXSkge1xuICAgICAgICAgICAgdmFyIGVyclN0ciA9IFwiXCI7XG4gICAgICAgICAgICBpZiAoIXJlY292ZXJpbmcpIHtcbiAgICAgICAgICAgICAgICBleHBlY3RlZCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAocCBpbiB0YWJsZVtzdGF0ZV0pXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRlcm1pbmFsc19bcF0gJiYgcCA+IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkLnB1c2goXCInXCIgKyB0aGlzLnRlcm1pbmFsc19bcF0gKyBcIidcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXhlci5zaG93UG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gXCJQYXJzZSBlcnJvciBvbiBsaW5lIFwiICsgKHl5bGluZW5vICsgMSkgKyBcIjpcXG5cIiArIHRoaXMubGV4ZXIuc2hvd1Bvc2l0aW9uKCkgKyBcIlxcbkV4cGVjdGluZyBcIiArIGV4cGVjdGVkLmpvaW4oXCIsIFwiKSArIFwiLCBnb3QgJ1wiICsgKHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCkgKyBcIidcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlcnJTdHIgPSBcIlBhcnNlIGVycm9yIG9uIGxpbmUgXCIgKyAoeXlsaW5lbm8gKyAxKSArIFwiOiBVbmV4cGVjdGVkIFwiICsgKHN5bWJvbCA9PSAxP1wiZW5kIG9mIGlucHV0XCI6XCInXCIgKyAodGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sKSArIFwiJ1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZUVycm9yKGVyclN0ciwge3RleHQ6IHRoaXMubGV4ZXIubWF0Y2gsIHRva2VuOiB0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wsIGxpbmU6IHRoaXMubGV4ZXIueXlsaW5lbm8sIGxvYzogeXlsb2MsIGV4cGVjdGVkOiBleHBlY3RlZH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb25bMF0gaW5zdGFuY2VvZiBBcnJheSAmJiBhY3Rpb24ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2UgRXJyb3I6IG11bHRpcGxlIGFjdGlvbnMgcG9zc2libGUgYXQgc3RhdGU6IFwiICsgc3RhdGUgKyBcIiwgdG9rZW46IFwiICsgc3ltYm9sKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGFjdGlvblswXSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBzdGFjay5wdXNoKHN5bWJvbCk7XG4gICAgICAgICAgICB2c3RhY2sucHVzaCh0aGlzLmxleGVyLnl5dGV4dCk7XG4gICAgICAgICAgICBsc3RhY2sucHVzaCh0aGlzLmxleGVyLnl5bGxvYyk7XG4gICAgICAgICAgICBzdGFjay5wdXNoKGFjdGlvblsxXSk7XG4gICAgICAgICAgICBzeW1ib2wgPSBudWxsO1xuICAgICAgICAgICAgaWYgKCFwcmVFcnJvclN5bWJvbCkge1xuICAgICAgICAgICAgICAgIHl5bGVuZyA9IHRoaXMubGV4ZXIueXlsZW5nO1xuICAgICAgICAgICAgICAgIHl5dGV4dCA9IHRoaXMubGV4ZXIueXl0ZXh0O1xuICAgICAgICAgICAgICAgIHl5bGluZW5vID0gdGhpcy5sZXhlci55eWxpbmVubztcbiAgICAgICAgICAgICAgICB5eWxvYyA9IHRoaXMubGV4ZXIueXlsbG9jO1xuICAgICAgICAgICAgICAgIGlmIChyZWNvdmVyaW5nID4gMClcbiAgICAgICAgICAgICAgICAgICAgcmVjb3ZlcmluZy0tO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSBwcmVFcnJvclN5bWJvbDtcbiAgICAgICAgICAgICAgICBwcmVFcnJvclN5bWJvbCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgbGVuID0gdGhpcy5wcm9kdWN0aW9uc19bYWN0aW9uWzFdXVsxXTtcbiAgICAgICAgICAgIHl5dmFsLiQgPSB2c3RhY2tbdnN0YWNrLmxlbmd0aCAtIGxlbl07XG4gICAgICAgICAgICB5eXZhbC5fJCA9IHtmaXJzdF9saW5lOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLmZpcnN0X2xpbmUsIGxhc3RfbGluZTogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5sYXN0X2xpbmUsIGZpcnN0X2NvbHVtbjogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5maXJzdF9jb2x1bW4sIGxhc3RfY29sdW1uOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLmxhc3RfY29sdW1ufTtcbiAgICAgICAgICAgIGlmIChyYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB5eXZhbC5fJC5yYW5nZSA9IFtsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLnJhbmdlWzBdLCBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLnJhbmdlWzFdXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIgPSB0aGlzLnBlcmZvcm1BY3Rpb24uY2FsbCh5eXZhbCwgeXl0ZXh0LCB5eWxlbmcsIHl5bGluZW5vLCB0aGlzLnl5LCBhY3Rpb25bMV0sIHZzdGFjaywgbHN0YWNrKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgICAgIHN0YWNrID0gc3RhY2suc2xpY2UoMCwgLTEgKiBsZW4gKiAyKTtcbiAgICAgICAgICAgICAgICB2c3RhY2sgPSB2c3RhY2suc2xpY2UoMCwgLTEgKiBsZW4pO1xuICAgICAgICAgICAgICAgIGxzdGFjayA9IGxzdGFjay5zbGljZSgwLCAtMSAqIGxlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFjay5wdXNoKHRoaXMucHJvZHVjdGlvbnNfW2FjdGlvblsxXV1bMF0pO1xuICAgICAgICAgICAgdnN0YWNrLnB1c2goeXl2YWwuJCk7XG4gICAgICAgICAgICBsc3RhY2sucHVzaCh5eXZhbC5fJCk7XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IHRhYmxlW3N0YWNrW3N0YWNrLmxlbmd0aCAtIDJdXVtzdGFja1tzdGFjay5sZW5ndGggLSAxXV07XG4gICAgICAgICAgICBzdGFjay5wdXNoKG5ld1N0YXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbn07XG4vKiBKaXNvbiBnZW5lcmF0ZWQgbGV4ZXIgKi9cbnZhciBsZXhlciA9IChmdW5jdGlvbigpe1xudmFyIGxleGVyID0gKHtFT0Y6MSxcbnBhcnNlRXJyb3I6ZnVuY3Rpb24gcGFyc2VFcnJvcihzdHIsIGhhc2gpIHtcbiAgICAgICAgaWYgKHRoaXMueXkucGFyc2VyKSB7XG4gICAgICAgICAgICB0aGlzLnl5LnBhcnNlci5wYXJzZUVycm9yKHN0ciwgaGFzaCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Ioc3RyKTtcbiAgICAgICAgfVxuICAgIH0sXG5zZXRJbnB1dDpmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5fbW9yZSA9IHRoaXMuX2xlc3MgPSB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy55eWxpbmVubyA9IHRoaXMueXlsZW5nID0gMDtcbiAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLm1hdGNoZWQgPSB0aGlzLm1hdGNoID0gJyc7XG4gICAgICAgIHRoaXMuY29uZGl0aW9uU3RhY2sgPSBbJ0lOSVRJQUwnXTtcbiAgICAgICAgdGhpcy55eWxsb2MgPSB7Zmlyc3RfbGluZToxLGZpcnN0X2NvbHVtbjowLGxhc3RfbGluZToxLGxhc3RfY29sdW1uOjB9O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykgdGhpcy55eWxsb2MucmFuZ2UgPSBbMCwwXTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuaW5wdXQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2ggPSB0aGlzLl9pbnB1dFswXTtcbiAgICAgICAgdGhpcy55eXRleHQgKz0gY2g7XG4gICAgICAgIHRoaXMueXlsZW5nKys7XG4gICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgIHRoaXMubWF0Y2ggKz0gY2g7XG4gICAgICAgIHRoaXMubWF0Y2hlZCArPSBjaDtcbiAgICAgICAgdmFyIGxpbmVzID0gY2gubWF0Y2goLyg/Olxcclxcbj98XFxuKS4qL2cpO1xuICAgICAgICBpZiAobGluZXMpIHtcbiAgICAgICAgICAgIHRoaXMueXlsaW5lbm8rKztcbiAgICAgICAgICAgIHRoaXMueXlsbG9jLmxhc3RfbGluZSsrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy55eWxsb2MubGFzdF9jb2x1bW4rKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykgdGhpcy55eWxsb2MucmFuZ2VbMV0rKztcblxuICAgICAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnNsaWNlKDEpO1xuICAgICAgICByZXR1cm4gY2g7XG4gICAgfSxcbnVucHV0OmZ1bmN0aW9uIChjaCkge1xuICAgICAgICB2YXIgbGVuID0gY2gubGVuZ3RoO1xuICAgICAgICB2YXIgbGluZXMgPSBjaC5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuXG4gICAgICAgIHRoaXMuX2lucHV0ID0gY2ggKyB0aGlzLl9pbnB1dDtcbiAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLnl5dGV4dC5zdWJzdHIoMCwgdGhpcy55eXRleHQubGVuZ3RoLWxlbi0xKTtcbiAgICAgICAgLy90aGlzLnl5bGVuZyAtPSBsZW47XG4gICAgICAgIHRoaXMub2Zmc2V0IC09IGxlbjtcbiAgICAgICAgdmFyIG9sZExpbmVzID0gdGhpcy5tYXRjaC5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuICAgICAgICB0aGlzLm1hdGNoID0gdGhpcy5tYXRjaC5zdWJzdHIoMCwgdGhpcy5tYXRjaC5sZW5ndGgtMSk7XG4gICAgICAgIHRoaXMubWF0Y2hlZCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aC0xKTtcblxuICAgICAgICBpZiAobGluZXMubGVuZ3RoLTEpIHRoaXMueXlsaW5lbm8gLT0gbGluZXMubGVuZ3RoLTE7XG4gICAgICAgIHZhciByID0gdGhpcy55eWxsb2MucmFuZ2U7XG5cbiAgICAgICAgdGhpcy55eWxsb2MgPSB7Zmlyc3RfbGluZTogdGhpcy55eWxsb2MuZmlyc3RfbGluZSxcbiAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8rMSxcbiAgICAgICAgICBmaXJzdF9jb2x1bW46IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbixcbiAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgP1xuICAgICAgICAgICAgICAobGluZXMubGVuZ3RoID09PSBvbGRMaW5lcy5sZW5ndGggPyB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4gOiAwKSArIG9sZExpbmVzW29sZExpbmVzLmxlbmd0aCAtIGxpbmVzLmxlbmd0aF0ubGVuZ3RoIC0gbGluZXNbMF0ubGVuZ3RoOlxuICAgICAgICAgICAgICB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4gLSBsZW5cbiAgICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZSA9IFtyWzBdLCByWzBdICsgdGhpcy55eWxlbmcgLSBsZW5dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5tb3JlOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fbW9yZSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5sZXNzOmZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHRoaXMudW5wdXQodGhpcy5tYXRjaC5zbGljZShuKSk7XG4gICAgfSxcbnBhc3RJbnB1dDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwYXN0ID0gdGhpcy5tYXRjaGVkLnN1YnN0cigwLCB0aGlzLm1hdGNoZWQubGVuZ3RoIC0gdGhpcy5tYXRjaC5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gKHBhc3QubGVuZ3RoID4gMjAgPyAnLi4uJzonJykgKyBwYXN0LnN1YnN0cigtMjApLnJlcGxhY2UoL1xcbi9nLCBcIlwiKTtcbiAgICB9LFxudXBjb21pbmdJbnB1dDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXh0ID0gdGhpcy5tYXRjaDtcbiAgICAgICAgaWYgKG5leHQubGVuZ3RoIDwgMjApIHtcbiAgICAgICAgICAgIG5leHQgKz0gdGhpcy5faW5wdXQuc3Vic3RyKDAsIDIwLW5leHQubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKG5leHQuc3Vic3RyKDAsMjApKyhuZXh0Lmxlbmd0aCA+IDIwID8gJy4uLic6JycpKS5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG4gICAgfSxcbnNob3dQb3NpdGlvbjpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwcmUgPSB0aGlzLnBhc3RJbnB1dCgpO1xuICAgICAgICB2YXIgYyA9IG5ldyBBcnJheShwcmUubGVuZ3RoICsgMSkuam9pbihcIi1cIik7XG4gICAgICAgIHJldHVybiBwcmUgKyB0aGlzLnVwY29taW5nSW5wdXQoKSArIFwiXFxuXCIgKyBjK1wiXlwiO1xuICAgIH0sXG5uZXh0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuRU9GO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5faW5wdXQpIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgdmFyIHRva2VuLFxuICAgICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgICB0ZW1wTWF0Y2gsXG4gICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgIGNvbCxcbiAgICAgICAgICAgIGxpbmVzO1xuICAgICAgICBpZiAoIXRoaXMuX21vcmUpIHtcbiAgICAgICAgICAgIHRoaXMueXl0ZXh0ID0gJyc7XG4gICAgICAgICAgICB0aGlzLm1hdGNoID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJ1bGVzID0gdGhpcy5fY3VycmVudFJ1bGVzKCk7XG4gICAgICAgIGZvciAodmFyIGk9MDtpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRlbXBNYXRjaCA9IHRoaXMuX2lucHV0Lm1hdGNoKHRoaXMucnVsZXNbcnVsZXNbaV1dKTtcbiAgICAgICAgICAgIGlmICh0ZW1wTWF0Y2ggJiYgKCFtYXRjaCB8fCB0ZW1wTWF0Y2hbMF0ubGVuZ3RoID4gbWF0Y2hbMF0ubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIG1hdGNoID0gdGVtcE1hdGNoO1xuICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5mbGV4KSBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGxpbmVzID0gbWF0Y2hbMF0ubWF0Y2goLyg/Olxcclxcbj98XFxuKS4qL2cpO1xuICAgICAgICAgICAgaWYgKGxpbmVzKSB0aGlzLnl5bGluZW5vICs9IGxpbmVzLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMueXlsbG9jID0ge2ZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmxhc3RfbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfbGluZTogdGhpcy55eWxpbmVubysxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfY29sdW1uOiBsaW5lcyA/IGxpbmVzW2xpbmVzLmxlbmd0aC0xXS5sZW5ndGgtbGluZXNbbGluZXMubGVuZ3RoLTFdLm1hdGNoKC9cXHI/XFxuPy8pWzBdLmxlbmd0aCA6IHRoaXMueXlsbG9jLmxhc3RfY29sdW1uICsgbWF0Y2hbMF0ubGVuZ3RofTtcbiAgICAgICAgICAgIHRoaXMueXl0ZXh0ICs9IG1hdGNoWzBdO1xuICAgICAgICAgICAgdGhpcy5tYXRjaCArPSBtYXRjaFswXTtcbiAgICAgICAgICAgIHRoaXMubWF0Y2hlcyA9IG1hdGNoO1xuICAgICAgICAgICAgdGhpcy55eWxlbmcgPSB0aGlzLnl5dGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jLnJhbmdlID0gW3RoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArPSB0aGlzLnl5bGVuZ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9tb3JlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnNsaWNlKG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLm1hdGNoZWQgKz0gbWF0Y2hbMF07XG4gICAgICAgICAgICB0b2tlbiA9IHRoaXMucGVyZm9ybUFjdGlvbi5jYWxsKHRoaXMsIHRoaXMueXksIHRoaXMsIHJ1bGVzW2luZGV4XSx0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoLTFdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRvbmUgJiYgdGhpcy5faW5wdXQpIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHRva2VuKSByZXR1cm4gdG9rZW47XG4gICAgICAgICAgICBlbHNlIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faW5wdXQgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkVPRjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXJyb3IoJ0xleGljYWwgZXJyb3Igb24gbGluZSAnKyh0aGlzLnl5bGluZW5vKzEpKycuIFVucmVjb2duaXplZCB0ZXh0LlxcbicrdGhpcy5zaG93UG9zaXRpb24oKSxcbiAgICAgICAgICAgICAgICAgICAge3RleHQ6IFwiXCIsIHRva2VuOiBudWxsLCBsaW5lOiB0aGlzLnl5bGluZW5vfSk7XG4gICAgICAgIH1cbiAgICB9LFxubGV4OmZ1bmN0aW9uIGxleCAoKSB7XG4gICAgICAgIHZhciByID0gdGhpcy5uZXh0KCk7XG4gICAgICAgIGlmICh0eXBlb2YgciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGV4KCk7XG4gICAgICAgIH1cbiAgICB9LFxuYmVnaW46ZnVuY3Rpb24gYmVnaW4gKGNvbmRpdGlvbikge1xuICAgICAgICB0aGlzLmNvbmRpdGlvblN0YWNrLnB1c2goY29uZGl0aW9uKTtcbiAgICB9LFxucG9wU3RhdGU6ZnVuY3Rpb24gcG9wU3RhdGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFjay5wb3AoKTtcbiAgICB9LFxuX2N1cnJlbnRSdWxlczpmdW5jdGlvbiBfY3VycmVudFJ1bGVzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uc1t0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoLTFdXS5ydWxlcztcbiAgICB9LFxudG9wU3RhdGU6ZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aC0yXTtcbiAgICB9LFxucHVzaFN0YXRlOmZ1bmN0aW9uIGJlZ2luIChjb25kaXRpb24pIHtcbiAgICAgICAgdGhpcy5iZWdpbihjb25kaXRpb24pO1xuICAgIH19KTtcbmxleGVyLm9wdGlvbnMgPSB7fTtcbmxleGVyLnBlcmZvcm1BY3Rpb24gPSBmdW5jdGlvbiBhbm9ueW1vdXMoeXkseXlfLCRhdm9pZGluZ19uYW1lX2NvbGxpc2lvbnMsWVlfU1RBUlRcbikge1xuXG5cbmZ1bmN0aW9uIHN0cmlwKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIHl5Xy55eXRleHQgPSB5eV8ueXl0ZXh0LnN1YnN0cmluZyhzdGFydCwgeXlfLnl5bGVuZyAtIGVuZCArIHN0YXJ0KTtcbn1cblxuXG52YXIgWVlTVEFURT1ZWV9TVEFSVFxuc3dpdGNoKCRhdm9pZGluZ19uYW1lX2NvbGxpc2lvbnMpIHtcbmNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoeXlfLnl5dGV4dC5zbGljZSgtMikgPT09IFwiXFxcXFxcXFxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwKDAsMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbihcIm11XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoeXlfLnl5dGV4dC5zbGljZSgtMSkgPT09IFwiXFxcXFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXAoMCwxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKFwiZW11XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oXCJtdVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih5eV8ueXl0ZXh0KSByZXR1cm4gMTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmJyZWFrO1xuY2FzZSAxOnJldHVybiAxNTtcbmJyZWFrO1xuY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuYnJlYWs7XG5jYXNlIDM6dGhpcy5iZWdpbigncmF3Jyk7IHJldHVybiAxNTtcbmJyZWFrO1xuY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG91bGQgYmUgdXNpbmcgYHRoaXMudG9wU3RhdGUoKWAgYmVsb3csIGJ1dCBpdCBjdXJyZW50bHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm5zIHRoZSBzZWNvbmQgdG9wIGluc3RlYWQgb2YgdGhlIGZpcnN0IHRvcC4gT3BlbmVkIGFuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXNzdWUgYWJvdXQgaXQgYXQgaHR0cHM6Ly9naXRodWIuY29tL3phYWNoL2ppc29uL2lzc3Vlcy8yOTFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aC0xXSA9PT0gJ3JhdycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXAoNSwgOSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0VORF9SQVdfQkxPQ0snO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuYnJlYWs7XG5jYXNlIDU6IHJldHVybiAxNTsgXG5icmVhaztcbmNhc2UgNjpcbiAgdGhpcy5wb3BTdGF0ZSgpO1xuICByZXR1cm4gMTQ7XG5cbmJyZWFrO1xuY2FzZSA3OnJldHVybiA2NTtcbmJyZWFrO1xuY2FzZSA4OnJldHVybiA2ODtcbmJyZWFrO1xuY2FzZSA5OiByZXR1cm4gMTk7IFxuYnJlYWs7XG5jYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKCdyYXcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmJyZWFrO1xuY2FzZSAxMTpyZXR1cm4gNTU7XG5icmVhaztcbmNhc2UgMTI6cmV0dXJuIDYwO1xuYnJlYWs7XG5jYXNlIDEzOnJldHVybiAyOTtcbmJyZWFrO1xuY2FzZSAxNDpyZXR1cm4gNDc7XG5icmVhaztcbmNhc2UgMTU6dGhpcy5wb3BTdGF0ZSgpOyByZXR1cm4gNDQ7XG5icmVhaztcbmNhc2UgMTY6dGhpcy5wb3BTdGF0ZSgpOyByZXR1cm4gNDQ7XG5icmVhaztcbmNhc2UgMTc6cmV0dXJuIDM0O1xuYnJlYWs7XG5jYXNlIDE4OnJldHVybiAzOTtcbmJyZWFrO1xuY2FzZSAxOTpyZXR1cm4gNTE7XG5icmVhaztcbmNhc2UgMjA6cmV0dXJuIDQ4O1xuYnJlYWs7XG5jYXNlIDIxOlxuICB0aGlzLnVucHV0KHl5Xy55eXRleHQpO1xuICB0aGlzLnBvcFN0YXRlKCk7XG4gIHRoaXMuYmVnaW4oJ2NvbScpO1xuXG5icmVhaztcbmNhc2UgMjI6XG4gIHRoaXMucG9wU3RhdGUoKTtcbiAgcmV0dXJuIDE0O1xuXG5icmVhaztcbmNhc2UgMjM6cmV0dXJuIDQ4O1xuYnJlYWs7XG5jYXNlIDI0OnJldHVybiA3MztcbmJyZWFrO1xuY2FzZSAyNTpyZXR1cm4gNzI7XG5icmVhaztcbmNhc2UgMjY6cmV0dXJuIDcyO1xuYnJlYWs7XG5jYXNlIDI3OnJldHVybiA4NztcbmJyZWFrO1xuY2FzZSAyODovLyBpZ25vcmUgd2hpdGVzcGFjZVxuYnJlYWs7XG5jYXNlIDI5OnRoaXMucG9wU3RhdGUoKTsgcmV0dXJuIDU0O1xuYnJlYWs7XG5jYXNlIDMwOnRoaXMucG9wU3RhdGUoKTsgcmV0dXJuIDMzO1xuYnJlYWs7XG5jYXNlIDMxOnl5Xy55eXRleHQgPSBzdHJpcCgxLDIpLnJlcGxhY2UoL1xcXFxcIi9nLCdcIicpOyByZXR1cm4gODA7XG5icmVhaztcbmNhc2UgMzI6eXlfLnl5dGV4dCA9IHN0cmlwKDEsMikucmVwbGFjZSgvXFxcXCcvZyxcIidcIik7IHJldHVybiA4MDtcbmJyZWFrO1xuY2FzZSAzMzpyZXR1cm4gODU7XG5icmVhaztcbmNhc2UgMzQ6cmV0dXJuIDgyO1xuYnJlYWs7XG5jYXNlIDM1OnJldHVybiA4MjtcbmJyZWFrO1xuY2FzZSAzNjpyZXR1cm4gODM7XG5icmVhaztcbmNhc2UgMzc6cmV0dXJuIDg0O1xuYnJlYWs7XG5jYXNlIDM4OnJldHVybiA4MTtcbmJyZWFrO1xuY2FzZSAzOTpyZXR1cm4gNzU7XG5icmVhaztcbmNhc2UgNDA6cmV0dXJuIDc3O1xuYnJlYWs7XG5jYXNlIDQxOnJldHVybiA3MjtcbmJyZWFrO1xuY2FzZSA0Mjp5eV8ueXl0ZXh0ID0geXlfLnl5dGV4dC5yZXBsYWNlKC9cXFxcKFtcXFxcXFxdXSkvZywnJDEnKTsgcmV0dXJuIDcyO1xuYnJlYWs7XG5jYXNlIDQzOnJldHVybiAnSU5WQUxJRCc7XG5icmVhaztcbmNhc2UgNDQ6cmV0dXJuIDU7XG5icmVhaztcbn1cbn07XG5sZXhlci5ydWxlcyA9IFsvXig/OlteXFx4MDBdKj8oPz0oXFx7XFx7KSkpLywvXig/OlteXFx4MDBdKykvLC9eKD86W15cXHgwMF17Mix9Pyg/PShcXHtcXHt8XFxcXFxce1xce3xcXFxcXFxcXFxce1xce3wkKSkpLywvXig/Olxce1xce1xce1xceyg/PVteXFwvXSkpLywvXig/Olxce1xce1xce1xce1xcL1teXFxzIVwiIyUtLFxcLlxcLzstPkBcXFstXFxeYFxcey1+XSsoPz1bPX1cXHNcXC8uXSlcXH1cXH1cXH1cXH0pLywvXig/OlteXFx4MDBdKz8oPz0oXFx7XFx7XFx7XFx7KSkpLywvXig/OltcXHNcXFNdKj8tLSh+KT9cXH1cXH0pLywvXig/OlxcKCkvLC9eKD86XFwpKS8sL14oPzpcXHtcXHtcXHtcXHspLywvXig/OlxcfVxcfVxcfVxcfSkvLC9eKD86XFx7XFx7KH4pPz4pLywvXig/Olxce1xceyh+KT8jPikvLC9eKD86XFx7XFx7KH4pPyNcXCo/KS8sL14oPzpcXHtcXHsofik/XFwvKS8sL14oPzpcXHtcXHsofik/XFxeXFxzKih+KT9cXH1cXH0pLywvXig/Olxce1xceyh+KT9cXHMqZWxzZVxccyoofik/XFx9XFx9KS8sL14oPzpcXHtcXHsofik/XFxeKS8sL14oPzpcXHtcXHsofik/XFxzKmVsc2VcXGIpLywvXig/Olxce1xceyh+KT9cXHspLywvXig/Olxce1xceyh+KT8mKS8sL14oPzpcXHtcXHsofik/IS0tKS8sL14oPzpcXHtcXHsofik/IVtcXHNcXFNdKj9cXH1cXH0pLywvXig/Olxce1xceyh+KT9cXCo/KS8sL14oPzo9KS8sL14oPzpcXC5cXC4pLywvXig/OlxcLig/PShbPX59XFxzXFwvLil8XSkpKS8sL14oPzpbXFwvLl0pLywvXig/OlxccyspLywvXig/OlxcfSh+KT9cXH1cXH0pLywvXig/Oih+KT9cXH1cXH0pLywvXig/OlwiKFxcXFxbXCJdfFteXCJdKSpcIikvLC9eKD86JyhcXFxcWyddfFteJ10pKicpLywvXig/OkApLywvXig/OnRydWUoPz0oW359XFxzKV0pKSkvLC9eKD86ZmFsc2UoPz0oW359XFxzKV0pKSkvLC9eKD86dW5kZWZpbmVkKD89KFt+fVxccyldKSkpLywvXig/Om51bGwoPz0oW359XFxzKV0pKSkvLC9eKD86LT9bMC05XSsoPzpcXC5bMC05XSspPyg/PShbfn1cXHMpXSkpKS8sL14oPzphc1xccytcXHwpLywvXig/OlxcfCkvLC9eKD86KFteXFxzIVwiIyUtLFxcLlxcLzstPkBcXFstXFxeYFxcey1+XSsoPz0oWz1+fVxcc1xcLy4pfF0pKSkpLywvXig/OlxcWyhcXFxcXFxdfFteXFxdXSkqXFxdKS8sL14oPzouKS8sL14oPzokKS9dO1xubGV4ZXIuY29uZGl0aW9ucyA9IHtcIm11XCI6e1wicnVsZXNcIjpbNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTksMjAsMjEsMjIsMjMsMjQsMjUsMjYsMjcsMjgsMjksMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDRdLFwiaW5jbHVzaXZlXCI6ZmFsc2V9LFwiZW11XCI6e1wicnVsZXNcIjpbMl0sXCJpbmNsdXNpdmVcIjpmYWxzZX0sXCJjb21cIjp7XCJydWxlc1wiOls2XSxcImluY2x1c2l2ZVwiOmZhbHNlfSxcInJhd1wiOntcInJ1bGVzXCI6WzMsNCw1XSxcImluY2x1c2l2ZVwiOmZhbHNlfSxcIklOSVRJQUxcIjp7XCJydWxlc1wiOlswLDEsNDRdLFwiaW5jbHVzaXZlXCI6dHJ1ZX19O1xucmV0dXJuIGxleGVyO30pKClcbnBhcnNlci5sZXhlciA9IGxleGVyO1xuZnVuY3Rpb24gUGFyc2VyICgpIHsgdGhpcy55eSA9IHt9OyB9UGFyc2VyLnByb3RvdHlwZSA9IHBhcnNlcjtwYXJzZXIuUGFyc2VyID0gUGFyc2VyO1xucmV0dXJuIG5ldyBQYXJzZXI7XG59KSgpO2V4cG9ydCBkZWZhdWx0IGhhbmRsZWJhcnM7XG4iLCJpbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmZ1bmN0aW9uIFZpc2l0b3IoKSB7XG4gIHRoaXMucGFyZW50cyA9IFtdO1xufVxuXG5WaXNpdG9yLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFZpc2l0b3IsXG4gIG11dGF0aW5nOiBmYWxzZSxcblxuICAvLyBWaXNpdHMgYSBnaXZlbiB2YWx1ZS4gSWYgbXV0YXRpbmcsIHdpbGwgcmVwbGFjZSB0aGUgdmFsdWUgaWYgbmVjZXNzYXJ5LlxuICBhY2NlcHRLZXk6IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLmFjY2VwdChub2RlW25hbWVdKTtcbiAgICBpZiAodGhpcy5tdXRhdGluZykge1xuICAgICAgLy8gSGFja3kgc2FuaXR5IGNoZWNrOiBUaGlzIG1heSBoYXZlIGEgZmV3IGZhbHNlIHBvc2l0aXZlcyBmb3IgdHlwZSBmb3IgdGhlIGhlbHBlclxuICAgICAgLy8gbWV0aG9kcyBidXQgd2lsbCBnZW5lcmFsbHkgZG8gdGhlIHJpZ2h0IHRoaW5nIHdpdGhvdXQgYSBsb3Qgb2Ygb3ZlcmhlYWQuXG4gICAgICBpZiAodmFsdWUgJiYgIVZpc2l0b3IucHJvdG90eXBlW3ZhbHVlLnR5cGVdKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXG4gICAgICAgICAgJ1VuZXhwZWN0ZWQgbm9kZSB0eXBlIFwiJyArXG4gICAgICAgICAgICB2YWx1ZS50eXBlICtcbiAgICAgICAgICAgICdcIiBmb3VuZCB3aGVuIGFjY2VwdGluZyAnICtcbiAgICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgJyBvbiAnICtcbiAgICAgICAgICAgIG5vZGUudHlwZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgbm9kZVtuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgfSxcblxuICAvLyBQZXJmb3JtcyBhbiBhY2NlcHQgb3BlcmF0aW9uIHdpdGggYWRkZWQgc2FuaXR5IGNoZWNrIHRvIGVuc3VyZVxuICAvLyByZXF1aXJlZCBrZXlzIGFyZSBub3QgcmVtb3ZlZC5cbiAgYWNjZXB0UmVxdWlyZWQ6IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgICB0aGlzLmFjY2VwdEtleShub2RlLCBuYW1lKTtcblxuICAgIGlmICghbm9kZVtuYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihub2RlLnR5cGUgKyAnIHJlcXVpcmVzICcgKyBuYW1lKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gVHJhdmVyc2VzIGEgZ2l2ZW4gYXJyYXkuIElmIG11dGF0aW5nLCBlbXB0eSByZXNwbnNlcyB3aWxsIGJlIHJlbW92ZWRcbiAgLy8gZm9yIGNoaWxkIGVsZW1lbnRzLlxuICBhY2NlcHRBcnJheTogZnVuY3Rpb24oYXJyYXkpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5hY2NlcHRLZXkoYXJyYXksIGkpO1xuXG4gICAgICBpZiAoIWFycmF5W2ldKSB7XG4gICAgICAgIGFycmF5LnNwbGljZShpLCAxKTtcbiAgICAgICAgaS0tO1xuICAgICAgICBsLS07XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGFjY2VwdDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKCFvYmplY3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogU2FuaXR5IGNvZGUgKi9cbiAgICBpZiAoIXRoaXNbb2JqZWN0LnR5cGVdKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdVbmtub3duIHR5cGU6ICcgKyBvYmplY3QudHlwZSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jdXJyZW50KSB7XG4gICAgICB0aGlzLnBhcmVudHMudW5zaGlmdCh0aGlzLmN1cnJlbnQpO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnQgPSBvYmplY3Q7XG5cbiAgICBsZXQgcmV0ID0gdGhpc1tvYmplY3QudHlwZV0ob2JqZWN0KTtcblxuICAgIHRoaXMuY3VycmVudCA9IHRoaXMucGFyZW50cy5zaGlmdCgpO1xuXG4gICAgaWYgKCF0aGlzLm11dGF0aW5nIHx8IHJldCkge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9IGVsc2UgaWYgKHJldCAhPT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuICB9LFxuXG4gIFByb2dyYW06IGZ1bmN0aW9uKHByb2dyYW0pIHtcbiAgICB0aGlzLmFjY2VwdEFycmF5KHByb2dyYW0uYm9keSk7XG4gIH0sXG5cbiAgTXVzdGFjaGVTdGF0ZW1lbnQ6IHZpc2l0U3ViRXhwcmVzc2lvbixcbiAgRGVjb3JhdG9yOiB2aXNpdFN1YkV4cHJlc3Npb24sXG5cbiAgQmxvY2tTdGF0ZW1lbnQ6IHZpc2l0QmxvY2ssXG4gIERlY29yYXRvckJsb2NrOiB2aXNpdEJsb2NrLFxuXG4gIFBhcnRpYWxTdGF0ZW1lbnQ6IHZpc2l0UGFydGlhbCxcbiAgUGFydGlhbEJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbihwYXJ0aWFsKSB7XG4gICAgdmlzaXRQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCk7XG5cbiAgICB0aGlzLmFjY2VwdEtleShwYXJ0aWFsLCAncHJvZ3JhbScpO1xuICB9LFxuXG4gIENvbnRlbnRTdGF0ZW1lbnQ6IGZ1bmN0aW9uKC8qIGNvbnRlbnQgKi8pIHt9LFxuICBDb21tZW50U3RhdGVtZW50OiBmdW5jdGlvbigvKiBjb21tZW50ICovKSB7fSxcblxuICBTdWJFeHByZXNzaW9uOiB2aXNpdFN1YkV4cHJlc3Npb24sXG5cbiAgUGF0aEV4cHJlc3Npb246IGZ1bmN0aW9uKC8qIHBhdGggKi8pIHt9LFxuXG4gIFN0cmluZ0xpdGVyYWw6IGZ1bmN0aW9uKC8qIHN0cmluZyAqLykge30sXG4gIE51bWJlckxpdGVyYWw6IGZ1bmN0aW9uKC8qIG51bWJlciAqLykge30sXG4gIEJvb2xlYW5MaXRlcmFsOiBmdW5jdGlvbigvKiBib29sICovKSB7fSxcbiAgVW5kZWZpbmVkTGl0ZXJhbDogZnVuY3Rpb24oLyogbGl0ZXJhbCAqLykge30sXG4gIE51bGxMaXRlcmFsOiBmdW5jdGlvbigvKiBsaXRlcmFsICovKSB7fSxcblxuICBIYXNoOiBmdW5jdGlvbihoYXNoKSB7XG4gICAgdGhpcy5hY2NlcHRBcnJheShoYXNoLnBhaXJzKTtcbiAgfSxcbiAgSGFzaFBhaXI6IGZ1bmN0aW9uKHBhaXIpIHtcbiAgICB0aGlzLmFjY2VwdFJlcXVpcmVkKHBhaXIsICd2YWx1ZScpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB2aXNpdFN1YkV4cHJlc3Npb24obXVzdGFjaGUpIHtcbiAgdGhpcy5hY2NlcHRSZXF1aXJlZChtdXN0YWNoZSwgJ3BhdGgnKTtcbiAgdGhpcy5hY2NlcHRBcnJheShtdXN0YWNoZS5wYXJhbXMpO1xuICB0aGlzLmFjY2VwdEtleShtdXN0YWNoZSwgJ2hhc2gnKTtcbn1cbmZ1bmN0aW9uIHZpc2l0QmxvY2soYmxvY2spIHtcbiAgdmlzaXRTdWJFeHByZXNzaW9uLmNhbGwodGhpcywgYmxvY2spO1xuXG4gIHRoaXMuYWNjZXB0S2V5KGJsb2NrLCAncHJvZ3JhbScpO1xuICB0aGlzLmFjY2VwdEtleShibG9jaywgJ2ludmVyc2UnKTtcbn1cbmZ1bmN0aW9uIHZpc2l0UGFydGlhbChwYXJ0aWFsKSB7XG4gIHRoaXMuYWNjZXB0UmVxdWlyZWQocGFydGlhbCwgJ25hbWUnKTtcbiAgdGhpcy5hY2NlcHRBcnJheShwYXJ0aWFsLnBhcmFtcyk7XG4gIHRoaXMuYWNjZXB0S2V5KHBhcnRpYWwsICdoYXNoJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpc2l0b3I7XG4iLCJpbXBvcnQgVmlzaXRvciBmcm9tICcuL3Zpc2l0b3InO1xuXG5mdW5jdGlvbiBXaGl0ZXNwYWNlQ29udHJvbChvcHRpb25zID0ge30pIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbn1cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZSA9IG5ldyBWaXNpdG9yKCk7XG5cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5Qcm9ncmFtID0gZnVuY3Rpb24ocHJvZ3JhbSkge1xuICBjb25zdCBkb1N0YW5kYWxvbmUgPSAhdGhpcy5vcHRpb25zLmlnbm9yZVN0YW5kYWxvbmU7XG5cbiAgbGV0IGlzUm9vdCA9ICF0aGlzLmlzUm9vdFNlZW47XG4gIHRoaXMuaXNSb290U2VlbiA9IHRydWU7XG5cbiAgbGV0IGJvZHkgPSBwcm9ncmFtLmJvZHk7XG4gIGZvciAobGV0IGkgPSAwLCBsID0gYm9keS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBsZXQgY3VycmVudCA9IGJvZHlbaV0sXG4gICAgICBzdHJpcCA9IHRoaXMuYWNjZXB0KGN1cnJlbnQpO1xuXG4gICAgaWYgKCFzdHJpcCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbGV0IF9pc1ByZXZXaGl0ZXNwYWNlID0gaXNQcmV2V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpLFxuICAgICAgX2lzTmV4dFdoaXRlc3BhY2UgPSBpc05leHRXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCksXG4gICAgICBvcGVuU3RhbmRhbG9uZSA9IHN0cmlwLm9wZW5TdGFuZGFsb25lICYmIF9pc1ByZXZXaGl0ZXNwYWNlLFxuICAgICAgY2xvc2VTdGFuZGFsb25lID0gc3RyaXAuY2xvc2VTdGFuZGFsb25lICYmIF9pc05leHRXaGl0ZXNwYWNlLFxuICAgICAgaW5saW5lU3RhbmRhbG9uZSA9XG4gICAgICAgIHN0cmlwLmlubGluZVN0YW5kYWxvbmUgJiYgX2lzUHJldldoaXRlc3BhY2UgJiYgX2lzTmV4dFdoaXRlc3BhY2U7XG5cbiAgICBpZiAoc3RyaXAuY2xvc2UpIHtcbiAgICAgIG9taXRSaWdodChib2R5LCBpLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKHN0cmlwLm9wZW4pIHtcbiAgICAgIG9taXRMZWZ0KGJvZHksIGksIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChkb1N0YW5kYWxvbmUgJiYgaW5saW5lU3RhbmRhbG9uZSkge1xuICAgICAgb21pdFJpZ2h0KGJvZHksIGkpO1xuXG4gICAgICBpZiAob21pdExlZnQoYm9keSwgaSkpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlIG9uIGEgc3RhbmRhbG9uZSBub2RlLCBzYXZlIHRoZSBpbmRlbnQgaW5mbyBmb3IgcGFydGlhbHNcbiAgICAgICAgaWYgKGN1cnJlbnQudHlwZSA9PT0gJ1BhcnRpYWxTdGF0ZW1lbnQnKSB7XG4gICAgICAgICAgLy8gUHVsbCBvdXQgdGhlIHdoaXRlc3BhY2UgZnJvbSB0aGUgZmluYWwgbGluZVxuICAgICAgICAgIGN1cnJlbnQuaW5kZW50ID0gLyhbIFxcdF0rJCkvLmV4ZWMoYm9keVtpIC0gMV0ub3JpZ2luYWwpWzFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkb1N0YW5kYWxvbmUgJiYgb3BlblN0YW5kYWxvbmUpIHtcbiAgICAgIG9taXRSaWdodCgoY3VycmVudC5wcm9ncmFtIHx8IGN1cnJlbnQuaW52ZXJzZSkuYm9keSk7XG5cbiAgICAgIC8vIFN0cmlwIG91dCB0aGUgcHJldmlvdXMgY29udGVudCBub2RlIGlmIGl0J3Mgd2hpdGVzcGFjZSBvbmx5XG4gICAgICBvbWl0TGVmdChib2R5LCBpKTtcbiAgICB9XG4gICAgaWYgKGRvU3RhbmRhbG9uZSAmJiBjbG9zZVN0YW5kYWxvbmUpIHtcbiAgICAgIC8vIEFsd2F5cyBzdHJpcCB0aGUgbmV4dCBub2RlXG4gICAgICBvbWl0UmlnaHQoYm9keSwgaSk7XG5cbiAgICAgIG9taXRMZWZ0KChjdXJyZW50LmludmVyc2UgfHwgY3VycmVudC5wcm9ncmFtKS5ib2R5KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJvZ3JhbTtcbn07XG5cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5CbG9ja1N0YXRlbWVudCA9IFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5EZWNvcmF0b3JCbG9jayA9IFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5QYXJ0aWFsQmxvY2tTdGF0ZW1lbnQgPSBmdW5jdGlvbihcbiAgYmxvY2tcbikge1xuICB0aGlzLmFjY2VwdChibG9jay5wcm9ncmFtKTtcbiAgdGhpcy5hY2NlcHQoYmxvY2suaW52ZXJzZSk7XG5cbiAgLy8gRmluZCB0aGUgaW52ZXJzZSBwcm9ncmFtIHRoYXQgaXMgaW52b2xlZCB3aXRoIHdoaXRlc3BhY2Ugc3RyaXBwaW5nLlxuICBsZXQgcHJvZ3JhbSA9IGJsb2NrLnByb2dyYW0gfHwgYmxvY2suaW52ZXJzZSxcbiAgICBpbnZlcnNlID0gYmxvY2sucHJvZ3JhbSAmJiBibG9jay5pbnZlcnNlLFxuICAgIGZpcnN0SW52ZXJzZSA9IGludmVyc2UsXG4gICAgbGFzdEludmVyc2UgPSBpbnZlcnNlO1xuXG4gIGlmIChpbnZlcnNlICYmIGludmVyc2UuY2hhaW5lZCkge1xuICAgIGZpcnN0SW52ZXJzZSA9IGludmVyc2UuYm9keVswXS5wcm9ncmFtO1xuXG4gICAgLy8gV2FsayB0aGUgaW52ZXJzZSBjaGFpbiB0byBmaW5kIHRoZSBsYXN0IGludmVyc2UgdGhhdCBpcyBhY3R1YWxseSBpbiB0aGUgY2hhaW4uXG4gICAgd2hpbGUgKGxhc3RJbnZlcnNlLmNoYWluZWQpIHtcbiAgICAgIGxhc3RJbnZlcnNlID0gbGFzdEludmVyc2UuYm9keVtsYXN0SW52ZXJzZS5ib2R5Lmxlbmd0aCAtIDFdLnByb2dyYW07XG4gICAgfVxuICB9XG5cbiAgbGV0IHN0cmlwID0ge1xuICAgIG9wZW46IGJsb2NrLm9wZW5TdHJpcC5vcGVuLFxuICAgIGNsb3NlOiBibG9jay5jbG9zZVN0cmlwLmNsb3NlLFxuXG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBzdGFuZGFsb25lIGNhbmRpYWN5LiBCYXNpY2FsbHkgZmxhZyBvdXIgY29udGVudCBhcyBiZWluZyBwb3NzaWJseSBzdGFuZGFsb25lXG4gICAgLy8gc28gb3VyIHBhcmVudCBjYW4gZGV0ZXJtaW5lIGlmIHdlIGFjdHVhbGx5IGFyZSBzdGFuZGFsb25lXG4gICAgb3BlblN0YW5kYWxvbmU6IGlzTmV4dFdoaXRlc3BhY2UocHJvZ3JhbS5ib2R5KSxcbiAgICBjbG9zZVN0YW5kYWxvbmU6IGlzUHJldldoaXRlc3BhY2UoKGZpcnN0SW52ZXJzZSB8fCBwcm9ncmFtKS5ib2R5KVxuICB9O1xuXG4gIGlmIChibG9jay5vcGVuU3RyaXAuY2xvc2UpIHtcbiAgICBvbWl0UmlnaHQocHJvZ3JhbS5ib2R5LCBudWxsLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChpbnZlcnNlKSB7XG4gICAgbGV0IGludmVyc2VTdHJpcCA9IGJsb2NrLmludmVyc2VTdHJpcDtcblxuICAgIGlmIChpbnZlcnNlU3RyaXAub3Blbikge1xuICAgICAgb21pdExlZnQocHJvZ3JhbS5ib2R5LCBudWxsLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoaW52ZXJzZVN0cmlwLmNsb3NlKSB7XG4gICAgICBvbWl0UmlnaHQoZmlyc3RJbnZlcnNlLmJvZHksIG51bGwsIHRydWUpO1xuICAgIH1cbiAgICBpZiAoYmxvY2suY2xvc2VTdHJpcC5vcGVuKSB7XG4gICAgICBvbWl0TGVmdChsYXN0SW52ZXJzZS5ib2R5LCBudWxsLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvLyBGaW5kIHN0YW5kYWxvbmUgZWxzZSBzdGF0bWVudHNcbiAgICBpZiAoXG4gICAgICAhdGhpcy5vcHRpb25zLmlnbm9yZVN0YW5kYWxvbmUgJiZcbiAgICAgIGlzUHJldldoaXRlc3BhY2UocHJvZ3JhbS5ib2R5KSAmJlxuICAgICAgaXNOZXh0V2hpdGVzcGFjZShmaXJzdEludmVyc2UuYm9keSlcbiAgICApIHtcbiAgICAgIG9taXRMZWZ0KHByb2dyYW0uYm9keSk7XG4gICAgICBvbWl0UmlnaHQoZmlyc3RJbnZlcnNlLmJvZHkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChibG9jay5jbG9zZVN0cmlwLm9wZW4pIHtcbiAgICBvbWl0TGVmdChwcm9ncmFtLmJvZHksIG51bGwsIHRydWUpO1xuICB9XG5cbiAgcmV0dXJuIHN0cmlwO1xufTtcblxuV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkRlY29yYXRvciA9IFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5NdXN0YWNoZVN0YXRlbWVudCA9IGZ1bmN0aW9uKFxuICBtdXN0YWNoZVxuKSB7XG4gIHJldHVybiBtdXN0YWNoZS5zdHJpcDtcbn07XG5cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5QYXJ0aWFsU3RhdGVtZW50ID0gV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkNvbW1lbnRTdGF0ZW1lbnQgPSBmdW5jdGlvbihcbiAgbm9kZVxuKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGxldCBzdHJpcCA9IG5vZGUuc3RyaXAgfHwge307XG4gIHJldHVybiB7XG4gICAgaW5saW5lU3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBvcGVuOiBzdHJpcC5vcGVuLFxuICAgIGNsb3NlOiBzdHJpcC5jbG9zZVxuICB9O1xufTtcblxuZnVuY3Rpb24gaXNQcmV2V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpIHtcbiAgaWYgKGkgPT09IHVuZGVmaW5lZCkge1xuICAgIGkgPSBib2R5Lmxlbmd0aDtcbiAgfVxuXG4gIC8vIE5vZGVzIHRoYXQgZW5kIHdpdGggbmV3bGluZXMgYXJlIGNvbnNpZGVyZWQgd2hpdGVzcGFjZSAoYnV0IGFyZSBzcGVjaWFsXG4gIC8vIGNhc2VkIGZvciBzdHJpcCBvcGVyYXRpb25zKVxuICBsZXQgcHJldiA9IGJvZHlbaSAtIDFdLFxuICAgIHNpYmxpbmcgPSBib2R5W2kgLSAyXTtcbiAgaWYgKCFwcmV2KSB7XG4gICAgcmV0dXJuIGlzUm9vdDtcbiAgfVxuXG4gIGlmIChwcmV2LnR5cGUgPT09ICdDb250ZW50U3RhdGVtZW50Jykge1xuICAgIHJldHVybiAoc2libGluZyB8fCAhaXNSb290ID8gL1xccj9cXG5cXHMqPyQvIDogLyhefFxccj9cXG4pXFxzKj8kLykudGVzdChcbiAgICAgIHByZXYub3JpZ2luYWxcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiBpc05leHRXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCkge1xuICBpZiAoaSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaSA9IC0xO1xuICB9XG5cbiAgbGV0IG5leHQgPSBib2R5W2kgKyAxXSxcbiAgICBzaWJsaW5nID0gYm9keVtpICsgMl07XG4gIGlmICghbmV4dCkge1xuICAgIHJldHVybiBpc1Jvb3Q7XG4gIH1cblxuICBpZiAobmV4dC50eXBlID09PSAnQ29udGVudFN0YXRlbWVudCcpIHtcbiAgICByZXR1cm4gKHNpYmxpbmcgfHwgIWlzUm9vdCA/IC9eXFxzKj9cXHI/XFxuLyA6IC9eXFxzKj8oXFxyP1xcbnwkKS8pLnRlc3QoXG4gICAgICBuZXh0Lm9yaWdpbmFsXG4gICAgKTtcbiAgfVxufVxuXG4vLyBNYXJrcyB0aGUgbm9kZSB0byB0aGUgcmlnaHQgb2YgdGhlIHBvc2l0aW9uIGFzIG9taXR0ZWQuXG4vLyBJLmUuIHt7Zm9vfX0nICcgd2lsbCBtYXJrIHRoZSAnICcgbm9kZSBhcyBvbWl0dGVkLlxuLy9cbi8vIElmIGkgaXMgdW5kZWZpbmVkLCB0aGVuIHRoZSBmaXJzdCBjaGlsZCB3aWxsIGJlIG1hcmtlZCBhcyBzdWNoLlxuLy9cbi8vIElmIG11bGl0cGxlIGlzIHRydXRoeSB0aGVuIGFsbCB3aGl0ZXNwYWNlIHdpbGwgYmUgc3RyaXBwZWQgb3V0IHVudGlsIG5vbi13aGl0ZXNwYWNlXG4vLyBjb250ZW50IGlzIG1ldC5cbmZ1bmN0aW9uIG9taXRSaWdodChib2R5LCBpLCBtdWx0aXBsZSkge1xuICBsZXQgY3VycmVudCA9IGJvZHlbaSA9PSBudWxsID8gMCA6IGkgKyAxXTtcbiAgaWYgKFxuICAgICFjdXJyZW50IHx8XG4gICAgY3VycmVudC50eXBlICE9PSAnQ29udGVudFN0YXRlbWVudCcgfHxcbiAgICAoIW11bHRpcGxlICYmIGN1cnJlbnQucmlnaHRTdHJpcHBlZClcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IG9yaWdpbmFsID0gY3VycmVudC52YWx1ZTtcbiAgY3VycmVudC52YWx1ZSA9IGN1cnJlbnQudmFsdWUucmVwbGFjZShcbiAgICBtdWx0aXBsZSA/IC9eXFxzKy8gOiAvXlsgXFx0XSpcXHI/XFxuPy8sXG4gICAgJydcbiAgKTtcbiAgY3VycmVudC5yaWdodFN0cmlwcGVkID0gY3VycmVudC52YWx1ZSAhPT0gb3JpZ2luYWw7XG59XG5cbi8vIE1hcmtzIHRoZSBub2RlIHRvIHRoZSBsZWZ0IG9mIHRoZSBwb3NpdGlvbiBhcyBvbWl0dGVkLlxuLy8gSS5lLiAnICd7e2Zvb319IHdpbGwgbWFyayB0aGUgJyAnIG5vZGUgYXMgb21pdHRlZC5cbi8vXG4vLyBJZiBpIGlzIHVuZGVmaW5lZCB0aGVuIHRoZSBsYXN0IGNoaWxkIHdpbGwgYmUgbWFya2VkIGFzIHN1Y2guXG4vL1xuLy8gSWYgbXVsaXRwbGUgaXMgdHJ1dGh5IHRoZW4gYWxsIHdoaXRlc3BhY2Ugd2lsbCBiZSBzdHJpcHBlZCBvdXQgdW50aWwgbm9uLXdoaXRlc3BhY2Vcbi8vIGNvbnRlbnQgaXMgbWV0LlxuZnVuY3Rpb24gb21pdExlZnQoYm9keSwgaSwgbXVsdGlwbGUpIHtcbiAgbGV0IGN1cnJlbnQgPSBib2R5W2kgPT0gbnVsbCA/IGJvZHkubGVuZ3RoIC0gMSA6IGkgLSAxXTtcbiAgaWYgKFxuICAgICFjdXJyZW50IHx8XG4gICAgY3VycmVudC50eXBlICE9PSAnQ29udGVudFN0YXRlbWVudCcgfHxcbiAgICAoIW11bHRpcGxlICYmIGN1cnJlbnQubGVmdFN0cmlwcGVkKVxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBXZSBvbWl0IHRoZSBsYXN0IG5vZGUgaWYgaXQncyB3aGl0ZXNwYWNlIG9ubHkgYW5kIG5vdCBwcmVjZWRlZCBieSBhIG5vbi1jb250ZW50IG5vZGUuXG4gIGxldCBvcmlnaW5hbCA9IGN1cnJlbnQudmFsdWU7XG4gIGN1cnJlbnQudmFsdWUgPSBjdXJyZW50LnZhbHVlLnJlcGxhY2UobXVsdGlwbGUgPyAvXFxzKyQvIDogL1sgXFx0XSskLywgJycpO1xuICBjdXJyZW50LmxlZnRTdHJpcHBlZCA9IGN1cnJlbnQudmFsdWUgIT09IG9yaWdpbmFsO1xuICByZXR1cm4gY3VycmVudC5sZWZ0U3RyaXBwZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdoaXRlc3BhY2VDb250cm9sO1xuIiwiaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZUNsb3NlKG9wZW4sIGNsb3NlKSB7XG4gIGNsb3NlID0gY2xvc2UucGF0aCA/IGNsb3NlLnBhdGgub3JpZ2luYWwgOiBjbG9zZTtcblxuICBpZiAob3Blbi5wYXRoLm9yaWdpbmFsICE9PSBjbG9zZSkge1xuICAgIGxldCBlcnJvck5vZGUgPSB7IGxvYzogb3Blbi5wYXRoLmxvYyB9O1xuXG4gICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcbiAgICAgIG9wZW4ucGF0aC5vcmlnaW5hbCArIFwiIGRvZXNuJ3QgbWF0Y2ggXCIgKyBjbG9zZSxcbiAgICAgIGVycm9yTm9kZVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNvdXJjZUxvY2F0aW9uKHNvdXJjZSwgbG9jSW5mbykge1xuICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgdGhpcy5zdGFydCA9IHtcbiAgICBsaW5lOiBsb2NJbmZvLmZpcnN0X2xpbmUsXG4gICAgY29sdW1uOiBsb2NJbmZvLmZpcnN0X2NvbHVtblxuICB9O1xuICB0aGlzLmVuZCA9IHtcbiAgICBsaW5lOiBsb2NJbmZvLmxhc3RfbGluZSxcbiAgICBjb2x1bW46IGxvY0luZm8ubGFzdF9jb2x1bW5cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlkKHRva2VuKSB7XG4gIGlmICgvXlxcWy4qXFxdJC8udGVzdCh0b2tlbikpIHtcbiAgICByZXR1cm4gdG9rZW4uc3Vic3RyaW5nKDEsIHRva2VuLmxlbmd0aCAtIDEpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBGbGFncyhvcGVuLCBjbG9zZSkge1xuICByZXR1cm4ge1xuICAgIG9wZW46IG9wZW4uY2hhckF0KDIpID09PSAnficsXG4gICAgY2xvc2U6IGNsb3NlLmNoYXJBdChjbG9zZS5sZW5ndGggLSAzKSA9PT0gJ34nXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcENvbW1lbnQoY29tbWVudCkge1xuICByZXR1cm4gY29tbWVudC5yZXBsYWNlKC9eXFx7XFx7fj8hLT8tPy8sICcnKS5yZXBsYWNlKC8tPy0/fj9cXH1cXH0kLywgJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVBhdGgoZGF0YSwgcGFydHMsIGxvYykge1xuICBsb2MgPSB0aGlzLmxvY0luZm8obG9jKTtcblxuICBsZXQgb3JpZ2luYWwgPSBkYXRhID8gJ0AnIDogJycsXG4gICAgZGlnID0gW10sXG4gICAgZGVwdGggPSAwO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gcGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IHBhcnQgPSBwYXJ0c1tpXS5wYXJ0LFxuICAgICAgLy8gSWYgd2UgaGF2ZSBbXSBzeW50YXggdGhlbiB3ZSBkbyBub3QgdHJlYXQgcGF0aCByZWZlcmVuY2VzIGFzIG9wZXJhdG9ycyxcbiAgICAgIC8vIGkuZS4gZm9vLlt0aGlzXSByZXNvbHZlcyB0byBhcHByb3hpbWF0ZWx5IGNvbnRleHQuZm9vWyd0aGlzJ11cbiAgICAgIGlzTGl0ZXJhbCA9IHBhcnRzW2ldLm9yaWdpbmFsICE9PSBwYXJ0O1xuICAgIG9yaWdpbmFsICs9IChwYXJ0c1tpXS5zZXBhcmF0b3IgfHwgJycpICsgcGFydDtcblxuICAgIGlmICghaXNMaXRlcmFsICYmIChwYXJ0ID09PSAnLi4nIHx8IHBhcnQgPT09ICcuJyB8fCBwYXJ0ID09PSAndGhpcycpKSB7XG4gICAgICBpZiAoZGlnLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignSW52YWxpZCBwYXRoOiAnICsgb3JpZ2luYWwsIHsgbG9jIH0pO1xuICAgICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICAgIGRlcHRoKys7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpZy5wdXNoKHBhcnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1BhdGhFeHByZXNzaW9uJyxcbiAgICBkYXRhLFxuICAgIGRlcHRoLFxuICAgIHBhcnRzOiBkaWcsXG4gICAgb3JpZ2luYWwsXG4gICAgbG9jXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlTXVzdGFjaGUocGF0aCwgcGFyYW1zLCBoYXNoLCBvcGVuLCBzdHJpcCwgbG9jSW5mbykge1xuICAvLyBNdXN0IHVzZSBjaGFyQXQgdG8gc3VwcG9ydCBJRSBwcmUtMTBcbiAgbGV0IGVzY2FwZUZsYWcgPSBvcGVuLmNoYXJBdCgzKSB8fCBvcGVuLmNoYXJBdCgyKSxcbiAgICBlc2NhcGVkID0gZXNjYXBlRmxhZyAhPT0gJ3snICYmIGVzY2FwZUZsYWcgIT09ICcmJztcblxuICBsZXQgZGVjb3JhdG9yID0gL1xcKi8udGVzdChvcGVuKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBkZWNvcmF0b3IgPyAnRGVjb3JhdG9yJyA6ICdNdXN0YWNoZVN0YXRlbWVudCcsXG4gICAgcGF0aCxcbiAgICBwYXJhbXMsXG4gICAgaGFzaCxcbiAgICBlc2NhcGVkLFxuICAgIHN0cmlwLFxuICAgIGxvYzogdGhpcy5sb2NJbmZvKGxvY0luZm8pXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlUmF3QmxvY2sob3BlblJhd0Jsb2NrLCBjb250ZW50cywgY2xvc2UsIGxvY0luZm8pIHtcbiAgdmFsaWRhdGVDbG9zZShvcGVuUmF3QmxvY2ssIGNsb3NlKTtcblxuICBsb2NJbmZvID0gdGhpcy5sb2NJbmZvKGxvY0luZm8pO1xuICBsZXQgcHJvZ3JhbSA9IHtcbiAgICB0eXBlOiAnUHJvZ3JhbScsXG4gICAgYm9keTogY29udGVudHMsXG4gICAgc3RyaXA6IHt9LFxuICAgIGxvYzogbG9jSW5mb1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0Jsb2NrU3RhdGVtZW50JyxcbiAgICBwYXRoOiBvcGVuUmF3QmxvY2sucGF0aCxcbiAgICBwYXJhbXM6IG9wZW5SYXdCbG9jay5wYXJhbXMsXG4gICAgaGFzaDogb3BlblJhd0Jsb2NrLmhhc2gsXG4gICAgcHJvZ3JhbSxcbiAgICBvcGVuU3RyaXA6IHt9LFxuICAgIGludmVyc2VTdHJpcDoge30sXG4gICAgY2xvc2VTdHJpcDoge30sXG4gICAgbG9jOiBsb2NJbmZvXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlQmxvY2soXG4gIG9wZW5CbG9jayxcbiAgcHJvZ3JhbSxcbiAgaW52ZXJzZUFuZFByb2dyYW0sXG4gIGNsb3NlLFxuICBpbnZlcnRlZCxcbiAgbG9jSW5mb1xuKSB7XG4gIGlmIChjbG9zZSAmJiBjbG9zZS5wYXRoKSB7XG4gICAgdmFsaWRhdGVDbG9zZShvcGVuQmxvY2ssIGNsb3NlKTtcbiAgfVxuXG4gIGxldCBkZWNvcmF0b3IgPSAvXFwqLy50ZXN0KG9wZW5CbG9jay5vcGVuKTtcblxuICBwcm9ncmFtLmJsb2NrUGFyYW1zID0gb3BlbkJsb2NrLmJsb2NrUGFyYW1zO1xuXG4gIGxldCBpbnZlcnNlLCBpbnZlcnNlU3RyaXA7XG5cbiAgaWYgKGludmVyc2VBbmRQcm9ncmFtKSB7XG4gICAgaWYgKGRlY29yYXRvcikge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcbiAgICAgICAgJ1VuZXhwZWN0ZWQgaW52ZXJzZSBibG9jayBvbiBkZWNvcmF0b3InLFxuICAgICAgICBpbnZlcnNlQW5kUHJvZ3JhbVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoaW52ZXJzZUFuZFByb2dyYW0uY2hhaW4pIHtcbiAgICAgIGludmVyc2VBbmRQcm9ncmFtLnByb2dyYW0uYm9keVswXS5jbG9zZVN0cmlwID0gY2xvc2Uuc3RyaXA7XG4gICAgfVxuXG4gICAgaW52ZXJzZVN0cmlwID0gaW52ZXJzZUFuZFByb2dyYW0uc3RyaXA7XG4gICAgaW52ZXJzZSA9IGludmVyc2VBbmRQcm9ncmFtLnByb2dyYW07XG4gIH1cblxuICBpZiAoaW52ZXJ0ZWQpIHtcbiAgICBpbnZlcnRlZCA9IGludmVyc2U7XG4gICAgaW52ZXJzZSA9IHByb2dyYW07XG4gICAgcHJvZ3JhbSA9IGludmVydGVkO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBkZWNvcmF0b3IgPyAnRGVjb3JhdG9yQmxvY2snIDogJ0Jsb2NrU3RhdGVtZW50JyxcbiAgICBwYXRoOiBvcGVuQmxvY2sucGF0aCxcbiAgICBwYXJhbXM6IG9wZW5CbG9jay5wYXJhbXMsXG4gICAgaGFzaDogb3BlbkJsb2NrLmhhc2gsXG4gICAgcHJvZ3JhbSxcbiAgICBpbnZlcnNlLFxuICAgIG9wZW5TdHJpcDogb3BlbkJsb2NrLnN0cmlwLFxuICAgIGludmVyc2VTdHJpcCxcbiAgICBjbG9zZVN0cmlwOiBjbG9zZSAmJiBjbG9zZS5zdHJpcCxcbiAgICBsb2M6IHRoaXMubG9jSW5mbyhsb2NJbmZvKVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVByb2dyYW0oc3RhdGVtZW50cywgbG9jKSB7XG4gIGlmICghbG9jICYmIHN0YXRlbWVudHMubGVuZ3RoKSB7XG4gICAgY29uc3QgZmlyc3RMb2MgPSBzdGF0ZW1lbnRzWzBdLmxvYyxcbiAgICAgIGxhc3RMb2MgPSBzdGF0ZW1lbnRzW3N0YXRlbWVudHMubGVuZ3RoIC0gMV0ubG9jO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoZmlyc3RMb2MgJiYgbGFzdExvYykge1xuICAgICAgbG9jID0ge1xuICAgICAgICBzb3VyY2U6IGZpcnN0TG9jLnNvdXJjZSxcbiAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICBsaW5lOiBmaXJzdExvYy5zdGFydC5saW5lLFxuICAgICAgICAgIGNvbHVtbjogZmlyc3RMb2Muc3RhcnQuY29sdW1uXG4gICAgICAgIH0sXG4gICAgICAgIGVuZDoge1xuICAgICAgICAgIGxpbmU6IGxhc3RMb2MuZW5kLmxpbmUsXG4gICAgICAgICAgY29sdW1uOiBsYXN0TG9jLmVuZC5jb2x1bW5cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdQcm9ncmFtJyxcbiAgICBib2R5OiBzdGF0ZW1lbnRzLFxuICAgIHN0cmlwOiB7fSxcbiAgICBsb2M6IGxvY1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVBhcnRpYWxCbG9jayhvcGVuLCBwcm9ncmFtLCBjbG9zZSwgbG9jSW5mbykge1xuICB2YWxpZGF0ZUNsb3NlKG9wZW4sIGNsb3NlKTtcblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQnLFxuICAgIG5hbWU6IG9wZW4ucGF0aCxcbiAgICBwYXJhbXM6IG9wZW4ucGFyYW1zLFxuICAgIGhhc2g6IG9wZW4uaGFzaCxcbiAgICBwcm9ncmFtLFxuICAgIG9wZW5TdHJpcDogb3Blbi5zdHJpcCxcbiAgICBjbG9zZVN0cmlwOiBjbG9zZSAmJiBjbG9zZS5zdHJpcCxcbiAgICBsb2M6IHRoaXMubG9jSW5mbyhsb2NJbmZvKVxuICB9O1xufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL1xuXG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5pbXBvcnQgeyBpc0FycmF5LCBpbmRleE9mLCBleHRlbmQgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgQVNUIGZyb20gJy4vYXN0JztcblxuY29uc3Qgc2xpY2UgPSBbXS5zbGljZTtcblxuZXhwb3J0IGZ1bmN0aW9uIENvbXBpbGVyKCkge31cblxuLy8gdGhlIGZvdW5kSGVscGVyIHJlZ2lzdGVyIHdpbGwgZGlzYW1iaWd1YXRlIGhlbHBlciBsb29rdXAgZnJvbSBmaW5kaW5nIGFcbi8vIGZ1bmN0aW9uIGluIGEgY29udGV4dC4gVGhpcyBpcyBuZWNlc3NhcnkgZm9yIG11c3RhY2hlIGNvbXBhdGliaWxpdHksIHdoaWNoXG4vLyByZXF1aXJlcyB0aGF0IGNvbnRleHQgZnVuY3Rpb25zIGluIGJsb2NrcyBhcmUgZXZhbHVhdGVkIGJ5IGJsb2NrSGVscGVyTWlzc2luZyxcbi8vIGFuZCB0aGVuIHByb2NlZWQgYXMgaWYgdGhlIHJlc3VsdGluZyB2YWx1ZSB3YXMgcHJvdmlkZWQgdG8gYmxvY2tIZWxwZXJNaXNzaW5nLlxuXG5Db21waWxlci5wcm90b3R5cGUgPSB7XG4gIGNvbXBpbGVyOiBDb21waWxlcixcblxuICBlcXVhbHM6IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgbGV0IGxlbiA9IHRoaXMub3Bjb2Rlcy5sZW5ndGg7XG4gICAgaWYgKG90aGVyLm9wY29kZXMubGVuZ3RoICE9PSBsZW4pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBsZXQgb3Bjb2RlID0gdGhpcy5vcGNvZGVzW2ldLFxuICAgICAgICBvdGhlck9wY29kZSA9IG90aGVyLm9wY29kZXNbaV07XG4gICAgICBpZiAoXG4gICAgICAgIG9wY29kZS5vcGNvZGUgIT09IG90aGVyT3Bjb2RlLm9wY29kZSB8fFxuICAgICAgICAhYXJnRXF1YWxzKG9wY29kZS5hcmdzLCBvdGhlck9wY29kZS5hcmdzKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXZSBrbm93IHRoYXQgbGVuZ3RoIGlzIHRoZSBzYW1lIGJldHdlZW4gdGhlIHR3byBhcnJheXMgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSB0aWVkXG4gICAgLy8gdG8gdGhlIG9wY29kZSBiZWhhdmlvciBhYm92ZS5cbiAgICBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoIXRoaXMuY2hpbGRyZW5baV0uZXF1YWxzKG90aGVyLmNoaWxkcmVuW2ldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgZ3VpZDogMCxcblxuICBjb21waWxlOiBmdW5jdGlvbihwcm9ncmFtLCBvcHRpb25zKSB7XG4gICAgdGhpcy5zb3VyY2VOb2RlID0gW107XG4gICAgdGhpcy5vcGNvZGVzID0gW107XG4gICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHJpbmdQYXJhbXMgPSBvcHRpb25zLnN0cmluZ1BhcmFtcztcbiAgICB0aGlzLnRyYWNrSWRzID0gb3B0aW9ucy50cmFja0lkcztcblxuICAgIG9wdGlvbnMuYmxvY2tQYXJhbXMgPSBvcHRpb25zLmJsb2NrUGFyYW1zIHx8IFtdO1xuXG4gICAgb3B0aW9ucy5rbm93bkhlbHBlcnMgPSBleHRlbmQoXG4gICAgICBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAge1xuICAgICAgICBoZWxwZXJNaXNzaW5nOiB0cnVlLFxuICAgICAgICBibG9ja0hlbHBlck1pc3Npbmc6IHRydWUsXG4gICAgICAgIGVhY2g6IHRydWUsXG4gICAgICAgIGlmOiB0cnVlLFxuICAgICAgICB1bmxlc3M6IHRydWUsXG4gICAgICAgIHdpdGg6IHRydWUsXG4gICAgICAgIGxvZzogdHJ1ZSxcbiAgICAgICAgbG9va3VwOiB0cnVlXG4gICAgICB9LFxuICAgICAgb3B0aW9ucy5rbm93bkhlbHBlcnNcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXMuYWNjZXB0KHByb2dyYW0pO1xuICB9LFxuXG4gIGNvbXBpbGVQcm9ncmFtOiBmdW5jdGlvbihwcm9ncmFtKSB7XG4gICAgbGV0IGNoaWxkQ29tcGlsZXIgPSBuZXcgdGhpcy5jb21waWxlcigpLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgICAgIHJlc3VsdCA9IGNoaWxkQ29tcGlsZXIuY29tcGlsZShwcm9ncmFtLCB0aGlzLm9wdGlvbnMpLFxuICAgICAgZ3VpZCA9IHRoaXMuZ3VpZCsrO1xuXG4gICAgdGhpcy51c2VQYXJ0aWFsID0gdGhpcy51c2VQYXJ0aWFsIHx8IHJlc3VsdC51c2VQYXJ0aWFsO1xuXG4gICAgdGhpcy5jaGlsZHJlbltndWlkXSA9IHJlc3VsdDtcbiAgICB0aGlzLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzIHx8IHJlc3VsdC51c2VEZXB0aHM7XG5cbiAgICByZXR1cm4gZ3VpZDtcbiAgfSxcblxuICBhY2NlcHQ6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogU2FuaXR5IGNvZGUgKi9cbiAgICBpZiAoIXRoaXNbbm9kZS50eXBlXSkge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbignVW5rbm93biB0eXBlOiAnICsgbm9kZS50eXBlLCBub2RlKTtcbiAgICB9XG5cbiAgICB0aGlzLnNvdXJjZU5vZGUudW5zaGlmdChub2RlKTtcbiAgICBsZXQgcmV0ID0gdGhpc1tub2RlLnR5cGVdKG5vZGUpO1xuICAgIHRoaXMuc291cmNlTm9kZS5zaGlmdCgpO1xuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgUHJvZ3JhbTogZnVuY3Rpb24ocHJvZ3JhbSkge1xuICAgIHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy51bnNoaWZ0KHByb2dyYW0uYmxvY2tQYXJhbXMpO1xuXG4gICAgbGV0IGJvZHkgPSBwcm9ncmFtLmJvZHksXG4gICAgICBib2R5TGVuZ3RoID0gYm9keS5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5TGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuYWNjZXB0KGJvZHlbaV0pO1xuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy5zaGlmdCgpO1xuXG4gICAgdGhpcy5pc1NpbXBsZSA9IGJvZHlMZW5ndGggPT09IDE7XG4gICAgdGhpcy5ibG9ja1BhcmFtcyA9IHByb2dyYW0uYmxvY2tQYXJhbXMgPyBwcm9ncmFtLmJsb2NrUGFyYW1zLmxlbmd0aCA6IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBCbG9ja1N0YXRlbWVudDogZnVuY3Rpb24oYmxvY2spIHtcbiAgICB0cmFuc2Zvcm1MaXRlcmFsVG9QYXRoKGJsb2NrKTtcblxuICAgIGxldCBwcm9ncmFtID0gYmxvY2sucHJvZ3JhbSxcbiAgICAgIGludmVyc2UgPSBibG9jay5pbnZlcnNlO1xuXG4gICAgcHJvZ3JhbSA9IHByb2dyYW0gJiYgdGhpcy5jb21waWxlUHJvZ3JhbShwcm9ncmFtKTtcbiAgICBpbnZlcnNlID0gaW52ZXJzZSAmJiB0aGlzLmNvbXBpbGVQcm9ncmFtKGludmVyc2UpO1xuXG4gICAgbGV0IHR5cGUgPSB0aGlzLmNsYXNzaWZ5U2V4cHIoYmxvY2spO1xuXG4gICAgaWYgKHR5cGUgPT09ICdoZWxwZXInKSB7XG4gICAgICB0aGlzLmhlbHBlclNleHByKGJsb2NrLCBwcm9ncmFtLCBpbnZlcnNlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzaW1wbGUnKSB7XG4gICAgICB0aGlzLnNpbXBsZVNleHByKGJsb2NrKTtcblxuICAgICAgLy8gbm93IHRoYXQgdGhlIHNpbXBsZSBtdXN0YWNoZSBpcyByZXNvbHZlZCwgd2UgbmVlZCB0b1xuICAgICAgLy8gZXZhbHVhdGUgaXQgYnkgZXhlY3V0aW5nIGBibG9ja0hlbHBlck1pc3NpbmdgXG4gICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xuICAgICAgdGhpcy5vcGNvZGUoJ2VtcHR5SGFzaCcpO1xuICAgICAgdGhpcy5vcGNvZGUoJ2Jsb2NrVmFsdWUnLCBibG9jay5wYXRoLm9yaWdpbmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hbWJpZ3VvdXNTZXhwcihibG9jaywgcHJvZ3JhbSwgaW52ZXJzZSk7XG5cbiAgICAgIC8vIG5vdyB0aGF0IHRoZSBzaW1wbGUgbXVzdGFjaGUgaXMgcmVzb2x2ZWQsIHdlIG5lZWQgdG9cbiAgICAgIC8vIGV2YWx1YXRlIGl0IGJ5IGV4ZWN1dGluZyBgYmxvY2tIZWxwZXJNaXNzaW5nYFxuICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgcHJvZ3JhbSk7XG4gICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBpbnZlcnNlKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdlbXB0eUhhc2gnKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdhbWJpZ3VvdXNCbG9ja1ZhbHVlJyk7XG4gICAgfVxuXG4gICAgdGhpcy5vcGNvZGUoJ2FwcGVuZCcpO1xuICB9LFxuXG4gIERlY29yYXRvckJsb2NrKGRlY29yYXRvcikge1xuICAgIGxldCBwcm9ncmFtID0gZGVjb3JhdG9yLnByb2dyYW0gJiYgdGhpcy5jb21waWxlUHJvZ3JhbShkZWNvcmF0b3IucHJvZ3JhbSk7XG4gICAgbGV0IHBhcmFtcyA9IHRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMoZGVjb3JhdG9yLCBwcm9ncmFtLCB1bmRlZmluZWQpLFxuICAgICAgcGF0aCA9IGRlY29yYXRvci5wYXRoO1xuXG4gICAgdGhpcy51c2VEZWNvcmF0b3JzID0gdHJ1ZTtcbiAgICB0aGlzLm9wY29kZSgncmVnaXN0ZXJEZWNvcmF0b3InLCBwYXJhbXMubGVuZ3RoLCBwYXRoLm9yaWdpbmFsKTtcbiAgfSxcblxuICBQYXJ0aWFsU3RhdGVtZW50OiBmdW5jdGlvbihwYXJ0aWFsKSB7XG4gICAgdGhpcy51c2VQYXJ0aWFsID0gdHJ1ZTtcblxuICAgIGxldCBwcm9ncmFtID0gcGFydGlhbC5wcm9ncmFtO1xuICAgIGlmIChwcm9ncmFtKSB7XG4gICAgICBwcm9ncmFtID0gdGhpcy5jb21waWxlUHJvZ3JhbShwYXJ0aWFsLnByb2dyYW0pO1xuICAgIH1cblxuICAgIGxldCBwYXJhbXMgPSBwYXJ0aWFsLnBhcmFtcztcbiAgICBpZiAocGFyYW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXG4gICAgICAgICdVbnN1cHBvcnRlZCBudW1iZXIgb2YgcGFydGlhbCBhcmd1bWVudHM6ICcgKyBwYXJhbXMubGVuZ3RoLFxuICAgICAgICBwYXJ0aWFsXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIXBhcmFtcy5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXhwbGljaXRQYXJ0aWFsQ29udGV4dCkge1xuICAgICAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCAndW5kZWZpbmVkJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXMucHVzaCh7IHR5cGU6ICdQYXRoRXhwcmVzc2lvbicsIHBhcnRzOiBbXSwgZGVwdGg6IDAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHBhcnRpYWxOYW1lID0gcGFydGlhbC5uYW1lLm9yaWdpbmFsLFxuICAgICAgaXNEeW5hbWljID0gcGFydGlhbC5uYW1lLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJztcbiAgICBpZiAoaXNEeW5hbWljKSB7XG4gICAgICB0aGlzLmFjY2VwdChwYXJ0aWFsLm5hbWUpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMocGFydGlhbCwgcHJvZ3JhbSwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIGxldCBpbmRlbnQgPSBwYXJ0aWFsLmluZGVudCB8fCAnJztcbiAgICBpZiAodGhpcy5vcHRpb25zLnByZXZlbnRJbmRlbnQgJiYgaW5kZW50KSB7XG4gICAgICB0aGlzLm9wY29kZSgnYXBwZW5kQ29udGVudCcsIGluZGVudCk7XG4gICAgICBpbmRlbnQgPSAnJztcbiAgICB9XG5cbiAgICB0aGlzLm9wY29kZSgnaW52b2tlUGFydGlhbCcsIGlzRHluYW1pYywgcGFydGlhbE5hbWUsIGluZGVudCk7XG4gICAgdGhpcy5vcGNvZGUoJ2FwcGVuZCcpO1xuICB9LFxuICBQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQ6IGZ1bmN0aW9uKHBhcnRpYWxCbG9jaykge1xuICAgIHRoaXMuUGFydGlhbFN0YXRlbWVudChwYXJ0aWFsQmxvY2spO1xuICB9LFxuXG4gIE11c3RhY2hlU3RhdGVtZW50OiBmdW5jdGlvbihtdXN0YWNoZSkge1xuICAgIHRoaXMuU3ViRXhwcmVzc2lvbihtdXN0YWNoZSk7XG5cbiAgICBpZiAobXVzdGFjaGUuZXNjYXBlZCAmJiAhdGhpcy5vcHRpb25zLm5vRXNjYXBlKSB7XG4gICAgICB0aGlzLm9wY29kZSgnYXBwZW5kRXNjYXBlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wY29kZSgnYXBwZW5kJyk7XG4gICAgfVxuICB9LFxuICBEZWNvcmF0b3IoZGVjb3JhdG9yKSB7XG4gICAgdGhpcy5EZWNvcmF0b3JCbG9jayhkZWNvcmF0b3IpO1xuICB9LFxuXG4gIENvbnRlbnRTdGF0ZW1lbnQ6IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICBpZiAoY29udGVudC52YWx1ZSkge1xuICAgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZENvbnRlbnQnLCBjb250ZW50LnZhbHVlKTtcbiAgICB9XG4gIH0sXG5cbiAgQ29tbWVudFN0YXRlbWVudDogZnVuY3Rpb24oKSB7fSxcblxuICBTdWJFeHByZXNzaW9uOiBmdW5jdGlvbihzZXhwcikge1xuICAgIHRyYW5zZm9ybUxpdGVyYWxUb1BhdGgoc2V4cHIpO1xuICAgIGxldCB0eXBlID0gdGhpcy5jbGFzc2lmeVNleHByKHNleHByKTtcblxuICAgIGlmICh0eXBlID09PSAnc2ltcGxlJykge1xuICAgICAgdGhpcy5zaW1wbGVTZXhwcihzZXhwcik7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnaGVscGVyJykge1xuICAgICAgdGhpcy5oZWxwZXJTZXhwcihzZXhwcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYW1iaWd1b3VzU2V4cHIoc2V4cHIpO1xuICAgIH1cbiAgfSxcbiAgYW1iaWd1b3VzU2V4cHI6IGZ1bmN0aW9uKHNleHByLCBwcm9ncmFtLCBpbnZlcnNlKSB7XG4gICAgbGV0IHBhdGggPSBzZXhwci5wYXRoLFxuICAgICAgbmFtZSA9IHBhdGgucGFydHNbMF0sXG4gICAgICBpc0Jsb2NrID0gcHJvZ3JhbSAhPSBudWxsIHx8IGludmVyc2UgIT0gbnVsbDtcblxuICAgIHRoaXMub3Bjb2RlKCdnZXRDb250ZXh0JywgcGF0aC5kZXB0aCk7XG5cbiAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcbiAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBpbnZlcnNlKTtcblxuICAgIHBhdGguc3RyaWN0ID0gdHJ1ZTtcbiAgICB0aGlzLmFjY2VwdChwYXRoKTtcblxuICAgIHRoaXMub3Bjb2RlKCdpbnZva2VBbWJpZ3VvdXMnLCBuYW1lLCBpc0Jsb2NrKTtcbiAgfSxcblxuICBzaW1wbGVTZXhwcjogZnVuY3Rpb24oc2V4cHIpIHtcbiAgICBsZXQgcGF0aCA9IHNleHByLnBhdGg7XG4gICAgcGF0aC5zdHJpY3QgPSB0cnVlO1xuICAgIHRoaXMuYWNjZXB0KHBhdGgpO1xuICAgIHRoaXMub3Bjb2RlKCdyZXNvbHZlUG9zc2libGVMYW1iZGEnKTtcbiAgfSxcblxuICBoZWxwZXJTZXhwcjogZnVuY3Rpb24oc2V4cHIsIHByb2dyYW0sIGludmVyc2UpIHtcbiAgICBsZXQgcGFyYW1zID0gdGhpcy5zZXR1cEZ1bGxNdXN0YWNoZVBhcmFtcyhzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSksXG4gICAgICBwYXRoID0gc2V4cHIucGF0aCxcbiAgICAgIG5hbWUgPSBwYXRoLnBhcnRzWzBdO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5rbm93bkhlbHBlcnNbbmFtZV0pIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdpbnZva2VLbm93bkhlbHBlcicsIHBhcmFtcy5sZW5ndGgsIG5hbWUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmtub3duSGVscGVyc09ubHkpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXG4gICAgICAgICdZb3Ugc3BlY2lmaWVkIGtub3duSGVscGVyc09ubHksIGJ1dCB1c2VkIHRoZSB1bmtub3duIGhlbHBlciAnICsgbmFtZSxcbiAgICAgICAgc2V4cHJcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdGguc3RyaWN0ID0gdHJ1ZTtcbiAgICAgIHBhdGguZmFsc3kgPSB0cnVlO1xuXG4gICAgICB0aGlzLmFjY2VwdChwYXRoKTtcbiAgICAgIHRoaXMub3Bjb2RlKFxuICAgICAgICAnaW52b2tlSGVscGVyJyxcbiAgICAgICAgcGFyYW1zLmxlbmd0aCxcbiAgICAgICAgcGF0aC5vcmlnaW5hbCxcbiAgICAgICAgQVNULmhlbHBlcnMuc2ltcGxlSWQocGF0aClcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIFBhdGhFeHByZXNzaW9uOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgdGhpcy5hZGREZXB0aChwYXRoLmRlcHRoKTtcbiAgICB0aGlzLm9wY29kZSgnZ2V0Q29udGV4dCcsIHBhdGguZGVwdGgpO1xuXG4gICAgbGV0IG5hbWUgPSBwYXRoLnBhcnRzWzBdLFxuICAgICAgc2NvcGVkID0gQVNULmhlbHBlcnMuc2NvcGVkSWQocGF0aCksXG4gICAgICBibG9ja1BhcmFtSWQgPSAhcGF0aC5kZXB0aCAmJiAhc2NvcGVkICYmIHRoaXMuYmxvY2tQYXJhbUluZGV4KG5hbWUpO1xuXG4gICAgaWYgKGJsb2NrUGFyYW1JZCkge1xuICAgICAgdGhpcy5vcGNvZGUoJ2xvb2t1cEJsb2NrUGFyYW0nLCBibG9ja1BhcmFtSWQsIHBhdGgucGFydHMpO1xuICAgIH0gZWxzZSBpZiAoIW5hbWUpIHtcbiAgICAgIC8vIENvbnRleHQgcmVmZXJlbmNlLCBpLmUuIGB7e2ZvbyAufX1gIG9yIGB7e2ZvbyAuLn19YFxuICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hDb250ZXh0Jyk7XG4gICAgfSBlbHNlIGlmIChwYXRoLmRhdGEpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5kYXRhID0gdHJ1ZTtcbiAgICAgIHRoaXMub3Bjb2RlKCdsb29rdXBEYXRhJywgcGF0aC5kZXB0aCwgcGF0aC5wYXJ0cywgcGF0aC5zdHJpY3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wY29kZShcbiAgICAgICAgJ2xvb2t1cE9uQ29udGV4dCcsXG4gICAgICAgIHBhdGgucGFydHMsXG4gICAgICAgIHBhdGguZmFsc3ksXG4gICAgICAgIHBhdGguc3RyaWN0LFxuICAgICAgICBzY29wZWRcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIFN0cmluZ0xpdGVyYWw6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoU3RyaW5nJywgc3RyaW5nLnZhbHVlKTtcbiAgfSxcblxuICBOdW1iZXJMaXRlcmFsOiBmdW5jdGlvbihudW1iZXIpIHtcbiAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCBudW1iZXIudmFsdWUpO1xuICB9LFxuXG4gIEJvb2xlYW5MaXRlcmFsOiBmdW5jdGlvbihib29sKSB7XG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgYm9vbC52YWx1ZSk7XG4gIH0sXG5cbiAgVW5kZWZpbmVkTGl0ZXJhbDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgJ3VuZGVmaW5lZCcpO1xuICB9LFxuXG4gIE51bGxMaXRlcmFsOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCAnbnVsbCcpO1xuICB9LFxuXG4gIEhhc2g6IGZ1bmN0aW9uKGhhc2gpIHtcbiAgICBsZXQgcGFpcnMgPSBoYXNoLnBhaXJzLFxuICAgICAgaSA9IDAsXG4gICAgICBsID0gcGFpcnMubGVuZ3RoO1xuXG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hIYXNoJyk7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5wdXNoUGFyYW0ocGFpcnNbaV0udmFsdWUpO1xuICAgIH1cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLm9wY29kZSgnYXNzaWduVG9IYXNoJywgcGFpcnNbaV0ua2V5KTtcbiAgICB9XG4gICAgdGhpcy5vcGNvZGUoJ3BvcEhhc2gnKTtcbiAgfSxcblxuICAvLyBIRUxQRVJTXG4gIG9wY29kZTogZnVuY3Rpb24obmFtZSkge1xuICAgIHRoaXMub3Bjb2Rlcy5wdXNoKHtcbiAgICAgIG9wY29kZTogbmFtZSxcbiAgICAgIGFyZ3M6IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgIGxvYzogdGhpcy5zb3VyY2VOb2RlWzBdLmxvY1xuICAgIH0pO1xuICB9LFxuXG4gIGFkZERlcHRoOiBmdW5jdGlvbihkZXB0aCkge1xuICAgIGlmICghZGVwdGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnVzZURlcHRocyA9IHRydWU7XG4gIH0sXG5cbiAgY2xhc3NpZnlTZXhwcjogZnVuY3Rpb24oc2V4cHIpIHtcbiAgICBsZXQgaXNTaW1wbGUgPSBBU1QuaGVscGVycy5zaW1wbGVJZChzZXhwci5wYXRoKTtcblxuICAgIGxldCBpc0Jsb2NrUGFyYW0gPSBpc1NpbXBsZSAmJiAhIXRoaXMuYmxvY2tQYXJhbUluZGV4KHNleHByLnBhdGgucGFydHNbMF0pO1xuXG4gICAgLy8gYSBtdXN0YWNoZSBpcyBhbiBlbGlnaWJsZSBoZWxwZXIgaWY6XG4gICAgLy8gKiBpdHMgaWQgaXMgc2ltcGxlIChhIHNpbmdsZSBwYXJ0LCBub3QgYHRoaXNgIG9yIGAuLmApXG4gICAgbGV0IGlzSGVscGVyID0gIWlzQmxvY2tQYXJhbSAmJiBBU1QuaGVscGVycy5oZWxwZXJFeHByZXNzaW9uKHNleHByKTtcblxuICAgIC8vIGlmIGEgbXVzdGFjaGUgaXMgYW4gZWxpZ2libGUgaGVscGVyIGJ1dCBub3QgYSBkZWZpbml0ZVxuICAgIC8vIGhlbHBlciwgaXQgaXMgYW1iaWd1b3VzLCBhbmQgd2lsbCBiZSByZXNvbHZlZCBpbiBhIGxhdGVyXG4gICAgLy8gcGFzcyBvciBhdCBydW50aW1lLlxuICAgIGxldCBpc0VsaWdpYmxlID0gIWlzQmxvY2tQYXJhbSAmJiAoaXNIZWxwZXIgfHwgaXNTaW1wbGUpO1xuXG4gICAgLy8gaWYgYW1iaWd1b3VzLCB3ZSBjYW4gcG9zc2libHkgcmVzb2x2ZSB0aGUgYW1iaWd1aXR5IG5vd1xuICAgIC8vIEFuIGVsaWdpYmxlIGhlbHBlciBpcyBvbmUgdGhhdCBkb2VzIG5vdCBoYXZlIGEgY29tcGxleCBwYXRoLCBpLmUuIGB0aGlzLmZvb2AsIGAuLi9mb29gIGV0Yy5cbiAgICBpZiAoaXNFbGlnaWJsZSAmJiAhaXNIZWxwZXIpIHtcbiAgICAgIGxldCBuYW1lID0gc2V4cHIucGF0aC5wYXJ0c1swXSxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIGlmIChvcHRpb25zLmtub3duSGVscGVyc1tuYW1lXSkge1xuICAgICAgICBpc0hlbHBlciA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMua25vd25IZWxwZXJzT25seSkge1xuICAgICAgICBpc0VsaWdpYmxlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzSGVscGVyKSB7XG4gICAgICByZXR1cm4gJ2hlbHBlcic7XG4gICAgfSBlbHNlIGlmIChpc0VsaWdpYmxlKSB7XG4gICAgICByZXR1cm4gJ2FtYmlndW91cyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnc2ltcGxlJztcbiAgICB9XG4gIH0sXG5cbiAgcHVzaFBhcmFtczogZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYXJhbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0aGlzLnB1c2hQYXJhbShwYXJhbXNbaV0pO1xuICAgIH1cbiAgfSxcblxuICBwdXNoUGFyYW06IGZ1bmN0aW9uKHZhbCkge1xuICAgIGxldCB2YWx1ZSA9IHZhbC52YWx1ZSAhPSBudWxsID8gdmFsLnZhbHVlIDogdmFsLm9yaWdpbmFsIHx8ICcnO1xuXG4gICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XG4gICAgICBpZiAodmFsdWUucmVwbGFjZSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL14oXFwuP1xcLlxcLykqL2csICcnKS5yZXBsYWNlKC9cXC8vZywgJy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbC5kZXB0aCkge1xuICAgICAgICB0aGlzLmFkZERlcHRoKHZhbC5kZXB0aCk7XG4gICAgICB9XG4gICAgICB0aGlzLm9wY29kZSgnZ2V0Q29udGV4dCcsIHZhbC5kZXB0aCB8fCAwKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdwdXNoU3RyaW5nUGFyYW0nLCB2YWx1ZSwgdmFsLnR5cGUpO1xuXG4gICAgICBpZiAodmFsLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJykge1xuICAgICAgICAvLyBTdWJFeHByZXNzaW9ucyBnZXQgZXZhbHVhdGVkIGFuZCBwYXNzZWQgaW5cbiAgICAgICAgLy8gaW4gc3RyaW5nIHBhcmFtcyBtb2RlLlxuICAgICAgICB0aGlzLmFjY2VwdCh2YWwpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgICBsZXQgYmxvY2tQYXJhbUluZGV4O1xuICAgICAgICBpZiAodmFsLnBhcnRzICYmICFBU1QuaGVscGVycy5zY29wZWRJZCh2YWwpICYmICF2YWwuZGVwdGgpIHtcbiAgICAgICAgICBibG9ja1BhcmFtSW5kZXggPSB0aGlzLmJsb2NrUGFyYW1JbmRleCh2YWwucGFydHNbMF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChibG9ja1BhcmFtSW5kZXgpIHtcbiAgICAgICAgICBsZXQgYmxvY2tQYXJhbUNoaWxkID0gdmFsLnBhcnRzLnNsaWNlKDEpLmpvaW4oJy4nKTtcbiAgICAgICAgICB0aGlzLm9wY29kZSgncHVzaElkJywgJ0Jsb2NrUGFyYW0nLCBibG9ja1BhcmFtSW5kZXgsIGJsb2NrUGFyYW1DaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWwub3JpZ2luYWwgfHwgdmFsdWU7XG4gICAgICAgICAgaWYgKHZhbHVlLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgICAgLnJlcGxhY2UoL150aGlzKD86XFwufCQpLywgJycpXG4gICAgICAgICAgICAgIC5yZXBsYWNlKC9eXFwuXFwvLywgJycpXG4gICAgICAgICAgICAgIC5yZXBsYWNlKC9eXFwuJC8sICcnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLm9wY29kZSgncHVzaElkJywgdmFsLnR5cGUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5hY2NlcHQodmFsKTtcbiAgICB9XG4gIH0sXG5cbiAgc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXM6IGZ1bmN0aW9uKHNleHByLCBwcm9ncmFtLCBpbnZlcnNlLCBvbWl0RW1wdHkpIHtcbiAgICBsZXQgcGFyYW1zID0gc2V4cHIucGFyYW1zO1xuICAgIHRoaXMucHVzaFBhcmFtcyhwYXJhbXMpO1xuXG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgcHJvZ3JhbSk7XG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgaW52ZXJzZSk7XG5cbiAgICBpZiAoc2V4cHIuaGFzaCkge1xuICAgICAgdGhpcy5hY2NlcHQoc2V4cHIuaGFzaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdlbXB0eUhhc2gnLCBvbWl0RW1wdHkpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJhbXM7XG4gIH0sXG5cbiAgYmxvY2tQYXJhbUluZGV4OiBmdW5jdGlvbihuYW1lKSB7XG4gICAgZm9yIChcbiAgICAgIGxldCBkZXB0aCA9IDAsIGxlbiA9IHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy5sZW5ndGg7XG4gICAgICBkZXB0aCA8IGxlbjtcbiAgICAgIGRlcHRoKytcbiAgICApIHtcbiAgICAgIGxldCBibG9ja1BhcmFtcyA9IHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtc1tkZXB0aF0sXG4gICAgICAgIHBhcmFtID0gYmxvY2tQYXJhbXMgJiYgaW5kZXhPZihibG9ja1BhcmFtcywgbmFtZSk7XG4gICAgICBpZiAoYmxvY2tQYXJhbXMgJiYgcGFyYW0gPj0gMCkge1xuICAgICAgICByZXR1cm4gW2RlcHRoLCBwYXJhbV07XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcHJlY29tcGlsZShpbnB1dCwgb3B0aW9ucywgZW52KSB7XG4gIGlmIChcbiAgICBpbnB1dCA9PSBudWxsIHx8XG4gICAgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycgJiYgaW5wdXQudHlwZSAhPT0gJ1Byb2dyYW0nKVxuICApIHtcbiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFxuICAgICAgJ1lvdSBtdXN0IHBhc3MgYSBzdHJpbmcgb3IgSGFuZGxlYmFycyBBU1QgdG8gSGFuZGxlYmFycy5wcmVjb21waWxlLiBZb3UgcGFzc2VkICcgK1xuICAgICAgICBpbnB1dFxuICAgICk7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKCEoJ2RhdGEnIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5kYXRhID0gdHJ1ZTtcbiAgfVxuICBpZiAob3B0aW9ucy5jb21wYXQpIHtcbiAgICBvcHRpb25zLnVzZURlcHRocyA9IHRydWU7XG4gIH1cblxuICBsZXQgYXN0ID0gZW52LnBhcnNlKGlucHV0LCBvcHRpb25zKSxcbiAgICBlbnZpcm9ubWVudCA9IG5ldyBlbnYuQ29tcGlsZXIoKS5jb21waWxlKGFzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBuZXcgZW52LkphdmFTY3JpcHRDb21waWxlcigpLmNvbXBpbGUoZW52aXJvbm1lbnQsIG9wdGlvbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZShpbnB1dCwgb3B0aW9ucyA9IHt9LCBlbnYpIHtcbiAgaWYgKFxuICAgIGlucHV0ID09IG51bGwgfHxcbiAgICAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJyAmJiBpbnB1dC50eXBlICE9PSAnUHJvZ3JhbScpXG4gICkge1xuICAgIHRocm93IG5ldyBFeGNlcHRpb24oXG4gICAgICAnWW91IG11c3QgcGFzcyBhIHN0cmluZyBvciBIYW5kbGViYXJzIEFTVCB0byBIYW5kbGViYXJzLmNvbXBpbGUuIFlvdSBwYXNzZWQgJyArXG4gICAgICAgIGlucHV0XG4gICAgKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMpO1xuICBpZiAoISgnZGF0YScgaW4gb3B0aW9ucykpIHtcbiAgICBvcHRpb25zLmRhdGEgPSB0cnVlO1xuICB9XG4gIGlmIChvcHRpb25zLmNvbXBhdCkge1xuICAgIG9wdGlvbnMudXNlRGVwdGhzID0gdHJ1ZTtcbiAgfVxuXG4gIGxldCBjb21waWxlZDtcblxuICBmdW5jdGlvbiBjb21waWxlSW5wdXQoKSB7XG4gICAgbGV0IGFzdCA9IGVudi5wYXJzZShpbnB1dCwgb3B0aW9ucyksXG4gICAgICBlbnZpcm9ubWVudCA9IG5ldyBlbnYuQ29tcGlsZXIoKS5jb21waWxlKGFzdCwgb3B0aW9ucyksXG4gICAgICB0ZW1wbGF0ZVNwZWMgPSBuZXcgZW52LkphdmFTY3JpcHRDb21waWxlcigpLmNvbXBpbGUoXG4gICAgICAgIGVudmlyb25tZW50LFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgcmV0dXJuIGVudi50ZW1wbGF0ZSh0ZW1wbGF0ZVNwZWMpO1xuICB9XG5cbiAgLy8gVGVtcGxhdGUgaXMgb25seSBjb21waWxlZCBvbiBmaXJzdCB1c2UgYW5kIGNhY2hlZCBhZnRlciB0aGF0IHBvaW50LlxuICBmdW5jdGlvbiByZXQoY29udGV4dCwgZXhlY09wdGlvbnMpIHtcbiAgICBpZiAoIWNvbXBpbGVkKSB7XG4gICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcGlsZWQuY2FsbCh0aGlzLCBjb250ZXh0LCBleGVjT3B0aW9ucyk7XG4gIH1cbiAgcmV0Ll9zZXR1cCA9IGZ1bmN0aW9uKHNldHVwT3B0aW9ucykge1xuICAgIGlmICghY29tcGlsZWQpIHtcbiAgICAgIGNvbXBpbGVkID0gY29tcGlsZUlucHV0KCk7XG4gICAgfVxuICAgIHJldHVybiBjb21waWxlZC5fc2V0dXAoc2V0dXBPcHRpb25zKTtcbiAgfTtcbiAgcmV0Ll9jaGlsZCA9IGZ1bmN0aW9uKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgICBpZiAoIWNvbXBpbGVkKSB7XG4gICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcGlsZWQuX2NoaWxkKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICB9O1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBhcmdFcXVhbHMoYSwgYikge1xuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkoYSkgJiYgaXNBcnJheShiKSAmJiBhLmxlbmd0aCA9PT0gYi5sZW5ndGgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghYXJnRXF1YWxzKGFbaV0sIGJbaV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtTGl0ZXJhbFRvUGF0aChzZXhwcikge1xuICBpZiAoIXNleHByLnBhdGgucGFydHMpIHtcbiAgICBsZXQgbGl0ZXJhbCA9IHNleHByLnBhdGg7XG4gICAgLy8gQ2FzdGluZyB0byBzdHJpbmcgaGVyZSB0byBtYWtlIGZhbHNlIGFuZCAwIGxpdGVyYWwgdmFsdWVzIHBsYXkgbmljZWx5IHdpdGggdGhlIHJlc3RcbiAgICAvLyBvZiB0aGUgc3lzdGVtLlxuICAgIHNleHByLnBhdGggPSB7XG4gICAgICB0eXBlOiAnUGF0aEV4cHJlc3Npb24nLFxuICAgICAgZGF0YTogZmFsc2UsXG4gICAgICBkZXB0aDogMCxcbiAgICAgIHBhcnRzOiBbbGl0ZXJhbC5vcmlnaW5hbCArICcnXSxcbiAgICAgIG9yaWdpbmFsOiBsaXRlcmFsLm9yaWdpbmFsICsgJycsXG4gICAgICBsb2M6IGxpdGVyYWwubG9jXG4gICAgfTtcbiAgfVxufVxuIiwiLyogZ2xvYmFsIGRlZmluZSAqL1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWxzJztcblxubGV0IFNvdXJjZU5vZGU7XG5cbnRyeSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nIHx8ICFkZWZpbmUuYW1kKSB7XG4gICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCB0aGlzIGluIEFNRCBlbnZpcm9ubWVudHMuIEZvciB0aGVzZSBlbnZpcm9ubWVudHMsIHdlIGFzdXNtZSB0aGF0XG4gICAgLy8gdGhleSBhcmUgcnVubmluZyBvbiB0aGUgYnJvd3NlciBhbmQgdGh1cyBoYXZlIG5vIG5lZWQgZm9yIHRoZSBzb3VyY2UtbWFwIGxpYnJhcnkuXG4gICAgbGV0IFNvdXJjZU1hcCA9IHJlcXVpcmUoJ3NvdXJjZS1tYXAnKTtcbiAgICBTb3VyY2VOb2RlID0gU291cmNlTWFwLlNvdXJjZU5vZGU7XG4gIH1cbn0gY2F0Y2ggKGVycikge1xuICAvKiBOT1AgKi9cbn1cblxuLyogaXN0YW5idWwgaWdub3JlIGlmOiB0ZXN0ZWQgYnV0IG5vdCBjb3ZlcmVkIGluIGlzdGFuYnVsIGR1ZSB0byBkaXN0IGJ1aWxkICAqL1xuaWYgKCFTb3VyY2VOb2RlKSB7XG4gIFNvdXJjZU5vZGUgPSBmdW5jdGlvbihsaW5lLCBjb2x1bW4sIHNyY0ZpbGUsIGNodW5rcykge1xuICAgIHRoaXMuc3JjID0gJyc7XG4gICAgaWYgKGNodW5rcykge1xuICAgICAgdGhpcy5hZGQoY2h1bmtzKTtcbiAgICB9XG4gIH07XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIFNvdXJjZU5vZGUucHJvdG90eXBlID0ge1xuICAgIGFkZDogZnVuY3Rpb24oY2h1bmtzKSB7XG4gICAgICBpZiAoaXNBcnJheShjaHVua3MpKSB7XG4gICAgICAgIGNodW5rcyA9IGNodW5rcy5qb2luKCcnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3JjICs9IGNodW5rcztcbiAgICB9LFxuICAgIHByZXBlbmQ6IGZ1bmN0aW9uKGNodW5rcykge1xuICAgICAgaWYgKGlzQXJyYXkoY2h1bmtzKSkge1xuICAgICAgICBjaHVua3MgPSBjaHVua3Muam9pbignJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnNyYyA9IGNodW5rcyArIHRoaXMuc3JjO1xuICAgIH0sXG4gICAgdG9TdHJpbmdXaXRoU291cmNlTWFwOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7IGNvZGU6IHRoaXMudG9TdHJpbmcoKSB9O1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3JjO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FzdENodW5rKGNodW5rLCBjb2RlR2VuLCBsb2MpIHtcbiAgaWYgKGlzQXJyYXkoY2h1bmspKSB7XG4gICAgbGV0IHJldCA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNodW5rLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICByZXQucHVzaChjb2RlR2VuLndyYXAoY2h1bmtbaV0sIGxvYykpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGVvZiBjaHVuayA9PT0gJ251bWJlcicpIHtcbiAgICAvLyBIYW5kbGUgcHJpbWl0aXZlcyB0aGF0IHRoZSBTb3VyY2VOb2RlIHdpbGwgdGhyb3cgdXAgb25cbiAgICByZXR1cm4gY2h1bmsgKyAnJztcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cbmZ1bmN0aW9uIENvZGVHZW4oc3JjRmlsZSkge1xuICB0aGlzLnNyY0ZpbGUgPSBzcmNGaWxlO1xuICB0aGlzLnNvdXJjZSA9IFtdO1xufVxuXG5Db2RlR2VuLnByb3RvdHlwZSA9IHtcbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gIXRoaXMuc291cmNlLmxlbmd0aDtcbiAgfSxcbiAgcHJlcGVuZDogZnVuY3Rpb24oc291cmNlLCBsb2MpIHtcbiAgICB0aGlzLnNvdXJjZS51bnNoaWZ0KHRoaXMud3JhcChzb3VyY2UsIGxvYykpO1xuICB9LFxuICBwdXNoOiBmdW5jdGlvbihzb3VyY2UsIGxvYykge1xuICAgIHRoaXMuc291cmNlLnB1c2godGhpcy53cmFwKHNvdXJjZSwgbG9jKSk7XG4gIH0sXG5cbiAgbWVyZ2U6IGZ1bmN0aW9uKCkge1xuICAgIGxldCBzb3VyY2UgPSB0aGlzLmVtcHR5KCk7XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHNvdXJjZS5hZGQoWycgICcsIGxpbmUsICdcXG4nXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfSxcblxuICBlYWNoOiBmdW5jdGlvbihpdGVyKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuc291cmNlLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpdGVyKHRoaXMuc291cmNlW2ldKTtcbiAgICB9XG4gIH0sXG5cbiAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIGxldCBsb2MgPSB0aGlzLmN1cnJlbnRMb2NhdGlvbiB8fCB7IHN0YXJ0OiB7fSB9O1xuICAgIHJldHVybiBuZXcgU291cmNlTm9kZShsb2Muc3RhcnQubGluZSwgbG9jLnN0YXJ0LmNvbHVtbiwgdGhpcy5zcmNGaWxlKTtcbiAgfSxcbiAgd3JhcDogZnVuY3Rpb24oY2h1bmssIGxvYyA9IHRoaXMuY3VycmVudExvY2F0aW9uIHx8IHsgc3RhcnQ6IHt9IH0pIHtcbiAgICBpZiAoY2h1bmsgaW5zdGFuY2VvZiBTb3VyY2VOb2RlKSB7XG4gICAgICByZXR1cm4gY2h1bms7XG4gICAgfVxuXG4gICAgY2h1bmsgPSBjYXN0Q2h1bmsoY2h1bmssIHRoaXMsIGxvYyk7XG5cbiAgICByZXR1cm4gbmV3IFNvdXJjZU5vZGUoXG4gICAgICBsb2Muc3RhcnQubGluZSxcbiAgICAgIGxvYy5zdGFydC5jb2x1bW4sXG4gICAgICB0aGlzLnNyY0ZpbGUsXG4gICAgICBjaHVua1xuICAgICk7XG4gIH0sXG5cbiAgZnVuY3Rpb25DYWxsOiBmdW5jdGlvbihmbiwgdHlwZSwgcGFyYW1zKSB7XG4gICAgcGFyYW1zID0gdGhpcy5nZW5lcmF0ZUxpc3QocGFyYW1zKTtcbiAgICByZXR1cm4gdGhpcy53cmFwKFtmbiwgdHlwZSA/ICcuJyArIHR5cGUgKyAnKCcgOiAnKCcsIHBhcmFtcywgJyknXSk7XG4gIH0sXG5cbiAgcXVvdGVkU3RyaW5nOiBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgJ1wiJyArXG4gICAgICAoc3RyICsgJycpXG4gICAgICAgIC5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpXG4gICAgICAgIC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJylcbiAgICAgICAgLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKVxuICAgICAgICAucmVwbGFjZSgvXFxyL2csICdcXFxccicpXG4gICAgICAgIC5yZXBsYWNlKC9cXHUyMDI4L2csICdcXFxcdTIwMjgnKSAvLyBQZXIgRWNtYS0yNjIgNy4zICsgNy44LjRcbiAgICAgICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgJ1xcXFx1MjAyOScpICtcbiAgICAgICdcIidcbiAgICApO1xuICB9LFxuXG4gIG9iamVjdExpdGVyYWw6IGZ1bmN0aW9uKG9iaikge1xuICAgIGxldCBwYWlycyA9IFtdO1xuXG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBsZXQgdmFsdWUgPSBjYXN0Q2h1bmsob2JqW2tleV0sIHRoaXMpO1xuICAgICAgaWYgKHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwYWlycy5wdXNoKFt0aGlzLnF1b3RlZFN0cmluZyhrZXkpLCAnOicsIHZhbHVlXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBsZXQgcmV0ID0gdGhpcy5nZW5lcmF0ZUxpc3QocGFpcnMpO1xuICAgIHJldC5wcmVwZW5kKCd7Jyk7XG4gICAgcmV0LmFkZCgnfScpO1xuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgZ2VuZXJhdGVMaXN0OiBmdW5jdGlvbihlbnRyaWVzKSB7XG4gICAgbGV0IHJldCA9IHRoaXMuZW1wdHkoKTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoaSkge1xuICAgICAgICByZXQuYWRkKCcsJyk7XG4gICAgICB9XG5cbiAgICAgIHJldC5hZGQoY2FzdENodW5rKGVudHJpZXNbaV0sIHRoaXMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIGdlbmVyYXRlQXJyYXk6IGZ1bmN0aW9uKGVudHJpZXMpIHtcbiAgICBsZXQgcmV0ID0gdGhpcy5nZW5lcmF0ZUxpc3QoZW50cmllcyk7XG4gICAgcmV0LnByZXBlbmQoJ1snKTtcbiAgICByZXQuYWRkKCddJyk7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb2RlR2VuO1xuIiwiaW1wb3J0IHsgQ09NUElMRVJfUkVWSVNJT04sIFJFVklTSU9OX0NIQU5HRVMgfSBmcm9tICcuLi9iYXNlJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgQ29kZUdlbiBmcm9tICcuL2NvZGUtZ2VuJztcblxuZnVuY3Rpb24gTGl0ZXJhbCh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEphdmFTY3JpcHRDb21waWxlcigpIHt9XG5cbkphdmFTY3JpcHRDb21waWxlci5wcm90b3R5cGUgPSB7XG4gIC8vIFBVQkxJQyBBUEk6IFlvdSBjYW4gb3ZlcnJpZGUgdGhlc2UgbWV0aG9kcyBpbiBhIHN1YmNsYXNzIHRvIHByb3ZpZGVcbiAgLy8gYWx0ZXJuYXRpdmUgY29tcGlsZWQgZm9ybXMgZm9yIG5hbWUgbG9va3VwIGFuZCBidWZmZXJpbmcgc2VtYW50aWNzXG4gIG5hbWVMb29rdXA6IGZ1bmN0aW9uKHBhcmVudCwgbmFtZSAvKiwgIHR5cGUgKi8pIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcm5hbE5hbWVMb29rdXAocGFyZW50LCBuYW1lKTtcbiAgfSxcbiAgZGVwdGhlZExvb2t1cDogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiBbXG4gICAgICB0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmxvb2t1cCcpLFxuICAgICAgJyhkZXB0aHMsICcsXG4gICAgICBKU09OLnN0cmluZ2lmeShuYW1lKSxcbiAgICAgICcpJ1xuICAgIF07XG4gIH0sXG5cbiAgY29tcGlsZXJJbmZvOiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCByZXZpc2lvbiA9IENPTVBJTEVSX1JFVklTSU9OLFxuICAgICAgdmVyc2lvbnMgPSBSRVZJU0lPTl9DSEFOR0VTW3JldmlzaW9uXTtcbiAgICByZXR1cm4gW3JldmlzaW9uLCB2ZXJzaW9uc107XG4gIH0sXG5cbiAgYXBwZW5kVG9CdWZmZXI6IGZ1bmN0aW9uKHNvdXJjZSwgbG9jYXRpb24sIGV4cGxpY2l0KSB7XG4gICAgLy8gRm9yY2UgYSBzb3VyY2UgYXMgdGhpcyBzaW1wbGlmaWVzIHRoZSBtZXJnZSBsb2dpYy5cbiAgICBpZiAoIWlzQXJyYXkoc291cmNlKSkge1xuICAgICAgc291cmNlID0gW3NvdXJjZV07XG4gICAgfVxuICAgIHNvdXJjZSA9IHRoaXMuc291cmNlLndyYXAoc291cmNlLCBsb2NhdGlvbik7XG5cbiAgICBpZiAodGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZSkge1xuICAgICAgcmV0dXJuIFsncmV0dXJuICcsIHNvdXJjZSwgJzsnXTtcbiAgICB9IGVsc2UgaWYgKGV4cGxpY2l0KSB7XG4gICAgICAvLyBUaGlzIGlzIGEgY2FzZSB3aGVyZSB0aGUgYnVmZmVyIG9wZXJhdGlvbiBvY2N1cnMgYXMgYSBjaGlsZCBvZiBhbm90aGVyXG4gICAgICAvLyBjb25zdHJ1Y3QsIGdlbmVyYWxseSBicmFjZXMuIFdlIGhhdmUgdG8gZXhwbGljaXRseSBvdXRwdXQgdGhlc2UgYnVmZmVyXG4gICAgICAvLyBvcGVyYXRpb25zIHRvIGVuc3VyZSB0aGF0IHRoZSBlbWl0dGVkIGNvZGUgZ29lcyBpbiB0aGUgY29ycmVjdCBsb2NhdGlvbi5cbiAgICAgIHJldHVybiBbJ2J1ZmZlciArPSAnLCBzb3VyY2UsICc7J107XG4gICAgfSBlbHNlIHtcbiAgICAgIHNvdXJjZS5hcHBlbmRUb0J1ZmZlciA9IHRydWU7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH1cbiAgfSxcblxuICBpbml0aWFsaXplQnVmZmVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdW90ZWRTdHJpbmcoJycpO1xuICB9LFxuICAvLyBFTkQgUFVCTElDIEFQSVxuICBpbnRlcm5hbE5hbWVMb29rdXA6IGZ1bmN0aW9uKHBhcmVudCwgbmFtZSkge1xuICAgIHRoaXMubG9va3VwUHJvcGVydHlGdW5jdGlvbklzVXNlZCA9IHRydWU7XG4gICAgcmV0dXJuIFsnbG9va3VwUHJvcGVydHkoJywgcGFyZW50LCAnLCcsIEpTT04uc3RyaW5naWZ5KG5hbWUpLCAnKSddO1xuICB9LFxuXG4gIGxvb2t1cFByb3BlcnR5RnVuY3Rpb25Jc1VzZWQ6IGZhbHNlLFxuXG4gIGNvbXBpbGU6IGZ1bmN0aW9uKGVudmlyb25tZW50LCBvcHRpb25zLCBjb250ZXh0LCBhc09iamVjdCkge1xuICAgIHRoaXMuZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuc3RyaW5nUGFyYW1zID0gdGhpcy5vcHRpb25zLnN0cmluZ1BhcmFtcztcbiAgICB0aGlzLnRyYWNrSWRzID0gdGhpcy5vcHRpb25zLnRyYWNrSWRzO1xuICAgIHRoaXMucHJlY29tcGlsZSA9ICFhc09iamVjdDtcblxuICAgIHRoaXMubmFtZSA9IHRoaXMuZW52aXJvbm1lbnQubmFtZTtcbiAgICB0aGlzLmlzQ2hpbGQgPSAhIWNvbnRleHQ7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dCB8fCB7XG4gICAgICBkZWNvcmF0b3JzOiBbXSxcbiAgICAgIHByb2dyYW1zOiBbXSxcbiAgICAgIGVudmlyb25tZW50czogW11cbiAgICB9O1xuXG4gICAgdGhpcy5wcmVhbWJsZSgpO1xuXG4gICAgdGhpcy5zdGFja1Nsb3QgPSAwO1xuICAgIHRoaXMuc3RhY2tWYXJzID0gW107XG4gICAgdGhpcy5hbGlhc2VzID0ge307XG4gICAgdGhpcy5yZWdpc3RlcnMgPSB7IGxpc3Q6IFtdIH07XG4gICAgdGhpcy5oYXNoZXMgPSBbXTtcbiAgICB0aGlzLmNvbXBpbGVTdGFjayA9IFtdO1xuICAgIHRoaXMuaW5saW5lU3RhY2sgPSBbXTtcbiAgICB0aGlzLmJsb2NrUGFyYW1zID0gW107XG5cbiAgICB0aGlzLmNvbXBpbGVDaGlsZHJlbihlbnZpcm9ubWVudCwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLnVzZURlcHRocyA9XG4gICAgICB0aGlzLnVzZURlcHRocyB8fFxuICAgICAgZW52aXJvbm1lbnQudXNlRGVwdGhzIHx8XG4gICAgICBlbnZpcm9ubWVudC51c2VEZWNvcmF0b3JzIHx8XG4gICAgICB0aGlzLm9wdGlvbnMuY29tcGF0O1xuICAgIHRoaXMudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IGVudmlyb25tZW50LnVzZUJsb2NrUGFyYW1zO1xuXG4gICAgbGV0IG9wY29kZXMgPSBlbnZpcm9ubWVudC5vcGNvZGVzLFxuICAgICAgb3Bjb2RlLFxuICAgICAgZmlyc3RMb2MsXG4gICAgICBpLFxuICAgICAgbDtcblxuICAgIGZvciAoaSA9IDAsIGwgPSBvcGNvZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgb3Bjb2RlID0gb3Bjb2Rlc1tpXTtcblxuICAgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0gb3Bjb2RlLmxvYztcbiAgICAgIGZpcnN0TG9jID0gZmlyc3RMb2MgfHwgb3Bjb2RlLmxvYztcbiAgICAgIHRoaXNbb3Bjb2RlLm9wY29kZV0uYXBwbHkodGhpcywgb3Bjb2RlLmFyZ3MpO1xuICAgIH1cblxuICAgIC8vIEZsdXNoIGFueSB0cmFpbGluZyBjb250ZW50IHRoYXQgbWlnaHQgYmUgcGVuZGluZy5cbiAgICB0aGlzLnNvdXJjZS5jdXJyZW50TG9jYXRpb24gPSBmaXJzdExvYztcbiAgICB0aGlzLnB1c2hTb3VyY2UoJycpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBpZiAodGhpcy5zdGFja1Nsb3QgfHwgdGhpcy5pbmxpbmVTdGFjay5sZW5ndGggfHwgdGhpcy5jb21waWxlU3RhY2subGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdDb21waWxlIGNvbXBsZXRlZCB3aXRoIGNvbnRlbnQgbGVmdCBvbiBzdGFjaycpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5kZWNvcmF0b3JzLmlzRW1wdHkoKSkge1xuICAgICAgdGhpcy51c2VEZWNvcmF0b3JzID0gdHJ1ZTtcblxuICAgICAgdGhpcy5kZWNvcmF0b3JzLnByZXBlbmQoW1xuICAgICAgICAndmFyIGRlY29yYXRvcnMgPSBjb250YWluZXIuZGVjb3JhdG9ycywgJyxcbiAgICAgICAgdGhpcy5sb29rdXBQcm9wZXJ0eUZ1bmN0aW9uVmFyRGVjbGFyYXRpb24oKSxcbiAgICAgICAgJztcXG4nXG4gICAgICBdKTtcbiAgICAgIHRoaXMuZGVjb3JhdG9ycy5wdXNoKCdyZXR1cm4gZm47Jyk7XG5cbiAgICAgIGlmIChhc09iamVjdCkge1xuICAgICAgICB0aGlzLmRlY29yYXRvcnMgPSBGdW5jdGlvbi5hcHBseSh0aGlzLCBbXG4gICAgICAgICAgJ2ZuJyxcbiAgICAgICAgICAncHJvcHMnLFxuICAgICAgICAgICdjb250YWluZXInLFxuICAgICAgICAgICdkZXB0aDAnLFxuICAgICAgICAgICdkYXRhJyxcbiAgICAgICAgICAnYmxvY2tQYXJhbXMnLFxuICAgICAgICAgICdkZXB0aHMnLFxuICAgICAgICAgIHRoaXMuZGVjb3JhdG9ycy5tZXJnZSgpXG4gICAgICAgIF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kZWNvcmF0b3JzLnByZXBlbmQoXG4gICAgICAgICAgJ2Z1bmN0aW9uKGZuLCBwcm9wcywgY29udGFpbmVyLCBkZXB0aDAsIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcXG4nXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZGVjb3JhdG9ycy5wdXNoKCd9XFxuJyk7XG4gICAgICAgIHRoaXMuZGVjb3JhdG9ycyA9IHRoaXMuZGVjb3JhdG9ycy5tZXJnZSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlY29yYXRvcnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgbGV0IGZuID0gdGhpcy5jcmVhdGVGdW5jdGlvbkNvbnRleHQoYXNPYmplY3QpO1xuICAgIGlmICghdGhpcy5pc0NoaWxkKSB7XG4gICAgICBsZXQgcmV0ID0ge1xuICAgICAgICBjb21waWxlcjogdGhpcy5jb21waWxlckluZm8oKSxcbiAgICAgICAgbWFpbjogZm5cbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLmRlY29yYXRvcnMpIHtcbiAgICAgICAgcmV0Lm1haW5fZCA9IHRoaXMuZGVjb3JhdG9yczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICAgICAgcmV0LnVzZURlY29yYXRvcnMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgeyBwcm9ncmFtcywgZGVjb3JhdG9ycyB9ID0gdGhpcy5jb250ZXh0O1xuICAgICAgZm9yIChpID0gMCwgbCA9IHByb2dyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAocHJvZ3JhbXNbaV0pIHtcbiAgICAgICAgICByZXRbaV0gPSBwcm9ncmFtc1tpXTtcbiAgICAgICAgICBpZiAoZGVjb3JhdG9yc1tpXSkge1xuICAgICAgICAgICAgcmV0W2kgKyAnX2QnXSA9IGRlY29yYXRvcnNbaV07XG4gICAgICAgICAgICByZXQudXNlRGVjb3JhdG9ycyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmVudmlyb25tZW50LnVzZVBhcnRpYWwpIHtcbiAgICAgICAgcmV0LnVzZVBhcnRpYWwgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kYXRhKSB7XG4gICAgICAgIHJldC51c2VEYXRhID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnVzZURlcHRocykge1xuICAgICAgICByZXQudXNlRGVwdGhzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zKSB7XG4gICAgICAgIHJldC51c2VCbG9ja1BhcmFtcyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdCkge1xuICAgICAgICByZXQuY29tcGF0ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhc09iamVjdCkge1xuICAgICAgICByZXQuY29tcGlsZXIgPSBKU09OLnN0cmluZ2lmeShyZXQuY29tcGlsZXIpO1xuXG4gICAgICAgIHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbiA9IHsgc3RhcnQ6IHsgbGluZTogMSwgY29sdW1uOiAwIH0gfTtcbiAgICAgICAgcmV0ID0gdGhpcy5vYmplY3RMaXRlcmFsKHJldCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc3JjTmFtZSkge1xuICAgICAgICAgIHJldCA9IHJldC50b1N0cmluZ1dpdGhTb3VyY2VNYXAoeyBmaWxlOiBvcHRpb25zLmRlc3ROYW1lIH0pO1xuICAgICAgICAgIHJldC5tYXAgPSByZXQubWFwICYmIHJldC5tYXAudG9TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXQgPSByZXQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0LmNvbXBpbGVyT3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgfSxcblxuICBwcmVhbWJsZTogZnVuY3Rpb24oKSB7XG4gICAgLy8gdHJhY2sgdGhlIGxhc3QgY29udGV4dCBwdXNoZWQgaW50byBwbGFjZSB0byBhbGxvdyBza2lwcGluZyB0aGVcbiAgICAvLyBnZXRDb250ZXh0IG9wY29kZSB3aGVuIGl0IHdvdWxkIGJlIGEgbm9vcFxuICAgIHRoaXMubGFzdENvbnRleHQgPSAwO1xuICAgIHRoaXMuc291cmNlID0gbmV3IENvZGVHZW4odGhpcy5vcHRpb25zLnNyY05hbWUpO1xuICAgIHRoaXMuZGVjb3JhdG9ycyA9IG5ldyBDb2RlR2VuKHRoaXMub3B0aW9ucy5zcmNOYW1lKTtcbiAgfSxcblxuICBjcmVhdGVGdW5jdGlvbkNvbnRleHQ6IGZ1bmN0aW9uKGFzT2JqZWN0KSB7XG4gICAgbGV0IHZhckRlY2xhcmF0aW9ucyA9ICcnO1xuXG4gICAgbGV0IGxvY2FscyA9IHRoaXMuc3RhY2tWYXJzLmNvbmNhdCh0aGlzLnJlZ2lzdGVycy5saXN0KTtcbiAgICBpZiAobG9jYWxzLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhckRlY2xhcmF0aW9ucyArPSAnLCAnICsgbG9jYWxzLmpvaW4oJywgJyk7XG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGUgbWluaW1pemVyIGFsaWFzIG1hcHBpbmdzXG4gICAgLy9cbiAgICAvLyBXaGVuIHVzaW5nIHRydWUgU291cmNlTm9kZXMsIHRoaXMgd2lsbCB1cGRhdGUgYWxsIHJlZmVyZW5jZXMgdG8gdGhlIGdpdmVuIGFsaWFzXG4gICAgLy8gYXMgdGhlIHNvdXJjZSBub2RlcyBhcmUgcmV1c2VkIGluIHNpdHUuIEZvciB0aGUgbm9uLXNvdXJjZSBub2RlIGNvbXBpbGF0aW9uIG1vZGUsXG4gICAgLy8gYWxpYXNlcyB3aWxsIG5vdCBiZSB1c2VkLCBidXQgdGhpcyBjYXNlIGlzIGFscmVhZHkgYmVpbmcgcnVuIG9uIHRoZSBjbGllbnQgYW5kXG4gICAgLy8gd2UgYXJlbid0IGNvbmNlcm4gYWJvdXQgbWluaW1pemluZyB0aGUgdGVtcGxhdGUgc2l6ZS5cbiAgICBsZXQgYWxpYXNDb3VudCA9IDA7XG4gICAgT2JqZWN0LmtleXModGhpcy5hbGlhc2VzKS5mb3JFYWNoKGFsaWFzID0+IHtcbiAgICAgIGxldCBub2RlID0gdGhpcy5hbGlhc2VzW2FsaWFzXTtcbiAgICAgIGlmIChub2RlLmNoaWxkcmVuICYmIG5vZGUucmVmZXJlbmNlQ291bnQgPiAxKSB7XG4gICAgICAgIHZhckRlY2xhcmF0aW9ucyArPSAnLCBhbGlhcycgKyArK2FsaWFzQ291bnQgKyAnPScgKyBhbGlhcztcbiAgICAgICAgbm9kZS5jaGlsZHJlblswXSA9ICdhbGlhcycgKyBhbGlhc0NvdW50O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMubG9va3VwUHJvcGVydHlGdW5jdGlvbklzVXNlZCkge1xuICAgICAgdmFyRGVjbGFyYXRpb25zICs9ICcsICcgKyB0aGlzLmxvb2t1cFByb3BlcnR5RnVuY3Rpb25WYXJEZWNsYXJhdGlvbigpO1xuICAgIH1cblxuICAgIGxldCBwYXJhbXMgPSBbJ2NvbnRhaW5lcicsICdkZXB0aDAnLCAnaGVscGVycycsICdwYXJ0aWFscycsICdkYXRhJ107XG5cbiAgICBpZiAodGhpcy51c2VCbG9ja1BhcmFtcyB8fCB0aGlzLnVzZURlcHRocykge1xuICAgICAgcGFyYW1zLnB1c2goJ2Jsb2NrUGFyYW1zJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnVzZURlcHRocykge1xuICAgICAgcGFyYW1zLnB1c2goJ2RlcHRocycpO1xuICAgIH1cblxuICAgIC8vIFBlcmZvcm0gYSBzZWNvbmQgcGFzcyBvdmVyIHRoZSBvdXRwdXQgdG8gbWVyZ2UgY29udGVudCB3aGVuIHBvc3NpYmxlXG4gICAgbGV0IHNvdXJjZSA9IHRoaXMubWVyZ2VTb3VyY2UodmFyRGVjbGFyYXRpb25zKTtcblxuICAgIGlmIChhc09iamVjdCkge1xuICAgICAgcGFyYW1zLnB1c2goc291cmNlKTtcblxuICAgICAgcmV0dXJuIEZ1bmN0aW9uLmFwcGx5KHRoaXMsIHBhcmFtcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZS53cmFwKFtcbiAgICAgICAgJ2Z1bmN0aW9uKCcsXG4gICAgICAgIHBhcmFtcy5qb2luKCcsJyksXG4gICAgICAgICcpIHtcXG4gICcsXG4gICAgICAgIHNvdXJjZSxcbiAgICAgICAgJ30nXG4gICAgICBdKTtcbiAgICB9XG4gIH0sXG4gIG1lcmdlU291cmNlOiBmdW5jdGlvbih2YXJEZWNsYXJhdGlvbnMpIHtcbiAgICBsZXQgaXNTaW1wbGUgPSB0aGlzLmVudmlyb25tZW50LmlzU2ltcGxlLFxuICAgICAgYXBwZW5kT25seSA9ICF0aGlzLmZvcmNlQnVmZmVyLFxuICAgICAgYXBwZW5kRmlyc3QsXG4gICAgICBzb3VyY2VTZWVuLFxuICAgICAgYnVmZmVyU3RhcnQsXG4gICAgICBidWZmZXJFbmQ7XG4gICAgdGhpcy5zb3VyY2UuZWFjaChsaW5lID0+IHtcbiAgICAgIGlmIChsaW5lLmFwcGVuZFRvQnVmZmVyKSB7XG4gICAgICAgIGlmIChidWZmZXJTdGFydCkge1xuICAgICAgICAgIGxpbmUucHJlcGVuZCgnICArICcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJ1ZmZlclN0YXJ0ID0gbGluZTtcbiAgICAgICAgfVxuICAgICAgICBidWZmZXJFbmQgPSBsaW5lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGJ1ZmZlclN0YXJ0KSB7XG4gICAgICAgICAgaWYgKCFzb3VyY2VTZWVuKSB7XG4gICAgICAgICAgICBhcHBlbmRGaXJzdCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1ZmZlclN0YXJ0LnByZXBlbmQoJ2J1ZmZlciArPSAnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnVmZmVyRW5kLmFkZCgnOycpO1xuICAgICAgICAgIGJ1ZmZlclN0YXJ0ID0gYnVmZmVyRW5kID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgc291cmNlU2VlbiA9IHRydWU7XG4gICAgICAgIGlmICghaXNTaW1wbGUpIHtcbiAgICAgICAgICBhcHBlbmRPbmx5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChhcHBlbmRPbmx5KSB7XG4gICAgICBpZiAoYnVmZmVyU3RhcnQpIHtcbiAgICAgICAgYnVmZmVyU3RhcnQucHJlcGVuZCgncmV0dXJuICcpO1xuICAgICAgICBidWZmZXJFbmQuYWRkKCc7Jyk7XG4gICAgICB9IGVsc2UgaWYgKCFzb3VyY2VTZWVuKSB7XG4gICAgICAgIHRoaXMuc291cmNlLnB1c2goJ3JldHVybiBcIlwiOycpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXJEZWNsYXJhdGlvbnMgKz1cbiAgICAgICAgJywgYnVmZmVyID0gJyArIChhcHBlbmRGaXJzdCA/ICcnIDogdGhpcy5pbml0aWFsaXplQnVmZmVyKCkpO1xuXG4gICAgICBpZiAoYnVmZmVyU3RhcnQpIHtcbiAgICAgICAgYnVmZmVyU3RhcnQucHJlcGVuZCgncmV0dXJuIGJ1ZmZlciArICcpO1xuICAgICAgICBidWZmZXJFbmQuYWRkKCc7Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNvdXJjZS5wdXNoKCdyZXR1cm4gYnVmZmVyOycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2YXJEZWNsYXJhdGlvbnMpIHtcbiAgICAgIHRoaXMuc291cmNlLnByZXBlbmQoXG4gICAgICAgICd2YXIgJyArIHZhckRlY2xhcmF0aW9ucy5zdWJzdHJpbmcoMikgKyAoYXBwZW5kRmlyc3QgPyAnJyA6ICc7XFxuJylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc291cmNlLm1lcmdlKCk7XG4gIH0sXG5cbiAgbG9va3VwUHJvcGVydHlGdW5jdGlvblZhckRlY2xhcmF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYFxuICAgICAgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgICBgLnRyaW0oKTtcbiAgfSxcblxuICAvLyBbYmxvY2tWYWx1ZV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgdmFsdWVcbiAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXR1cm4gdmFsdWUgb2YgYmxvY2tIZWxwZXJNaXNzaW5nXG4gIC8vXG4gIC8vIFRoZSBwdXJwb3NlIG9mIHRoaXMgb3Bjb2RlIGlzIHRvIHRha2UgYSBibG9jayBvZiB0aGUgZm9ybVxuICAvLyBge3sjdGhpcy5mb299fS4uLnt7L3RoaXMuZm9vfX1gLCByZXNvbHZlIHRoZSB2YWx1ZSBvZiBgZm9vYCwgYW5kXG4gIC8vIHJlcGxhY2UgaXQgb24gdGhlIHN0YWNrIHdpdGggdGhlIHJlc3VsdCBvZiBwcm9wZXJseVxuICAvLyBpbnZva2luZyBibG9ja0hlbHBlck1pc3NpbmcuXG4gIGJsb2NrVmFsdWU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBsZXQgYmxvY2tIZWxwZXJNaXNzaW5nID0gdGhpcy5hbGlhc2FibGUoXG4gICAgICAgICdjb250YWluZXIuaG9va3MuYmxvY2tIZWxwZXJNaXNzaW5nJ1xuICAgICAgKSxcbiAgICAgIHBhcmFtcyA9IFt0aGlzLmNvbnRleHROYW1lKDApXTtcbiAgICB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCAwLCBwYXJhbXMpO1xuXG4gICAgbGV0IGJsb2NrTmFtZSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICBwYXJhbXMuc3BsaWNlKDEsIDAsIGJsb2NrTmFtZSk7XG5cbiAgICB0aGlzLnB1c2godGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKGJsb2NrSGVscGVyTWlzc2luZywgJ2NhbGwnLCBwYXJhbXMpKTtcbiAgfSxcblxuICAvLyBbYW1iaWd1b3VzQmxvY2tWYWx1ZV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgdmFsdWVcbiAgLy8gQ29tcGlsZXIgdmFsdWUsIGJlZm9yZTogbGFzdEhlbHBlcj12YWx1ZSBvZiBsYXN0IGZvdW5kIGhlbHBlciwgaWYgYW55XG4gIC8vIE9uIHN0YWNrLCBhZnRlciwgaWYgbm8gbGFzdEhlbHBlcjogc2FtZSBhcyBbYmxvY2tWYWx1ZV1cbiAgLy8gT24gc3RhY2ssIGFmdGVyLCBpZiBsYXN0SGVscGVyOiB2YWx1ZVxuICBhbWJpZ3VvdXNCbG9ja1ZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAvLyBXZSdyZSBiZWluZyBhIGJpdCBjaGVla3kgYW5kIHJldXNpbmcgdGhlIG9wdGlvbnMgdmFsdWUgZnJvbSB0aGUgcHJpb3IgZXhlY1xuICAgIGxldCBibG9ja0hlbHBlck1pc3NpbmcgPSB0aGlzLmFsaWFzYWJsZShcbiAgICAgICAgJ2NvbnRhaW5lci5ob29rcy5ibG9ja0hlbHBlck1pc3NpbmcnXG4gICAgICApLFxuICAgICAgcGFyYW1zID0gW3RoaXMuY29udGV4dE5hbWUoMCldO1xuICAgIHRoaXMuc2V0dXBIZWxwZXJBcmdzKCcnLCAwLCBwYXJhbXMsIHRydWUpO1xuXG4gICAgdGhpcy5mbHVzaElubGluZSgpO1xuXG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLnRvcFN0YWNrKCk7XG4gICAgcGFyYW1zLnNwbGljZSgxLCAwLCBjdXJyZW50KTtcblxuICAgIHRoaXMucHVzaFNvdXJjZShbXG4gICAgICAnaWYgKCEnLFxuICAgICAgdGhpcy5sYXN0SGVscGVyLFxuICAgICAgJykgeyAnLFxuICAgICAgY3VycmVudCxcbiAgICAgICcgPSAnLFxuICAgICAgdGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKGJsb2NrSGVscGVyTWlzc2luZywgJ2NhbGwnLCBwYXJhbXMpLFxuICAgICAgJ30nXG4gICAgXSk7XG4gIH0sXG5cbiAgLy8gW2FwcGVuZENvbnRlbnRdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLlxuICAvL1xuICAvLyBBcHBlbmRzIHRoZSBzdHJpbmcgdmFsdWUgb2YgYGNvbnRlbnRgIHRvIHRoZSBjdXJyZW50IGJ1ZmZlclxuICBhcHBlbmRDb250ZW50OiBmdW5jdGlvbihjb250ZW50KSB7XG4gICAgaWYgKHRoaXMucGVuZGluZ0NvbnRlbnQpIHtcbiAgICAgIGNvbnRlbnQgPSB0aGlzLnBlbmRpbmdDb250ZW50ICsgY29udGVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wZW5kaW5nTG9jYXRpb24gPSB0aGlzLnNvdXJjZS5jdXJyZW50TG9jYXRpb247XG4gICAgfVxuXG4gICAgdGhpcy5wZW5kaW5nQ29udGVudCA9IGNvbnRlbnQ7XG4gIH0sXG5cbiAgLy8gW2FwcGVuZF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLlxuICAvL1xuICAvLyBDb2VyY2VzIGB2YWx1ZWAgdG8gYSBTdHJpbmcgYW5kIGFwcGVuZHMgaXQgdG8gdGhlIGN1cnJlbnQgYnVmZmVyLlxuICAvL1xuICAvLyBJZiBgdmFsdWVgIGlzIHRydXRoeSwgb3IgMCwgaXQgaXMgY29lcmNlZCBpbnRvIGEgc3RyaW5nIGFuZCBhcHBlbmRlZFxuICAvLyBPdGhlcndpc2UsIHRoZSBlbXB0eSBzdHJpbmcgaXMgYXBwZW5kZWRcbiAgYXBwZW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5pc0lubGluZSgpKSB7XG4gICAgICB0aGlzLnJlcGxhY2VTdGFjayhjdXJyZW50ID0+IFsnICE9IG51bGwgPyAnLCBjdXJyZW50LCAnIDogXCJcIiddKTtcblxuICAgICAgdGhpcy5wdXNoU291cmNlKHRoaXMuYXBwZW5kVG9CdWZmZXIodGhpcy5wb3BTdGFjaygpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBsb2NhbCA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIHRoaXMucHVzaFNvdXJjZShbXG4gICAgICAgICdpZiAoJyxcbiAgICAgICAgbG9jYWwsXG4gICAgICAgICcgIT0gbnVsbCkgeyAnLFxuICAgICAgICB0aGlzLmFwcGVuZFRvQnVmZmVyKGxvY2FsLCB1bmRlZmluZWQsIHRydWUpLFxuICAgICAgICAnIH0nXG4gICAgICBdKTtcbiAgICAgIGlmICh0aGlzLmVudmlyb25tZW50LmlzU2ltcGxlKSB7XG4gICAgICAgIHRoaXMucHVzaFNvdXJjZShbXG4gICAgICAgICAgJ2Vsc2UgeyAnLFxuICAgICAgICAgIHRoaXMuYXBwZW5kVG9CdWZmZXIoXCInJ1wiLCB1bmRlZmluZWQsIHRydWUpLFxuICAgICAgICAgICcgfSdcbiAgICAgICAgXSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8vIFthcHBlbmRFc2NhcGVkXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiB2YWx1ZSwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXG4gIC8vXG4gIC8vIEVzY2FwZSBgdmFsdWVgIGFuZCBhcHBlbmQgaXQgdG8gdGhlIGJ1ZmZlclxuICBhcHBlbmRFc2NhcGVkOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnB1c2hTb3VyY2UoXG4gICAgICB0aGlzLmFwcGVuZFRvQnVmZmVyKFtcbiAgICAgICAgdGhpcy5hbGlhc2FibGUoJ2NvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uJyksXG4gICAgICAgICcoJyxcbiAgICAgICAgdGhpcy5wb3BTdGFjaygpLFxuICAgICAgICAnKSdcbiAgICAgIF0pXG4gICAgKTtcbiAgfSxcblxuICAvLyBbZ2V0Q29udGV4dF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXG4gIC8vIENvbXBpbGVyIHZhbHVlLCBhZnRlcjogbGFzdENvbnRleHQ9ZGVwdGhcbiAgLy9cbiAgLy8gU2V0IHRoZSB2YWx1ZSBvZiB0aGUgYGxhc3RDb250ZXh0YCBjb21waWxlciB2YWx1ZSB0byB0aGUgZGVwdGhcbiAgZ2V0Q29udGV4dDogZnVuY3Rpb24oZGVwdGgpIHtcbiAgICB0aGlzLmxhc3RDb250ZXh0ID0gZGVwdGg7XG4gIH0sXG5cbiAgLy8gW3B1c2hDb250ZXh0XVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBjdXJyZW50Q29udGV4dCwgLi4uXG4gIC8vXG4gIC8vIFB1c2hlcyB0aGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgY29udGV4dCBvbnRvIHRoZSBzdGFjay5cbiAgcHVzaENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh0aGlzLmNvbnRleHROYW1lKHRoaXMubGFzdENvbnRleHQpKTtcbiAgfSxcblxuICAvLyBbbG9va3VwT25Db250ZXh0XVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBjdXJyZW50Q29udGV4dFtuYW1lXSwgLi4uXG4gIC8vXG4gIC8vIExvb2tzIHVwIHRoZSB2YWx1ZSBvZiBgbmFtZWAgb24gdGhlIGN1cnJlbnQgY29udGV4dCBhbmQgcHVzaGVzXG4gIC8vIGl0IG9udG8gdGhlIHN0YWNrLlxuICBsb29rdXBPbkNvbnRleHQ6IGZ1bmN0aW9uKHBhcnRzLCBmYWxzeSwgc3RyaWN0LCBzY29wZWQpIHtcbiAgICBsZXQgaSA9IDA7XG5cbiAgICBpZiAoIXNjb3BlZCAmJiB0aGlzLm9wdGlvbnMuY29tcGF0ICYmICF0aGlzLmxhc3RDb250ZXh0KSB7XG4gICAgICAvLyBUaGUgZGVwdGhlZCBxdWVyeSBpcyBleHBlY3RlZCB0byBoYW5kbGUgdGhlIHVuZGVmaW5lZCBsb2dpYyBmb3IgdGhlIHJvb3QgbGV2ZWwgdGhhdFxuICAgICAgLy8gaXMgaW1wbGVtZW50ZWQgYmVsb3csIHNvIHdlIGV2YWx1YXRlIHRoYXQgZGlyZWN0bHkgaW4gY29tcGF0IG1vZGVcbiAgICAgIHRoaXMucHVzaCh0aGlzLmRlcHRoZWRMb29rdXAocGFydHNbaSsrXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2hDb250ZXh0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZXNvbHZlUGF0aCgnY29udGV4dCcsIHBhcnRzLCBpLCBmYWxzeSwgc3RyaWN0KTtcbiAgfSxcblxuICAvLyBbbG9va3VwQmxvY2tQYXJhbV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogYmxvY2tQYXJhbVtuYW1lXSwgLi4uXG4gIC8vXG4gIC8vIExvb2tzIHVwIHRoZSB2YWx1ZSBvZiBgcGFydHNgIG9uIHRoZSBnaXZlbiBibG9jayBwYXJhbSBhbmQgcHVzaGVzXG4gIC8vIGl0IG9udG8gdGhlIHN0YWNrLlxuICBsb29rdXBCbG9ja1BhcmFtOiBmdW5jdGlvbihibG9ja1BhcmFtSWQsIHBhcnRzKSB7XG4gICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRydWU7XG5cbiAgICB0aGlzLnB1c2goWydibG9ja1BhcmFtc1snLCBibG9ja1BhcmFtSWRbMF0sICddWycsIGJsb2NrUGFyYW1JZFsxXSwgJ10nXSk7XG4gICAgdGhpcy5yZXNvbHZlUGF0aCgnY29udGV4dCcsIHBhcnRzLCAxKTtcbiAgfSxcblxuICAvLyBbbG9va3VwRGF0YV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogZGF0YSwgLi4uXG4gIC8vXG4gIC8vIFB1c2ggdGhlIGRhdGEgbG9va3VwIG9wZXJhdG9yXG4gIGxvb2t1cERhdGE6IGZ1bmN0aW9uKGRlcHRoLCBwYXJ0cywgc3RyaWN0KSB7XG4gICAgaWYgKCFkZXB0aCkge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCdkYXRhJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgnY29udGFpbmVyLmRhdGEoZGF0YSwgJyArIGRlcHRoICsgJyknKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlc29sdmVQYXRoKCdkYXRhJywgcGFydHMsIDAsIHRydWUsIHN0cmljdCk7XG4gIH0sXG5cbiAgcmVzb2x2ZVBhdGg6IGZ1bmN0aW9uKHR5cGUsIHBhcnRzLCBpLCBmYWxzeSwgc3RyaWN0KSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zdHJpY3QgfHwgdGhpcy5vcHRpb25zLmFzc3VtZU9iamVjdHMpIHtcbiAgICAgIHRoaXMucHVzaChzdHJpY3RMb29rdXAodGhpcy5vcHRpb25zLnN0cmljdCAmJiBzdHJpY3QsIHRoaXMsIHBhcnRzLCB0eXBlKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGxlbiA9IHBhcnRzLmxlbmd0aDtcbiAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cbiAgICAgIHRoaXMucmVwbGFjZVN0YWNrKGN1cnJlbnQgPT4ge1xuICAgICAgICBsZXQgbG9va3VwID0gdGhpcy5uYW1lTG9va3VwKGN1cnJlbnQsIHBhcnRzW2ldLCB0eXBlKTtcbiAgICAgICAgLy8gV2Ugd2FudCB0byBlbnN1cmUgdGhhdCB6ZXJvIGFuZCBmYWxzZSBhcmUgaGFuZGxlZCBwcm9wZXJseSBpZiB0aGUgY29udGV4dCAoZmFsc3kgZmxhZylcbiAgICAgICAgLy8gbmVlZHMgdG8gaGF2ZSB0aGUgc3BlY2lhbCBoYW5kbGluZyBmb3IgdGhlc2UgdmFsdWVzLlxuICAgICAgICBpZiAoIWZhbHN5KSB7XG4gICAgICAgICAgcmV0dXJuIFsnICE9IG51bGwgPyAnLCBsb29rdXAsICcgOiAnLCBjdXJyZW50XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2Ugd2UgY2FuIHVzZSBnZW5lcmljIGZhbHN5IGhhbmRsaW5nXG4gICAgICAgICAgcmV0dXJuIFsnICYmICcsIGxvb2t1cF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cbiAgICB9XG4gIH0sXG5cbiAgLy8gW3Jlc29sdmVQb3NzaWJsZUxhbWJkYV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHJlc29sdmVkIHZhbHVlLCAuLi5cbiAgLy9cbiAgLy8gSWYgdGhlIGB2YWx1ZWAgaXMgYSBsYW1iZGEsIHJlcGxhY2UgaXQgb24gdGhlIHN0YWNrIGJ5XG4gIC8vIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGxhbWJkYVxuICByZXNvbHZlUG9zc2libGVMYW1iZGE6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucHVzaChbXG4gICAgICB0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmxhbWJkYScpLFxuICAgICAgJygnLFxuICAgICAgdGhpcy5wb3BTdGFjaygpLFxuICAgICAgJywgJyxcbiAgICAgIHRoaXMuY29udGV4dE5hbWUoMCksXG4gICAgICAnKSdcbiAgICBdKTtcbiAgfSxcblxuICAvLyBbcHVzaFN0cmluZ1BhcmFtXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBzdHJpbmcsIGN1cnJlbnRDb250ZXh0LCAuLi5cbiAgLy9cbiAgLy8gVGhpcyBvcGNvZGUgaXMgZGVzaWduZWQgZm9yIHVzZSBpbiBzdHJpbmcgbW9kZSwgd2hpY2hcbiAgLy8gcHJvdmlkZXMgdGhlIHN0cmluZyB2YWx1ZSBvZiBhIHBhcmFtZXRlciBhbG9uZyB3aXRoIGl0c1xuICAvLyBkZXB0aCByYXRoZXIgdGhhbiByZXNvbHZpbmcgaXQgaW1tZWRpYXRlbHkuXG4gIHB1c2hTdHJpbmdQYXJhbTogZnVuY3Rpb24oc3RyaW5nLCB0eXBlKSB7XG4gICAgdGhpcy5wdXNoQ29udGV4dCgpO1xuICAgIHRoaXMucHVzaFN0cmluZyh0eXBlKTtcblxuICAgIC8vIElmIGl0J3MgYSBzdWJleHByZXNzaW9uLCB0aGUgc3RyaW5nIHJlc3VsdFxuICAgIC8vIHdpbGwgYmUgcHVzaGVkIGFmdGVyIHRoaXMgb3Bjb2RlLlxuICAgIGlmICh0eXBlICE9PSAnU3ViRXhwcmVzc2lvbicpIHtcbiAgICAgIGlmICh0eXBlb2Ygc3RyaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLnB1c2hTdHJpbmcoc3RyaW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbChzdHJpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBlbXB0eUhhc2g6IGZ1bmN0aW9uKG9taXRFbXB0eSkge1xuICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hJZHNcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XG4gICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hDb250ZXh0c1xuICAgICAgdGhpcy5wdXNoKCd7fScpOyAvLyBoYXNoVHlwZXNcbiAgICB9XG4gICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKG9taXRFbXB0eSA/ICd1bmRlZmluZWQnIDogJ3t9Jyk7XG4gIH0sXG4gIHB1c2hIYXNoOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5oYXNoKSB7XG4gICAgICB0aGlzLmhhc2hlcy5wdXNoKHRoaXMuaGFzaCk7XG4gICAgfVxuICAgIHRoaXMuaGFzaCA9IHsgdmFsdWVzOiB7fSwgdHlwZXM6IFtdLCBjb250ZXh0czogW10sIGlkczogW10gfTtcbiAgfSxcbiAgcG9wSGFzaDogZnVuY3Rpb24oKSB7XG4gICAgbGV0IGhhc2ggPSB0aGlzLmhhc2g7XG4gICAgdGhpcy5oYXNoID0gdGhpcy5oYXNoZXMucG9wKCk7XG5cbiAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLmlkcykpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcbiAgICAgIHRoaXMucHVzaCh0aGlzLm9iamVjdExpdGVyYWwoaGFzaC5jb250ZXh0cykpO1xuICAgICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLnR5cGVzKSk7XG4gICAgfVxuXG4gICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLnZhbHVlcykpO1xuICB9LFxuXG4gIC8vIFtwdXNoU3RyaW5nXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBxdW90ZWRTdHJpbmcoc3RyaW5nKSwgLi4uXG4gIC8vXG4gIC8vIFB1c2ggYSBxdW90ZWQgdmVyc2lvbiBvZiBgc3RyaW5nYCBvbnRvIHRoZSBzdGFja1xuICBwdXNoU3RyaW5nOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwodGhpcy5xdW90ZWRTdHJpbmcoc3RyaW5nKSk7XG4gIH0sXG5cbiAgLy8gW3B1c2hMaXRlcmFsXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiB2YWx1ZSwgLi4uXG4gIC8vXG4gIC8vIFB1c2hlcyBhIHZhbHVlIG9udG8gdGhlIHN0YWNrLiBUaGlzIG9wZXJhdGlvbiBwcmV2ZW50c1xuICAvLyB0aGUgY29tcGlsZXIgZnJvbSBjcmVhdGluZyBhIHRlbXBvcmFyeSB2YXJpYWJsZSB0byBob2xkXG4gIC8vIGl0LlxuICBwdXNoTGl0ZXJhbDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwodmFsdWUpO1xuICB9LFxuXG4gIC8vIFtwdXNoUHJvZ3JhbV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcHJvZ3JhbShndWlkKSwgLi4uXG4gIC8vXG4gIC8vIFB1c2ggYSBwcm9ncmFtIGV4cHJlc3Npb24gb250byB0aGUgc3RhY2suIFRoaXMgdGFrZXNcbiAgLy8gYSBjb21waWxlLXRpbWUgZ3VpZCBhbmQgY29udmVydHMgaXQgaW50byBhIHJ1bnRpbWUtYWNjZXNzaWJsZVxuICAvLyBleHByZXNzaW9uLlxuICBwdXNoUHJvZ3JhbTogZnVuY3Rpb24oZ3VpZCkge1xuICAgIGlmIChndWlkICE9IG51bGwpIHtcbiAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh0aGlzLnByb2dyYW1FeHByZXNzaW9uKGd1aWQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKG51bGwpO1xuICAgIH1cbiAgfSxcblxuICAvLyBbcmVnaXN0ZXJEZWNvcmF0b3JdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIHByb2dyYW0sIHBhcmFtcy4uLiwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXG4gIC8vXG4gIC8vIFBvcHMgb2ZmIHRoZSBkZWNvcmF0b3IncyBwYXJhbWV0ZXJzLCBpbnZva2VzIHRoZSBkZWNvcmF0b3IsXG4gIC8vIGFuZCBpbnNlcnRzIHRoZSBkZWNvcmF0b3IgaW50byB0aGUgZGVjb3JhdG9ycyBsaXN0LlxuICByZWdpc3RlckRlY29yYXRvcihwYXJhbVNpemUsIG5hbWUpIHtcbiAgICBsZXQgZm91bmREZWNvcmF0b3IgPSB0aGlzLm5hbWVMb29rdXAoJ2RlY29yYXRvcnMnLCBuYW1lLCAnZGVjb3JhdG9yJyksXG4gICAgICBvcHRpb25zID0gdGhpcy5zZXR1cEhlbHBlckFyZ3MobmFtZSwgcGFyYW1TaXplKTtcblxuICAgIHRoaXMuZGVjb3JhdG9ycy5wdXNoKFtcbiAgICAgICdmbiA9ICcsXG4gICAgICB0aGlzLmRlY29yYXRvcnMuZnVuY3Rpb25DYWxsKGZvdW5kRGVjb3JhdG9yLCAnJywgW1xuICAgICAgICAnZm4nLFxuICAgICAgICAncHJvcHMnLFxuICAgICAgICAnY29udGFpbmVyJyxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgXSksXG4gICAgICAnIHx8IGZuOydcbiAgICBdKTtcbiAgfSxcblxuICAvLyBbaW52b2tlSGVscGVyXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBpbnZlcnNlLCBwcm9ncmFtLCBwYXJhbXMuLi4sIC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHJlc3VsdCBvZiBoZWxwZXIgaW52b2NhdGlvblxuICAvL1xuICAvLyBQb3BzIG9mZiB0aGUgaGVscGVyJ3MgcGFyYW1ldGVycywgaW52b2tlcyB0aGUgaGVscGVyLFxuICAvLyBhbmQgcHVzaGVzIHRoZSBoZWxwZXIncyByZXR1cm4gdmFsdWUgb250byB0aGUgc3RhY2suXG4gIC8vXG4gIC8vIElmIHRoZSBoZWxwZXIgaXMgbm90IGZvdW5kLCBgaGVscGVyTWlzc2luZ2AgaXMgY2FsbGVkLlxuICBpbnZva2VIZWxwZXI6IGZ1bmN0aW9uKHBhcmFtU2l6ZSwgbmFtZSwgaXNTaW1wbGUpIHtcbiAgICBsZXQgbm9uSGVscGVyID0gdGhpcy5wb3BTdGFjaygpLFxuICAgICAgaGVscGVyID0gdGhpcy5zZXR1cEhlbHBlcihwYXJhbVNpemUsIG5hbWUpO1xuXG4gICAgbGV0IHBvc3NpYmxlRnVuY3Rpb25DYWxscyA9IFtdO1xuXG4gICAgaWYgKGlzU2ltcGxlKSB7XG4gICAgICAvLyBkaXJlY3QgY2FsbCB0byBoZWxwZXJcbiAgICAgIHBvc3NpYmxlRnVuY3Rpb25DYWxscy5wdXNoKGhlbHBlci5uYW1lKTtcbiAgICB9XG4gICAgLy8gY2FsbCBhIGZ1bmN0aW9uIGZyb20gdGhlIGlucHV0IG9iamVjdFxuICAgIHBvc3NpYmxlRnVuY3Rpb25DYWxscy5wdXNoKG5vbkhlbHBlcik7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuc3RyaWN0KSB7XG4gICAgICBwb3NzaWJsZUZ1bmN0aW9uQ2FsbHMucHVzaChcbiAgICAgICAgdGhpcy5hbGlhc2FibGUoJ2NvbnRhaW5lci5ob29rcy5oZWxwZXJNaXNzaW5nJylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IGZ1bmN0aW9uTG9va3VwQ29kZSA9IFtcbiAgICAgICcoJyxcbiAgICAgIHRoaXMuaXRlbXNTZXBhcmF0ZWRCeShwb3NzaWJsZUZ1bmN0aW9uQ2FsbHMsICd8fCcpLFxuICAgICAgJyknXG4gICAgXTtcbiAgICBsZXQgZnVuY3Rpb25DYWxsID0gdGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKFxuICAgICAgZnVuY3Rpb25Mb29rdXBDb2RlLFxuICAgICAgJ2NhbGwnLFxuICAgICAgaGVscGVyLmNhbGxQYXJhbXNcbiAgICApO1xuICAgIHRoaXMucHVzaChmdW5jdGlvbkNhbGwpO1xuICB9LFxuXG4gIGl0ZW1zU2VwYXJhdGVkQnk6IGZ1bmN0aW9uKGl0ZW1zLCBzZXBhcmF0b3IpIHtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0LnB1c2goaXRlbXNbMF0pO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdC5wdXNoKHNlcGFyYXRvciwgaXRlbXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICAvLyBbaW52b2tlS25vd25IZWxwZXJdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHBhcmFtcy4uLiwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGhlbHBlciBpbnZvY2F0aW9uXG4gIC8vXG4gIC8vIFRoaXMgb3BlcmF0aW9uIGlzIHVzZWQgd2hlbiB0aGUgaGVscGVyIGlzIGtub3duIHRvIGV4aXN0LFxuICAvLyBzbyBhIGBoZWxwZXJNaXNzaW5nYCBmYWxsYmFjayBpcyBub3QgcmVxdWlyZWQuXG4gIGludm9rZUtub3duSGVscGVyOiBmdW5jdGlvbihwYXJhbVNpemUsIG5hbWUpIHtcbiAgICBsZXQgaGVscGVyID0gdGhpcy5zZXR1cEhlbHBlcihwYXJhbVNpemUsIG5hbWUpO1xuICAgIHRoaXMucHVzaCh0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoaGVscGVyLm5hbWUsICdjYWxsJywgaGVscGVyLmNhbGxQYXJhbXMpKTtcbiAgfSxcblxuICAvLyBbaW52b2tlQW1iaWd1b3VzXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBpbnZlcnNlLCBwcm9ncmFtLCBwYXJhbXMuLi4sIC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHJlc3VsdCBvZiBkaXNhbWJpZ3VhdGlvblxuICAvL1xuICAvLyBUaGlzIG9wZXJhdGlvbiBpcyB1c2VkIHdoZW4gYW4gZXhwcmVzc2lvbiBsaWtlIGB7e2Zvb319YFxuICAvLyBpcyBwcm92aWRlZCwgYnV0IHdlIGRvbid0IGtub3cgYXQgY29tcGlsZS10aW1lIHdoZXRoZXIgaXRcbiAgLy8gaXMgYSBoZWxwZXIgb3IgYSBwYXRoLlxuICAvL1xuICAvLyBUaGlzIG9wZXJhdGlvbiBlbWl0cyBtb3JlIGNvZGUgdGhhbiB0aGUgb3RoZXIgb3B0aW9ucyxcbiAgLy8gYW5kIGNhbiBiZSBhdm9pZGVkIGJ5IHBhc3NpbmcgdGhlIGBrbm93bkhlbHBlcnNgIGFuZFxuICAvLyBga25vd25IZWxwZXJzT25seWAgZmxhZ3MgYXQgY29tcGlsZS10aW1lLlxuICBpbnZva2VBbWJpZ3VvdXM6IGZ1bmN0aW9uKG5hbWUsIGhlbHBlckNhbGwpIHtcbiAgICB0aGlzLnVzZVJlZ2lzdGVyKCdoZWxwZXInKTtcblxuICAgIGxldCBub25IZWxwZXIgPSB0aGlzLnBvcFN0YWNrKCk7XG5cbiAgICB0aGlzLmVtcHR5SGFzaCgpO1xuICAgIGxldCBoZWxwZXIgPSB0aGlzLnNldHVwSGVscGVyKDAsIG5hbWUsIGhlbHBlckNhbGwpO1xuXG4gICAgbGV0IGhlbHBlck5hbWUgPSAodGhpcy5sYXN0SGVscGVyID0gdGhpcy5uYW1lTG9va3VwKFxuICAgICAgJ2hlbHBlcnMnLFxuICAgICAgbmFtZSxcbiAgICAgICdoZWxwZXInXG4gICAgKSk7XG5cbiAgICBsZXQgbG9va3VwID0gWycoJywgJyhoZWxwZXIgPSAnLCBoZWxwZXJOYW1lLCAnIHx8ICcsIG5vbkhlbHBlciwgJyknXTtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5zdHJpY3QpIHtcbiAgICAgIGxvb2t1cFswXSA9ICcoaGVscGVyID0gJztcbiAgICAgIGxvb2t1cC5wdXNoKFxuICAgICAgICAnICE9IG51bGwgPyBoZWxwZXIgOiAnLFxuICAgICAgICB0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmhvb2tzLmhlbHBlck1pc3NpbmcnKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLnB1c2goW1xuICAgICAgJygnLFxuICAgICAgbG9va3VwLFxuICAgICAgaGVscGVyLnBhcmFtc0luaXQgPyBbJyksKCcsIGhlbHBlci5wYXJhbXNJbml0XSA6IFtdLFxuICAgICAgJyksJyxcbiAgICAgICcodHlwZW9mIGhlbHBlciA9PT0gJyxcbiAgICAgIHRoaXMuYWxpYXNhYmxlKCdcImZ1bmN0aW9uXCInKSxcbiAgICAgICcgPyAnLFxuICAgICAgdGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKCdoZWxwZXInLCAnY2FsbCcsIGhlbHBlci5jYWxsUGFyYW1zKSxcbiAgICAgICcgOiBoZWxwZXIpKSdcbiAgICBdKTtcbiAgfSxcblxuICAvLyBbaW52b2tlUGFydGlhbF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogY29udGV4dCwgLi4uXG4gIC8vIE9uIHN0YWNrIGFmdGVyOiByZXN1bHQgb2YgcGFydGlhbCBpbnZvY2F0aW9uXG4gIC8vXG4gIC8vIFRoaXMgb3BlcmF0aW9uIHBvcHMgb2ZmIGEgY29udGV4dCwgaW52b2tlcyBhIHBhcnRpYWwgd2l0aCB0aGF0IGNvbnRleHQsXG4gIC8vIGFuZCBwdXNoZXMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2NhdGlvbiBiYWNrLlxuICBpbnZva2VQYXJ0aWFsOiBmdW5jdGlvbihpc0R5bmFtaWMsIG5hbWUsIGluZGVudCkge1xuICAgIGxldCBwYXJhbXMgPSBbXSxcbiAgICAgIG9wdGlvbnMgPSB0aGlzLnNldHVwUGFyYW1zKG5hbWUsIDEsIHBhcmFtcyk7XG5cbiAgICBpZiAoaXNEeW5hbWljKSB7XG4gICAgICBuYW1lID0gdGhpcy5wb3BTdGFjaygpO1xuICAgICAgZGVsZXRlIG9wdGlvbnMubmFtZTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZW50KSB7XG4gICAgICBvcHRpb25zLmluZGVudCA9IEpTT04uc3RyaW5naWZ5KGluZGVudCk7XG4gICAgfVxuICAgIG9wdGlvbnMuaGVscGVycyA9ICdoZWxwZXJzJztcbiAgICBvcHRpb25zLnBhcnRpYWxzID0gJ3BhcnRpYWxzJztcbiAgICBvcHRpb25zLmRlY29yYXRvcnMgPSAnY29udGFpbmVyLmRlY29yYXRvcnMnO1xuXG4gICAgaWYgKCFpc0R5bmFtaWMpIHtcbiAgICAgIHBhcmFtcy51bnNoaWZ0KHRoaXMubmFtZUxvb2t1cCgncGFydGlhbHMnLCBuYW1lLCAncGFydGlhbCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyYW1zLnVuc2hpZnQobmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jb21wYXQpIHtcbiAgICAgIG9wdGlvbnMuZGVwdGhzID0gJ2RlcHRocyc7XG4gICAgfVxuICAgIG9wdGlvbnMgPSB0aGlzLm9iamVjdExpdGVyYWwob3B0aW9ucyk7XG4gICAgcGFyYW1zLnB1c2gob3B0aW9ucyk7XG5cbiAgICB0aGlzLnB1c2godGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKCdjb250YWluZXIuaW52b2tlUGFydGlhbCcsICcnLCBwYXJhbXMpKTtcbiAgfSxcblxuICAvLyBbYXNzaWduVG9IYXNoXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiB2YWx1ZSwgLi4uLCBoYXNoLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi4sIGhhc2gsIC4uLlxuICAvL1xuICAvLyBQb3BzIGEgdmFsdWUgb2ZmIHRoZSBzdGFjayBhbmQgYXNzaWducyBpdCB0byB0aGUgY3VycmVudCBoYXNoXG4gIGFzc2lnblRvSGFzaDogZnVuY3Rpb24oa2V5KSB7XG4gICAgbGV0IHZhbHVlID0gdGhpcy5wb3BTdGFjaygpLFxuICAgICAgY29udGV4dCxcbiAgICAgIHR5cGUsXG4gICAgICBpZDtcblxuICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICBpZCA9IHRoaXMucG9wU3RhY2soKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XG4gICAgICB0eXBlID0gdGhpcy5wb3BTdGFjaygpO1xuICAgICAgY29udGV4dCA9IHRoaXMucG9wU3RhY2soKTtcbiAgICB9XG5cbiAgICBsZXQgaGFzaCA9IHRoaXMuaGFzaDtcbiAgICBpZiAoY29udGV4dCkge1xuICAgICAgaGFzaC5jb250ZXh0c1trZXldID0gY29udGV4dDtcbiAgICB9XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIGhhc2gudHlwZXNba2V5XSA9IHR5cGU7XG4gICAgfVxuICAgIGlmIChpZCkge1xuICAgICAgaGFzaC5pZHNba2V5XSA9IGlkO1xuICAgIH1cbiAgICBoYXNoLnZhbHVlc1trZXldID0gdmFsdWU7XG4gIH0sXG5cbiAgcHVzaElkOiBmdW5jdGlvbih0eXBlLCBuYW1lLCBjaGlsZCkge1xuICAgIGlmICh0eXBlID09PSAnQmxvY2tQYXJhbScpIHtcbiAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbChcbiAgICAgICAgJ2Jsb2NrUGFyYW1zWycgK1xuICAgICAgICAgIG5hbWVbMF0gK1xuICAgICAgICAgICddLnBhdGhbJyArXG4gICAgICAgICAgbmFtZVsxXSArXG4gICAgICAgICAgJ10nICtcbiAgICAgICAgICAoY2hpbGQgPyAnICsgJyArIEpTT04uc3RyaW5naWZ5KCcuJyArIGNoaWxkKSA6ICcnKVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdQYXRoRXhwcmVzc2lvbicpIHtcbiAgICAgIHRoaXMucHVzaFN0cmluZyhuYW1lKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdTdWJFeHByZXNzaW9uJykge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCd0cnVlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgnbnVsbCcpO1xuICAgIH1cbiAgfSxcblxuICAvLyBIRUxQRVJTXG5cbiAgY29tcGlsZXI6IEphdmFTY3JpcHRDb21waWxlcixcblxuICBjb21waWxlQ2hpbGRyZW46IGZ1bmN0aW9uKGVudmlyb25tZW50LCBvcHRpb25zKSB7XG4gICAgbGV0IGNoaWxkcmVuID0gZW52aXJvbm1lbnQuY2hpbGRyZW4sXG4gICAgICBjaGlsZCxcbiAgICAgIGNvbXBpbGVyO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBjb21waWxlciA9IG5ldyB0aGlzLmNvbXBpbGVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuXG4gICAgICBsZXQgZXhpc3RpbmcgPSB0aGlzLm1hdGNoRXhpc3RpbmdQcm9ncmFtKGNoaWxkKTtcblxuICAgICAgaWYgKGV4aXN0aW5nID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0LnByb2dyYW1zLnB1c2goJycpOyAvLyBQbGFjZWhvbGRlciB0byBwcmV2ZW50IG5hbWUgY29uZmxpY3RzIGZvciBuZXN0ZWQgY2hpbGRyZW5cbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5jb250ZXh0LnByb2dyYW1zLmxlbmd0aDtcbiAgICAgICAgY2hpbGQuaW5kZXggPSBpbmRleDtcbiAgICAgICAgY2hpbGQubmFtZSA9ICdwcm9ncmFtJyArIGluZGV4O1xuICAgICAgICB0aGlzLmNvbnRleHQucHJvZ3JhbXNbaW5kZXhdID0gY29tcGlsZXIuY29tcGlsZShcbiAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgIHRoaXMuY29udGV4dCxcbiAgICAgICAgICAhdGhpcy5wcmVjb21waWxlXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY29udGV4dC5kZWNvcmF0b3JzW2luZGV4XSA9IGNvbXBpbGVyLmRlY29yYXRvcnM7XG4gICAgICAgIHRoaXMuY29udGV4dC5lbnZpcm9ubWVudHNbaW5kZXhdID0gY2hpbGQ7XG5cbiAgICAgICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCBjb21waWxlci51c2VEZXB0aHM7XG4gICAgICAgIHRoaXMudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IGNvbXBpbGVyLnVzZUJsb2NrUGFyYW1zO1xuICAgICAgICBjaGlsZC51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocztcbiAgICAgICAgY2hpbGQudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGQuaW5kZXggPSBleGlzdGluZy5pbmRleDtcbiAgICAgICAgY2hpbGQubmFtZSA9ICdwcm9ncmFtJyArIGV4aXN0aW5nLmluZGV4O1xuXG4gICAgICAgIHRoaXMudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHMgfHwgZXhpc3RpbmcudXNlRGVwdGhzO1xuICAgICAgICB0aGlzLnVzZUJsb2NrUGFyYW1zID0gdGhpcy51c2VCbG9ja1BhcmFtcyB8fCBleGlzdGluZy51c2VCbG9ja1BhcmFtcztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG1hdGNoRXhpc3RpbmdQcm9ncmFtOiBmdW5jdGlvbihjaGlsZCkge1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLmNvbnRleHQuZW52aXJvbm1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBsZXQgZW52aXJvbm1lbnQgPSB0aGlzLmNvbnRleHQuZW52aXJvbm1lbnRzW2ldO1xuICAgICAgaWYgKGVudmlyb25tZW50ICYmIGVudmlyb25tZW50LmVxdWFscyhjaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIGVudmlyb25tZW50O1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBwcm9ncmFtRXhwcmVzc2lvbjogZnVuY3Rpb24oZ3VpZCkge1xuICAgIGxldCBjaGlsZCA9IHRoaXMuZW52aXJvbm1lbnQuY2hpbGRyZW5bZ3VpZF0sXG4gICAgICBwcm9ncmFtUGFyYW1zID0gW2NoaWxkLmluZGV4LCAnZGF0YScsIGNoaWxkLmJsb2NrUGFyYW1zXTtcblxuICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IHRoaXMudXNlRGVwdGhzKSB7XG4gICAgICBwcm9ncmFtUGFyYW1zLnB1c2goJ2Jsb2NrUGFyYW1zJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnVzZURlcHRocykge1xuICAgICAgcHJvZ3JhbVBhcmFtcy5wdXNoKCdkZXB0aHMnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJ2NvbnRhaW5lci5wcm9ncmFtKCcgKyBwcm9ncmFtUGFyYW1zLmpvaW4oJywgJykgKyAnKSc7XG4gIH0sXG5cbiAgdXNlUmVnaXN0ZXI6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAoIXRoaXMucmVnaXN0ZXJzW25hbWVdKSB7XG4gICAgICB0aGlzLnJlZ2lzdGVyc1tuYW1lXSA9IHRydWU7XG4gICAgICB0aGlzLnJlZ2lzdGVycy5saXN0LnB1c2gobmFtZSk7XG4gICAgfVxuICB9LFxuXG4gIHB1c2g6IGZ1bmN0aW9uKGV4cHIpIHtcbiAgICBpZiAoIShleHByIGluc3RhbmNlb2YgTGl0ZXJhbCkpIHtcbiAgICAgIGV4cHIgPSB0aGlzLnNvdXJjZS53cmFwKGV4cHIpO1xuICAgIH1cblxuICAgIHRoaXMuaW5saW5lU3RhY2sucHVzaChleHByKTtcbiAgICByZXR1cm4gZXhwcjtcbiAgfSxcblxuICBwdXNoU3RhY2tMaXRlcmFsOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgdGhpcy5wdXNoKG5ldyBMaXRlcmFsKGl0ZW0pKTtcbiAgfSxcblxuICBwdXNoU291cmNlOiBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICBpZiAodGhpcy5wZW5kaW5nQ29udGVudCkge1xuICAgICAgdGhpcy5zb3VyY2UucHVzaChcbiAgICAgICAgdGhpcy5hcHBlbmRUb0J1ZmZlcihcbiAgICAgICAgICB0aGlzLnNvdXJjZS5xdW90ZWRTdHJpbmcodGhpcy5wZW5kaW5nQ29udGVudCksXG4gICAgICAgICAgdGhpcy5wZW5kaW5nTG9jYXRpb25cbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIHRoaXMucGVuZGluZ0NvbnRlbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHNvdXJjZSkge1xuICAgICAgdGhpcy5zb3VyY2UucHVzaChzb3VyY2UpO1xuICAgIH1cbiAgfSxcblxuICByZXBsYWNlU3RhY2s6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgbGV0IHByZWZpeCA9IFsnKCddLFxuICAgICAgc3RhY2ssXG4gICAgICBjcmVhdGVkU3RhY2ssXG4gICAgICB1c2VkTGl0ZXJhbDtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKCF0aGlzLmlzSW5saW5lKCkpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ3JlcGxhY2VTdGFjayBvbiBub24taW5saW5lJyk7XG4gICAgfVxuXG4gICAgLy8gV2Ugd2FudCB0byBtZXJnZSB0aGUgaW5saW5lIHN0YXRlbWVudCBpbnRvIHRoZSByZXBsYWNlbWVudCBzdGF0ZW1lbnQgdmlhICcsJ1xuICAgIGxldCB0b3AgPSB0aGlzLnBvcFN0YWNrKHRydWUpO1xuXG4gICAgaWYgKHRvcCBpbnN0YW5jZW9mIExpdGVyYWwpIHtcbiAgICAgIC8vIExpdGVyYWxzIGRvIG5vdCBuZWVkIHRvIGJlIGlubGluZWRcbiAgICAgIHN0YWNrID0gW3RvcC52YWx1ZV07XG4gICAgICBwcmVmaXggPSBbJygnLCBzdGFja107XG4gICAgICB1c2VkTGl0ZXJhbCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEdldCBvciBjcmVhdGUgdGhlIGN1cnJlbnQgc3RhY2sgbmFtZSBmb3IgdXNlIGJ5IHRoZSBpbmxpbmVcbiAgICAgIGNyZWF0ZWRTdGFjayA9IHRydWU7XG4gICAgICBsZXQgbmFtZSA9IHRoaXMuaW5jclN0YWNrKCk7XG5cbiAgICAgIHByZWZpeCA9IFsnKCgnLCB0aGlzLnB1c2gobmFtZSksICcgPSAnLCB0b3AsICcpJ107XG4gICAgICBzdGFjayA9IHRoaXMudG9wU3RhY2soKTtcbiAgICB9XG5cbiAgICBsZXQgaXRlbSA9IGNhbGxiYWNrLmNhbGwodGhpcywgc3RhY2spO1xuXG4gICAgaWYgKCF1c2VkTGl0ZXJhbCkge1xuICAgICAgdGhpcy5wb3BTdGFjaygpO1xuICAgIH1cbiAgICBpZiAoY3JlYXRlZFN0YWNrKSB7XG4gICAgICB0aGlzLnN0YWNrU2xvdC0tO1xuICAgIH1cbiAgICB0aGlzLnB1c2gocHJlZml4LmNvbmNhdChpdGVtLCAnKScpKTtcbiAgfSxcblxuICBpbmNyU3RhY2s6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3RhY2tTbG90Kys7XG4gICAgaWYgKHRoaXMuc3RhY2tTbG90ID4gdGhpcy5zdGFja1ZhcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnN0YWNrVmFycy5wdXNoKCdzdGFjaycgKyB0aGlzLnN0YWNrU2xvdCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRvcFN0YWNrTmFtZSgpO1xuICB9LFxuICB0b3BTdGFja05hbWU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnc3RhY2snICsgdGhpcy5zdGFja1Nsb3Q7XG4gIH0sXG4gIGZsdXNoSW5saW5lOiBmdW5jdGlvbigpIHtcbiAgICBsZXQgaW5saW5lU3RhY2sgPSB0aGlzLmlubGluZVN0YWNrO1xuICAgIHRoaXMuaW5saW5lU3RhY2sgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gaW5saW5lU3RhY2subGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGxldCBlbnRyeSA9IGlubGluZVN0YWNrW2ldO1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoZW50cnkgaW5zdGFuY2VvZiBMaXRlcmFsKSB7XG4gICAgICAgIHRoaXMuY29tcGlsZVN0YWNrLnB1c2goZW50cnkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHN0YWNrID0gdGhpcy5pbmNyU3RhY2soKTtcbiAgICAgICAgdGhpcy5wdXNoU291cmNlKFtzdGFjaywgJyA9ICcsIGVudHJ5LCAnOyddKTtcbiAgICAgICAgdGhpcy5jb21waWxlU3RhY2sucHVzaChzdGFjayk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBpc0lubGluZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5saW5lU3RhY2subGVuZ3RoO1xuICB9LFxuXG4gIHBvcFN0YWNrOiBmdW5jdGlvbih3cmFwcGVkKSB7XG4gICAgbGV0IGlubGluZSA9IHRoaXMuaXNJbmxpbmUoKSxcbiAgICAgIGl0ZW0gPSAoaW5saW5lID8gdGhpcy5pbmxpbmVTdGFjayA6IHRoaXMuY29tcGlsZVN0YWNrKS5wb3AoKTtcblxuICAgIGlmICghd3JhcHBlZCAmJiBpdGVtIGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuICAgICAgcmV0dXJuIGl0ZW0udmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghaW5saW5lKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGlmICghdGhpcy5zdGFja1Nsb3QpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdJbnZhbGlkIHN0YWNrIHBvcCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhY2tTbG90LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG4gIH0sXG5cbiAgdG9wU3RhY2s6IGZ1bmN0aW9uKCkge1xuICAgIGxldCBzdGFjayA9IHRoaXMuaXNJbmxpbmUoKSA/IHRoaXMuaW5saW5lU3RhY2sgOiB0aGlzLmNvbXBpbGVTdGFjayxcbiAgICAgIGl0ZW0gPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpdGVtIGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuICAgICAgcmV0dXJuIGl0ZW0udmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfSxcblxuICBjb250ZXh0TmFtZTogZnVuY3Rpb24oY29udGV4dCkge1xuICAgIGlmICh0aGlzLnVzZURlcHRocyAmJiBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gJ2RlcHRoc1snICsgY29udGV4dCArICddJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdkZXB0aCcgKyBjb250ZXh0O1xuICAgIH1cbiAgfSxcblxuICBxdW90ZWRTdHJpbmc6IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5xdW90ZWRTdHJpbmcoc3RyKTtcbiAgfSxcblxuICBvYmplY3RMaXRlcmFsOiBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2Uub2JqZWN0TGl0ZXJhbChvYmopO1xuICB9LFxuXG4gIGFsaWFzYWJsZTogZnVuY3Rpb24obmFtZSkge1xuICAgIGxldCByZXQgPSB0aGlzLmFsaWFzZXNbbmFtZV07XG4gICAgaWYgKHJldCkge1xuICAgICAgcmV0LnJlZmVyZW5jZUNvdW50Kys7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIHJldCA9IHRoaXMuYWxpYXNlc1tuYW1lXSA9IHRoaXMuc291cmNlLndyYXAobmFtZSk7XG4gICAgcmV0LmFsaWFzYWJsZSA9IHRydWU7XG4gICAgcmV0LnJlZmVyZW5jZUNvdW50ID0gMTtcblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgc2V0dXBIZWxwZXI6IGZ1bmN0aW9uKHBhcmFtU2l6ZSwgbmFtZSwgYmxvY2tIZWxwZXIpIHtcbiAgICBsZXQgcGFyYW1zID0gW10sXG4gICAgICBwYXJhbXNJbml0ID0gdGhpcy5zZXR1cEhlbHBlckFyZ3MobmFtZSwgcGFyYW1TaXplLCBwYXJhbXMsIGJsb2NrSGVscGVyKTtcbiAgICBsZXQgZm91bmRIZWxwZXIgPSB0aGlzLm5hbWVMb29rdXAoJ2hlbHBlcnMnLCBuYW1lLCAnaGVscGVyJyksXG4gICAgICBjYWxsQ29udGV4dCA9IHRoaXMuYWxpYXNhYmxlKFxuICAgICAgICBgJHt0aGlzLmNvbnRleHROYW1lKDApfSAhPSBudWxsID8gJHt0aGlzLmNvbnRleHROYW1lKFxuICAgICAgICAgIDBcbiAgICAgICAgKX0gOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KWBcbiAgICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICBwYXJhbXNJbml0OiBwYXJhbXNJbml0LFxuICAgICAgbmFtZTogZm91bmRIZWxwZXIsXG4gICAgICBjYWxsUGFyYW1zOiBbY2FsbENvbnRleHRdLmNvbmNhdChwYXJhbXMpXG4gICAgfTtcbiAgfSxcblxuICBzZXR1cFBhcmFtczogZnVuY3Rpb24oaGVscGVyLCBwYXJhbVNpemUsIHBhcmFtcykge1xuICAgIGxldCBvcHRpb25zID0ge30sXG4gICAgICBjb250ZXh0cyA9IFtdLFxuICAgICAgdHlwZXMgPSBbXSxcbiAgICAgIGlkcyA9IFtdLFxuICAgICAgb2JqZWN0QXJncyA9ICFwYXJhbXMsXG4gICAgICBwYXJhbTtcblxuICAgIGlmIChvYmplY3RBcmdzKSB7XG4gICAgICBwYXJhbXMgPSBbXTtcbiAgICB9XG5cbiAgICBvcHRpb25zLm5hbWUgPSB0aGlzLnF1b3RlZFN0cmluZyhoZWxwZXIpO1xuICAgIG9wdGlvbnMuaGFzaCA9IHRoaXMucG9wU3RhY2soKTtcblxuICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICBvcHRpb25zLmhhc2hJZHMgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgb3B0aW9ucy5oYXNoVHlwZXMgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICBvcHRpb25zLmhhc2hDb250ZXh0cyA9IHRoaXMucG9wU3RhY2soKTtcbiAgICB9XG5cbiAgICBsZXQgaW52ZXJzZSA9IHRoaXMucG9wU3RhY2soKSxcbiAgICAgIHByb2dyYW0gPSB0aGlzLnBvcFN0YWNrKCk7XG5cbiAgICAvLyBBdm9pZCBzZXR0aW5nIGZuIGFuZCBpbnZlcnNlIGlmIG5laXRoZXIgYXJlIHNldC4gVGhpcyBhbGxvd3NcbiAgICAvLyBoZWxwZXJzIHRvIGRvIGEgY2hlY2sgZm9yIGBpZiAob3B0aW9ucy5mbilgXG4gICAgaWYgKHByb2dyYW0gfHwgaW52ZXJzZSkge1xuICAgICAgb3B0aW9ucy5mbiA9IHByb2dyYW0gfHwgJ2NvbnRhaW5lci5ub29wJztcbiAgICAgIG9wdGlvbnMuaW52ZXJzZSA9IGludmVyc2UgfHwgJ2NvbnRhaW5lci5ub29wJztcbiAgICB9XG5cbiAgICAvLyBUaGUgcGFyYW1ldGVycyBnbyBvbiB0byB0aGUgc3RhY2sgaW4gb3JkZXIgKG1ha2luZyBzdXJlIHRoYXQgdGhleSBhcmUgZXZhbHVhdGVkIGluIG9yZGVyKVxuICAgIC8vIHNvIHdlIG5lZWQgdG8gcG9wIHRoZW0gb2ZmIHRoZSBzdGFjayBpbiByZXZlcnNlIG9yZGVyXG4gICAgbGV0IGkgPSBwYXJhbVNpemU7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcGFyYW0gPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICBwYXJhbXNbaV0gPSBwYXJhbTtcblxuICAgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgICAgaWRzW2ldID0gdGhpcy5wb3BTdGFjaygpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XG4gICAgICAgIHR5cGVzW2ldID0gdGhpcy5wb3BTdGFjaygpO1xuICAgICAgICBjb250ZXh0c1tpXSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob2JqZWN0QXJncykge1xuICAgICAgb3B0aW9ucy5hcmdzID0gdGhpcy5zb3VyY2UuZ2VuZXJhdGVBcnJheShwYXJhbXMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICBvcHRpb25zLmlkcyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkoaWRzKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XG4gICAgICBvcHRpb25zLnR5cGVzID0gdGhpcy5zb3VyY2UuZ2VuZXJhdGVBcnJheSh0eXBlcyk7XG4gICAgICBvcHRpb25zLmNvbnRleHRzID0gdGhpcy5zb3VyY2UuZ2VuZXJhdGVBcnJheShjb250ZXh0cyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5kYXRhKSB7XG4gICAgICBvcHRpb25zLmRhdGEgPSAnZGF0YSc7XG4gICAgfVxuICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zKSB7XG4gICAgICBvcHRpb25zLmJsb2NrUGFyYW1zID0gJ2Jsb2NrUGFyYW1zJztcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH0sXG5cbiAgc2V0dXBIZWxwZXJBcmdzOiBmdW5jdGlvbihoZWxwZXIsIHBhcmFtU2l6ZSwgcGFyYW1zLCB1c2VSZWdpc3Rlcikge1xuICAgIGxldCBvcHRpb25zID0gdGhpcy5zZXR1cFBhcmFtcyhoZWxwZXIsIHBhcmFtU2l6ZSwgcGFyYW1zKTtcbiAgICBvcHRpb25zLmxvYyA9IEpTT04uc3RyaW5naWZ5KHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbik7XG4gICAgb3B0aW9ucyA9IHRoaXMub2JqZWN0TGl0ZXJhbChvcHRpb25zKTtcbiAgICBpZiAodXNlUmVnaXN0ZXIpIHtcbiAgICAgIHRoaXMudXNlUmVnaXN0ZXIoJ29wdGlvbnMnKTtcbiAgICAgIHBhcmFtcy5wdXNoKCdvcHRpb25zJyk7XG4gICAgICByZXR1cm4gWydvcHRpb25zPScsIG9wdGlvbnNdO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zKSB7XG4gICAgICBwYXJhbXMucHVzaChvcHRpb25zKTtcbiAgICAgIHJldHVybiAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuICB9XG59O1xuXG4oZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHJlc2VydmVkV29yZHMgPSAoXG4gICAgJ2JyZWFrIGVsc2UgbmV3IHZhcicgK1xuICAgICcgY2FzZSBmaW5hbGx5IHJldHVybiB2b2lkJyArXG4gICAgJyBjYXRjaCBmb3Igc3dpdGNoIHdoaWxlJyArXG4gICAgJyBjb250aW51ZSBmdW5jdGlvbiB0aGlzIHdpdGgnICtcbiAgICAnIGRlZmF1bHQgaWYgdGhyb3cnICtcbiAgICAnIGRlbGV0ZSBpbiB0cnknICtcbiAgICAnIGRvIGluc3RhbmNlb2YgdHlwZW9mJyArXG4gICAgJyBhYnN0cmFjdCBlbnVtIGludCBzaG9ydCcgK1xuICAgICcgYm9vbGVhbiBleHBvcnQgaW50ZXJmYWNlIHN0YXRpYycgK1xuICAgICcgYnl0ZSBleHRlbmRzIGxvbmcgc3VwZXInICtcbiAgICAnIGNoYXIgZmluYWwgbmF0aXZlIHN5bmNocm9uaXplZCcgK1xuICAgICcgY2xhc3MgZmxvYXQgcGFja2FnZSB0aHJvd3MnICtcbiAgICAnIGNvbnN0IGdvdG8gcHJpdmF0ZSB0cmFuc2llbnQnICtcbiAgICAnIGRlYnVnZ2VyIGltcGxlbWVudHMgcHJvdGVjdGVkIHZvbGF0aWxlJyArXG4gICAgJyBkb3VibGUgaW1wb3J0IHB1YmxpYyBsZXQgeWllbGQgYXdhaXQnICtcbiAgICAnIG51bGwgdHJ1ZSBmYWxzZSdcbiAgKS5zcGxpdCgnICcpO1xuXG4gIGNvbnN0IGNvbXBpbGVyV29yZHMgPSAoSmF2YVNjcmlwdENvbXBpbGVyLlJFU0VSVkVEX1dPUkRTID0ge30pO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gcmVzZXJ2ZWRXb3Jkcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBjb21waWxlcldvcmRzW3Jlc2VydmVkV29yZHNbaV1dID0gdHJ1ZTtcbiAgfVxufSkoKTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBNYXkgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uXG4gKi9cbkphdmFTY3JpcHRDb21waWxlci5pc1ZhbGlkSmF2YVNjcmlwdFZhcmlhYmxlTmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIChcbiAgICAhSmF2YVNjcmlwdENvbXBpbGVyLlJFU0VSVkVEX1dPUkRTW25hbWVdICYmXG4gICAgL15bYS16QS1aXyRdWzAtOWEtekEtWl8kXSokLy50ZXN0KG5hbWUpXG4gICk7XG59O1xuXG5mdW5jdGlvbiBzdHJpY3RMb29rdXAocmVxdWlyZVRlcm1pbmFsLCBjb21waWxlciwgcGFydHMsIHR5cGUpIHtcbiAgbGV0IHN0YWNrID0gY29tcGlsZXIucG9wU3RhY2soKSxcbiAgICBpID0gMCxcbiAgICBsZW4gPSBwYXJ0cy5sZW5ndGg7XG4gIGlmIChyZXF1aXJlVGVybWluYWwpIHtcbiAgICBsZW4tLTtcbiAgfVxuXG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBzdGFjayA9IGNvbXBpbGVyLm5hbWVMb29rdXAoc3RhY2ssIHBhcnRzW2ldLCB0eXBlKTtcbiAgfVxuXG4gIGlmIChyZXF1aXJlVGVybWluYWwpIHtcbiAgICByZXR1cm4gW1xuICAgICAgY29tcGlsZXIuYWxpYXNhYmxlKCdjb250YWluZXIuc3RyaWN0JyksXG4gICAgICAnKCcsXG4gICAgICBzdGFjayxcbiAgICAgICcsICcsXG4gICAgICBjb21waWxlci5xdW90ZWRTdHJpbmcocGFydHNbaV0pLFxuICAgICAgJywgJyxcbiAgICAgIEpTT04uc3RyaW5naWZ5KGNvbXBpbGVyLnNvdXJjZS5jdXJyZW50TG9jYXRpb24pLFxuICAgICAgJyApJ1xuICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0YWNrO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEphdmFTY3JpcHRDb21waWxlcjtcbiIsImltcG9ydCBydW50aW1lIGZyb20gJy4vaGFuZGxlYmFycy5ydW50aW1lJztcblxuLy8gQ29tcGlsZXIgaW1wb3J0c1xuaW1wb3J0IEFTVCBmcm9tICcuL2hhbmRsZWJhcnMvY29tcGlsZXIvYXN0JztcbmltcG9ydCB7XG4gIHBhcnNlciBhcyBQYXJzZXIsXG4gIHBhcnNlLFxuICBwYXJzZVdpdGhvdXRQcm9jZXNzaW5nXG59IGZyb20gJy4vaGFuZGxlYmFycy9jb21waWxlci9iYXNlJztcbmltcG9ydCB7IENvbXBpbGVyLCBjb21waWxlLCBwcmVjb21waWxlIH0gZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL2NvbXBpbGVyJztcbmltcG9ydCBKYXZhU2NyaXB0Q29tcGlsZXIgZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL2phdmFzY3JpcHQtY29tcGlsZXInO1xuaW1wb3J0IFZpc2l0b3IgZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL3Zpc2l0b3InO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG5sZXQgX2NyZWF0ZSA9IHJ1bnRpbWUuY3JlYXRlO1xuZnVuY3Rpb24gY3JlYXRlKCkge1xuICBsZXQgaGIgPSBfY3JlYXRlKCk7XG5cbiAgaGIuY29tcGlsZSA9IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGhiKTtcbiAgfTtcbiAgaGIucHJlY29tcGlsZSA9IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHByZWNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGhiKTtcbiAgfTtcblxuICBoYi5BU1QgPSBBU1Q7XG4gIGhiLkNvbXBpbGVyID0gQ29tcGlsZXI7XG4gIGhiLkphdmFTY3JpcHRDb21waWxlciA9IEphdmFTY3JpcHRDb21waWxlcjtcbiAgaGIuUGFyc2VyID0gUGFyc2VyO1xuICBoYi5wYXJzZSA9IHBhcnNlO1xuICBoYi5wYXJzZVdpdGhvdXRQcm9jZXNzaW5nID0gcGFyc2VXaXRob3V0UHJvY2Vzc2luZztcblxuICByZXR1cm4gaGI7XG59XG5cbmxldCBpbnN0ID0gY3JlYXRlKCk7XG5pbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcblxubm9Db25mbGljdChpbnN0KTtcblxuaW5zdC5WaXNpdG9yID0gVmlzaXRvcjtcblxuaW5zdFsnZGVmYXVsdCddID0gaW5zdDtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdDtcbiIsIi8vIFVTQUdFOlxuLy8gdmFyIGhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby12YXIgKi9cblxuLy8gdmFyIGxvY2FsID0gaGFuZGxlYmFycy5jcmVhdGUoKTtcblxudmFyIGhhbmRsZWJhcnMgPSByZXF1aXJlKCcuLi9kaXN0L2Nqcy9oYW5kbGViYXJzJylbJ2RlZmF1bHQnXTtcblxudmFyIHByaW50ZXIgPSByZXF1aXJlKCcuLi9kaXN0L2Nqcy9oYW5kbGViYXJzL2NvbXBpbGVyL3ByaW50ZXInKTtcbmhhbmRsZWJhcnMuUHJpbnRWaXNpdG9yID0gcHJpbnRlci5QcmludFZpc2l0b3I7XG5oYW5kbGViYXJzLnByaW50ID0gcHJpbnRlci5wcmludDtcblxubW9kdWxlLmV4cG9ydHMgPSBoYW5kbGViYXJzO1xuXG4vLyBQdWJsaXNoIGEgTm9kZS5qcyByZXF1aXJlKCkgaGFuZGxlciBmb3IgLmhhbmRsZWJhcnMgYW5kIC5oYnMgZmlsZXNcbmZ1bmN0aW9uIGV4dGVuc2lvbihtb2R1bGUsIGZpbGVuYW1lKSB7XG4gIHZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gIHZhciB0ZW1wbGF0ZVN0cmluZyA9IGZzLnJlYWRGaWxlU3luYyhmaWxlbmFtZSwgJ3V0ZjgnKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBoYW5kbGViYXJzLmNvbXBpbGUodGVtcGxhdGVTdHJpbmcpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbmlmICh0eXBlb2YgcmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCcgJiYgcmVxdWlyZS5leHRlbnNpb25zKSB7XG4gIHJlcXVpcmUuZXh0ZW5zaW9uc1snLmhhbmRsZWJhcnMnXSA9IGV4dGVuc2lvbjtcbiAgcmVxdWlyZS5leHRlbnNpb25zWycuaGJzJ10gPSBleHRlbnNpb247XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuZXctY2FwICovXG5pbXBvcnQgVmlzaXRvciBmcm9tICcuL3Zpc2l0b3InO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnQoYXN0KSB7XG4gIHJldHVybiBuZXcgUHJpbnRWaXNpdG9yKCkuYWNjZXB0KGFzdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBQcmludFZpc2l0b3IoKSB7XG4gIHRoaXMucGFkZGluZyA9IDA7XG59XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUgPSBuZXcgVmlzaXRvcigpO1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLnBhZCA9IGZ1bmN0aW9uKHN0cmluZykge1xuICBsZXQgb3V0ID0gJyc7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLnBhZGRpbmc7IGkgPCBsOyBpKyspIHtcbiAgICBvdXQgKz0gJyAgJztcbiAgfVxuXG4gIG91dCArPSBzdHJpbmcgKyAnXFxuJztcbiAgcmV0dXJuIG91dDtcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuUHJvZ3JhbSA9IGZ1bmN0aW9uKHByb2dyYW0pIHtcbiAgbGV0IG91dCA9ICcnLFxuICAgIGJvZHkgPSBwcm9ncmFtLmJvZHksXG4gICAgaSxcbiAgICBsO1xuXG4gIGlmIChwcm9ncmFtLmJsb2NrUGFyYW1zKSB7XG4gICAgbGV0IGJsb2NrUGFyYW1zID0gJ0JMT0NLIFBBUkFNUzogWyc7XG4gICAgZm9yIChpID0gMCwgbCA9IHByb2dyYW0uYmxvY2tQYXJhbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBibG9ja1BhcmFtcyArPSAnICcgKyBwcm9ncmFtLmJsb2NrUGFyYW1zW2ldO1xuICAgIH1cbiAgICBibG9ja1BhcmFtcyArPSAnIF0nO1xuICAgIG91dCArPSB0aGlzLnBhZChibG9ja1BhcmFtcyk7XG4gIH1cblxuICBmb3IgKGkgPSAwLCBsID0gYm9keS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvdXQgKz0gdGhpcy5hY2NlcHQoYm9keVtpXSk7XG4gIH1cblxuICB0aGlzLnBhZGRpbmctLTtcblxuICByZXR1cm4gb3V0O1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5NdXN0YWNoZVN0YXRlbWVudCA9IGZ1bmN0aW9uKG11c3RhY2hlKSB7XG4gIHJldHVybiB0aGlzLnBhZCgne3sgJyArIHRoaXMuU3ViRXhwcmVzc2lvbihtdXN0YWNoZSkgKyAnIH19Jyk7XG59O1xuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5EZWNvcmF0b3IgPSBmdW5jdGlvbihtdXN0YWNoZSkge1xuICByZXR1cm4gdGhpcy5wYWQoJ3t7IERJUkVDVElWRSAnICsgdGhpcy5TdWJFeHByZXNzaW9uKG11c3RhY2hlKSArICcgfX0nKTtcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuQmxvY2tTdGF0ZW1lbnQgPSBQcmludFZpc2l0b3IucHJvdG90eXBlLkRlY29yYXRvckJsb2NrID0gZnVuY3Rpb24oXG4gIGJsb2NrXG4pIHtcbiAgbGV0IG91dCA9ICcnO1xuXG4gIG91dCArPSB0aGlzLnBhZChcbiAgICAoYmxvY2sudHlwZSA9PT0gJ0RlY29yYXRvckJsb2NrJyA/ICdESVJFQ1RJVkUgJyA6ICcnKSArICdCTE9DSzonXG4gICk7XG4gIHRoaXMucGFkZGluZysrO1xuICBvdXQgKz0gdGhpcy5wYWQodGhpcy5TdWJFeHByZXNzaW9uKGJsb2NrKSk7XG4gIGlmIChibG9jay5wcm9ncmFtKSB7XG4gICAgb3V0ICs9IHRoaXMucGFkKCdQUk9HUkFNOicpO1xuICAgIHRoaXMucGFkZGluZysrO1xuICAgIG91dCArPSB0aGlzLmFjY2VwdChibG9jay5wcm9ncmFtKTtcbiAgICB0aGlzLnBhZGRpbmctLTtcbiAgfVxuICBpZiAoYmxvY2suaW52ZXJzZSkge1xuICAgIGlmIChibG9jay5wcm9ncmFtKSB7XG4gICAgICB0aGlzLnBhZGRpbmcrKztcbiAgICB9XG4gICAgb3V0ICs9IHRoaXMucGFkKCd7e159fScpO1xuICAgIHRoaXMucGFkZGluZysrO1xuICAgIG91dCArPSB0aGlzLmFjY2VwdChibG9jay5pbnZlcnNlKTtcbiAgICB0aGlzLnBhZGRpbmctLTtcbiAgICBpZiAoYmxvY2sucHJvZ3JhbSkge1xuICAgICAgdGhpcy5wYWRkaW5nLS07XG4gICAgfVxuICB9XG4gIHRoaXMucGFkZGluZy0tO1xuXG4gIHJldHVybiBvdXQ7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLlBhcnRpYWxTdGF0ZW1lbnQgPSBmdW5jdGlvbihwYXJ0aWFsKSB7XG4gIGxldCBjb250ZW50ID0gJ1BBUlRJQUw6JyArIHBhcnRpYWwubmFtZS5vcmlnaW5hbDtcbiAgaWYgKHBhcnRpYWwucGFyYW1zWzBdKSB7XG4gICAgY29udGVudCArPSAnICcgKyB0aGlzLmFjY2VwdChwYXJ0aWFsLnBhcmFtc1swXSk7XG4gIH1cbiAgaWYgKHBhcnRpYWwuaGFzaCkge1xuICAgIGNvbnRlbnQgKz0gJyAnICsgdGhpcy5hY2NlcHQocGFydGlhbC5oYXNoKTtcbiAgfVxuICByZXR1cm4gdGhpcy5wYWQoJ3t7PiAnICsgY29udGVudCArICcgfX0nKTtcbn07XG5QcmludFZpc2l0b3IucHJvdG90eXBlLlBhcnRpYWxCbG9ja1N0YXRlbWVudCA9IGZ1bmN0aW9uKHBhcnRpYWwpIHtcbiAgbGV0IGNvbnRlbnQgPSAnUEFSVElBTCBCTE9DSzonICsgcGFydGlhbC5uYW1lLm9yaWdpbmFsO1xuICBpZiAocGFydGlhbC5wYXJhbXNbMF0pIHtcbiAgICBjb250ZW50ICs9ICcgJyArIHRoaXMuYWNjZXB0KHBhcnRpYWwucGFyYW1zWzBdKTtcbiAgfVxuICBpZiAocGFydGlhbC5oYXNoKSB7XG4gICAgY29udGVudCArPSAnICcgKyB0aGlzLmFjY2VwdChwYXJ0aWFsLmhhc2gpO1xuICB9XG5cbiAgY29udGVudCArPSAnICcgKyB0aGlzLnBhZCgnUFJPR1JBTTonKTtcbiAgdGhpcy5wYWRkaW5nKys7XG4gIGNvbnRlbnQgKz0gdGhpcy5hY2NlcHQocGFydGlhbC5wcm9ncmFtKTtcbiAgdGhpcy5wYWRkaW5nLS07XG5cbiAgcmV0dXJuIHRoaXMucGFkKCd7ez4gJyArIGNvbnRlbnQgKyAnIH19Jyk7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLkNvbnRlbnRTdGF0ZW1lbnQgPSBmdW5jdGlvbihjb250ZW50KSB7XG4gIHJldHVybiB0aGlzLnBhZChcIkNPTlRFTlRbICdcIiArIGNvbnRlbnQudmFsdWUgKyBcIicgXVwiKTtcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuQ29tbWVudFN0YXRlbWVudCA9IGZ1bmN0aW9uKGNvbW1lbnQpIHtcbiAgcmV0dXJuIHRoaXMucGFkKFwie3shICdcIiArIGNvbW1lbnQudmFsdWUgKyBcIicgfX1cIik7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLlN1YkV4cHJlc3Npb24gPSBmdW5jdGlvbihzZXhwcikge1xuICBsZXQgcGFyYW1zID0gc2V4cHIucGFyYW1zLFxuICAgIHBhcmFtU3RyaW5ncyA9IFtdLFxuICAgIGhhc2g7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYXJhbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgcGFyYW1TdHJpbmdzLnB1c2godGhpcy5hY2NlcHQocGFyYW1zW2ldKSk7XG4gIH1cblxuICBwYXJhbXMgPSAnWycgKyBwYXJhbVN0cmluZ3Muam9pbignLCAnKSArICddJztcblxuICBoYXNoID0gc2V4cHIuaGFzaCA/ICcgJyArIHRoaXMuYWNjZXB0KHNleHByLmhhc2gpIDogJyc7XG5cbiAgcmV0dXJuIHRoaXMuYWNjZXB0KHNleHByLnBhdGgpICsgJyAnICsgcGFyYW1zICsgaGFzaDtcbn07XG5cblByaW50VmlzaXRvci5wcm90b3R5cGUuUGF0aEV4cHJlc3Npb24gPSBmdW5jdGlvbihpZCkge1xuICBsZXQgcGF0aCA9IGlkLnBhcnRzLmpvaW4oJy8nKTtcbiAgcmV0dXJuIChpZC5kYXRhID8gJ0AnIDogJycpICsgJ1BBVEg6JyArIHBhdGg7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLlN0cmluZ0xpdGVyYWwgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgcmV0dXJuICdcIicgKyBzdHJpbmcudmFsdWUgKyAnXCInO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5OdW1iZXJMaXRlcmFsID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gIHJldHVybiAnTlVNQkVSeycgKyBudW1iZXIudmFsdWUgKyAnfSc7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLkJvb2xlYW5MaXRlcmFsID0gZnVuY3Rpb24oYm9vbCkge1xuICByZXR1cm4gJ0JPT0xFQU57JyArIGJvb2wudmFsdWUgKyAnfSc7XG59O1xuXG5QcmludFZpc2l0b3IucHJvdG90eXBlLlVuZGVmaW5lZExpdGVyYWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICdVTkRFRklORUQnO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5OdWxsTGl0ZXJhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJ05VTEwnO1xufTtcblxuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5IYXNoID0gZnVuY3Rpb24oaGFzaCkge1xuICBsZXQgcGFpcnMgPSBoYXNoLnBhaXJzLFxuICAgIGpvaW5lZFBhaXJzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBqb2luZWRQYWlycy5wdXNoKHRoaXMuYWNjZXB0KHBhaXJzW2ldKSk7XG4gIH1cblxuICByZXR1cm4gJ0hBU0h7JyArIGpvaW5lZFBhaXJzLmpvaW4oJywgJykgKyAnfSc7XG59O1xuUHJpbnRWaXNpdG9yLnByb3RvdHlwZS5IYXNoUGFpciA9IGZ1bmN0aW9uKHBhaXIpIHtcbiAgcmV0dXJuIHBhaXIua2V5ICsgJz0nICsgdGhpcy5hY2NlcHQocGFpci52YWx1ZSk7XG59O1xuLyogZXNsaW50LWVuYWJsZSBuZXctY2FwICovXG4iLCJpbXBvcnQgSGFuZGxlYmFycyBmcm9tIFwiaGFuZGxlYmFyc1wiO1xuaW1wb3J0IHR5cGUgU3RvcnkgZnJvbSBcIi4vU3RvcnlcIjtcblxuY2xhc3MgSGFuZGxlYmFyc1JlbmRlcmVyIHtcblx0c3Rvcnk6IFN0b3J5O1xuXG5cdGNvbnN0cnVjdG9yKHN0b3J5OiBTdG9yeSkge1xuXHRcdHRoaXMuc3RvcnkgPSBzdG9yeTtcblxuXHRcdEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJzZXRcIiwgKG9wdGlvbnMpID0+IHtcblx0XHRcdE9iamVjdC5rZXlzKG9wdGlvbnMuaGFzaCkuZm9yRWFjaCgoa2V5KSA9PiB7XG5cdFx0XHRcdGxldCB2YWx1ZTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHR2YWx1ZSA9IEpTT04ucGFyc2Uob3B0aW9ucy5oYXNoW2tleV0pO1xuXHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBvcHRpb25zLmhhc2hba2V5XTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuc3Rvcnkuc3RhdGUuc2V0KGtleSwgdmFsdWUpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHRyZW5kZXIoY29udGVudDogc3RyaW5nKSB7XG5cdFx0Y29uc3QgdGVtcGxhdGUgPSBIYW5kbGViYXJzLmNvbXBpbGUoY29udGVudCk7XG5cblx0XHRyZXR1cm4gdGVtcGxhdGUodGhpcy5zdG9yeS5zdGF0ZS5zdG9yZSk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSGFuZGxlYmFyc1JlbmRlcmVyO1xuIiwiaW1wb3J0IFBhc3NhZ2UgZnJvbSBcIi4vUGFzc2FnZVwiO1xuaW1wb3J0IFN0YXRlIGZyb20gXCIuL1N0YXRlXCI7XG5pbXBvcnQgSGFuZGxlYmFyc1JlbmRlcmVyIGZyb20gXCIuL0hhbmRsZWJhcnNSZW5kZXJlclwiO1xuXG5jb25zdCBDVVJSRU5UX1BBU1NBR0VfUElEX1NUQVRFS0VZID0gXCJjdXJyZW50UGFzc2FnZVBpZDtcIjtcblxuY2xhc3MgU3Rvcnkge1xuXHRuYW1lOiBzdHJpbmc7XG5cdGlmaWQ6IHN0cmluZztcblx0Zm9ybWF0OiBzdHJpbmcgfCBudWxsO1xuXHRmb3JtYXRWZXJzaW9uOiBzdHJpbmcgfCBudWxsO1xuXHRzdGFydG5vZGU6IHN0cmluZyB8IG51bGw7XG5cdHpvb206IHN0cmluZyB8IG51bGw7XG5cdGNyZWF0b3I6IHN0cmluZyB8IG51bGw7XG5cdGNyZWF0b3JWZXJzaW9uOiBzdHJpbmcgfCBudWxsO1xuXHRwYXNzYWdlczogUGFzc2FnZVtdO1xuXHRzdGF0ZTogU3RhdGU7XG5cdHJlbmRlcmVyOiBIYW5kbGViYXJzUmVuZGVyZXI7XG5cblx0Y29uc3RydWN0b3Ioc3RvcnlEYXRhTm9kZTogSFRNTEVsZW1lbnQpIHtcblx0XHRjb25zdCBuYW1lID0gc3RvcnlEYXRhTm9kZS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpO1xuXHRcdGNvbnN0IGlmaWQgPSBzdG9yeURhdGFOb2RlLmdldEF0dHJpYnV0ZShcImlmaWRcIik7XG5cdFx0Y29uc3Qgc3RhcnRub2RlID0gc3RvcnlEYXRhTm9kZS5nZXRBdHRyaWJ1dGUoXCJzdGFydG5vZGVcIik7XG5cblx0XHRpZiAoIW5hbWUpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIlN0b3J5IGlzIG1pc3NpbmcgYSBuYW1lIVwiKTtcblx0XHR9XG5cblx0XHRpZiAoIWlmaWQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgU3RvcnkgaXMgbWlzc2luZyBhbiBpZmlkIWApO1xuXHRcdH1cblxuXHRcdGlmICghc3RhcnRub2RlKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYE5vIHN0YXJ0bm9kZSBzcGVjaWZpZWQhYCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblx0XHR0aGlzLmlmaWQgPSBpZmlkO1xuXHRcdHRoaXMuc3RhcnRub2RlID0gc3RhcnRub2RlO1xuXHRcdHRoaXMuZm9ybWF0ID0gc3RvcnlEYXRhTm9kZS5nZXRBdHRyaWJ1dGUoXCJmb3JtYXRcIik7XG5cdFx0dGhpcy5mb3JtYXRWZXJzaW9uID0gc3RvcnlEYXRhTm9kZS5nZXRBdHRyaWJ1dGUoXCJmb3JtYXQtdmVyc2lvblwiKTtcblx0XHR0aGlzLnpvb20gPSBzdG9yeURhdGFOb2RlLmdldEF0dHJpYnV0ZShcInpvb21cIik7XG5cdFx0dGhpcy5jcmVhdG9yID0gc3RvcnlEYXRhTm9kZS5nZXRBdHRyaWJ1dGUoXCJjcmVhdG9yXCIpO1xuXHRcdHRoaXMuY3JlYXRvclZlcnNpb24gPSBzdG9yeURhdGFOb2RlLmdldEF0dHJpYnV0ZShcImNyZWF0b3ItdmVyc2lvblwiKTtcblxuXHRcdGNvbnN0IHBhc3NhZ2VzOiBQYXNzYWdlW10gPSBbXTtcblx0XHRjb25zdCBwYXNzYWdlTm9kZXMgPVxuXHRcdFx0c3RvcnlEYXRhTm9kZS5xdWVyeVNlbGVjdG9yQWxsPEhUTUxFbGVtZW50PihcInR3LXBhc3NhZ2VkYXRhXCIpO1xuXG5cdFx0QXJyYXkuZnJvbShwYXNzYWdlTm9kZXMpLmZvckVhY2goKG5vZGUpID0+IHtcblx0XHRcdHBhc3NhZ2VzLnB1c2gobmV3IFBhc3NhZ2Uobm9kZSkpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5wYXNzYWdlcyA9IHBhc3NhZ2VzO1xuXG5cdFx0dGhpcy5zdGF0ZSA9IG5ldyBTdGF0ZSh7XG5cdFx0XHRbQ1VSUkVOVF9QQVNTQUdFX1BJRF9TVEFURUtFWV06IHN0YXJ0bm9kZSxcblx0XHR9KTtcblxuXHRcdHRoaXMucmVuZGVyZXIgPSBuZXcgSGFuZGxlYmFyc1JlbmRlcmVyKHRoaXMpO1xuXHR9XG5cblx0Z2V0IGN1cnJlbnRQYXNzYWdlKCkge1xuXHRcdGNvbnN0IGN1cnJlbnRQYXNzYWdlID0gdGhpcy5nZXRQYXNzYWdlQnlQaWQoXG5cdFx0XHR0aGlzLnN0YXRlLmdldChDVVJSRU5UX1BBU1NBR0VfUElEX1NUQVRFS0VZKVxuXHRcdCk7XG5cdFx0aWYgKCFjdXJyZW50UGFzc2FnZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRgVHJpZWQgdG8gZmV0Y2ggY3VycmVudFBhc3NhZ2UgYnV0IGl0IGRvZXNuJ3QgZXhpc3QhYFxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gY3VycmVudFBhc3NhZ2U7XG5cdH1cblxuXHRnZXRQYXNzYWdlQnlQaWQocGlkOiBzdHJpbmcpIHtcblx0XHRyZXR1cm4gdGhpcy5wYXNzYWdlcy5maW5kKChwYXNzYWdlKSA9PiBwYXNzYWdlLnBpZCA9PT0gcGlkKSB8fCBudWxsO1xuXHR9XG5cblx0Z2V0UGFzc2FnZUJ5TmFtZShuYW1lOiBzdHJpbmcpIHtcblx0XHRyZXR1cm4gdGhpcy5wYXNzYWdlcy5maW5kKChwYXNzYWdlKSA9PiBwYXNzYWdlLm5hbWUgPT09IG5hbWUpIHx8IG51bGw7XG5cdH1cblxuXHRkaXNwbGF5UGFzc2FnZShwYXNzYWdlT3JQaWQ6IHN0cmluZyB8IFBhc3NhZ2UsIG5vZGU6IEhUTUxFbGVtZW50KSB7XG5cdFx0bGV0IHBhc3NhZ2U6IFBhc3NhZ2U7XG5cdFx0aWYgKHR5cGVvZiBwYXNzYWdlT3JQaWQgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdGNvbnN0IGZvdW5kUGFzc2FnZSA9IHRoaXMuZ2V0UGFzc2FnZUJ5UGlkKHBhc3NhZ2VPclBpZCk7XG5cdFx0XHRpZiAoIWZvdW5kUGFzc2FnZSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0YFRyaWVkIHRvIGRpc3BsYXkgcGFzc2FnZSB3aXRoIHBpZDogJHtwYXNzYWdlT3JQaWR9LCBidXQgaXQgZG9lc24ndCBleGlzdCFgXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRwYXNzYWdlID0gZm91bmRQYXNzYWdlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwYXNzYWdlID0gcGFzc2FnZU9yUGlkO1xuXHRcdH1cblxuXHRcdGNvbnN0IHBhc3NhZ2VDb250ZW50ID0gdGhpcy5yZW5kZXJlci5yZW5kZXIocGFzc2FnZS5yaWNoQ29udGVudCk7XG5cblx0XHRub2RlLmlubmVySFRNTCA9IHBhc3NhZ2VDb250ZW50O1xuXG5cdFx0dGhpcy5zdGF0ZS5zZXQoQ1VSUkVOVF9QQVNTQUdFX1BJRF9TVEFURUtFWSwgcGFzc2FnZS5waWQpO1xuXHR9XG5cblx0ZGlzcGxheUN1cnJlbnRQYXNzYWdlKG5vZGU6IEhUTUxFbGVtZW50KSB7XG5cdFx0dGhpcy5kaXNwbGF5UGFzc2FnZSh0aGlzLmN1cnJlbnRQYXNzYWdlLCBub2RlKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBTdG9yeTtcbiIsImltcG9ydCBTdG9yeSBmcm9tIFwiLi9TdG9yeVwiO1xuXG50eXBlIEV4cGxvcmVyR2xvYmFsID0ge1xuXHRfX2V4cGxvcmVyOiB7XG5cdFx0c3Rvcnk6IFN0b3J5O1xuXHR9O1xufTtcblxudHlwZSBXaW5kb3dXaXRoRXhwbG9yZXJHbG9iYWwgPSB0eXBlb2Ygd2luZG93ICYgRXhwbG9yZXJHbG9iYWw7XG5cbigoKSA9PiB7XG5cdC8vIEluaXRpYWxpemUgc3RvcnkgZGF0YVxuXHRjb25zdCByb290U3RvcnlEYXRhTm9kZSA9XG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oXCJ0dy1zdG9yeWRhdGFcIik7XG5cdGlmICghcm9vdFN0b3J5RGF0YU5vZGUpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgdHctc3RvcnlkYXRhIG5vZGUhYCk7XG5cdH1cblx0Y29uc3Qgc3RvcnkgPSBuZXcgU3Rvcnkocm9vdFN0b3J5RGF0YU5vZGUpO1xuXG5cdC8vIEZpbmQgc3RvcnkgRE9NXG5cdGNvbnN0IHN0b3J5Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0dy1zdG9yeVwiKTtcblx0aWYgKCFzdG9yeUNvbnRhaW5lcikge1xuXHRcdHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBzdG9yeSBjb250YWluZXIgI3R3LXN0b3J5IWApO1xuXHR9XG5cblx0Y29uc3QgcGFzc2FnZUNvbnRhaW5lciA9IHN0b3J5Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KFxuXHRcdFwiI3R3LXN0b3J5ICN0dy1wYXNzYWdlXCJcblx0KTtcblx0aWYgKCFwYXNzYWdlQ29udGFpbmVyKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIHBhc3NhZ2UgY29udGFpbmVyICN0dy1wYXNzYWdlYCk7XG5cdH1cblxuXHQvLyBIYW5kbGUgbGluayBjbGlja3Ncblx0c3RvcnlDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuXHRcdGlmICghZXZlbnQudGFyZ2V0KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuXG5cdFx0aWYgKFxuXHRcdFx0dGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJhXCIgJiZcblx0XHRcdHRhcmdldC5kYXRhc2V0LnBhc3NhZ2VOYW1lXG5cdFx0KSB7XG5cdFx0XHRjb25zdCBwYXNzYWdlTmFtZSA9IHRhcmdldC5kYXRhc2V0LnBhc3NhZ2VOYW1lO1xuXHRcdFx0Y29uc3QgcGFzc2FnZSA9IHN0b3J5LmdldFBhc3NhZ2VCeU5hbWUocGFzc2FnZU5hbWUpO1xuXHRcdFx0aWYgKCFwYXNzYWdlKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHRgQ291bGRuJ3QgZmluZCBwYXNzYWdlIHdpdGggbmFtZTogXCIke3Bhc3NhZ2VOYW1lfVwiIWBcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdHN0b3J5LmRpc3BsYXlQYXNzYWdlKHBhc3NhZ2UsIHBhc3NhZ2VDb250YWluZXIpO1xuXHRcdH1cblx0fSk7XG5cblx0Ly8gTGV0J3MgbWFrZSB0aGUgc3RvcnkgYWNjZXNzaWJsZVxuXHQod2luZG93IGFzIFdpbmRvd1dpdGhFeHBsb3Jlckdsb2JhbCkuX19leHBsb3JlciA9IHtcblx0XHRzdG9yeSxcblx0fTtcblxuXHQvLyBMZXQncyBnbyFcblx0c3RvcnkuZGlzcGxheUN1cnJlbnRQYXNzYWdlKHBhc3NhZ2VDb250YWluZXIpO1xufSkoKTtcbiJdLCJuYW1lcyI6WyIkMDFiNjdhYTE0NjFiMGFhYSRleHBvcnQkNGQ5OWY3YzMwZTg1NGZmIiwiJDAxYjY3YWExNDYxYjBhYWEkZXhwb3J0JDE5NGU5MjU1NGQwNGFiZGQiLCIkMDFiNjdhYTE0NjFiMGFhYSRleHBvcnQkN2U5ODdlOGYzNzVkMjRjMiIsInBhcmNlbFJlcXVpcmUiLCJTb3VyY2VNYXBHZW5lcmF0b3IiLCJTb3VyY2VNYXBDb25zdW1lciIsIlNvdXJjZU5vZGUiLCIkYzc1M2U1YjZkY2E5NGMwOSRleHBvcnQkNGQ5OWY3YzMwZTg1NGZmIiwiQXJyYXlTZXQiLCJNYXBwaW5nTGlzdCIsIiRjNzUzZTViNmRjYTk0YzA5JHZhciRTb3VyY2VNYXBHZW5lcmF0b3IiLCJhQXJncyIsInRoaXMiLCJfZmlsZSIsIiQ2STZ5NSIsImdldEFyZyIsIl9zb3VyY2VSb290IiwiX3NraXBWYWxpZGF0aW9uIiwiX3NvdXJjZXMiLCIkYzc1M2U1YjZkY2E5NGMwOSRyZXF1aXJlJEFycmF5U2V0IiwiX25hbWVzIiwiX21hcHBpbmdzIiwiJGM3NTNlNWI2ZGNhOTRjMDkkcmVxdWlyZSRNYXBwaW5nTGlzdCIsIl9zb3VyY2VzQ29udGVudHMiLCJwcm90b3R5cGUiLCJfdmVyc2lvbiIsImZyb21Tb3VyY2VNYXAiLCJhU291cmNlTWFwQ29uc3VtZXIiLCJzb3VyY2VSb290IiwiZ2VuZXJhdG9yIiwiZmlsZSIsImVhY2hNYXBwaW5nIiwibWFwcGluZyIsIm5ld01hcHBpbmciLCJnZW5lcmF0ZWQiLCJsaW5lIiwiZ2VuZXJhdGVkTGluZSIsImNvbHVtbiIsImdlbmVyYXRlZENvbHVtbiIsInNvdXJjZSIsInJlbGF0aXZlIiwib3JpZ2luYWwiLCJvcmlnaW5hbExpbmUiLCJvcmlnaW5hbENvbHVtbiIsIm5hbWUiLCJhZGRNYXBwaW5nIiwic291cmNlcyIsImZvckVhY2giLCJzb3VyY2VGaWxlIiwic291cmNlUmVsYXRpdmUiLCJoYXMiLCJhZGQiLCJjb250ZW50Iiwic291cmNlQ29udGVudEZvciIsInNldFNvdXJjZUNvbnRlbnQiLCJfdmFsaWRhdGVNYXBwaW5nIiwiU3RyaW5nIiwiYVNvdXJjZUZpbGUiLCJhU291cmNlQ29udGVudCIsIk9iamVjdCIsImNyZWF0ZSIsInRvU2V0U3RyaW5nIiwia2V5cyIsImxlbmd0aCIsImFwcGx5U291cmNlTWFwIiwiYVNvdXJjZU1hcFBhdGgiLCJFcnJvciIsIm5ld1NvdXJjZXMiLCJuZXdOYW1lcyIsInVuc29ydGVkRm9yRWFjaCIsIm9yaWdpbmFsUG9zaXRpb25Gb3IiLCJqb2luIiwiYUdlbmVyYXRlZCIsImFPcmlnaW5hbCIsImFTb3VyY2UiLCJhTmFtZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJfc2VyaWFsaXplTWFwcGluZ3MiLCJuZXh0IiwibmFtZUlkeCIsInNvdXJjZUlkeCIsInByZXZpb3VzR2VuZXJhdGVkQ29sdW1uIiwicHJldmlvdXNHZW5lcmF0ZWRMaW5lIiwicHJldmlvdXNPcmlnaW5hbENvbHVtbiIsInByZXZpb3VzT3JpZ2luYWxMaW5lIiwicHJldmlvdXNOYW1lIiwicHJldmlvdXNTb3VyY2UiLCJyZXN1bHQiLCJtYXBwaW5ncyIsInRvQXJyYXkiLCJpIiwibGVuIiwiY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQiLCIkZjMwWDkiLCJlbmNvZGUiLCJpbmRleE9mIiwiX2dlbmVyYXRlU291cmNlc0NvbnRlbnQiLCJhU291cmNlcyIsImFTb3VyY2VSb290IiwibWFwIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidG9KU09OIiwidmVyc2lvbiIsIm5hbWVzIiwic291cmNlc0NvbnRlbnQiLCJ0b1N0cmluZyIsIiRhZjQ3ZTAxNmM1MzNlY2Q5JGV4cG9ydCRjNTY0Y2RiYmU2ZGE0OTMiLCIkYWY0N2UwMTZjNTMzZWNkOSRleHBvcnQkMmY4NzJjMGYyMTE3YmU2OSIsImFWYWx1ZSIsImRpZ2l0IiwiZW5jb2RlZCIsInZscSIsIiRhZjQ3ZTAxNmM1MzNlY2Q5JHZhciR0b1ZMUVNpZ25lZCIsIiRhZjQ3ZTAxNmM1MzNlY2Q5JHZhciRWTFFfQkFTRSIsIiRpaVlyZSIsImFTdHIiLCJhSW5kZXgiLCJhT3V0UGFyYW0iLCJjb250aW51YXRpb24iLCJzaGlmdGVkIiwic3RyTGVuIiwic2hpZnQiLCJkZWNvZGUiLCJjaGFyQ29kZUF0IiwiY2hhckF0IiwidmFsdWUiLCJyZXN0IiwiJGQ1MzhjYTMzNGZjOTRjZmEkZXhwb3J0JGM1NjRjZGJiZTZkYTQ5MyIsIiRkNTM4Y2EzMzRmYzk0Y2ZhJGV4cG9ydCQyZjg3MmMwZjIxMTdiZTY5IiwiJGQ1MzhjYTMzNGZjOTRjZmEkdmFyJGludFRvQ2hhck1hcCIsInNwbGl0IiwibnVtYmVyIiwiVHlwZUVycm9yIiwiY2hhckNvZGUiLCIkNGUyYmVlOTc4MGIwMGQxNiRleHBvcnQkNmU0NWU3MGFkY2U3MGJiMiIsIiQ0ZTJiZWU5NzgwYjAwZDE2JGV4cG9ydCRkNmU4MzM2NDdmN2Y1ZjE3IiwiJDRlMmJlZTk3ODBiMDBkMTYkZXhwb3J0JGEzMjk1MzU4YmZmNzdlIiwiJDRlMmJlZTk3ODBiMDBkMTYkZXhwb3J0JGY3ZTJjODIzMWM1N2E4YmQiLCIkNGUyYmVlOTc4MGIwMGQxNiRleHBvcnQkZTQzNGM3MjU1YWNkYTk5NCIsIiQ0ZTJiZWU5NzgwYjAwZDE2JGV4cG9ydCRmMGU3ZDExMDZlZWFiYmU2IiwiJDRlMmJlZTk3ODBiMDBkMTYkZXhwb3J0JGJlMGZhMTE2M2ZhN2E0YyIsIiQ0ZTJiZWU5NzgwYjAwZDE2JGV4cG9ydCQxZmM0N2MzZDRjMzMwMmExIiwiJDRlMmJlZTk3ODBiMDBkMTYkZXhwb3J0JDI3MzA3NzkwMmRlOTJmZjIiLCIkNGUyYmVlOTc4MGIwMGQxNiRleHBvcnQkYjdhY2Y1MzM5NDEzMDJmNiIsIiQ0ZTJiZWU5NzgwYjAwZDE2JGV4cG9ydCRmOWM0MzkwNzU0OWQ2MWYxIiwiJDRlMmJlZTk3ODBiMDBkMTYkZXhwb3J0JGI0OWUyZGUyYWQ1NDI3MzIiLCIkNGUyYmVlOTc4MGIwMGQxNiRleHBvcnQkNjU5YTFhYThmMWNkYzAzNiIsImFEZWZhdWx0VmFsdWUiLCJhcmd1bWVudHMiLCIkNGUyYmVlOTc4MGIwMGQxNiR2YXIkdXJsUmVnZXhwIiwiJDRlMmJlZTk3ODBiMDBkMTYkdmFyJGRhdGFVcmxSZWdleHAiLCIkNGUyYmVlOTc4MGIwMGQxNiR2YXIkdXJsUGFyc2UiLCJhVXJsIiwibWF0Y2giLCJzY2hlbWUiLCJhdXRoIiwiaG9zdCIsInBvcnQiLCJwYXRoIiwiJDRlMmJlZTk3ODBiMDBkMTYkdmFyJHVybEdlbmVyYXRlIiwiYVBhcnNlZFVybCIsInVybCIsIiQ0ZTJiZWU5NzgwYjAwZDE2JHZhciRub3JtYWxpemUiLCJhUGF0aCIsInBhcnQiLCJpc0Fic29sdXRlIiwicGFydHMiLCJ1cCIsInNwbGljZSIsIiQ0ZTJiZWU5NzgwYjAwZDE2JHZhciRqb2luIiwiYVJvb3QiLCJhUGF0aFVybCIsImFSb290VXJsIiwiam9pbmVkIiwicmVwbGFjZSIsInRlc3QiLCJsZXZlbCIsImluZGV4IiwibGFzdEluZGV4T2YiLCJzbGljZSIsIkFycmF5Iiwic3Vic3RyIiwiJDRlMmJlZTk3ODBiMDBkMTYkdmFyJHN1cHBvcnRzTnVsbFByb3RvIiwiJDRlMmJlZTk3ODBiMDBkMTYkdmFyJGlkZW50aXR5IiwicyIsIiQ0ZTJiZWU5NzgwYjAwZDE2JHZhciRpc1Byb3RvU3RyaW5nIiwiJDRlMmJlZTk3ODBiMDBkMTYkdmFyJHN0cmNtcCIsImFTdHIxIiwiYVN0cjIiLCJtYXBwaW5nQSIsIm1hcHBpbmdCIiwib25seUNvbXBhcmVPcmlnaW5hbCIsImNtcCIsIm9ubHlDb21wYXJlR2VuZXJhdGVkIiwic3RyIiwicGFyc2UiLCJzb3VyY2VVUkwiLCJzb3VyY2VNYXBVUkwiLCJwYXJzZWQiLCJzdWJzdHJpbmciLCIkZjFiOGU5Y2MzNmJjN2JhZSRleHBvcnQkNjA1YmJmNWVhN2I2MGJhMyIsIiRmMWI4ZTljYzM2YmM3YmFlJHZhciRoYXMiLCIkZjFiOGU5Y2MzNmJjN2JhZSR2YXIkaGFzTmF0aXZlTWFwIiwiTWFwIiwiJGYxYjhlOWNjMzZiYzdiYWUkdmFyJEFycmF5U2V0IiwiX2FycmF5IiwiX3NldCIsImZyb21BcnJheSIsImFBcnJheSIsImFBbGxvd0R1cGxpY2F0ZXMiLCJzZXQiLCJzaXplIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNTdHIiLCJpc0R1cGxpY2F0ZSIsImlkeCIsInB1c2giLCJnZXQiLCJhdCIsImFJZHgiLCIkMTMyMDg2Y2RlZmFkNzIwMiRleHBvcnQkZTgyZTA5MDg4NDNkZDk1MSIsIiQxMzIwODZjZGVmYWQ3MjAyJHZhciRNYXBwaW5nTGlzdCIsIl9zb3J0ZWQiLCJfbGFzdCIsImFDYWxsYmFjayIsImFUaGlzQXJnIiwiYU1hcHBpbmciLCJsaW5lQSIsImxpbmVCIiwiY29sdW1uQSIsImNvbHVtbkIiLCJzb3J0IiwiJDA0MTY4YzZjNDAzMDQxMjQkZXhwb3J0JDE5NGU5MjU1NGQwNGFiZGQiLCJxdWlja1NvcnQiLCIkMDQxNjhjNmM0MDMwNDEyNCR2YXIkU291cmNlTWFwQ29uc3VtZXIiLCJhU291cmNlTWFwIiwiYVNvdXJjZU1hcFVSTCIsInNvdXJjZU1hcCIsInBhcnNlU291cmNlTWFwSW5wdXQiLCJzZWN0aW9ucyIsIiQwNDE2OGM2YzQwMzA0MTI0JHZhciRJbmRleGVkU291cmNlTWFwQ29uc3VtZXIiLCIkMDQxNjhjNmM0MDMwNDEyNCR2YXIkQmFzaWNTb3VyY2VNYXBDb25zdW1lciIsIm5vcm1hbGl6ZSIsIiQwNDE2OGM2YzQwMzA0MTI0JHJlcXVpcmUkQXJyYXlTZXQiLCJfYWJzb2x1dGVTb3VyY2VzIiwiY29tcHV0ZVNvdXJjZVVSTCIsIl9zb3VyY2VNYXBVUkwiLCIkMDQxNjhjNmM0MDMwNDEyNCR2YXIkTWFwcGluZyIsImxhc3RPZmZzZXQiLCJfc2VjdGlvbnMiLCJvZmZzZXQiLCJvZmZzZXRMaW5lIiwib2Zmc2V0Q29sdW1uIiwiZ2VuZXJhdGVkT2Zmc2V0IiwiY29uc3VtZXIiLCJfX2dlbmVyYXRlZE1hcHBpbmdzIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiX3BhcnNlTWFwcGluZ3MiLCJfX29yaWdpbmFsTWFwcGluZ3MiLCJfY2hhcklzTWFwcGluZ1NlcGFyYXRvciIsImMiLCJHRU5FUkFURURfT1JERVIiLCJPUklHSU5BTF9PUkRFUiIsIkdSRUFURVNUX0xPV0VSX0JPVU5EIiwiTEVBU1RfVVBQRVJfQk9VTkQiLCJhQ29udGV4dCIsImFPcmRlciIsImNvbnRleHQiLCJfZ2VuZXJhdGVkTWFwcGluZ3MiLCJfb3JpZ2luYWxNYXBwaW5ncyIsImFsbEdlbmVyYXRlZFBvc2l0aW9uc0ZvciIsIm5lZWRsZSIsIl9maW5kU291cmNlSW5kZXgiLCJfZmluZE1hcHBpbmciLCJjb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyIsIiRsbnR3TyIsInVuZGVmaW5lZCIsImxhc3RDb2x1bW4iLCJyZWxhdGl2ZVNvdXJjZSIsInNtYyIsImdlbmVyYXRlZE1hcHBpbmdzIiwiZGVzdEdlbmVyYXRlZE1hcHBpbmdzIiwiZGVzdE9yaWdpbmFsTWFwcGluZ3MiLCJzcmNNYXBwaW5nIiwiZGVzdE1hcHBpbmciLCIkMDQxNjhjNmM0MDMwNDEyNCRyZXF1aXJlJHF1aWNrU29ydCIsInNlZ21lbnQiLCJlbmQiLCJjYWNoZWRTZWdtZW50cyIsInRlbXAiLCJvcmlnaW5hbE1hcHBpbmdzIiwiY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQiLCJhTmVlZGxlIiwiYU1hcHBpbmdzIiwiYUxpbmVOYW1lIiwiYUNvbHVtbk5hbWUiLCJhQ29tcGFyYXRvciIsImFCaWFzIiwic2VhcmNoIiwiY29tcHV0ZUNvbHVtblNwYW5zIiwibmV4dE1hcHBpbmciLCJsYXN0R2VuZXJhdGVkQ29sdW1uIiwiSW5maW5pdHkiLCJoYXNDb250ZW50c09mQWxsU291cmNlcyIsInNvbWUiLCJzYyIsIm51bGxPbk1pc3NpbmciLCJ1cmxQYXJzZSIsImZpbGVVcmlBYnNQYXRoIiwiZ2VuZXJhdGVkUG9zaXRpb25Gb3IiLCJjb25zdHJ1Y3RvciIsImoiLCJzZWN0aW9uSW5kZXgiLCJzZWN0aW9uIiwiYmlhcyIsImV2ZXJ5IiwiZ2VuZXJhdGVkUG9zaXRpb24iLCJzZWN0aW9uTWFwcGluZ3MiLCJhZGp1c3RlZE1hcHBpbmciLCIkZjkwMmE2YTc5MjBkZTAzYSRleHBvcnQkNGVjZDYxNmRjZTE4MmRmZiIsIiRmOTAyYTZhNzkyMGRlMDNhJGV4cG9ydCRiOTlmYmVjZmYyNjEyNDMiLCIkZjkwMmE2YTc5MjBkZTAzYSRleHBvcnQkZDc2MTI4ZDAwN2QxOTAxOSIsIiRmOTAyYTZhNzkyMGRlMDNhJHZhciRyZWN1cnNpdmVTZWFyY2giLCJhTG93IiwiYUhpZ2giLCJhSGF5c3RhY2siLCJhQ29tcGFyZSIsIm1pZCIsIk1hdGgiLCJmbG9vciIsIiRiMmQzYzNlN2FkYzFlZTIxJGV4cG9ydCQ4NjYyNzAyNjliOTU0NGE1IiwiJGIyZDNjM2U3YWRjMWVlMjEkdmFyJHN3YXAiLCJhcnkiLCJ4IiwieSIsIiRiMmQzYzNlN2FkYzFlZTIxJHZhciRkb1F1aWNrU29ydCIsImNvbXBhcmF0b3IiLCJwIiwiciIsImxvdyIsImhpZ2giLCJyb3VuZCIsInJhbmRvbSIsInBpdm90IiwicSIsIiRlMmUzMmVmNTZlZjEyNTFmJGV4cG9ydCQ3ZTk4N2U4ZjM3NWQyNGMyIiwiJGUyZTMyZWY1NmVmMTI1MWYkdmFyJFJFR0VYX05FV0xJTkUiLCIkZTJlMzJlZjU2ZWYxMjUxZiR2YXIkU291cmNlTm9kZSIsImFMaW5lIiwiYUNvbHVtbiIsImFDaHVua3MiLCJjaGlsZHJlbiIsInNvdXJjZUNvbnRlbnRzIiwiZnJvbVN0cmluZ1dpdGhTb3VyY2VNYXAiLCJhR2VuZXJhdGVkQ29kZSIsImFSZWxhdGl2ZVBhdGgiLCJub2RlIiwicmVtYWluaW5nTGluZXMiLCJyZW1haW5pbmdMaW5lc0luZGV4Iiwic2hpZnROZXh0TGluZSIsImdldE5leHRMaW5lIiwibGFzdEdlbmVyYXRlZExpbmUiLCJsYXN0TWFwcGluZyIsImNvZGUiLCJuZXh0TGluZSIsImFkZE1hcHBpbmdXaXRoQ29kZSIsImFDaHVuayIsImlzQXJyYXkiLCJjaHVuayIsInByZXBlbmQiLCJ1bnNoaWZ0Iiwid2FsayIsImFGbiIsImFTZXAiLCJuZXdDaGlsZHJlbiIsInJlcGxhY2VSaWdodCIsImFQYXR0ZXJuIiwiYVJlcGxhY2VtZW50IiwibGFzdENoaWxkIiwid2Fsa1NvdXJjZUNvbnRlbnRzIiwiZnJvbVNldFN0cmluZyIsInRvU3RyaW5nV2l0aFNvdXJjZU1hcCIsIiRlMmUzMmVmNTZlZjEyNTFmJHJlcXVpcmUkU291cmNlTWFwR2VuZXJhdG9yIiwic291cmNlTWFwcGluZ0FjdGl2ZSIsImxhc3RPcmlnaW5hbFNvdXJjZSIsImxhc3RPcmlnaW5hbExpbmUiLCJsYXN0T3JpZ2luYWxDb2x1bW4iLCJsYXN0T3JpZ2luYWxOYW1lIiwic291cmNlQ29udGVudCIsImV4cG9ydHMxIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJ3cml0YWJsZSIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibyIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwibiIsImZyb20iLCJhcnIiLCJhcnIyIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSIsImFsbG93QXJyYXlMaWtlIiwiaXQiLCJTeW1ib2wiLCJpdGVyYXRvciIsImJpbmQiLCJkb25lIiwiZ2V0RGVmYXVsdHMiLCJhc3luYyIsImJhc2VVcmwiLCJicmVha3MiLCJleHRlbnNpb25zIiwiZ2ZtIiwiaGVhZGVySWRzIiwiaGVhZGVyUHJlZml4IiwiaGlnaGxpZ2h0IiwibGFuZ1ByZWZpeCIsIm1hbmdsZSIsInBlZGFudGljIiwicmVuZGVyZXIiLCJzYW5pdGl6ZSIsInNhbml0aXplciIsInNpbGVudCIsInNtYXJ0TGlzdHMiLCJzbWFydHlwYW50cyIsInRva2VuaXplciIsIndhbGtUb2tlbnMiLCJ4aHRtbCIsImNoYW5nZURlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJkZWZhdWx0cyIsImVzY2FwZVRlc3QiLCJlc2NhcGVSZXBsYWNlIiwiZXNjYXBlVGVzdE5vRW5jb2RlIiwiZXNjYXBlUmVwbGFjZU5vRW5jb2RlIiwiZXNjYXBlUmVwbGFjZW1lbnRzIiwiZ2V0RXNjYXBlUmVwbGFjZW1lbnQiLCJjaCIsImVzY2FwZSIsImh0bWwiLCJ1bmVzY2FwZVRlc3QiLCJ1bmVzY2FwZSIsIl8iLCJ0b0xvd2VyQ2FzZSIsImZyb21DaGFyQ29kZSIsInBhcnNlSW50IiwiY2FyZXQiLCJlZGl0IiwicmVnZXgiLCJvcHQiLCJvYmoiLCJ2YWwiLCJnZXRSZWdleCIsIlJlZ0V4cCIsIm5vbldvcmRBbmRDb2xvblRlc3QiLCJvcmlnaW5JbmRlcGVuZGVudFVybCIsImNsZWFuVXJsIiwiYmFzZSIsImhyZWYiLCJwcm90IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZSIsInJlc29sdmVVcmwiLCJlbmNvZGVVUkkiLCJlMSIsImJhc2VVcmxzIiwianVzdERvbWFpbiIsInByb3RvY29sIiwiZG9tYWluIiwicnRyaW0iLCJyZWxhdGl2ZUJhc2UiLCJub29wVGVzdCIsImV4ZWMiLCJtZXJnZSIsInNwbGl0Q2VsbHMiLCJ0YWJsZVJvdyIsImNvdW50IiwiY2VsbHMiLCJlc2NhcGVkIiwiY3VyciIsInRyaW0iLCJwb3AiLCJpbnZlcnQiLCJsIiwic3VmZkxlbiIsImN1cnJDaGFyIiwiZmluZENsb3NpbmdCcmFja2V0IiwiYiIsImNoZWNrU2FuaXRpemVEZXByZWNhdGlvbiIsImNvbnNvbGUiLCJ3YXJuIiwicmVwZWF0U3RyaW5nIiwicGF0dGVybiIsIm91dHB1dExpbmsiLCJjYXAiLCJsaW5rIiwicmF3IiwibGV4ZXIiLCJ0aXRsZSIsInRleHQiLCJzdGF0ZSIsImluTGluayIsInRva2VuIiwidHlwZSIsInRva2VucyIsImlubGluZVRva2VucyIsImluZGVudENvZGVDb21wZW5zYXRpb24iLCJtYXRjaEluZGVudFRvQ29kZSIsImluZGVudFRvQ29kZSIsIm1hdGNoSW5kZW50SW5Ob2RlIiwiVG9rZW5pemVyIiwib3B0aW9ucyIsIl9wcm90byIsInNwYWNlIiwic3JjIiwicnVsZXMiLCJibG9jayIsIm5ld2xpbmUiLCJjb2RlQmxvY2tTdHlsZSIsImZlbmNlcyIsImxhbmciLCJoZWFkaW5nIiwidHJpbW1lZCIsImRlcHRoIiwiaW5saW5lIiwiaHIiLCJibG9ja3F1b3RlIiwiYmxvY2tUb2tlbnMiLCJsaXN0IiwiaXN0YXNrIiwiaXNjaGVja2VkIiwiaW5kZW50IiwiYmxhbmtMaW5lIiwiZW5kc1dpdGhCbGFua0xpbmUiLCJyYXdMaW5lIiwiaXRlbUNvbnRlbnRzIiwiZW5kRWFybHkiLCJidWxsIiwiaXNvcmRlcmVkIiwib3JkZXJlZCIsInN0YXJ0IiwibG9vc2UiLCJpdGVtcyIsIml0ZW1SZWdleCIsInRyaW1MZWZ0IiwibmV4dEJ1bGxldFJlZ2V4IiwibWluIiwiaHJSZWdleCIsImZlbmNlc0JlZ2luUmVnZXgiLCJoZWFkaW5nQmVnaW5SZWdleCIsInRhc2siLCJjaGVja2VkIiwidHJpbVJpZ2h0IiwidG9wIiwic3BhY2VycyIsImZpbHRlciIsInQiLCJoYXNNdWx0aXBsZUxpbmVCcmVha3MiLCJfc3RlcCIsImxpbmVCcmVha3MiLCJfaXRlcmF0b3IiLCJwcmUiLCJkZWYiLCJ0YWciLCJ0YWJsZSIsIml0ZW0iLCJoZWFkZXIiLCJhbGlnbiIsInJvd3MiLCJrIiwicm93IiwibGhlYWRpbmciLCJwYXJhZ3JhcGgiLCJpblJhd0Jsb2NrIiwidHJpbW1lZFVybCIsInJ0cmltU2xhc2giLCJsYXN0UGFyZW5JbmRleCIsImxpbmtMZW4iLCJfZXNjYXBlcyIsInJlZmxpbmsiLCJsaW5rcyIsIm5vbGluayIsImVtU3Ryb25nIiwibWFza2VkU3JjIiwicHJldkNoYXIiLCJsRGVsaW0iLCJuZXh0Q2hhciIsInB1bmN0dWF0aW9uIiwickRlbGltIiwickxlbmd0aCIsImxMZW5ndGgiLCJkZWxpbVRvdGFsIiwibWlkRGVsaW1Ub3RhbCIsImVuZFJlZyIsInJEZWxpbUFzdCIsInJEZWxpbVVuZCIsImxhc3RJbmRleCIsIl90ZXh0IiwiY29kZXNwYW4iLCJoYXNOb25TcGFjZUNoYXJzIiwiaGFzU3BhY2VDaGFyc09uQm90aEVuZHMiLCJiciIsImRlbCIsImF1dG9saW5rIiwicHJldkNhcFplcm8iLCJfYmFja3BlZGFsIiwiaW5saW5lVGV4dCIsIl9wYXJhZ3JhcGgiLCJfbGFiZWwiLCJfdGl0bGUiLCJidWxsZXQiLCJsaXN0SXRlbVN0YXJ0IiwiX3RhZyIsIl9jb21tZW50Iiwibm9ybWFsIiwicmVmbGlua1NlYXJjaCIsIm91dCIsIl9wdW5jdHVhdGlvbiIsImJsb2NrU2tpcCIsImVzY2FwZWRFbVN0IiwiX3NjaGVtZSIsIl9lbWFpbCIsIl9hdHRyaWJ1dGUiLCJfaHJlZiIsInN0cm9uZyIsIm1pZGRsZSIsImVuZEFzdCIsImVuZFVuZCIsImVtIiwiX2V4dGVuZGVkX2VtYWlsIiwiTGV4ZXIiLCJpbmxpbmVRdWV1ZSIsImxleCIsImxleElubGluZSIsImxhc3RUb2tlbiIsImN1dFNyYyIsImxhc3RQYXJhZ3JhcGhDbGlwcGVkIiwiX3RoaXMiLCJsZWFkaW5nIiwidGFicyIsInJlcGVhdCIsImV4dFRva2VuaXplciIsInN0YXJ0QmxvY2siLCJzdGFydEluZGV4IiwidGVtcFNyYyIsInRlbXBTdGFydCIsImdldFN0YXJ0SW5kZXgiLCJlcnJNc2ciLCJlcnJvciIsIl90aGlzMiIsImtlZXBQcmV2Q2hhciIsImluY2x1ZGVzIiwic3RhcnRJbmxpbmUiLCJSZW5kZXJlciIsIl9jb2RlIiwiaW5mb3N0cmluZyIsInF1b3RlIiwiX2h0bWwiLCJzbHVnZ2VyIiwic2x1ZyIsImJvZHkiLCJsaXN0aXRlbSIsImNoZWNrYm94IiwidGFibGVyb3ciLCJ0YWJsZWNlbGwiLCJmbGFncyIsImltYWdlIiwiVGV4dFJlbmRlcmVyIiwiU2x1Z2dlciIsInNlZW4iLCJzZXJpYWxpemUiLCJnZXROZXh0U2FmZVNsdWciLCJvcmlnaW5hbFNsdWciLCJpc0RyeVJ1biIsIm9jY3VyZW5jZUFjY3VtdWxhdG9yIiwiZHJ5cnVuIiwiUGFyc2VyIiwidGV4dFJlbmRlcmVyIiwicGFyc2VJbmxpbmUiLCJsMiIsImwzIiwiY2VsbCIsIml0ZW1Cb2R5IiwicmV0IiwicmVuZGVyZXJzIiwicGFyc2VyIiwibWFya2VkIiwiY2FsbGJhY2siLCJlcnIiLCJwZW5kaW5nIiwic2V0VGltZW91dCIsIm9uRXJyb3IiLCJtZXNzYWdlIiwiX3Rva2VucyIsIlByb21pc2UiLCJhbGwiLCJ0aGVuIiwic2V0T3B0aW9ucyIsInVzZSIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImhhc0V4dGVuc2lvbnMiLCJvcHRzIiwiYXBwbHkiLCJjb25jYXQiLCJjaGlsZFRva2VucyIsInBhY2siLCJleHQiLCJwcmV2UmVuZGVyZXIiLCJfbGVuMiIsIl9rZXkyIiwiX2xvb3AiLCJwcm9wIiwiX2xlbjMiLCJfa2V5MyIsIl9sb29wMiIsInByZXZUb2tlbml6ZXIiLCJfbGVuNCIsIl9rZXk0IiwiX3dhbGtUb2tlbnMiLCJ2YWx1ZXMiLCJfbG9vcDMiLCJfc3RlcDIiLCJfaXRlcmF0b3IyIiwiX3N0ZXAzIiwiX2l0ZXJhdG9yMyIsIl9zdGVwNCIsIl9pdGVyYXRvcjQiLCJfY2VsbCIsImZhY3RvcnkiLCIkMzk2NmE0MjIwZjIwNDNhNCRleHBvcnRzIiwiJDZiM2ViYjFhMTQxYjllMTckZXhwb3J0JDI1NTcyMjMxMmJhN2JhNzQiLCJsaW5rUmVnZXgiLCJtIiwiZ3JvdXAxIiwiZ3JvdXAyIiwicGFzc2FnZU5hbWUiLCJhbGlhcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImRhdGFzZXQiLCJvdXRlckhUTUwiLCIkNmIzZWJiMWExNDFiOWUxNyRleHBvcnQkOTdkMGI5NDZlZWRhODBmZSIsImhhbmRsZWJhcnNBdHRyaWJ1dGVRdW90ZVJlZ2V4IiwiJGNkNTliZTAwYjBiNjNlMjQkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsInBhc3NhZ2VOb2RlIiwicGlkIiwiZ2V0QXR0cmlidXRlIiwidGFnc1JhdyIsInBvc2l0aW9uUmF3Iiwic2l6ZVJhdyIsInRhZ3MiLCJwb3NpdGlvbiIsInBvc2l0aW9uQ29vcmRzIiwicGFyc2VGbG9hdCIsIndpZHRoIiwiaGVpZ2h0IiwiZGltcyIsInJhd0NvbnRlbnQiLCJyaWNoQ29udGVudCIsImxpbmtzUGFyc2VkIiwidW5lc2NhcGVkIiwicnVsZSIsInRlbXBsYXRlIiwiJGZmMWU5ZGM0NDE5Y2I3NjMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsImluaXRpYWxHbG9iYWxTdGF0ZSIsInN0b3JlIiwibGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJsaXN0ZW5lciIsImNhbGxMaXN0ZW5lcnMiLCJyZWR1Y2UiLCJsYXN0IiwicGFydGlhbEtleSIsImNsZWFyIiwiJDAxZTM1MWM4MDk4MTZjZGYkZXhwb3J0JDUyYjNmZTlmNDFmNTY1MGMiLCIkMDFlMzUxYzgwOTgxNmNkZiRleHBvcnQkYWY4OGQwMGRiZTdmNTIxIiwiJDI5YjI2YzU3NjRiYWI1YTYkZXhwb3J0JGY2ZTI1MzVmYjUxMjZlNTQiLCJhcnJheSIsInN0cmluZyIsInRvSFRNTCIsIiQyOWIyNmM1NzY0YmFiNWE2JHZhciRwb3NzaWJsZSIsIiQyOWIyNmM1NzY0YmFiNWE2JHZhciRiYWRDaGFycyIsIiQyOWIyNmM1NzY0YmFiNWE2JHZhciRlc2NhcGVDaGFyIiwiJDI5YjI2YzU3NjRiYWI1YTYkdmFyJGlzQXJyYXkiLCJvYmplY3QiLCJmcmFtZSIsIiQyOWIyNmM1NzY0YmFiNWE2JHZhciRleHRlbmQiLCJfcGFyZW50IiwicGFyYW1zIiwiaWRzIiwiY29udGV4dFBhdGgiLCJpZCIsIiQyOWIyNmM1NzY0YmFiNWE2JHZhciRlc2NhcGUiLCJjaHIiLCIkMjliMjZjNTc2NGJhYjVhNiR2YXIkdG9TdHJpbmciLCIkMjliMjZjNTc2NGJhYjVhNiR2YXIkaXNGdW5jdGlvbiIsIiQ2ZTQ1MGY2NTM3OTI2OTIyJHZhciRlcnJvclByb3BzIiwiJDZlNDUwZjY1Mzc5MjY5MjIkdmFyJEV4Y2VwdGlvbiIsImxvYyIsImVuZExpbmVOdW1iZXIiLCJlbmRDb2x1bW4iLCJ0bXAiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImxpbmVOdW1iZXIiLCJub3AiLCIkNmU0NTBmNjUzNzkyNjkyMiRleHBvcnRzIiwiaW5zdGFuY2UiLCIkZDY2NjRmYjQyM2ZlODRiZCR2YXIkX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcyIiwiJGQ2NjY0ZmI0MjNmZTg0YmQkdmFyJF9oZWxwZXJzRWFjaDIiLCIkZDY2NjRmYjQyM2ZlODRiZCR2YXIkX2hlbHBlcnNIZWxwZXJNaXNzaW5nMiIsIiRkNjY2NGZiNDIzZmU4NGJkJHZhciRfaGVscGVyc0lmMiIsIiRkNjY2NGZiNDIzZmU4NGJkJHZhciRfaGVscGVyc0xvZzIiLCIkZDY2NjRmYjQyM2ZlODRiZCR2YXIkX2hlbHBlcnNMb29rdXAyIiwiJGQ2NjY0ZmI0MjNmZTg0YmQkdmFyJF9oZWxwZXJzV2l0aDIiLCJoZWxwZXJOYW1lIiwia2VlcEhlbHBlciIsImhlbHBlcnMiLCJob29rcyIsIiQxNzkyNDI3ZmZkN2QwZjg5JGV4cG9ydHMiLCJyZWdpc3RlckhlbHBlciIsImludmVyc2UiLCJmbiIsIiQyOWIyNmM1NzY0YmFiNWE2JGV4cG9ydCQ0M2JlZTc1ZTVlMTQxMzhlIiwiZWFjaCIsImRhdGEiLCIkMjliMjZjNTc2NGJhYjVhNiRleHBvcnQkNTJiM2ZlOWY0MWY1NjUwYyIsIiQyOWIyNmM1NzY0YmFiNWE2JGV4cG9ydCRlMDI1MzUwN2Y4MjY3MjVhIiwiJDlkZmI5NDM3NzU1MjgyZDkkZXhwb3J0cyIsIiQ5ZGZiOTQzNzc1NTI4MmQ5JHZhciRfZXhjZXB0aW9uMiIsInByaW9yS2V5IiwiZXhlY0l0ZXJhdGlvbiIsImZpZWxkIiwiZmlyc3QiLCJibG9ja1BhcmFtcyIsIiQyOWIyNmM1NzY0YmFiNWE2JGV4cG9ydCRiMGNhZDdlNTkyZGQ0MzU2IiwiJHBhcmNlbCRnbG9iYWwiLCJuZXdDb250ZXh0IiwiJDRlMmJiNjZlOWI3MzUzOGEkZXhwb3J0cyIsIiQ0ZTJiYjY2ZTliNzM1MzhhJHZhciRfZXhjZXB0aW9uMiIsIiQyYzExYzRlM2EzY2Q0Yzk0JGV4cG9ydHMiLCJjb25kaXRpb25hbCIsIiQyYzExYzRlM2EzY2Q0Yzk0JHZhciRfZXhjZXB0aW9uMiIsImhhc2giLCJpbmNsdWRlWmVybyIsIiQyOWIyNmM1NzY0YmFiNWE2JGV4cG9ydCRkZDFiYzk0YjA0MDIxZWViIiwiJDNjMjNmOWE2OTg5M2Q4NjEkZXhwb3J0cyIsImxvZyIsIiRjNjNkOWNjZTQ4YTk1MzI0JGV4cG9ydHMiLCJsb29rdXBQcm9wZXJ0eSIsIiRmM2Y2YzM0MzljMmNkMTRiJGV4cG9ydHMiLCIkZjNmNmMzNDM5YzJjZDE0YiR2YXIkX2V4Y2VwdGlvbjIiLCIkZmQzOTMzMzZiNjI3OTliZiR2YXIkX2RlY29yYXRvcnNJbmxpbmUyIiwiJDc1YmYyZTdjZWY0Yzg5ZmMkZXhwb3J0cyIsInJlZ2lzdGVyRGVjb3JhdG9yIiwiY29udGFpbmVyIiwicGFydGlhbHMiLCIkMjliMjZjNTc2NGJhYjVhNiRleHBvcnQkOGI1OGJlMDQ1YmYwNjA4MiIsIiRmZDMzNDUwNDVmODgzNGFlJHZhciRsb2dnZXIiLCJtZXRob2RNYXAiLCJsb29rdXBMZXZlbCIsImxldmVsTWFwIiwiJDI5YjI2YzU3NjRiYWI1YTYkZXhwb3J0JDMwNWY3ZDRlOWQ0NjI0ZjIiLCJtZXRob2QiLCIkZmQzMzQ1MDQ1Zjg4MzRhZSRleHBvcnRzIiwicnVudGltZU9wdGlvbnMiLCJkZWZhdWx0TWV0aG9kV2hpdGVMaXN0IiwiZGVmYXVsdFByb3BlcnR5V2hpdGVMaXN0IiwicHJvcGVydGllcyIsIndoaXRlbGlzdCIsIiQ0MmZmZTRlNmE4NDNjZjdjJGV4cG9ydCRlYzI5MzJlZTBjMGU4ZGNjIiwiYWxsb3dlZFByb3RvUHJvcGVydGllcyIsImRlZmF1bHRWYWx1ZSIsImFsbG93UHJvdG9Qcm9wZXJ0aWVzQnlEZWZhdWx0IiwibWV0aG9kcyIsImFsbG93ZWRQcm90b01ldGhvZHMiLCJhbGxvd1Byb3RvTWV0aG9kc0J5RGVmYXVsdCIsInByb3RvQWNjZXNzQ29udHJvbCIsInByb3BlcnR5TmFtZSIsIiQ3MTQ1MWQyOGM5YmY5NDUxJHZhciRjaGVja1doaXRlTGlzdCIsIiQ3MTQ1MWQyOGM5YmY5NDUxJHZhciRsb2dnZWRQcm9wZXJ0aWVzIiwiJDcxNDUxZDI4YzliZjk0NTEkdmFyJGxvZ2dlciIsIiQ3MTQ1MWQyOGM5YmY5NDUxJHZhciRfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUiLCIkNzE0NTFkMjhjOWJmOTQ1MSR2YXIkbG9nVW5leHBlY2VkUHJvcGVydHlBY2Nlc3NPbmNlIiwiJDAxZTM1MWM4MDk4MTZjZGYkdmFyJG9iamVjdFR5cGUiLCIkMDFlMzUxYzgwOTgxNmNkZiR2YXIkSGFuZGxlYmFyc0Vudmlyb25tZW50IiwiZGVjb3JhdG9ycyIsIiRkNjY2NGZiNDIzZmU4NGJkJGV4cG9ydCRiZGY3NTgyZjc0NzQ2ZjZiIiwiJGZkMzkzMzM2YjYyNzk5YmYkZXhwb3J0JDdlYWNhNGEzZDU2ZGJlNmQiLCJsb2dnZXIiLCIkMDFlMzUxYzgwOTgxNmNkZiR2YXIkX2xvZ2dlcjIiLCIkMjliMjZjNTc2NGJhYjVhNiRleHBvcnQkZjg0ZThlNjlmZDQ0ODhhNSIsIiQwMWUzNTFjODA5ODE2Y2RmJHZhciRfZXhjZXB0aW9uMiIsInVucmVnaXN0ZXJIZWxwZXIiLCJyZWdpc3RlclBhcnRpYWwiLCJwYXJ0aWFsIiwidW5yZWdpc3RlclBhcnRpYWwiLCJ1bnJlZ2lzdGVyRGVjb3JhdG9yIiwicmVzZXRMb2dnZWRQcm9wZXJ0eUFjY2Vzc2VzIiwiJDcxNDUxZDI4YzliZjk0NTEkZXhwb3J0JDQxOWRjMmM0YjJmMjIzOGIiLCIkMDFlMzUxYzgwOTgxNmNkZiR2YXIkbG9nIiwiJDZlYWY3NzViYWNkOTYyOGYkdmFyJGJhc2UiLCIkNmVhZjc3NWJhY2Q5NjI4ZiR2YXIkX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCIkMDFlMzUxYzgwOTgxNmNkZiRleHBvcnRzIiwiJDI3Y2JlODgwNjM0ZjA2NzgkdmFyJFNhZmVTdHJpbmciLCIkMjdjYmU4ODA2MzRmMDY3OCRleHBvcnRzIiwiJDZlYWY3NzViYWNkOTYyOGYkdmFyJFV0aWxzIiwiJDI5YjI2YzU3NjRiYWI1YTYkZXhwb3J0cyIsImNvbXBpbGVySW5mbyIsImNvbXBpbGVyUmV2aXNpb24iLCJjdXJyZW50UmV2aXNpb24iLCIkMDFlMzUxYzgwOTgxNmNkZiRleHBvcnQkNjgyZGI1YTZmMmZhMTA0NiIsIiQwMWUzNTFjODA5ODE2Y2RmJGV4cG9ydCRiNDE2NTIwZjlmZDVjNTIwIiwicnVudGltZVZlcnNpb25zIiwiJDAxZTM1MWM4MDk4MTZjZGYkZXhwb3J0JDUzNDY0ODk2NDM1M2NhODEiLCJjb21waWxlclZlcnNpb25zIiwiJDZiNWZkZTIxNjJjNWY4MzAkdmFyJF9leGNlcHRpb24yIiwidGVtcGxhdGVTcGVjIiwiZW52IiwibWFpbiIsImRlY29yYXRvciIsIm1haW5fZCIsIlZNIiwiY2hlY2tSZXZpc2lvbiIsImNvbXBpbGVyIiwidGVtcGxhdGVXYXNQcmVjb21waWxlZFdpdGhDb21waWxlclY3Iiwic3RyaWN0IiwicGFyZW50IiwiJDcxNDUxZDI4YzliZjk0NTEkZXhwb3J0JDhiNjMzNjUxYzdjZjU5YjkiLCJsb29rdXAiLCJkZXB0aHMiLCJsYW1iZGEiLCJjdXJyZW50IiwiZXNjYXBlRXhwcmVzc2lvbiIsIiQ2YjVmZGUyMTYyYzVmODMwJHZhciRVdGlscyIsImludm9rZVBhcnRpYWwiLCJleHRlbmQiLCJyZXNvbHZlUGFydGlhbCIsImV4dGVuZGVkT3B0aW9ucyIsImNvbXBpbGUiLCJjb21waWxlck9wdGlvbnMiLCJsaW5lcyIsInByb2dyYW1zIiwicHJvZ3JhbSIsImRlY2xhcmVkQmxvY2tQYXJhbXMiLCJwcm9ncmFtV3JhcHBlciIsIiQ2YjVmZGUyMTYyYzVmODMwJHZhciR3cmFwUHJvZ3JhbSIsIm1lcmdlSWZOZWVkZWQiLCJwYXJhbSIsImNvbW1vbiIsIm51bGxDb250ZXh0Iiwic2VhbCIsIm5vb3AiLCJfc2V0dXAiLCJ1c2VEYXRhIiwiJDZiNWZkZTIxNjJjNWY4MzAkdmFyJGluaXREYXRhIiwidXNlQmxvY2tQYXJhbXMiLCJ1c2VEZXB0aHMiLCIkNmI1ZmRlMjE2MmM1ZjgzMCR2YXIkZXhlY3V0ZURlY29yYXRvcnMiLCJpc1RvcCIsIm1lcmdlZEhlbHBlcnMiLCJoZWxwZXIiLCIkNGZhYmU2ZTBlNDBhMzcxNyRleHBvcnQkMzRiODRiYzg4ODRjYTQ2NSIsIiQ2YjVmZGUyMTYyYzVmODMwJHZhciRwYXNzTG9va3VwUHJvcGVydHlPcHRpb24iLCIkNmI1ZmRlMjE2MmM1ZjgzMCR2YXIkd3JhcEhlbHBlcnNUb1Bhc3NMb29rdXBQcm9wZXJ0eSIsInVzZVBhcnRpYWwiLCJ1c2VEZWNvcmF0b3JzIiwiJDcxNDUxZDI4YzliZjk0NTEkZXhwb3J0JDlmYzUwNWY1MTAyYjA0YTUiLCJrZWVwSGVscGVySW5IZWxwZXJzIiwiYWxsb3dDYWxsc1RvSGVscGVyTWlzc2luZyIsIiRkNjY2NGZiNDIzZmU4NGJkJGV4cG9ydCRhOGUyMmMzZThhMDNlYTdlIiwiX2NoaWxkIiwiY3VycmVudFBhcnRpYWxCbG9jayIsInBhcnRpYWxCbG9jayIsIiQ2YjVmZGUyMTYyYzVmODMwJHZhciRub29wIiwiRnVuY3Rpb24iLCIkNmI1ZmRlMjE2MmM1ZjgzMCR2YXIkX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJwcm9nIiwiY3VycmVudERlcHRocyIsInJvb3QiLCJ0cmFuc2Zvcm1PcHRpb25zRm4iLCIkNmVhZjc3NWJhY2Q5NjI4ZiR2YXIkcnVudGltZSIsIiQ2YjVmZGUyMTYyYzVmODMwJGV4cG9ydHMiLCIkNjU0MmZkNzlhZDU0ZTY5ZSRleHBvcnRzIiwiSGFuZGxlYmFycyIsIndpbmRvdyIsIiRIYW5kbGViYXJzIiwibm9Db25mbGljdCIsIiQ2ZWFmNzc1YmFjZDk2MjhmJHZhciRjcmVhdGUiLCJoYiIsIkhhbmRsZWJhcnNFbnZpcm9ubWVudCIsIlNhZmVTdHJpbmciLCIkNmVhZjc3NWJhY2Q5NjI4ZiR2YXIkX2hhbmRsZWJhcnNTYWZlU3RyaW5nMiIsIkV4Y2VwdGlvbiIsIiQ2ZWFmNzc1YmFjZDk2MjhmJHZhciRfaGFuZGxlYmFyc0V4Y2VwdGlvbjIiLCJVdGlscyIsInNwZWMiLCIkNmVhZjc3NWJhY2Q5NjI4ZiR2YXIkaW5zdCIsIiQ2ZWFmNzc1YmFjZDk2MjhmJHZhciRfaGFuZGxlYmFyc05vQ29uZmxpY3QyIiwiJDZlYWY3NzViYWNkOTYyOGYkZXhwb3J0cyIsIiQ4YWQ3ZGQ3ZGFiNjBlMDEwJHZhciRBU1QiLCJoZWxwZXJFeHByZXNzaW9uIiwic2NvcGVkSWQiLCJzaW1wbGVJZCIsIiQ4YWQ3ZGQ3ZGFiNjBlMDEwJGV4cG9ydHMiLCIkZjlmNWRmYzdjODUxMDc3MyRleHBvcnQkOGY0OWU0YWYxMDcwM2NlMyIsImlucHV0IiwiYXN0IiwiJGY5ZjVkZmM3Yzg1MTA3NzMkdmFyJHBhcnNlV2l0aG91dFByb2Nlc3NpbmciLCIkZjlmNWRmYzdjODUxMDc3MyR2YXIkX3doaXRlc3BhY2VDb250cm9sMiIsImFjY2VwdCIsIiQyNjJlNGFiNzMzNmYwYTllJHZhciRoYW5kbGViYXJzIiwidHJhY2UiLCJ5eSIsInN5bWJvbHNfIiwiRU9GIiwicHJvZ3JhbV9yZXBldGl0aW9uMCIsInN0YXRlbWVudCIsIm11c3RhY2hlIiwicmF3QmxvY2siLCJDT01NRU5UIiwiQ09OVEVOVCIsIm9wZW5SYXdCbG9jayIsInJhd0Jsb2NrX3JlcGV0aXRpb24wIiwiRU5EX1JBV19CTE9DSyIsIk9QRU5fUkFXX0JMT0NLIiwib3BlblJhd0Jsb2NrX3JlcGV0aXRpb24wIiwib3BlblJhd0Jsb2NrX29wdGlvbjAiLCJDTE9TRV9SQVdfQkxPQ0siLCJvcGVuQmxvY2siLCJibG9ja19vcHRpb24wIiwiY2xvc2VCbG9jayIsIm9wZW5JbnZlcnNlIiwiYmxvY2tfb3B0aW9uMSIsIk9QRU5fQkxPQ0siLCJvcGVuQmxvY2tfcmVwZXRpdGlvbjAiLCJvcGVuQmxvY2tfb3B0aW9uMCIsIm9wZW5CbG9ja19vcHRpb24xIiwiQ0xPU0UiLCJPUEVOX0lOVkVSU0UiLCJvcGVuSW52ZXJzZV9yZXBldGl0aW9uMCIsIm9wZW5JbnZlcnNlX29wdGlvbjAiLCJvcGVuSW52ZXJzZV9vcHRpb24xIiwib3BlbkludmVyc2VDaGFpbiIsIk9QRU5fSU5WRVJTRV9DSEFJTiIsIm9wZW5JbnZlcnNlQ2hhaW5fcmVwZXRpdGlvbjAiLCJvcGVuSW52ZXJzZUNoYWluX29wdGlvbjAiLCJvcGVuSW52ZXJzZUNoYWluX29wdGlvbjEiLCJpbnZlcnNlQW5kUHJvZ3JhbSIsIklOVkVSU0UiLCJpbnZlcnNlQ2hhaW4iLCJpbnZlcnNlQ2hhaW5fb3B0aW9uMCIsIk9QRU5fRU5EQkxPQ0siLCJPUEVOIiwibXVzdGFjaGVfcmVwZXRpdGlvbjAiLCJtdXN0YWNoZV9vcHRpb24wIiwiT1BFTl9VTkVTQ0FQRUQiLCJtdXN0YWNoZV9yZXBldGl0aW9uMSIsIm11c3RhY2hlX29wdGlvbjEiLCJDTE9TRV9VTkVTQ0FQRUQiLCJPUEVOX1BBUlRJQUwiLCJwYXJ0aWFsTmFtZSIsInBhcnRpYWxfcmVwZXRpdGlvbjAiLCJwYXJ0aWFsX29wdGlvbjAiLCJvcGVuUGFydGlhbEJsb2NrIiwiT1BFTl9QQVJUSUFMX0JMT0NLIiwib3BlblBhcnRpYWxCbG9ja19yZXBldGl0aW9uMCIsIm9wZW5QYXJ0aWFsQmxvY2tfb3B0aW9uMCIsInNleHByIiwiT1BFTl9TRVhQUiIsInNleHByX3JlcGV0aXRpb24wIiwic2V4cHJfb3B0aW9uMCIsIkNMT1NFX1NFWFBSIiwiaGFzaF9yZXBldGl0aW9uX3BsdXMwIiwiaGFzaFNlZ21lbnQiLCJJRCIsIkVRVUFMUyIsIk9QRU5fQkxPQ0tfUEFSQU1TIiwiYmxvY2tQYXJhbXNfcmVwZXRpdGlvbl9wbHVzMCIsIkNMT1NFX0JMT0NLX1BBUkFNUyIsImRhdGFOYW1lIiwiU1RSSU5HIiwiTlVNQkVSIiwiQk9PTEVBTiIsIlVOREVGSU5FRCIsIk5VTEwiLCJEQVRBIiwicGF0aFNlZ21lbnRzIiwiU0VQIiwiJGFjY2VwdCIsIiRlbmQiLCJ0ZXJtaW5hbHNfIiwicHJvZHVjdGlvbnNfIiwicGVyZm9ybUFjdGlvbiIsInl5dGV4dCIsInl5bGVuZyIsInl5bGluZW5vIiwieXlzdGF0ZSIsIiQkIiwiXyQiLCIkMCIsIiQiLCJwcmVwYXJlUHJvZ3JhbSIsInN0cmlwQ29tbWVudCIsInN0cmlwIiwic3RyaXBGbGFncyIsImxvY0luZm8iLCJwcmVwYXJlUmF3QmxvY2siLCJwcmVwYXJlQmxvY2siLCJvcGVuIiwiY2hhaW5lZCIsImNoYWluIiwicHJlcGFyZU11c3RhY2hlIiwicHJlcGFyZVBhcnRpYWxCbG9jayIsInBhaXJzIiwiTnVtYmVyIiwicHJlcGFyZVBhdGgiLCJzZXBhcmF0b3IiLCJkZWZhdWx0QWN0aW9ucyIsInBhcnNlRXJyb3IiLCJzZWxmIiwic3RhY2siLCJ2c3RhY2siLCJsc3RhY2siLCJyZWNvdmVyaW5nIiwic2V0SW5wdXQiLCJ5eWxsb2MiLCJ5eWxvYyIsInJhbmdlcyIsInN5bWJvbCIsInByZUVycm9yU3ltYm9sIiwiYWN0aW9uIiwibmV3U3RhdGUiLCJleHBlY3RlZCIsInl5dmFsIiwiZXJyU3RyIiwic2hvd1Bvc2l0aW9uIiwiZmlyc3RfbGluZSIsImxhc3RfbGluZSIsImZpcnN0X2NvbHVtbiIsImxhc3RfY29sdW1uIiwicmFuZ2UiLCJfaW5wdXQiLCJfbW9yZSIsIl9sZXNzIiwibWF0Y2hlZCIsImNvbmRpdGlvblN0YWNrIiwidW5wdXQiLCJvbGRMaW5lcyIsIm1vcmUiLCJsZXNzIiwicGFzdElucHV0IiwicGFzdCIsInVwY29taW5nSW5wdXQiLCJ0ZW1wTWF0Y2giLCJfY3VycmVudFJ1bGVzIiwiZmxleCIsIm1hdGNoZXMiLCJiZWdpbiIsImNvbmRpdGlvbiIsInBvcFN0YXRlIiwiY29uZGl0aW9ucyIsInRvcFN0YXRlIiwicHVzaFN0YXRlIiwieXlfIiwiJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucyIsIllZX1NUQVJUIiwibXUiLCJpbmNsdXNpdmUiLCJlbXUiLCJjb20iLCJJTklUSUFMIiwiJDI2MmU0YWI3MzM2ZjBhOWUkZXhwb3J0cyIsIiRiNTU2NDAzZDFkODMzMTE0JHZhciRWaXNpdG9yIiwicGFyZW50cyIsIiRiNTU2NDAzZDFkODMzMTE0JHZhciR2aXNpdFN1YkV4cHJlc3Npb24iLCJhY2NlcHRSZXF1aXJlZCIsImFjY2VwdEFycmF5IiwiYWNjZXB0S2V5IiwiJGI1NTY0MDNkMWQ4MzMxMTQkdmFyJHZpc2l0QmxvY2siLCIkYjU1NjQwM2QxZDgzMzExNCR2YXIkdmlzaXRQYXJ0aWFsIiwibXV0YXRpbmciLCIkYjU1NjQwM2QxZDgzMzExNCR2YXIkX2V4Y2VwdGlvbjIiLCJQcm9ncmFtIiwiTXVzdGFjaGVTdGF0ZW1lbnQiLCJEZWNvcmF0b3IiLCJCbG9ja1N0YXRlbWVudCIsIkRlY29yYXRvckJsb2NrIiwiUGFydGlhbFN0YXRlbWVudCIsIlBhcnRpYWxCbG9ja1N0YXRlbWVudCIsIkNvbnRlbnRTdGF0ZW1lbnQiLCJDb21tZW50U3RhdGVtZW50IiwiU3ViRXhwcmVzc2lvbiIsIlBhdGhFeHByZXNzaW9uIiwiU3RyaW5nTGl0ZXJhbCIsIk51bWJlckxpdGVyYWwiLCJCb29sZWFuTGl0ZXJhbCIsIlVuZGVmaW5lZExpdGVyYWwiLCJOdWxsTGl0ZXJhbCIsIkhhc2giLCJIYXNoUGFpciIsInBhaXIiLCIkYjU1NjQwM2QxZDgzMzExNCRleHBvcnRzIiwiJDc5ZDE5MWI1ZTZjZjJiZTAkdmFyJFdoaXRlc3BhY2VDb250cm9sIiwiJDc5ZDE5MWI1ZTZjZjJiZTAkdmFyJGlzUHJldldoaXRlc3BhY2UiLCJpc1Jvb3QiLCJwcmV2Iiwic2libGluZyIsIiQ3OWQxOTFiNWU2Y2YyYmUwJHZhciRpc05leHRXaGl0ZXNwYWNlIiwiJDc5ZDE5MWI1ZTZjZjJiZTAkdmFyJG9taXRSaWdodCIsIm11bHRpcGxlIiwicmlnaHRTdHJpcHBlZCIsIiQ3OWQxOTFiNWU2Y2YyYmUwJHZhciRvbWl0TGVmdCIsImxlZnRTdHJpcHBlZCIsIiQ3OWQxOTFiNWU2Y2YyYmUwJHZhciRfdmlzaXRvcjIiLCJkb1N0YW5kYWxvbmUiLCJpZ25vcmVTdGFuZGFsb25lIiwiaXNSb290U2VlbiIsIl9pc1ByZXZXaGl0ZXNwYWNlIiwiX2lzTmV4dFdoaXRlc3BhY2UiLCJvcGVuU3RhbmRhbG9uZSIsImNsb3NlU3RhbmRhbG9uZSIsImlubGluZVN0YW5kYWxvbmUiLCJjbG9zZSIsImZpcnN0SW52ZXJzZSIsImxhc3RJbnZlcnNlIiwib3BlblN0cmlwIiwiY2xvc2VTdHJpcCIsImludmVyc2VTdHJpcCIsIiQ3OWQxOTFiNWU2Y2YyYmUwJGV4cG9ydHMiLCJjb21tZW50IiwiZGlnIiwiaXNMaXRlcmFsIiwiJDdmZTkxZjRjNWIwOTRlMTYkdmFyJF9leGNlcHRpb24yIiwiZXNjYXBlRmxhZyIsImNvbnRlbnRzIiwiJDdmZTkxZjRjNWIwOTRlMTYkdmFyJHZhbGlkYXRlQ2xvc2UiLCJpbnZlcnRlZCIsInN0YXRlbWVudHMiLCJmaXJzdExvYyIsImxhc3RMb2MiLCJlcnJvck5vZGUiLCIkZjlmNWRmYzdjODUxMDc3MyR2YXIkSGVscGVycyIsIiRmOWY1ZGZjN2M4NTEwNzczJHZhciRfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIiQ3ZmU5MWY0YzViMDk0ZTE2JGV4cG9ydHMiLCIkZjlmNWRmYzdjODUxMDc3MyR2YXIkX3BhcnNlcjIiLCIkZjlmNWRmYzdjODUxMDc3MyR2YXIkeXkiLCJTb3VyY2VMb2NhdGlvbiIsInNyY05hbWUiLCIkNDU1YzA0MWZhNjg0MDE3YSR2YXIkX2V4Y2VwdGlvbjIiLCJjb21wYXQiLCJlbnZpcm9ubWVudCIsIkNvbXBpbGVyIiwiSmF2YVNjcmlwdENvbXBpbGVyIiwiY29tcGlsZWQiLCJjb21waWxlSW5wdXQiLCJleGVjT3B0aW9ucyIsInNldHVwT3B0aW9ucyIsIiQ0NTVjMDQxZmE2ODQwMTdhJHZhciRzbGljZSIsIiQ0NTVjMDQxZmE2ODQwMTdhJHZhciRDb21waWxlciIsIiQ0NTVjMDQxZmE2ODQwMTdhJHZhciRhcmdFcXVhbHMiLCJhIiwiJDQ1NWMwNDFmYTY4NDAxN2EkdmFyJHRyYW5zZm9ybUxpdGVyYWxUb1BhdGgiLCJsaXRlcmFsIiwiZXF1YWxzIiwib3RoZXIiLCJvcGNvZGVzIiwib3Bjb2RlIiwib3RoZXJPcGNvZGUiLCJndWlkIiwic291cmNlTm9kZSIsInN0cmluZ1BhcmFtcyIsInRyYWNrSWRzIiwia25vd25IZWxwZXJzIiwiaGVscGVyTWlzc2luZyIsImJsb2NrSGVscGVyTWlzc2luZyIsImlmIiwidW5sZXNzIiwid2l0aCIsImNvbXBpbGVQcm9ncmFtIiwiYm9keUxlbmd0aCIsImlzU2ltcGxlIiwiY2xhc3NpZnlTZXhwciIsImhlbHBlclNleHByIiwic2ltcGxlU2V4cHIiLCJhbWJpZ3VvdXNTZXhwciIsInNldHVwRnVsbE11c3RhY2hlUGFyYW1zIiwiZXhwbGljaXRQYXJ0aWFsQ29udGV4dCIsImlzRHluYW1pYyIsInByZXZlbnRJbmRlbnQiLCJub0VzY2FwZSIsImlzQmxvY2siLCJrbm93bkhlbHBlcnNPbmx5IiwiZmFsc3kiLCIkNDU1YzA0MWZhNjg0MDE3YSR2YXIkX2FzdDIiLCJhZGREZXB0aCIsInNjb3BlZCIsImJsb2NrUGFyYW1JZCIsImJsb2NrUGFyYW1JbmRleCIsImJvb2wiLCJwdXNoUGFyYW0iLCJpc0Jsb2NrUGFyYW0iLCJpc0hlbHBlciIsImlzRWxpZ2libGUiLCJfbmFtZSIsInB1c2hQYXJhbXMiLCJibG9ja1BhcmFtQ2hpbGQiLCJvbWl0RW1wdHkiLCIkNDVlODM5NjE2MTU4ZGQ4YSR2YXIkU291cmNlTm9kZSIsImRlZmluZSIsImFtZCIsIiQ0NWU4Mzk2MTYxNThkZDhhJHZhciRTb3VyY2VNYXAiLCIkNDVlODM5NjE2MTU4ZGQ4YSR2YXIkY2FzdENodW5rIiwiY29kZUdlbiIsIndyYXAiLCIkNDVlODM5NjE2MTU4ZGQ4YSR2YXIkQ29kZUdlbiIsInNyY0ZpbGUiLCJjaHVua3MiLCJpc0VtcHR5IiwiZW1wdHkiLCJpdGVyIiwiY3VycmVudExvY2F0aW9uIiwiZnVuY3Rpb25DYWxsIiwiZ2VuZXJhdGVMaXN0IiwicXVvdGVkU3RyaW5nIiwib2JqZWN0TGl0ZXJhbCIsImVudHJpZXMiLCJnZW5lcmF0ZUFycmF5IiwiJDQ1ZTgzOTYxNjE1OGRkOGEkZXhwb3J0cyIsIiQxM2MwNTFkMzVjMWMyNWI0JHZhciRMaXRlcmFsIiwiJDEzYzA1MWQzNWMxYzI1YjQkdmFyJEphdmFTY3JpcHRDb21waWxlciIsIm5hbWVMb29rdXAiLCJpbnRlcm5hbE5hbWVMb29rdXAiLCJkZXB0aGVkTG9va3VwIiwiYWxpYXNhYmxlIiwiYXBwZW5kVG9CdWZmZXIiLCJsb2NhdGlvbiIsImV4cGxpY2l0IiwiaW5pdGlhbGl6ZUJ1ZmZlciIsImxvb2t1cFByb3BlcnR5RnVuY3Rpb25Jc1VzZWQiLCJhc09iamVjdCIsInByZWNvbXBpbGUiLCJpc0NoaWxkIiwiZW52aXJvbm1lbnRzIiwicHJlYW1ibGUiLCJzdGFja1Nsb3QiLCJzdGFja1ZhcnMiLCJhbGlhc2VzIiwicmVnaXN0ZXJzIiwiaGFzaGVzIiwiY29tcGlsZVN0YWNrIiwiaW5saW5lU3RhY2siLCJjb21waWxlQ2hpbGRyZW4iLCJwdXNoU291cmNlIiwiJDEzYzA1MWQzNWMxYzI1YjQkdmFyJF9leGNlcHRpb24yIiwibG9va3VwUHJvcGVydHlGdW5jdGlvblZhckRlY2xhcmF0aW9uIiwiY3JlYXRlRnVuY3Rpb25Db250ZXh0IiwiX2NvbnRleHQiLCJkZXN0TmFtZSIsImxhc3RDb250ZXh0IiwiJDEzYzA1MWQzNWMxYzI1YjQkdmFyJF9jb2RlR2VuMiIsInZhckRlY2xhcmF0aW9ucyIsImxvY2FscyIsImFsaWFzQ291bnQiLCJyZWZlcmVuY2VDb3VudCIsIm1lcmdlU291cmNlIiwiYXBwZW5kT25seSIsImZvcmNlQnVmZmVyIiwiYXBwZW5kRmlyc3QiLCJzb3VyY2VTZWVuIiwiYnVmZmVyU3RhcnQiLCJidWZmZXJFbmQiLCJibG9ja1ZhbHVlIiwiY29udGV4dE5hbWUiLCJzZXR1cEhlbHBlckFyZ3MiLCJibG9ja05hbWUiLCJwb3BTdGFjayIsImFtYmlndW91c0Jsb2NrVmFsdWUiLCJmbHVzaElubGluZSIsInRvcFN0YWNrIiwibGFzdEhlbHBlciIsImFwcGVuZENvbnRlbnQiLCJwZW5kaW5nQ29udGVudCIsInBlbmRpbmdMb2NhdGlvbiIsImFwcGVuZCIsImlzSW5saW5lIiwicmVwbGFjZVN0YWNrIiwibG9jYWwiLCJhcHBlbmRFc2NhcGVkIiwiZ2V0Q29udGV4dCIsInB1c2hDb250ZXh0IiwicHVzaFN0YWNrTGl0ZXJhbCIsImxvb2t1cE9uQ29udGV4dCIsInJlc29sdmVQYXRoIiwibG9va3VwQmxvY2tQYXJhbSIsImxvb2t1cERhdGEiLCJhc3N1bWVPYmplY3RzIiwicmVxdWlyZVRlcm1pbmFsIiwiJDEzYzA1MWQzNWMxYzI1YjQkdmFyJHN0cmljdExvb2t1cCIsInJlc29sdmVQb3NzaWJsZUxhbWJkYSIsInB1c2hTdHJpbmdQYXJhbSIsInB1c2hTdHJpbmciLCJlbXB0eUhhc2giLCJwdXNoSGFzaCIsInR5cGVzIiwiY29udGV4dHMiLCJwb3BIYXNoIiwicHVzaExpdGVyYWwiLCJwdXNoUHJvZ3JhbSIsInByb2dyYW1FeHByZXNzaW9uIiwicGFyYW1TaXplIiwiZm91bmREZWNvcmF0b3IiLCJpbnZva2VIZWxwZXIiLCJub25IZWxwZXIiLCJzZXR1cEhlbHBlciIsInBvc3NpYmxlRnVuY3Rpb25DYWxscyIsImZ1bmN0aW9uTG9va3VwQ29kZSIsIml0ZW1zU2VwYXJhdGVkQnkiLCJjYWxsUGFyYW1zIiwiaW52b2tlS25vd25IZWxwZXIiLCJpbnZva2VBbWJpZ3VvdXMiLCJoZWxwZXJDYWxsIiwidXNlUmVnaXN0ZXIiLCJwYXJhbXNJbml0Iiwic2V0dXBQYXJhbXMiLCJhc3NpZ25Ub0hhc2giLCJwdXNoSWQiLCJjaGlsZCIsImV4aXN0aW5nIiwibWF0Y2hFeGlzdGluZ1Byb2dyYW0iLCJwcm9ncmFtUGFyYW1zIiwiZXhwciIsInByZWZpeCIsImNyZWF0ZWRTdGFjayIsInVzZWRMaXRlcmFsIiwiaW5jclN0YWNrIiwidG9wU3RhY2tOYW1lIiwiZW50cnkiLCJ3cmFwcGVkIiwiYmxvY2tIZWxwZXIiLCJvYmplY3RBcmdzIiwiaGFzaElkcyIsImhhc2hUeXBlcyIsImhhc2hDb250ZXh0cyIsInJlc2VydmVkV29yZHMiLCJjb21waWxlcldvcmRzIiwiUkVTRVJWRURfV09SRFMiLCJpc1ZhbGlkSmF2YVNjcmlwdFZhcmlhYmxlTmFtZSIsIiQxM2MwNTFkMzVjMWMyNWI0JGV4cG9ydHMiLCIkMDQwOTNkOWY3NGU2ZDEwNCR2YXIkX2NyZWF0ZSIsIiQwNDA5M2Q5Zjc0ZTZkMTA0JHZhciRfaGFuZGxlYmFyc1J1bnRpbWUyIiwiJDA0MDkzZDlmNzRlNmQxMDQkdmFyJGNyZWF0ZSIsIiQ0NTVjMDQxZmE2ODQwMTdhJGV4cG9ydCRlZjdhY2Q3MTg1MzE1ZTIyIiwiJDQ1NWMwNDFmYTY4NDAxN2EkZXhwb3J0JGNmYjllMGYxMzMwZjliYmQiLCJBU1QiLCIkMDQwOTNkOWY3NGU2ZDEwNCR2YXIkX2hhbmRsZWJhcnNDb21waWxlckFzdDIiLCIkNDU1YzA0MWZhNjg0MDE3YSRleHBvcnQkM2E2MzM1YWNmY2Y3MDdjOSIsIiQwNDA5M2Q5Zjc0ZTZkMTA0JHZhciRfaGFuZGxlYmFyc0NvbXBpbGVySmF2YXNjcmlwdENvbXBpbGVyMiIsIiRmOWY1ZGZjN2M4NTEwNzczJGV4cG9ydCQ5OGU2YTM5YzA0NjAzZDM2IiwicGFyc2VXaXRob3V0UHJvY2Vzc2luZyIsIiRmOWY1ZGZjN2M4NTEwNzczJGV4cG9ydCRmYzg1YjJjNDQ2MmUwYmM2IiwiJDA0MDkzZDlmNzRlNmQxMDQkdmFyJGluc3QiLCIkMDQwOTNkOWY3NGU2ZDEwNCR2YXIkX2hhbmRsZWJhcnNOb0NvbmZsaWN0MiIsIlZpc2l0b3IiLCIkMDQwOTNkOWY3NGU2ZDEwNCR2YXIkX2hhbmRsZWJhcnNDb21waWxlclZpc2l0b3IyIiwiJDA0MDkzZDlmNzRlNmQxMDQkZXhwb3J0cyIsIiQzNDVmYzI4MDg5OWRiOWE0JHZhciRoYW5kbGViYXJzIiwiZGVmYXVsdCIsIiQyZTgwYjdhYjZhN2RjOTAzJHZhciRQcmludFZpc2l0b3IiLCJwYWRkaW5nIiwiJDJlODBiN2FiNmE3ZGM5MDMkdmFyJF92aXNpdG9yMiIsInBhZCIsInBhcmFtU3RyaW5ncyIsImpvaW5lZFBhaXJzIiwiUHJpbnRWaXNpdG9yIiwiJDJlODBiN2FiNmE3ZGM5MDMkZXhwb3J0JDE0MjIzMGMzOWUzMTJjMjMiLCJwcmludCIsIiQyZTgwYjdhYjZhN2RjOTAzJGV4cG9ydCRjMmQwODRkYzQ0OTYxMzcxIiwiJDM0NWZjMjgwODk5ZGI5YTQkZXhwb3J0cyIsIiQxNmRhZmZlN2M0YmJiOGM5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJzdG9yeSIsIiRwYXJjZWwkaW50ZXJvcERlZmF1bHQiLCJyZW5kZXIiLCIkMzg1YzlkNmVhYjM4MWUxNCR2YXIkQ1VSUkVOVF9QQVNTQUdFX1BJRF9TVEFURUtFWSIsIiQzODVjOWQ2ZWFiMzgxZTE0JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJzdG9yeURhdGFOb2RlIiwiaWZpZCIsInN0YXJ0bm9kZSIsImZvcm1hdCIsImZvcm1hdFZlcnNpb24iLCJ6b29tIiwiY3JlYXRvciIsImNyZWF0b3JWZXJzaW9uIiwicGFzc2FnZXMiLCJwYXNzYWdlTm9kZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY3VycmVudFBhc3NhZ2UiLCJnZXRQYXNzYWdlQnlQaWQiLCJmaW5kIiwicGFzc2FnZSIsImdldFBhc3NhZ2VCeU5hbWUiLCJkaXNwbGF5UGFzc2FnZSIsInBhc3NhZ2VPclBpZCIsImZvdW5kUGFzc2FnZSIsInBhc3NhZ2VDb250ZW50IiwiZGlzcGxheUN1cnJlbnRQYXNzYWdlIiwicm9vdFN0b3J5RGF0YU5vZGUiLCJxdWVyeVNlbGVjdG9yIiwic3RvcnlDb250YWluZXIiLCJwYXNzYWdlQ29udGFpbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwidGFnTmFtZSIsIl9fZXhwbG9yZXIiXSwidmVyc2lvbiI6MywiZmlsZSI6ImluZGV4LmpzLm1hcCJ9
